{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "87346162-95d7-4676-bd2c-cb99a9b48998",
        "name": "Clear Cache",
        "item": [
          {
            "id": "794141a5-0998-4502-b419-698ee7d88757",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d769798-8c93-410e-8cb8-31b5959493c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a68ad837-ca7e-493b-b307-cf700d1a708f"
                }
              }
            ]
          },
          {
            "id": "a28e54e2-bec6-46fb-bdae-e00443cd913d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "622e19cf-1614-4699-8634-7d664989c4d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "36a20688-bbfe-4ce3-aada-d92bbe57104b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6e6e7e8c-56a8-4c52-be87-b84e90358330",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "48d2f21f-ed6e-4e8b-94a8-abca3cca7617",
            "name": "Positive Testing",
            "item": [
              {
                "id": "50438a70-a2d2-49de-95f4-caadcc80c77c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc9d411d-f8b8-44cf-86ca-7982b76da8b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b090b855-5e47-4083-bcb0-4895905d4756"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "37b82473-73c7-486c-81a9-d0231742b3b9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c80dc8a-4b65-4fd9-9923-c6596ab21a49"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f70f7dff-056e-4f11-a872-26b7fbe64b1a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8eeecb24-4815-427b-8a0e-496394fbeaa3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9fec6e0c-a117-4da7-bcda-681a3c4367d6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8e464f46-0436-490b-8170-48e403298edb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6a31657-537a-4f75-a83c-926484b7757f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a17f702a-a075-4a85-9fe4-bbf0ef4329a5"
            }
          }
        ]
      },
      {
        "id": "b40eaeab-7c4b-480a-802f-556202c89b25",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d1165268-8e62-4e93-ae62-3a20a4b979fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "add15645-cca0-4e9a-a6db-15ae2bfca933",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3ca406ff-3758-41dc-9dc7-e4b23bb81edc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d73e274-84b2-4e08-a7cb-8be3b5a6c6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05426091-d3b8-4cb1-9198-8141e9f441ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c61c11-4185-492f-b8a0-11286d3be128",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a04cf56-1931-4e72-95f3-97546bd2f931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66f82c19-a859-40f9-9839-8225232e11db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74294b6f-2d1c-42cd-8e02-963432385f78",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3262c573-73eb-405d-8597-fb819b3209b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7bb754d-f963-45db-a52f-4c6f64070f01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a10acdf-97ff-41d0-8c66-4be5ec94c178",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5710c08-8145-44cb-9c16-212951d04fac",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88eff08e-de51-4d71-8601-4e53ac02465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc6b21a4-27f5-4a7b-a15f-d629636d46c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa99d65-e0e8-4321-940a-273be3bea617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e42544a-4eab-4c96-9c5b-94d34c68f453"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0c913a3d-7de4-4b22-873d-21ad0b0501e7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b9f189b-f94e-4aba-a1a3-4fa580366339",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36a75bad-6c2b-4339-8c25-4922050d7d21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2d895ccb-b216-4c2d-9780-ac04df739b6e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66693f6d-df6a-4324-a8b7-508f8043535d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fccfb772-efb7-4fdf-9ed1-2434eff70439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7be2d558-e5be-4da8-adfd-06a12d7281e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09c8ef52-b169-48ef-b37c-5dcb72f2487e"
            }
          }
        ]
      },
      {
        "id": "76a89b5e-9b8f-4f5e-84ff-72ce5383f270",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "16d45cb5-0a27-45f8-834c-fcb672abba84",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8dfa5a78-68c2-4e18-b75e-9f12f298f514",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "956c84d4-8125-460d-8f6b-ed0f38728281",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ca63e3-b6c7-420b-8227-431a9d326988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b97013-25f3-4942-873a-f28250a156db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee106728-8969-48b3-afc5-e3ea860a5a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28a15759-364a-4c39-b178-7fa7357161c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4f8b48-2239-4db6-b5e0-c389e89794b9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1786b2b8-2958-482f-a83b-30962098f91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20df943-cabd-465b-97b2-a82dde69c929"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9fb620f-4944-4afd-be65-bec702d2072e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcb817be-31bf-4d1b-a098-39d9a406d668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1bab47a-3ffd-4721-a193-2efac4f6a24a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ef7105-ebb0-494a-b0af-4c17c22167de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c446898-d333-4616-81f6-66f058cd347b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a957d02-0351-4f9b-b233-8ce4159b5eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96c81c8b-c9e0-46a6-9dd8-b04b84b7ca24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a91ed6a-5b87-4793-8e38-30912e925865",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a94505-8b06-4c04-99ed-62ff90c34b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16cca51-1cef-467e-9184-00f44f78d870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e39ca9-aa2a-42be-ac5a-10653e63786c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d570d26-1259-4984-9fb0-824bc44e7ee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887ffc0f-6418-4293-a99c-7c3a77b40cad",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008567a-c2c7-4115-855b-87e74cbe14ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f5cfaeb-ce5b-42d9-b842-e1b8dfb76449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c6d7c7-51f6-4835-aff5-2bbb0b82ffe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94488d65-4b3b-432a-9953-3c47eef0e27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9999f365-0b61-4c39-bb01-97879af98be1",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f68e83-f758-4a2e-900e-3d148acb94ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c58e4b-fd8b-4f1e-ae6d-fa8aa005fe26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e8a419-4800-4468-94d3-f2ce8f29731d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d961d944-bd44-4348-9caa-9bd31709dadb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ef1052-2b22-4f92-8475-0109d1c6b0c7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5199ee-b3a8-4661-87e8-436a4d81e8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c82c0d-5a40-4c49-bbd5-a7f97b36c18f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3214df6-ff19-46c7-a037-44d82d478d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a374c57-f9ec-4ec2-bb53-fe7c161d10a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9d7e13-39af-4138-9e05-5e75d3b3cd3f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b00dc4-f7ac-4686-91ab-791bd8b34e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3a30ca-9432-4e97-997d-c8917571ed0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47009f1e-b048-4d8c-91ec-1a012968f8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48ceb528-0de7-41c2-8754-ca25d590c311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf3f98f-3f68-4456-a524-7e9731240edf",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04355a2-0d88-4817-a191-cbb1f7ee3815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e1e38f-cdfa-4ca8-9196-ae0c465f5835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c46a0e-f6d6-4c3f-a4bb-04d8db12c867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ace9d4fc-60c3-4e41-8b11-9de2e997d5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f526c6-98cf-426c-91d8-bb30848d4ab3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc5da7a-7244-44b5-8f00-9f84ac6dc3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859570dc-4b8f-4d15-959f-de1b7f4f481d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c9f2bf-3eb4-43c8-91d4-309a427039a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "784eb9c8-b7be-4bd7-bb65-37b7186404ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e0552a-ddb1-4068-b492-1bb4c68413be",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7880f7f8-50f3-4f66-a0d9-4965bce2f75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9d5477-2721-4d6b-8636-cf833d90bca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163eb0b8-3242-4e28-8366-10132ff86c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3855e24-1722-419a-9bba-13aff07d52f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62204370-276b-4873-8b89-503803476f23",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a37aa88-74da-45bc-a87f-cf5a5bb36d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efac9c80-8613-4093-886f-5a11b075b96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4140fb13-7fbf-44f0-800b-b99031d29120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55d39abd-2be1-47bc-a2ee-6fa69c19b02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db24b46c-d6d4-4b85-8302-749a5e04c944",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb7074d-5fe1-463d-950a-81c5644fd3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8d45aa-6eea-4fda-8c89-43b66e89ada3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d8e8a7-591b-4cfb-b285-71554327c0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c50fb00-b23c-4ccf-be19-527516b859e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066016d5-6bab-4f01-80b9-45fea8b3c3a4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0288263-f0c9-4ee6-958d-408bb329c6d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708754c5-e1aa-48a0-888c-2bbaede47e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159ba622-588b-4c41-a9ad-f74ad6325dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d360d61d-a6a3-46d8-b207-0828cc1841dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb79cfd9-eaf5-430b-9380-d4633420b43b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe7d733-d2f5-478a-80ba-50c75a6a2feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d24b1ca-cd24-43f0-b438-a8767c2d0c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ba338b-c901-44f1-a3a9-cee82b7e7949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd45bcd3-8b1d-4114-9992-cfd1f73f925c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df17fe86-87fc-424c-8119-96bbbc8a6c05",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b72bac-fac0-4309-b82e-0c637c1bc699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1203c350-90a8-4b30-8729-302276637172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4886bbe-9d60-4d07-b389-f4e3600f206d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12643d3a-4617-48da-9952-bacea7709406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a1c352-bd6b-4364-a07d-1e2d515942d4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab6537c-d59a-419d-bbb7-ab67ce730745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0718d804-4687-4d34-936d-17eed87ffdaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417ebe0c-6d2d-4bde-bcb3-c7257c54e895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32330578-92f4-4f09-bf2e-94f0a6a71354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de82f76-3293-4698-a601-5ca21c72e2aa",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b21396a-8ebf-407c-819e-c87e0d7d7c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6821545f-37d4-43ff-81da-c33b34f0c671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8668e039-a40d-4ecf-85b3-696ad0a1da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "045d64ab-6e80-4f25-8380-c4118610db89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee5b6f-a82c-44fa-8080-0c1aa1940256",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59984da-b339-44b5-b03c-d91091f063b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2037dc3f-95a5-4ba4-b4a9-a657d23686bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de57c4e8-961d-464b-b750-5570dca7c2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad4e00a-1d85-4040-aba1-a3ef55f115cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6428fd-91ff-4c07-a527-757410d310da",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d90c5d-c100-49f4-9e3d-cb31b8a1aab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b186f4-8447-4a1a-b710-b081094d2835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc83e92-98cb-42c9-b3cb-602c1e02a696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f852c460-7483-4586-a118-34b3b8ed1ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7364a07-7b8d-4024-b717-f596382c0187",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe437f2-8912-4c7c-8ea1-18dbef7a0701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a069764-a744-4e1d-8a78-093f45438d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9dce2a-759b-4e2d-93c8-d22ec3d8ef8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9403b993-da97-493e-b1c4-58b873af5015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08bf7a3-c105-44d0-9d37-ffa6602866c2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e7df08-5663-47bd-b47e-35dc00d96c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a151e01b-8f7b-47c1-a9ed-ab048e68e810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8f014e-f778-4c0a-b511-b39a50cc1873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4dc878-30fe-4cf1-a0f7-367f9d9ef3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed54b7d9-f4f6-4946-a1c0-20ff4030f2ce",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7da2017-bba8-4ff0-b459-2ffdbda318a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b964b0f-ca7a-4d9a-ab8b-e60c658f0afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858a813b-c2a1-4d50-bcc2-c21f24d1ce49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc33da1-4726-4485-808a-011501c18f20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbee5d9-6de9-4dfe-a706-6fb9014993ab",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71d1934-6e91-4803-a30d-477e8f5a2a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9fb727-6b9c-4eee-bc0b-6681d060c5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400248bf-05b3-4e7f-9a14-20fb2855a424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdd73d09-467e-476c-8b98-9e5a45779306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fcd8be1-f58f-4717-9b09-cf296f421339",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a874a5d-b0ed-467a-a2da-f82e21d75ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f4501d9-40f8-436a-be25-687ef84730ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5093652f-c632-4277-aef0-12ab6383967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "198a580f-027a-40f8-ac61-bd08056868fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a1acbd-3f53-4b1b-9891-413392b84803",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea11872-11e2-4b1f-9aa3-554eaffb1d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48da1bb1-8553-41c8-8928-0b2a6767ee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9e31f4c-a648-4757-a244-44e9ce1795ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf0e650-fe87-4303-a780-a06778317e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d0ce4b-b389-4c82-862b-410622c99f09",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79af4a4e-72a1-4224-b581-cf47a09f2aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442aa92b-8960-4bd3-b16f-d76a870b1c6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a61bb4-b57c-42a1-b2ef-3de3b27afa98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "435ee4d9-219e-408f-84f8-2e7c7a4a4a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ba723b-f0af-4748-b1ad-5038f7921a16",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c67e69-034d-4ad4-a73e-d321e2ddeb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405977de-96cd-4759-85c6-202e8cc0fb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b0394c-67ea-47ff-94dc-70fb928314e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c158adc-a61b-4cd6-a516-e4d576ada211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a939e73-135b-47c4-840b-117d7a166ec2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5662843a-f260-4e18-b72b-ce5c75442223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0224393-448d-4fc1-b8c3-46aac0a01ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107a65fd-d969-49a2-bf81-0ae5fd36aed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fed76e01-fb8a-46e8-b5b9-65156d620f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e846fa06-9059-4204-9349-31e5d07cda41",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407a6315-1931-4b1f-9df3-8578730b2858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d2018e-6fc5-4dce-95c5-1d9e1a7363f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49c9fe2-0fec-4b6f-a5df-8bdd74e31e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b93705b-fbf2-44eb-940e-a98ff2f7ac4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc9c2a10-bafd-4114-879b-a7a0e9388a94",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36de872a-be69-44ce-9dcd-6f1d4ff39ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae4860c-2784-476a-8f36-f1dc887159dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9b7e0f-00ce-42a9-9fc2-af1da8ad652b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "18a2f6e7-06de-4a28-8fca-209b91dd0c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6890b9f7-0482-46c5-93ec-d5970e403ecf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9274214-0c13-4f60-b145-39f2fa54b62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf74990f-a4f9-45d1-88b0-9ddb96134090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4aa5678-0db0-46ee-b2f3-8f89908d8d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fff619c4-5f59-44a1-82d7-20b67eff5b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed6898d-9b0c-49c1-9e10-d10377224680",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40177b1b-0c06-4aa7-99dc-74fe3539109d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b4b0d94-a0fb-4623-a033-06f4b855990d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4540fd55-23ac-466c-997e-379ad6fc7273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa7b1b2-837e-467c-9ae0-c75d460cb854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cf62ad-3b68-40e4-9d02-9e3a4e9722d0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b63790d-aa22-4d1b-b3fc-b3ce25b62c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db74133-84d9-4271-9ea5-30e9ca2cb26a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0700e7-e2bf-4e9e-a389-3e3d8e65dd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6333a097-3bd6-4747-8bf8-27a3c5f8cdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f8f740-a664-49c5-8b35-f2b6b2e86a5f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbfc3ec-c341-4281-b7c8-e2296663e5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc09a69-e21f-42c9-a078-101f5993a48a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "157cbef1-cd6e-4e1b-a095-cf352d32490d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b1dcc73e-3e25-43a0-8c4f-9f8295d12bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9f3f71-e0fb-4eed-9799-75ab2e4f9b1f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca7605f-9b7b-423d-96b5-b9c486c61ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fe1bfef-4fd2-4376-ba19-c0a085943326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0915e88-3ca5-4084-9c47-bde2091b812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "33985766-80e7-476e-9653-a64f3cfcf6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fde38b9-157d-4077-b7bb-49c31b31dbb2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2324c83a-2352-409d-a20f-2fdb56b1f9fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f39686c-f863-4131-a97d-97d5f4fed5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b1217d-6a2f-4836-9d0b-484dd492f908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb72a4c9-12c1-4eb3-93e4-2a27e22c5b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad7f812-d3d9-4149-84f5-ba7b5e85e145",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ef69eb-6839-48b9-9504-e711012fa4da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddaf7f5e-12b3-4df2-988e-bf1906ab1c69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b74a90a-d5ae-46de-a604-a1bd81cd5d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df2c1087-0b21-455d-8b6a-1fe4f12c6052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2969d75-058a-4a28-b41f-082c76612303",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb1fe94-2113-4524-a47f-34c01fef1116",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61b23681-2215-4fc7-b880-98c7a1147c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca81bcd-972a-4c13-950e-c8ca7f020b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0e958bb-1f18-4675-96c4-94f523206950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3159c6-c96c-4ac5-b927-066145fe8799",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da578ad-4eaa-4fff-8a3b-d66b18341dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9652079-6412-4c1e-9d8f-2e8ae47505f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5797d76-df15-43d1-89e3-bf26eec6a8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac216537-25e1-4a85-84a4-73ca25183df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce66ef21-0c4f-40d9-a1c0-7fd67efe5dbc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549af8cb-8ab0-4818-8beb-c1ea3d9f74a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cc63c54-2d9e-47ba-9889-359581d53535"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0fbe42-d5a7-44a7-8e6f-28b4fe04a452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2c80a4-9ca6-4db9-8738-20e11e9e1f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37f14a0-7151-4ee5-8f31-9257db2e61eb",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29b3404-f21e-47ba-8e32-1a55171f2a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818b08b1-856a-4481-a5df-aee197dd9cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df85af52-8ba8-4f3d-87eb-29bdf2242aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5547da39-50cb-458b-88d7-0cde473b2004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2255dc27-8c0a-4270-9bf0-c6ee3b14d52d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ccf60a-dace-4765-9767-61d2e6c761c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c839b5a2-4098-4299-8397-4ad50a0a858c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4539977d-df66-43d8-ba1f-bd9a06b9a51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0f0748c-b628-4d27-855a-331009a1fd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d02b8c-9740-49ca-a9d7-65b311ff3af0",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2a4657-0a3a-4e3d-870d-dfac64bbd1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27c4083-0e7c-4b9e-80df-a5d90d10f506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e4a50a-d8e0-4815-bf15-b6409345efdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "44ecc6a0-09f2-4269-89d6-090431ee5b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b0226e-2d73-4ad9-be47-d61a31d5a214",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbf80a4-45bf-49ca-adce-27444a1790ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5133e51c-c269-4aad-84fe-bf18e0c2d4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239db2b6-d461-456c-a61c-c639bcbaec6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c144d6c-aec7-4146-8c8c-93a961b801ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74354b94-f07a-474e-a2f2-841c1d0c70a4",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8aa9c6d-93f7-4de0-9f3f-913aecae50f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beddeaf8-15c3-441e-aa05-203d2b4c83da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c444d-42db-4255-aa20-a09a3dd260c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "580a83b5-accc-4eb7-a1d0-2d16f2d81ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee3165e-f52e-4b20-aaf2-89a707b54fac",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68ee213-77a5-42b0-b7ad-883319346d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8396a81-f111-47a5-a26a-ee8675cb96bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ad967c-3fc3-48b1-8a8f-9959982dbae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "868dba11-9e80-4cfb-babc-b6b2ab0228ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc999ee-5cfe-4b1c-a401-cda517276c0c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ce04f4-6592-4cd2-b771-21b5c6394767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c679b36-48cf-4f3e-a58b-7ea18760ed1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288747d9-4024-4f19-8ffc-84c73b6be315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e304a1-f780-46da-be8f-3b3bba9cf1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97757111-a279-459a-94f9-055a9118b88c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176d67de-1631-42ba-a704-9d2bde4b6860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec319fd-ac95-478d-b60e-1cd4d8294cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f66328a-25a6-47b5-a622-c8f1c0c808d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c32c8fd-f34d-4629-80b0-74a95c15bf15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc111ff-0a5f-4419-8b4c-0ad201a8bbfb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd20c8b-f75f-4f8e-988d-af43eeef1614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc5bff4-3c21-4101-8b15-38637811ef8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b13e75e-e106-4b27-ab21-85cd9958b361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6f9680-7153-4d8b-b1de-953b49a5948d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e569fb-2308-44f2-bc94-1ca543722d24",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56386844-8189-4dbb-a3f2-7df06705d562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b9f9aa-0235-4988-a4b4-84880be6b2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de2d469-1b27-4d4b-9860-e4900b937bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "afa372b2-cec6-41cf-856d-8aedd2c406bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ba7b8a-866a-4c1f-b8f3-3bfeaeb3d74d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82af71d3-f781-447a-8c5d-9f7f3790abde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2876b0e4-eafa-49ad-a902-20bf4ae6df8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5387d15f-7539-4544-9f0f-63d83b9fec32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9b1544-8367-4907-93db-ac704be9f930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6a3259-076e-40c3-bc98-e43062749934",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58df4987-5584-438e-b984-19560a215110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507f7e4c-b59b-4b02-8d23-01fd541bd2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400fb6af-4362-4cb6-a082-7a3d82e8f191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4c105b0-5d96-4676-828e-e3a98c270869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bda058-e931-44fb-af39-3155d83451b6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb072438-6d10-405f-abc1-8681ad8b3136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd738af0-7024-4869-9f65-ba664cca4b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4afc2a8-8c68-44fd-a7ca-a0ac627d8899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4121d502-1128-4d1d-b39a-2e6b1fd329cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a26bce7-a2ad-4d3d-bfd9-bd3a00efe305",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0ea3fb-9021-4b95-8c60-d42cafe2ae4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da0e8381-3916-468e-a5a6-856ff01b5e03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251123d4-6c78-4e34-8fdb-02ab8b53dc8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4383b7b-b9a2-4fce-956d-8622414e1ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d00a04-6f9f-4469-9756-1b26311834a2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3cac1b-afce-4972-a551-54db3eadc74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed56c92-5220-4b20-a81d-a0e7f18672d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee948a40-403e-44ac-a572-bad16319b73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "17172be7-70d3-4fa5-bff2-5a51479eb115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9d4dd6-f497-44a1-a08f-a45163612b52",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2520dbe4-ccdb-426f-a94d-faef510d459d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc82f8ef-96e9-4193-a1c1-8baa9d7afaa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f2a113-133d-40f9-bd6a-4cec4033a054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2c6f96-84a8-4214-a19c-83744b1a7ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548b0c00-7b14-4c1e-a306-a9902c30dcc6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eae6507-e252-4627-867d-2486b16f899c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d4ce791-c8ad-407d-a9a5-442947f10f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c4935a-ba09-4eae-a633-7a7fb5021485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "60438473-1a5f-4c16-b479-e171e006dc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f4aecf-de19-44fd-a3d7-e8dc0ff686ed",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dead6a-0d6e-473b-9683-e5c2b87b40de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1277fd04-658b-4d4d-aa26-bf1f356a056d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa06553-dc8e-438a-ad92-55b0a12c1457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f8a8c7-ed0f-4809-8893-323bb5f1caa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5823b8c-3ff1-430c-a6a9-a7ac96373127",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00deb71a-8edb-4a11-a25d-ce0272b76e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d75a05d-eff1-45d8-a71a-b0d9ff316710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e7fc29-e660-4718-8d36-403cd18eef86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a593b41f-2fff-4d36-87e2-68b20c0ac70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a138a1-cf8d-488d-8710-b8d00a6e9b50",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3040bcd-f47d-49b0-9768-35ab05c03e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f53a73-eed4-4ab2-97a9-f00c3840cc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda44049-5483-4673-9f44-3b40bf27c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e11b2694-0928-4617-8bd2-a3311a0232e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e82dc4-f514-4240-afa7-04a9f824d05c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3756141d-20a9-43e7-9aaa-11b0044caded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d369bcd-0ce1-438d-a5df-fe35cfaa965d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5e7574-5cde-417c-a83f-c3495b98225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "832d0738-4622-4bf7-bd14-52056af1e1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2ca03e-8860-4f71-a006-9232d94d3541",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0210c701-cc67-46d1-9962-a4ede8c4c996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d187918-e7a6-4c78-902e-0baa943510bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa2b059-2992-4ade-bf88-4d2a8aa5bb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff34b82-a3c3-4859-aa37-11001384c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e89327-c5be-4e1a-901f-74546f5e597c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6cf4f3-a967-422d-aac5-3c0295d7fa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9474e623-ea13-438b-bd0b-97fca87c8255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf4d635-3ff9-4e3d-a36d-9377108cf5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7d38a80-3398-4e03-ac77-2f3733689465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39198c65-ad32-4efb-97ac-9dd8aaa9bbaa",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df93c11c-c68a-46cb-a7c0-ef1649405bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e60661a-77af-4cc1-866e-237c478d411f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21dab1e-2316-47ae-bc66-45f71f6431a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39b8123b-e536-4dfa-9749-91e9907070d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09d86ed-e50c-4913-a83b-58498c64944c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a940403-3741-4573-bd14-050e88a916e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58726125-b9ad-4c08-9b7e-ffcc86418d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040bc6b6-81db-4850-b1ff-41548fbfa64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03efacb0-eda5-49e7-8da7-23959d9dee2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b43b5c-ce60-4231-9a47-d4aa0dbc673c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed26095-c893-4be8-b078-39adb302a2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8809dea-7de6-4e9f-856c-ba5ad2383d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d76d83-1d1f-4fa0-ac7c-efc4b7e46f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d838b76-8543-437d-b211-b41e489774f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a85dfbc-fe72-4b8d-b3bd-1dcabb404ff2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d406412b-777a-4846-ae7a-8730b650d70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629ac0ea-1992-475b-a70e-20f229b9bdaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28916bb1-3e0f-404d-8dbb-c5ecf864fdb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "99ecce43-6bf4-40b3-bead-fae480b380f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de877d6-d892-41f4-99ba-a0a0146f17f8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96f465a-fb80-4423-80ed-07230fe0c285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bdcfe8-e58c-4341-85ed-4f445236401a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f828897-4350-40ce-96de-9ff101de75b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea148a35-328e-4dde-abc2-780ff603b307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349308e7-dfdf-4660-b151-d38e2ea03878",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4fb380-06f2-4a64-9489-1af27b21724c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3360e71f-baf2-4b83-aba5-2ff3e8d8d913"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390878eb-9289-4f75-b7eb-941405678e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b757a3-85bc-4431-85de-8ea698637258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db549175-c7df-4753-9f9d-54ccf029578a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764a0f9e-5a7e-4021-b74b-8700fbd46e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9894df95-afb3-4931-b11c-24f244025733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60103dae-976f-4595-8cad-c9f42dc4dd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7b4219-a5c7-4fb7-bf64-392593ad69b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a337f5-9f98-4618-a27a-59780ba32217",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf006ae-5500-4d54-ac68-4a14fb62cd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5115807a-837b-4e06-9340-db0da0bb7f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e86177-6a8b-4498-ae8b-32b03a1867ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a63f75-f195-4ee4-8408-350530b52d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078356ff-0d46-49cb-b18e-6e43bad38456",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140bbbdd-5ac5-4795-87e7-32d3085e337e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee7f312-299e-4ccb-affd-7bc09f19d210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156a5bf5-ba37-4f0d-ad99-f690c053d55b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca7ac66b-c335-4eb8-b97d-cfe033975831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac54292f-0701-41c5-b6a7-692f3a82119d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71acab8b-db72-4779-9b55-0801876360b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c232ec2c-ab6d-4232-a988-1c7f237d4161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be78b280-fe0f-4d29-9ac3-d1c4bbf3357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cef5cc-c5fd-4909-8cc5-dcf8214c6d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b5c2b6-7b21-400c-9e19-e03d35e4ec97",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aa217e-1517-4718-b639-765a7cade8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f9db19-31a1-4968-a796-4cf8e93c36c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41070014-06ac-41b9-a42f-27cac593ee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dc0f845-2c2c-450f-99c0-a6f19cea3f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa959b8d-2a4a-41a2-97de-9759f7b6ff8f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d8cccb5-1326-48b1-b062-2c80219e9b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0565a0-070f-4a21-8918-68081e2e8bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1b6c09-245b-4093-9ec3-af6103555139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7f2a219-d961-4b6c-877a-398afb4c1e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5eb9966-09d1-4407-85fc-fdf6249b6815",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a2c399-3c9a-49be-a371-b7ee5d41a484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b89b9e-6d71-4775-9b5e-6d43ba800ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bcec25-cf61-49e2-9709-761892c05ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d292f380-eed1-42f0-a1df-25b8b703a019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fdc03c-5cab-46ab-a07a-5e32e26c5d80",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70b47d0-72fb-4b6b-b3c0-f49cdf91ee56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7ec374-df7c-47a3-8880-18cbd79f0fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0322fa6f-ed2d-4276-88f1-750e438a46d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4ec187-04c4-48f2-8dc8-7d48d52eb71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11538439-5b2e-407f-9442-10af6dc2e7b8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3be1defb-ba3b-4a39-9664-097f86be9764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8a79e0-c65c-48ef-b929-0636a352daaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1549be03-dac9-46f0-bde3-921326e19ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae94eb6c-385f-41a9-bf4d-bb5959034552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca76a25-0633-4f26-8f49-d852179d6c19",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28da3821-eab2-42ac-ac16-a32516df996f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34bfac9c-4084-448b-b9d0-3bc9f0c13789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce50e26d-fa8f-4c34-98e8-1147aad70b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a37dd9c-9dce-44ef-b0fa-1da679d53a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "045e8b91-5eb1-4a37-807a-0daffac46468",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1197cb-56b2-414b-8af6-946cb5b1db4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d6ed52-4b5b-432d-8c4e-4b722befeb48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8fcad8-2031-4d78-9f2c-55ef43220992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b361baf8-453f-451b-acc4-fba4cb1c0f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11027dd7-257d-4e1f-b41b-2fd42aa100f5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9faa479b-694a-4d28-82ab-aad48321df70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1adad628-79bb-4b48-90a8-193d19b93a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a051cb8-70e4-4c43-ab59-97341f317c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "974ae77e-0d3d-4121-bf6b-222d3f3870dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b552248-3096-4e84-82a2-65f201f0687b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ceb5d7-d3da-43af-86f1-d173f37b694a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fb3873-1ecb-4d66-904b-fd14231c9249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7f5f1a-b454-4783-bd6b-3380fd2767ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff176fc0-d72b-4eb0-880c-69247cc1d8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ce824a-bde2-4617-85f7-378315834d79",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9ea169-129c-4d73-b075-6006c5ccc391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355709c1-098a-4c40-b81f-0f659a492ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4acaef40-3e86-4291-ba56-59dcbb045bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcde1967-2497-4fbe-b910-540a342dc0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f09e034-bc80-42d6-a193-3b77d31ee7ae",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fbe3c8-771a-411d-8ba7-d946d20d3c8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12825375-fb7b-406e-a689-aab2f30d4187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9498a6-a724-4a2d-8e14-ef576c48759d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a3cf31-5de0-4f3c-9889-2c8431fdf6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5757e665-1c18-4f04-885f-dd34289d8a09",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566d2b97-5c4c-478c-b728-d2b470af2515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5224e30d-ee14-4f4e-a2c2-8f4d406e7979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1188c8b-5b5f-434f-8b96-40aa2ba83769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "164a4b4a-2038-475c-9b5f-831d5a0ff6d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c07532f-3d30-481a-8953-8c9222e1c2b5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "721c319b-6798-43b5-8551-dc2fbd45a303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc9fb57-8a56-4797-8ccd-a8fed0113b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19b7bd3c-e676-4ca7-af6b-742a4ea544cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1507f685-195b-4a81-8f63-974757b50e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bede5020-11ad-4334-b107-bf6549546bb5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7a6caf-f9d1-499b-943d-555cd6562c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3757dd0b-3e43-4d38-b66d-fbbaee62af01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f1bb6b-1f0a-4b3e-a00d-88d7e601e4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c78fbd2-7b52-4c62-b5ac-a67c8521a298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8398b258-4b23-4c2b-933c-8e3eac4e3dde",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b18b17-bb17-467e-bd73-1f26c59d9c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c70e2ec-15d4-44de-af50-c3efcfb71b06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a50fdbdb-ce43-4a03-b4cf-068a2a05b339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b791bdfe-e3b3-4241-a7e4-b56e4f5912ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77751901-f0b2-4e72-b33c-882151f4263b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57015b53-0d22-42b4-8871-d7aa63305ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85c12b0-aa0a-47f4-bc8e-f0fceadb1dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f1da77-e751-4eb0-9243-84e7754ff166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2881496-6cfb-43d6-875d-d51124c8ac99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b9e213-47bb-4b3b-9d0d-48480ceadcdb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b2b8a0-5700-4e98-b620-ead233a59057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee5ec23-0d48-4795-b564-f1af40befb37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be19347-fe28-4d94-b72c-f77fdd8ce852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8ff2c11-4546-4523-a153-1da062dba640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc20178-7449-4970-9052-d9d5850c2d94",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d32de6-0770-4776-8adc-94e0c2b92619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "461065f7-8ac6-4c5b-9125-a2a9608a5343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93130bcc-83bb-4eaf-bf61-bddf44bca227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7278823-3326-4093-8c67-db0a583153b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "58a3d362-a71d-43c8-a13d-01ca6d74afd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "68f0266f-51e3-42e9-a62f-af67f0057503",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5402c837-9f19-4ce7-bac3-a7ed89c7a541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f556a5bb-ac83-4c31-a463-715c65dde91e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a737475-b86f-479b-9e82-c81a5aec051e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaa5c25b-5a48-45b8-b7f6-8b4131d2da7d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba55f0a9-1bed-448a-b843-fbe94bfa0e88",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc04c0c7-3ec6-4e30-bdbc-e707bcd35c03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fa21137-0d32-444e-8e8f-1f3e34440198",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84a11e22-e82d-4157-8a6b-e86ce3834afa"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10176381-a6a2-4149-8972-fc4d99013310",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55a7d705-4dc6-49e4-b083-feae82395a2a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0a950e26-6c2a-4cc5-bdf5-dc1ff8e9db1e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db2b1f4d-2121-43e0-bfac-8085600e7a59"
                }
              }
            ]
          },
          {
            "id": "09675354-3ade-46b4-a7ec-478e329e16dd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7a6ea04-f56d-4f83-9718-5bce6b055fd5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a50171b1-e816-4255-975e-657887c35a06",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e2eb22-3220-4b4d-89c2-4013ebe608cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "89d2a178-0e5a-41e7-8034-697a9aa4ad06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a9faa5-6a42-4163-9b66-75607608cbc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31938d4a-d6cb-4309-a55a-be227ec49141"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a67cb71b-33c6-4cfe-b1a0-e3d0282095d1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9047aa8-9b77-4d9c-9f4d-9a8bd3c50c50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc5fe92b-b68b-43de-9eaf-4be4f50f23aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be2fdc79-d426-4c3e-9758-bc3d7d1bffa8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40efd694-e0b9-4231-8169-4440a03af8d5"
                    }
                  }
                ]
              },
              {
                "id": "bc670e0c-e27b-434f-ace2-a705b37ee815",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb8a7d14-ae3c-493f-97a8-15cf99b3f5fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "147e1c10-9603-470c-9c69-a541daac1f5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a73970-7286-47d7-9759-93b748212061",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "221362dc-38de-4694-ace5-2a7f0f2822e3"
                    }
                  }
                ]
              },
              {
                "id": "bf51e6d4-a5e2-434e-aa38-b494e09157c1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6fdc4b9-0931-41b9-a207-830123948179",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5b9825e-db8f-4663-a6fb-59fcfc96c406"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b701c27-66a1-437f-b9a2-c23f84c1c8ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "acdf0e6e-7595-44d0-b8dc-3baa5c696dda"
                    }
                  }
                ]
              },
              {
                "id": "221a82d5-f860-4b45-a9f5-04093c993bdc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b79eef4e-26e3-413c-9d27-8ae85510af01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "493c3967-b5a4-4159-a863-82905d2691f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecc5b359-282b-4748-8fa4-3a260568fced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1aec704c-8c6f-4231-aa3f-cdbfd3a41f8f"
                    }
                  }
                ]
              },
              {
                "id": "3cdebe40-559d-4f9a-bfc5-8070439fbec9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eba2a1c7-6f18-4de0-91f9-84f10287b242",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e10bf543-46bf-4109-9986-028356f1de07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d9414720-dfa9-4ef4-9745-3132afdbf7f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ee0727d5-41c5-4304-956a-d76300f47d55"
                    }
                  }
                ]
              },
              {
                "id": "bb670bdc-cb66-4fc2-acee-60bd025e9cbb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e857b72e-7a0e-404d-9aaa-b4c6c5d1e511",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57e24b98-f0c9-4b8b-aeff-3674591479ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca83b336-5e1c-4227-b2f9-8e1eafc7395c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cd68d21f-7f2f-4e1d-8e21-accea4a2cfca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fda36a2a-7ccc-444a-a704-5de694e20bad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "46b17182-dfcd-4169-9633-d85eb3c990da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c15da3ce-8407-4a0f-ba2a-cb5b0f250c7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a906749-85b7-4802-aa24-7a4c67525250"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51f5c866-cf13-48dc-bfe4-a18dd1ca67cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "09c54b7f-9d6d-43f0-8944-cfec5e1321c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f6d3173-ac6f-4960-9a28-044776275353",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32dc586f-535e-450f-89f4-6e8507659dd8"
            }
          }
        ]
      },
      {
        "id": "35f1af57-fe79-427d-9d7c-3c188b4e338a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4157e6e5-226d-437f-bcb3-555aa2f85065",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ed74964-7252-4d15-afb1-f2407f9d5596",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d871804a-c79f-47b5-81fb-3a4a7db8bbab",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89357fe5-08be-4057-9d2a-e7cb4f3f5ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d51ebe2-f209-4120-bd4e-e811e3a0ca74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1f6891-3216-4e74-815a-a0b8dbf079c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc332e5-8425-4276-aad1-af9cb2b6f86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa26bb21-e5e6-4fac-a5c4-3cde73a174dc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77480fad-454b-458f-b3ab-8d78d31c9f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc34cee-3ab8-4fd1-a1af-072ae222973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2d92d7-e956-4bf9-84ac-da2fed5eecd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e80f7eb2-86c2-480b-8847-27233758da41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e94aa3-d674-4df9-a696-c028e7389ef6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d184301e-3aac-498d-a8a7-3a01bc5ac364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f530f8-76bd-4181-8d62-60a6e374622e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a055c-fdb4-40e6-b4a4-905624c1d4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee6071d-cfbe-4826-a2b1-19e473bf0fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea5c8d20-d2e3-47f9-ace1-332266b80990",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381809d9-3f1f-4a34-be97-255be53e187e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c91eeef-8a9f-465e-b3cc-c200e0c402fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86aa5b1a-b49d-4a22-9069-b7623f3bbbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5493777-94e2-48bf-a23f-23a9a635c890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddc21aa-0b9e-49bc-acb4-20f871266adb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "832aaa96-a9d4-492b-acde-09ea1a12cab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f1fcc4b-e2a7-4cac-b947-45dc630c1644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbd339d-fa1b-4519-80b6-821d1107e9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "02322a4d-331d-441d-8fb8-ddf65266694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db14cb6-1987-48e4-8fa6-e7930c283da1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3527eb-a2bb-42cd-96bd-a769913a8622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f105b1-366e-4269-b5a0-0bb0556abd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1053ce-87d8-4d5c-a977-5ecb4183818f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f55449c-dbb0-4adb-ad6b-b9ffc630a09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c468d824-d0d2-4dc9-98bf-b0b0f96cc62b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0df26f-9952-4dae-a98e-6b4b6d66e4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73a057e-4da3-4d79-85f1-cfd6edd4d63f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9d51b4-e414-44ee-907f-76e603f1a845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6907b506-9016-4499-9c41-795deae8cefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c2ea2f-4d54-415e-8aff-4f3809c17c04",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea95b684-0cc8-4648-81e3-d435535f7450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a10927-9937-4ec1-a83f-74d27cd4bbbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f698f58-6a96-4a2d-9b73-9a447f9e21ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e401ca1a-31a3-4634-8245-6905123a9425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a475c629-d92b-486d-8778-e37969d049c6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4413b72-0aac-4f88-a14b-46db33750cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35f9d72-ef8b-47d3-a737-616b71b11bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a96bb18d-4e69-4de9-bd0d-171492ac8bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "970d8a2a-7807-4062-a557-3694ffcf71a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec03231f-7ba6-4235-aba9-281216666f98",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df026565-7641-4cd3-9358-170b31c65612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d6fe46-f4b5-426d-9b4b-2f21b0b6be7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ba1299-717c-4fef-80cb-53a18e279012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "daa6cdb8-6104-4474-aea2-08dd0a69e99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b8c8e0-ff0c-40c5-a377-d770bbd4d884",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5757fcd8-e982-4d00-9d87-b9a2a96465b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b6d29f-264f-4962-9c75-23def7b2aff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ea6216-77d8-4b03-8076-f017e2e24c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d98cb6-d6d2-4718-b717-08aa511c3676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b28a337-0ee8-41b1-8903-91f8e5bee515",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90fe731-a4d4-4de7-9d21-0a8afc353ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af376b74-6d9c-4b3c-b06f-7e477a9227a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a08bc44-53d5-4844-ba7e-70ff347e893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6a85fb67-703b-4365-895b-885334b6ef0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c6a2f7-ecf1-4fae-8e4d-c55ef92e33cd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd91d8d-984e-4bf3-a0b6-b05133078817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdea913-d6bc-4185-aeb6-ec166f8ba688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "047674b2-7f51-4bbf-a376-392904c5a996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "443fd187-328c-477d-856c-0ae78e37237a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f61b9a-2097-4aa9-816f-05ab70fd3d87",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cc1515-04b1-421c-b655-35b0ab3946e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4deefdf-b766-47cd-a0c8-567adaa60f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b48f9ce-6a8d-4c42-a842-877e603aefd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "89370049-c862-4533-8d2c-8078e0253daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3779951a-0c24-49f2-9e63-b65a27756c00",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613394c6-7c3b-4bbf-8909-e50ff529f1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444871ca-8387-41d6-9dc1-e8bf858a7092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b2d55d-19d3-42b8-bea5-0c9a718dc976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5afdd7ed-2a84-4720-93d7-2468b7db71f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9363dc04-1acd-4c74-873e-f4daa77d5fd5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48041548-6ebe-472c-8918-1140dd720867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66acb0ff-c2b5-44eb-b914-c3cb0e8062b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f9a983-6f90-4ae1-ab53-94dd8e5c7c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b22fef0-c036-40d4-8196-45997ee08143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4554f6-4bb2-46e2-8698-52416b8b3599",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a11c23d-ba9c-4c99-a967-606ed7b4f4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae507ac-00d6-48f6-a17f-f8ddf242af2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7bf3b6-82b7-468a-bcd1-222cebe36773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c4c5d8c-ca66-4b0c-aa97-6606260f8335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f774dab-eda7-483c-98c4-13eac5e5af58",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5669e88e-1fe3-42f8-a42d-47f4ae3b574b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192836ea-74b3-4dd7-9414-f7973726b3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a7016a-bc06-48de-9ce8-2f4f849a1dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f042ec9-d98e-47f6-a05d-6990c9309972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35acb4eb-7f89-4655-a333-fef867dc6c26",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdcc577-3089-464b-b87f-8995f5a66d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d95cfbc-0954-40cc-a2f1-0e3535a3bd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e21bf6-8490-493a-a7bf-8b0e69e1ac78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa76d02d-a6df-4a8c-9532-ffc0498610b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9955121b-70a8-4584-8240-98f77debae3b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1f5958-cb60-40cf-b2d1-876afccc900d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d6c69b-b944-459d-bfcf-f181c3a97dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b78689c-73c7-4acf-b4ab-e1cc562346c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d753e8e-62ad-4928-9fe7-3ad29e3e2a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8ea1fb-37aa-42d2-b610-baea3aa426b4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6ec716-62e2-4722-957e-a8a566fc9083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79963a32-eed6-4e24-9cbe-851a401f8c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e859f155-7fb0-4106-81b7-c9b7c7cd82d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21a62a7b-250f-440a-a51f-40c99e19b59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54509935-e7a8-4a34-a6e3-9208eac43bd4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a962e4-890c-42a1-a3f0-269ac8930939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc5710c6-4fd2-4449-bff8-62936821858e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ec867a-2290-4b04-9938-049101e61151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5868d7fa-d9a9-4dc8-bea4-69fdd27fef4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21977e4e-3320-4657-9e23-ee64b08e2d81",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f676478-b03d-4648-85dc-18440205781f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80295e7c-0efc-4efc-af50-814a6c3335b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aed0f61-0e05-45c1-9209-2dd7d370cfa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73899445-3db0-4d3a-8b45-0da2cb678218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ca72c0-1847-43c9-a8e9-9a8e967a8f50",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b25636-1caf-422e-9eec-e116d8f949b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91aed2c6-29ed-4c12-b698-c3bcb2e8e4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7248f70-8590-438a-9e26-383b0ffd3a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85e9a7d9-f227-4eea-84d6-65aacd3eb945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b094b81-5da9-4b86-bb5d-be18dc966616",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70e782d-fb44-48e9-af90-c103f4ec3dad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae3688a-275d-4163-8080-69acfcbc2b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efad2771-49b3-42d5-87b8-d061dab5a80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a216cc-1da5-480b-9ced-090d664a5256"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c277f90c-22a3-4006-8931-df58ee8b6d49",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a06d2a-3073-4465-92cb-c959c9714767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4be0f4f-8b94-4063-ace3-9c1fea9dc97a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40032e7d-aa81-4c6d-9e49-0bcfaa0c433a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbd2e89d-6bf1-41bf-b6d7-cc1889587df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac45cb11-d2ce-4d5a-b24a-625f944e74a6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e86add8-0fac-4245-a312-dcac2521eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4fd5e3-139f-469d-8716-951264632c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2821e36-e492-4cd2-ac44-f4f478ea4e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "401262f9-b370-4f1b-81e7-bed66e64f54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ca5c23-57da-4a38-8067-ea340a796d8f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631e7adc-c50b-40ad-bf51-2fbc9afa4afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54e90b83-ac62-4b80-8e20-bcbe0924d25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c707493-4e14-4a1a-be51-cae55f441628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b996b455-6d14-486b-9be9-ef3d8e42fb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd1241-6c9f-4959-be8a-30e159dd0d70",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cace534e-cf79-4674-9c92-2d454a5592fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245f5fe2-5c10-4d10-8b49-adb1ca268112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c044989-853f-49ac-a429-c0a2c0f602c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57d27c0c-9a5f-4b21-b6b7-38ad881477ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b17975-6be1-4324-8a19-761a485c2aaa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1ce7fc-7d76-48c9-b3c9-c9e246cac3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8e9eb4-afa2-4829-9983-8283d92bc245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bca6ad-2b23-43b0-97f7-6d160e66d448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "375dbb93-d368-49c3-9163-6a3dc1ee4e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d611c70-1fb6-499d-87a4-8b682d6faa77",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717cf3ba-3731-4ac5-9f7d-71beb2172f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e025f3-4e26-4e62-a3d2-0855ba29744e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "defc74bd-b7a3-4718-9606-83595375540b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3050aa7a-f9fc-4119-99fd-66f763c8d4e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1257bf-331e-4c87-91a0-a879ce78b7cd",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933c0f37-b886-4ea0-978a-926b0402a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeecd6d8-813e-4bb0-a8eb-22ae2f0ea678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01091454-808c-4993-a32a-e2b33abdaf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fca5cbca-82f5-4ba5-9e61-8864789878fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf14f7d-c5cb-4f33-ac30-3ceb7e393ea8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51345c78-0b81-470f-b2d9-9b5ca5ffc476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46446dcf-5d8a-4044-970e-7a69158c8c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcbd293-fffa-4257-aaaf-06c101c22f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6414c000-2f86-4a49-9d6f-025e3abade15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ed6dd1-6908-4215-8f01-1d61de40d863",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56fd4ae-3dae-4937-9c6a-f7647fa5a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3982c5d8-d2b2-44b7-a75b-fe599bf66d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68a59e2-b5ae-474d-a5fc-c2124082fdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "67064451-3800-431d-8bfc-e8653d88411a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28236d09-612c-4950-bbc8-8cec396ddf37",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b54c6bb-239e-45eb-aca4-e4376d2c084a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e18cfc9-04e0-4cc3-bb62-70a29ec3a0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a12a05e-bd61-4128-93b8-8d141f2bdee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07ea608b-7075-4ebe-aeca-6bd388dffe92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916148e6-3365-4138-bfbc-09cbe4d479fd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cf8e80-4a89-4f42-ac4c-142a3970fa31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b60fa5c-3cb7-4e59-b051-7194f0066596"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4778a57c-2e2d-4da6-8219-97a1313317be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f77d2f43-f47b-4712-b3c0-fee568bcddf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b34469-4b9e-4094-bbcf-27eb4b303a96",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd8f428-3915-4b29-9e09-dd3c624e6eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4774debc-67a2-4fb8-adbd-dcfc07a48ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02c3c03-a84d-4fd8-a16c-d982c57e5028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a41eb4a7-05b2-4017-9121-2482a3f3fcfe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "45cb270a-1693-448b-b2e5-116871a1e899",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e9ec00f2-d90f-42b9-b9ab-6aa902eee441",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcc9658-e665-46f9-ad53-7dc480aa8b2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7b5e6663-eff6-4e74-b4b5-49f515590f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559036ce-4b9e-4811-b1a7-6491c728a39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2be22252-f758-4410-a6b6-109104dad7d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebda6054-3464-4709-9d56-7c1da17ce345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f255d912-d50d-4c87-85ca-229ebe95e02e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f878180-2601-4d29-bb70-1d6068d4d1ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd30e15e-766d-41aa-bb28-1bea4bd08194"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13e995b3-f6e5-49cd-a1c3-df8580a4a98f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c25e8641-e2f7-4ba8-bb42-dd7a03d3ae7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72c2d153-7a81-455e-91a7-3d98666d9656",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80c058ff-148e-43fe-977c-e527071d7ae0"
            }
          }
        ]
      },
      {
        "id": "60cff486-2b81-4573-8580-7308f36aaa1a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e6e55454-8e8e-455c-aae2-1abf7f460f54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1130a92a-4375-40c0-824b-3e8e77573ebf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aea9e17d-fee8-4cce-846f-b625a74262ff",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a73163e-06bb-4cec-b25d-649e9de22a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3e7fc1-e26d-4585-9239-04b47318ed1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd61c2bc-91aa-4df9-947c-6f4dda2f9232",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cac489d-0fb3-4dd8-b88d-9652ca098599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "791d86e1-7be1-48bf-9d93-4b46deac9d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1237c843-dc95-4773-a725-06551435f27d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09ace95-1493-46fe-bc3e-2b152d8c818e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74f74947-5702-484a-92de-b5dfb327bb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4465be-dbe2-4229-9782-7b6b259deb69",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3636882a-1c6b-4305-8a9b-5e33ca5826a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72370472-2a2c-4240-b207-16c95ae0b89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0eb6e3-0f14-4e07-aeee-95ed26b630b1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "decc6170-08cc-4e5a-8deb-40a3b927aa7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6922f1dc-b098-42f0-93b3-823dd0f19c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd7685c-88ea-450d-914f-ab9c5b2408e5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee4670d-5445-4846-ba92-0faa2b10d42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4152ca2a-e60a-480f-9e5b-f98fba3cd505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2d8ef0-af08-44cd-b138-6f45ef0110cd",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99321a85-a443-4077-b22b-c6c30dd4c1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87bf7fd6-4b58-40e3-ac8c-1af13237a41b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3e3065-01ce-4b3a-b603-1d8997463dfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8e0e05-cb4a-4b4d-a14a-e4916c2df8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8de6306-5914-43e1-a768-f511c787543b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3400c1fe-f376-4cd4-a56d-ae7c4abe2177",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd90d9f-8388-402d-b1f8-046ef493d0a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39906225-4882-4aa4-8c00-eae1b3455c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d57710-635b-4e38-bbe2-e40eba340d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73fcbc48-f4ae-4c73-bc1f-4ee744152b1d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5788438-d294-4cc4-9f48-838068b74d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95dbef23-a4b6-48e3-896e-96a5fb0a2b40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb1e6b5-6d66-47bb-a7ef-c16eec9c7e0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bac0e1-c764-43a5-8f0e-7fbe69155198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbcdfef7-d2de-4a75-b58b-3f3fad928599",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee930f85-6787-4ab8-b88d-9ab0a62d1127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1c939ae-36e2-4824-b391-62960c695526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "619d2119-e44c-44d2-a12c-f81e426befde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57da6175-fe89-4dcd-beca-fd79fa31e15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ed0391-829c-45a0-8587-1564f037a68c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c7cff9-680a-470f-a667-57f0464152c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d83f9ae3-9f6b-4da8-8e62-6150a2e188df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "818741b6-b263-4fd2-bd4b-76f7cd0a6e25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215829a1-14df-45b1-b6fe-fa287afbc20e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49cb40f4-6eea-4ed6-960a-11c536ddefcb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3227bfc3-7fe6-4420-a317-9402261b0369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf4878f-b7bf-45b0-8fbe-e093277a5770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff0527f-0334-4b4f-9715-f15a122dbe39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6883d4b0-fb11-49d1-9fb2-527b38dd6530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc899f9-d5e8-480a-b493-7974df403017",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e65832e-f572-4291-a099-954639c58ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b95e35-3f58-435b-863b-df879bf2d6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91db50a-0959-44eb-a0ed-996e411aa9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723f516c-6a54-4f5d-ba89-1dd403cf7a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa758a2-0f90-4bd4-9102-93d3eb0ac14e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd29f95-9289-4847-8712-0ba856fd9e10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73afd928-db57-4eba-ad27-51cb14718483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d03238-0b0e-49f2-81bf-c28a8bc00459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4689167d-4055-4069-85d7-852a0389b4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270f8b73-2ac0-4338-a72d-c11b5219bbd9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e327f38-ee86-47f7-b712-9ece9c144b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308ef3d2-fde5-4159-8f71-dd51eb962e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ab5129f-68bb-4f33-b4cd-132d5aebbff5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa227e4f-a639-461b-95a4-087a297a26f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c8134fc-1720-4cf5-8958-d1e5f0894971",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b1367b-4889-42a8-87f7-7150945024b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a2b6314-80bc-4355-9477-ca6ce5a5a9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "054724b4-b094-452c-a68b-e136539ba54d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57206256-5aaa-4c14-8bb0-5ff58443a2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e786e01-b166-4f91-8024-1a0eda3232d9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf399c9-026c-4df5-9edb-ea97f4de4776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e101119-e8ce-4efb-a1e7-7b1031bd48f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e3060e-6989-48d1-bba7-b008f181ff0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b498671-2860-4916-8d47-b3d9ef15cb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a6b927-74cd-4844-8ae2-c21d5cf0cb71",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f5b76c-4759-4fd9-9289-890c831188d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4776759-67e3-446f-859e-dc1aa3762b96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "736c590f-c4e5-45ca-9cea-caff42ef2068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b3f7170-c708-4b47-a419-aa58c6271d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d6181e-a090-4a7d-9c87-34082d7ac4d0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4360b0d-4ea3-490d-901b-2f37d9d05fc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef40795c-3554-4dd0-9dc5-86345bd96b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7781034c-0193-4b89-b347-07301e952f51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca236bc9-df75-4323-9e9d-f2e078c0d760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba248f1f-bced-48b0-8b97-c4d5ac1550c2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e8cbe-1eab-4eb4-baa6-c0464b198676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "637f8a91-2398-4eb7-b92a-0326a146234c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa9c56d-be6a-4dc3-b8cb-37c19c3ce9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62cb2c3-80cc-488f-a7c3-5bf78d74b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8558fb-e355-43a2-b483-490d10efa2eb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083b04db-aaab-48b1-8b1f-17a90e1f66c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "628b5de6-3bd6-48db-8cf9-6ba1eef2eafb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7eb28ef-78c7-43a7-bbb5-f766724a7afc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6f5137-cd63-4ff0-9d7f-2703ffd0b546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d1c90a-d0c0-45f1-aa81-a309f4817fa7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247695ae-e6a5-4cd4-bcf1-18875a3761bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96ec8ad-bf0e-44e1-839e-d13b93a1f0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bc7b40-777f-45cc-a14e-bdea659bedb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "654d11e7-c2e6-446b-888e-3fbe747def56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ecfa5b7-10c3-4c00-bc75-3ac4eb5e2554",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9315d05-a1c5-4be3-855f-b40b1aa7cdde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26171f0f-5618-4c7a-bb72-d8cd7b324a2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "083ef276-e0a1-4c96-8138-fd5b95e3f4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e73b969a-b0fb-448d-9752-c3586d6ea602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3876ff52-bbdd-4ed5-b4c7-0124baa25131",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c920a361-5c72-4988-a46a-2432351d35d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9365bf2f-85ff-4f2d-b2f2-062f22d75360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4d8b8e-9bbb-449e-bd81-b0a3326ce1a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c7ca66d-7586-4188-9421-add1e995f34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be41b26f-5db9-4140-aee7-4c7777c1ec57",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21f686-f1e5-4dfe-87a3-2ecad18f6478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7ec154b-7fda-4d2b-9da1-89f89c11ec10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc094356-3a16-4056-bf2c-9e6cc321ee19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fbd9cc-3c4e-4a3a-be9e-0873f6204d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5c193f-2b17-4e10-9b9d-470aa6828621",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355cff01-c741-4cb0-be97-79101a3059d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d98410-07a5-4f52-8e60-6029f05ac45f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531f4cb0-bade-4bdf-8e42-819d81a9158c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8a0bc8d-da5c-45b4-b008-fbb8bcb81969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5de39a81-fd3d-4c4d-8c6b-3cf06f2c7fa0",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637c3b53-56bb-4be5-9360-74fae42f4a0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c046d55a-5b32-47b0-8b66-d97e46264430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da47e08b-03ac-43e6-90e6-ccc26c6a7f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8408a780-d08b-46f4-a6e5-9337e17f59af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6affeb8-f671-4a3e-be38-f2c220e6f0a2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88427dab-4345-4d9a-b338-9ae5ce8d8c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2b2b5d-9f82-45f8-a1d7-f971f1ae7043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac80971f-fe9b-466a-b8f2-111323d2631f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe4e377f-fe4b-466b-804e-65a49754e2a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfe01b9-01ae-4120-80f1-8404e18d2a81",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e7770f-ed57-443d-81f0-bdee1de261ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c20d3997-265f-4f8a-9f55-3726996511ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d71d7d-388d-4873-a3af-a40a47ccefb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca2bcab-f141-43d1-ae23-7a795a682133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf2e128-3135-4c6e-a210-d6d3ab58b5e0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a24ec56f-7f5f-4115-a19e-a1643ac1ffe3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "accb87f6-16f6-4b13-8199-1548d7374c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e51d3b-418f-4c68-86a6-2de6f60abac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5edea194-cee3-4be4-96fd-a73fb92d713e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eb27ae-5e7a-45bc-8fbb-b59b0332beb8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0011d5ba-0375-482f-a48c-da9a8fcb7f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "416c91eb-eca0-4194-a791-c180693c01c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba939209-00c2-439e-a00b-1d0de5f636fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff8ad89-44e6-4ace-aee5-da2e46a341fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418e0f8e-b386-4b5f-9fd9-bdbaf2f06f79",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c82c27-4b5b-41cd-aa63-56547fbebade",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "339f324c-18ec-462d-a8fc-72bd77486111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2956c7d6-22c4-4fb3-91bf-9bce19b1f5bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b66b8ef-6121-421b-b5da-7b4a295afe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35c0d03-a8d3-4ae8-b98e-489c75c23032",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40396230-ee61-42d4-9004-ce6b0b177d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bb78169-deb3-4ed3-86bf-abc8059b89e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e645df5e-9761-4cc9-bfc1-cd6bf092e440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72fc731-3b83-4453-b2ed-76b49c45db6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31316788-ecd0-4436-b1b0-c239120d1f10",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482f266f-4cab-467a-bf45-bb67de86c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482f8f9f-694f-45ec-a6fb-50655dd602c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50124de-7120-48a5-9511-66cffaff9076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ec3239-e339-4436-9ab7-14cd7fa98503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90210cf-aaf1-4cc1-8c0f-fa7a784e38d7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f9dd9e-c94a-4314-8c6b-349474229e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c70d7e-788b-4947-ba68-51e5fc38b80d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d17c95-aab6-4329-95e0-dfd93589ed62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e081bf4-1cc8-4c05-a02c-2761c4a376eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d144e2e-4cc2-469a-841d-e057b07d8407",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf38c03-34fe-4850-a462-374521d4f134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c4bdd2-ede5-4e22-8a59-16feadb84efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01497a8e-3106-4788-8097-0615ba043c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c96a85-f22f-4086-a194-7474c13ef717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebb7c03-3c28-4ede-b819-4c23efdadfd0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5027feeb-e650-43ce-a5dc-12854cda7c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb10feba-9c99-4ed0-99cb-dfb607c820ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a60bd57-bf30-437e-956a-9d63f91c42e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70afec65-d95e-47fa-b59c-7e8a52d95072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abcb0561-b4f3-4913-bdc7-f5a92feaef16",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f45ce99d-e45f-409f-bd36-a97b6b466785",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006351da-2b28-4b22-91fa-a4963157609b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdbc540-6dbe-4073-aba3-109eb2dede57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257e1fdc-510a-408e-8e32-66502e3e96c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1469419b-06ff-4340-95cb-d1a5511309ac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27dc89a-43b9-4757-85f2-efd732aed522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50300eda-51e5-42a4-a4f1-8edad7a81541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15f3259-8b3c-4d5f-b38c-1701127a0fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895ead34-5485-485e-84fb-9524e900f581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916cb771-8a94-48e0-87d1-482d6cc44823",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123f29a7-e51a-4c24-b181-761863e4d834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89528399-fbf8-4adc-b4e8-d987cc8ab4a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24da8d47-cbb1-4b3a-a7b2-af79c6c370e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "458b3191-6bdb-4961-80df-5ad0e2714b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850bb254-34b6-4299-b5d4-afdd4dc6f45c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c78374-ad58-4365-bf67-1ee3f4a0049f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0cb992-4227-4f26-95f7-7769758baccf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125c5331-8073-436e-8ffc-e3ec8956583a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e7af96-eca5-4e80-ac26-c88436555031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f57e4c-4a6f-4786-9447-c0563bdd9e29",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd56f3de-6264-416f-aace-bc11d9890aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d799a81-8160-435a-8ed9-0723c74fd145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d67fa2c-a3d7-45e6-92d8-9c03ac76f505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46d265a-8c92-47a0-9a7e-03f8cdd26664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b320b391-0b7e-467b-a438-343196c20c0c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923738e7-c2ee-4c95-a26f-88afed043397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499d71c2-d83d-4076-adb6-db02d1cce158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9379fe04-cca6-48f5-8d6a-37cca057d7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c83a73-ac42-436c-905b-6645749d59f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f30825c-70c8-449c-941d-a8623e8e25a6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf97cc24-e881-4137-b015-1477c5badda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "622b0ae4-a424-456f-813e-6a468c0f60c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a8a513-ffbd-4a27-b450-82689b577c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81128387-4568-4869-8e58-040a33a5e630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a102496-a969-4930-8396-12d0e5baefb3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaf8368-b026-439c-8f58-2c3d3339068c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cef2724-2613-43fd-a182-5d840e42b94d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d81b562-7651-45ad-82fd-6378233aaf21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c682e2f1-9658-44c5-88e1-277769b70b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276f0436-576c-4407-b5f2-b0dceafb70d2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98a9e45-d1b2-45d3-bfd8-c8466b151a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "413df8d8-102a-4433-b70d-f82b3fed6634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "146f7f75-ebd9-4996-b1ef-3366512a21c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89eb1ebc-c356-4793-8c9d-6d78a2d17f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e754ac25-6431-478d-801e-9d97b1928f70",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15e4f39-abba-411d-99a3-a80ca844b058",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a650e3a7-77d3-437a-a629-e0435db3dc92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1911d187-366d-45dc-bfc3-e68c3b787073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42199a27-9403-4c17-8060-0d145194cd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a8e2ba-7a60-4a9f-b456-157552bec0a0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4b0f8c-4b58-426d-b636-0322a7142339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f4bbe6e-9b30-4c05-8cc4-a94c0c82265d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4a2ab3-f056-486b-bca8-4f562388f5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aace7ff7-93d9-4130-8022-d5488e87510d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea60dc4-76b7-45af-a170-a75dd5803d25",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e3aaf36-685d-44be-848f-780b6b94b618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa35df04-02d5-46af-aa41-ba3a4944d492"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e61bd3f-1a50-48fd-b1d7-34efec284dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ef1893-f599-4938-89a9-5ebb879f95b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4553cc9a-4a7d-4cb2-86a8-537a6c995416",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a987db1-bbe9-478a-be2e-ae10015636cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8a43dfd-045e-4f7f-9dee-38d27e692ee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dadb9ee-1f46-4e45-b940-a44e24ad2217",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42c3109a-4355-4c81-a682-2cc909b395da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ce703f-6851-4d3d-9ad7-5ad03e36e08c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff0fb44-956a-4674-bae5-fa1a09741fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006108b3-4244-4640-a43b-a49eb61e7fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36df323-0e72-4102-bf8b-78045bbc0925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aa36d63-9491-46d9-b61a-d96c78c89809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7c58b7-4555-4609-a364-da2ef7e93a2d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7974324-1f2c-4820-ba4b-619743449e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d74d39-6776-419d-9c35-0fe34338434f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb486fe-7fbc-4d43-b426-b2cab5b1fc0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b7f4aa9-be3d-4bd9-82dc-65ce5b24eb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fed5370-ba66-495b-bcb1-c5fb06ee682e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30d770c-7ce9-4575-ba6b-35b39c18acb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ae5d488-8c3f-45e7-a0df-0e4cac645913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4259336-801f-49e4-9824-aedda0da98ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92bf6f16-c158-47d6-90a1-0b288294bcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba289ac-dbb8-4cae-ab6e-884848b641ff",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ab6b56-615f-4ec7-b198-8a26d7be07ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2487cb73-708e-4458-9cd1-57c1d4fa0bf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd85226d-95ed-4792-9c8b-2241b99c0fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fadcae-12bd-4905-b3b1-d41c9b41e2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66cecd1-bb36-4099-b6b5-7ea6f2d295b6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ce5bec-a039-4bc2-8714-d9509f707259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0e187e-dbf2-42d8-87d2-5507a70d41ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fd3b2c-2679-41f4-8cc2-481c4cf3271a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c5fb6b-9594-47a4-b0fb-5dabe2ce0d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15c3cb6-1e52-42df-b096-6c4afd9a08eb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0b50cf-ae73-443b-aadf-809d36710c79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc75e304-1165-47cd-90c1-c41d51ef9160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f340bdb7-2997-4818-b925-874e10e24503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62bb5b03-1677-4204-8ffa-9acab23285c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c02e603-1532-4eff-96ee-413cfbc3afb4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d883d9-15bf-457d-8103-3978fae7f8e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96c5299-9a84-4491-a730-776a2eec41e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f7c1fa-105e-40cd-8dc6-01ef1a82e588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4015b7-ea9f-476c-9c6a-bf69d78b2efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2fc4ac-999e-41e6-b83b-6210fd8f09d5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32e446f1-54a8-42f8-8469-d9f6e7e1584f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f51cac-15b7-4d7e-8180-b8895e794778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0b813-a97e-48a6-9b40-e91ea65e39c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd2b5ea-f8a9-4e5f-99aa-19c5661a7c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a066d1e-657a-4968-8575-8b5077896fd6",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2088e728-ec57-45fb-b757-d48d4b34ff4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fae13d-b226-4b0b-97e4-a19c29167aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7379aa9c-e4b5-4675-b496-341789360c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3a7a1e-dc31-47fc-8307-db775581cf44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4421b4-0101-4ff8-a5c5-303b27583ef8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7421d161-239c-4c4d-bfda-fc9a1903c1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3460c21-ccd3-47f8-be9d-7ce57d0ee422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53b54eb-4ecc-4b70-b272-4e7f1a72a8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6482c839-0d03-4039-8f7b-699337a6f55b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070dc916-3fd1-4f95-a2d7-0aa0f5ccdc3d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8658f8fa-45be-4f0c-8fa0-2fd0104511fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3efba2-2ac5-4969-a9fe-0cca307bc1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf05d97-0c67-4f1e-aa11-02e71184b3d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5259a8-2969-4ac6-9f02-b185a77c6f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abb62da-0300-4ac8-9db0-d4dec4b7e251",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5412ac-b6e5-4b37-bf30-83b9134c9ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c42d9fe-8ab4-4f1f-a32c-fdf03297aeea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8249943d-0330-42a6-935c-c90e42998a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38605fa9-3b07-4549-be1d-917cea2fe81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ded3fd2-4462-448b-9c4e-6a5c13e34a5b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5378c248-ba10-4c1c-ab68-5f7d50c7a7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d364e48f-7ce4-433d-b9f3-936525fdd79d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9acd945b-432d-4386-84f5-660e8525617b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7077c482-9503-4ed9-afcd-5117f327ca18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1047fd-2d1f-45e1-96d4-50f857c99b94",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f780a0f5-4904-43ad-b93a-70f1b5e10110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f676ad23-76c5-4fd2-81c4-df98db033853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f411a030-4029-4020-aff6-47ca26482b06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65975f39-e746-4ddd-8547-d46537fe307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aaa5eb-80b6-4d9b-818a-4237480c84b7",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af531d84-1a65-4c6b-b7bc-e114bcad1697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a9f0cda-c082-461f-95c6-badda08c5d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1f078c-0ee3-441c-bdcd-22f258c6c9b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f674ba-abcc-42e3-93ba-f53760e7f4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278a0237-0806-4f8d-bb6a-ed552aa55a0f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617134d6-90db-4c39-97d5-b5146287fa66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cb9f825-9369-44a3-84f6-51dcd28fb2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04f5141-7d06-4502-8b0a-3df32a8f2da0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3ef218-f267-495b-9e55-6323526805fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9ceada-bebe-4d91-984d-659c4ea2640c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7bc4a1-8752-42b5-9c6d-29b58cc840a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddeaff36-b669-4be1-bdce-9f0131516ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5432b35f-2b5e-4694-9d2c-0c8e32355a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ce8bc0a-f706-43f5-8573-3c5c8cca1b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9518fb11-c08b-402e-b619-9094235056b1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c57835-aa19-4a73-a7d4-9df15e069924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb65a9e8-8640-4396-8805-86e3d21c5f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405007a7-2bc2-4d83-a25f-9ea602c8ef40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001e7ab5-286a-4978-b348-122cae228677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8286f5b-00fa-4ca9-a6b2-666d095a4079",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b2e56e-1946-4385-89d7-1609c2f74d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6c8249-fe8b-4e33-b093-fbebd23604f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e298bc0-8783-444d-b5cc-e1c3c153f847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b1ed4f-4560-4736-9842-dd8b9a4a9ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf915ad-8d9f-4f19-a90e-00684a68ff79",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8d80af-81c0-4b68-92ef-948eb4089d28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa431a73-9357-4312-9011-a9762c8001e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76240a0d-f780-47d8-9a5f-be3336481c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd5a359d-67cd-405f-9ef3-04f1a0268f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a093321-6621-413b-96bc-98c0ae8c331b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bab29e-bdb8-4254-b83b-ed19c8ee8571",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4bf4e6d-3d2c-4c7f-bf14-195d162e5c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c3f025-d0fa-4e8a-baf3-721ad1be6465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc30a728-8c52-439c-a345-ef2f9cb175d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56c344a-7052-44d6-adcf-e2b26e8e493e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7f22a2-2095-4534-9dc9-9a268ba23ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e279fe3-ba6b-43d0-bdeb-cc14a7e1a3f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b738c5b-3987-4dbc-8f02-c76e15caa512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20cb7026-fa1d-4cad-9124-37c294b0bd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f7e162-207d-42c3-8c45-7a83d0c07b9d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e34f90-e7a4-454d-974c-b05886874699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5802452-f74e-415d-b286-81f5bc222991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b21f13-8c31-4ed2-b1aa-0bab24084f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aef6d95-078e-4a08-a33e-87b12c3a94b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c40039c-3720-4a31-8659-8f84ad021621",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eeb5d2f-80a1-40d7-addc-8fb556adb66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f256f4d-51e3-42c2-bd22-f53edcb0a694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9c3b07-76f5-4d4c-83f6-08631e6682a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a0e3885-e6e3-410b-b667-992a18e0abea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d5f0eb2-1f11-4368-a2f3-ea4fc655542e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0704f957-8a30-4880-a6c6-f6107bb8708d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd59f4bb-32df-4929-a81b-d07ed63ef31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2861190c-6bea-40ff-8c94-44b5caa26a07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed81d593-e6c4-4cea-ae7c-19ebe6b1a8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f2851-e341-43c8-8b7b-343b5e6bf432",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a74d280-4b55-4f71-a14e-8ab1385ebee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0c7530b-87b9-4808-a73d-ac73100e9a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b01a7bd-4277-4a0a-9c05-992976bb711a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f766c180-8713-48f2-bf3b-cefc576d9988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a482b9-1c34-4f2a-8bcd-0949c37825f2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637d6457-0e83-4325-9d4a-a4b583bafb2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05cd2651-db92-47dc-8ec5-2913792dc252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c592e2d3-0691-4e31-a9d0-7e9e423d71a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98711468-7505-4525-994d-5d84b8688ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff8818c-2f67-4c86-8b78-eb7de98b5bf7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e546aa2e-88f8-4c3f-8252-634e3f0a5aa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a69c1b4-5e26-4969-9b56-8b4d9a8e445f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d015bf-1565-4015-b393-410461742ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f345ed-2d3a-4608-a99d-8baa96dff7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c082580c-c66f-44f2-ae41-153704cb33ea",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715dfa30-4c20-435b-bad1-c9dcf00901bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7b8ac1f-f5c5-4e1d-8d9f-f4d0279d17e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd4796d-0c6c-47e0-a7ff-9ecd2c01b599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed3c5eb-b1c2-4625-b37d-7beef3daa6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca50c104-5344-4f07-9a9a-77c924bb5d3b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a080790-feb9-4864-903f-712d9d992c7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31d182ff-9ab7-434e-aa0b-03636575817a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11851d1-1066-46fb-b882-c8eb747f5758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9303f89d-237c-4019-a255-c5d1c1af3d90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf89493-0e08-4493-85b6-dc1d1863fd2b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca91e798-1e4d-4304-8761-811a978d3d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25f5d043-b343-4ac0-ac76-70f868f09646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a652591-4315-412a-948a-737452636a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1769d3f0-dae4-4f69-9cde-4567d23be090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68edf75d-05b3-4176-be01-9c98a171e0d1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3df321-db5e-4b48-8baa-29f4a8e2f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "478d21fa-475e-4a62-bb60-58857badabea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460bb047-2675-42c6-9060-1bf7aaa40687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254e0bf7-7aeb-45b3-8e27-32c5544a741e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6416108d-8d0b-44f3-95c7-b0b7646198c0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986016a3-819c-401b-80b3-8aab48915587",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "508608a3-5461-420e-a2fe-6a140368f9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7036d679-4fb9-43e7-960c-dd743f928d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c879c5f5-5193-40f1-a29c-4fedcd27cafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb29e6e9-e716-47df-a6b6-6aad8db1f377",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd0088c0-5d43-4a43-bca0-d4134b635a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e541808-4e64-441c-bdbc-20be18a04b85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f614acb5-edd5-4f5a-abfa-503b8d110df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3afcdf-ede5-47c9-8463-68cb4d32a02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13347c63-c184-4aaa-a09d-0545246eb161",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e7d59e-9332-4520-9298-777200447987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9af5ce7-8e07-4c9c-8167-101b82088b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24933ee-d6e9-4c31-954e-95ed9dabf695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c17e3b-0310-4fce-aa3e-f87a5570acb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5aebebb-5dcb-4946-bfa6-e2f6e3d6e908",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c65d0f0-6cc3-48d3-8a52-996eed491455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebc81a47-d3a7-42c7-a12d-7d33b12fa58e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd1ac1d-d9f0-4b3e-98a1-4b132cb519a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bada9f2-31c9-4585-9fc2-b04e92a8cca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd55b58-0b24-407b-935c-ac67d8be095c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7f0294-ea66-40eb-93b2-38d4d9a3c6af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3266ef0-cbdd-4b4c-8746-67ad894973c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adb41cc-bf50-410e-891a-16a11141fd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfa9940-1a3d-4f3f-af15-fc0f5d025e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6a6af2-ef3a-4b6c-ba2d-4b8656db6b11",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3677a0-3137-453d-89a1-a5c2880dfae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eca48e6-f043-4070-b2ac-bcc0e58593ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfc612e-0699-4c6f-a377-086fe71b6c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "330808de-8c26-4011-bd4e-43bf4b77cc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6fff44-6024-443d-81a4-6eca9b7a0775",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c80951-c7a7-4f1c-8fe1-e1cf78837a0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21b26247-ca8a-4aa7-8506-cbf2364b5639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b9a7b8-14b0-4f7e-932b-4526b289fba8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93440762-9c97-4b83-af89-b5489ecea617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3417bbc3-8cb8-42e8-b97e-e86cdf42d282",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86987e71-a393-492b-94b8-dd91317bb3b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f846c7e-4b66-4164-a7ef-1cfe44141174"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbeaebc-3ef7-425c-b6af-fb80c32e7ded",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9021e453-939b-4534-8e6d-2b2b880d8d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb068273-1b24-4b92-be34-5c1e0a9f544e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c7b3d9-d706-40d5-a3b3-26651e7a3970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e62e988-18a3-4511-b448-30ded39d8c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f79fc43-974e-45e0-8309-974e2e468991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942cdafa-9e3c-4f8f-9d8f-ec22d1f65d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b338f0-481e-43f5-bf28-1d9dc4273cd1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dcb38e-e087-4369-a24e-023f339d3568",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65063941-57d4-49e9-b639-9cccbff4704a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa72f7a5-e3ef-4513-9af9-7596275dd28f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd078ad-0a7d-4d5f-af39-61a907453473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5121b46f-4beb-4541-9959-7373a6800ba3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb19756-41ac-4128-9cb4-1960253e7ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66622272-ddae-4cb6-a43c-8d6220518a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dd4398-0502-4c54-b77c-7e59c358f62a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78a6c915-4e85-462b-86d7-4a034acaa296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a05d16f-05b9-4c33-8fb3-f07fdcad1136",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b526a9-ae37-4c31-bf68-e378d1c7b2c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fa5b94-b0a9-4ee9-b17e-e0278e9bf257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "296e02d9-fa33-4cf0-b320-ebe776918570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec52dff-1800-4cec-933b-22a7122a6441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4164f166-8acb-488c-b4a5-5e3b855682d1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ec56d2-92ec-4ee5-af79-051905f0e374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6cad024-aa52-4990-960b-c961f1872a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf814834-a798-41ce-b8cc-8892a6ae5c85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b783fe6-4885-4753-b96c-167a497b4234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5377f57b-1ebf-496d-8728-d6a08a586244",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df400694-72c7-43b5-af93-bb8eae13458f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a10f7e03-d607-4734-978c-f74867de629c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e50a60-19c8-4b43-b0c3-a1db7e5f6895",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4210bac-96df-47f0-9cf1-bd2806b63ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268a3bea-5fea-4df5-a594-a9b3c3a3c033",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968d8669-5ba5-4630-9ab1-83f6af1c1812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad00a7b-892a-42a9-9141-a9da65081d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fd1c7e-4aac-4cf8-8d18-0fbf2febfa42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d066339-7b0a-4f30-8b75-8ef18d8dea5b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f44cd34-cc85-4a97-bc4d-62da58999d85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "009bfcf0-9bae-4507-b74b-2019762107c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab557eb9-7f22-49a8-b075-f2f51ef8b5c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7a1f95c-412f-4c2d-b94e-69f9ffeafb44"
                    }
                  }
                ]
              },
              {
                "id": "9148781d-38be-44e5-9715-4b47e7e9f33b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "096cca26-2ab4-4772-b2d8-bd612eb92524",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc99944-f426-488a-bb6d-799bf4cb5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b6088590-7fc6-4340-aac6-8d4b37487d6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a83ab78-3753-4681-8377-3974c530b165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ee3c03c-bac4-4c8a-8f8c-c0c372872c5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32411679-376a-4479-84bb-81b572f8058f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3976b978-5e9d-453f-aa1f-577c1c9332a2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2c669fc-e6b5-4562-af51-80a16625f2cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f798f0d-1859-4af2-904e-870ef3d60aca"
                    }
                  }
                ]
              },
              {
                "id": "c8967415-9295-4780-ba5b-29dce8f81101",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "af1791df-14b2-413d-8c38-ddd688a89442",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c42e78-221c-46da-a619-4e3655a5492b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96f21c12-e37b-484c-9478-8d7547d9420c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5296da6c-9b2e-4b8d-ad5f-b99a93c51433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1905cca-b120-4b49-8868-04a529640ced"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9b0a6b59-c49b-48ca-bf6b-ac145c36e763",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1c31d9fa-d0a7-479d-b975-e88a83a4e988",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7895c344-9246-4d74-a3d1-59aae8bfca92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b92bf05b-3730-452c-8f24-37f81b34c3c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96902970-3ca4-40ce-8d49-23f20a147a80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "980708d0-d925-4b3f-9ce8-902cc1673600"
                    }
                  }
                ]
              },
              {
                "id": "5b0f8c50-6212-428b-a5e3-d215835b5581",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da7d3c5c-35b4-49a1-a149-52cd13bafe36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0747c92f-6d7f-40e0-8dce-19d9233f6920"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "021c7bdd-74ae-46ac-99d9-bd77f90bf3df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc02eb03-9ef2-428f-a8d7-bceb9a2913aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9bd4daae-5e1a-4048-a37f-3581389ab891",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "acd18fa7-2b72-4100-b21f-85da91b55e5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8e7a80e-937a-4c9e-a742-239642694ef7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62acc7a0-da78-4f42-8286-2847b5533d61"
            }
          }
        ]
      },
      {
        "id": "0596818e-e2f5-4a8e-a997-33f0b182d162",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "503b8c1a-4efd-4177-b6ed-7d985fab6466",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b11876f5-704c-417a-b691-ede17af51e5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd060d5a-0007-4db0-896f-15ef38e9450c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e74658-e9db-4060-9cae-7329df54e937",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "edc7fd86-e440-4aa7-a443-bb15824f71b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ad83c1-9f28-4e02-90ac-830aaa7069c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b67f3a40-50e3-4bd6-ba23-8d90f25392fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "421b0d31-b457-45f3-8312-7059a6603b5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9d4eb81-f942-4c89-96ab-772f3d74b851"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cdc487a2-425e-4564-9462-9f07d3429245",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d38efb06-a75d-4a0e-a4ab-141ba47cd558"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed6a3487-25fd-4961-a81f-f386ac6c1a42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e00a9936-c219-4aa2-a663-6772f5759181"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df696667-238c-40bd-b483-7b5b205ccdbf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0ec5a12-077c-4f93-b926-b7b030d074ec"
            }
          }
        ]
      },
      {
        "id": "ceef0cde-780b-42a9-adc8-8606e055326b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aa32d1fd-fd8c-478b-867c-276b597022b9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a502ab7f-5487-411f-8ed1-a30188b41771",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "133af2d2-0780-4a35-874f-cbf6cba9dd62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4528dcea-478e-4f2a-b946-d594292b0339",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "194c3797-3e25-46f2-a119-96d01d8c6086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ecbbba-84ec-4d6d-bed2-3de27b467fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82a0b4c4-1b83-46ef-be74-d01e8ba0bfbd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93f869c0-9ad9-4d0a-92df-de83176efc24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef30aaaa-36c1-4cbd-8ede-b78c45e8ee0b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d8d8a39-8ad5-4c77-b03d-3f5a4d244494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "288d6a7d-c571-410d-b033-8dd50254c11b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c0f306d4-7e10-4e3a-9897-734034c44119",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e196aa29-0884-4be7-950c-a6e5e701c4bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c2f6080-adf1-4e2c-8845-f18437d70e70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2988e28-e6f7-465a-94e1-63df47a3ef82"
            }
          }
        ]
      },
      {
        "id": "578cebc6-78f8-41fd-9d7b-b464e3e22a5e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "32743f0a-7a45-41f7-bc2f-ab499c067743",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6a79501-4364-4545-a45d-83aef06f7b67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5d98ea3-9272-4a73-949e-013c5e3c0d1c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b923a8-2c56-46ec-8ec8-874691566b83",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cd368db-c2b0-4371-8418-84e8fbe1a1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f70ece-3ed9-49bc-ac92-6e27e6b49c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ea2861d-c02f-4d8d-aea5-a9047706eeac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25ac173c-7f91-45a6-83a7-c2cb806d2509",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65fbed89-226a-43a5-877b-97ce37d24e4b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae0a238e-0c05-41fd-84f9-dc3c0c4aa888",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "467bccd4-2830-4456-b736-4a953c3e0aa5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "076614c7-65d7-4f6f-a260-dc44c5c432f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fadcbc00-bc2b-4bc7-9ae5-8a6215e459a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "112291b5-8dc0-4f81-a58c-9f9e3e2cc7c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce844135-3dbc-4dd0-84fd-913e6a786b4d"
            }
          }
        ]
      },
      {
        "id": "5808c8c8-48ce-4c94-afac-b6e5cc6840ee",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7746e9cc-2d1f-4326-b8be-f91fba0bec5b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b471416-6a92-4ef8-aa96-e7e104e30f8b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "75bb3144-d693-4398-92d4-939a7bd93677",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6212f52-26bf-4129-a93b-3f9591bbb833",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad89e880-9492-4fdd-bd50-2816eafdeb8a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.42460317460315,
      "responseMin": 11,
      "responseMax": 987,
      "responseSd": 96.42761014283408,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719880718216,
      "completed": 1719880743827
    },
    "executions": [
      {
        "id": "794141a5-0998-4502-b419-698ee7d88757",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "25bf7023-9c35-4a2d-b4ca-8f8ea16acf49",
          "httpRequestId": "c5e58bf2-54cf-406c-b6d9-3311a8f06cf3"
        },
        "item": {
          "id": "794141a5-0998-4502-b419-698ee7d88757",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4930ea75-266f-4b68-b466-91ed522b3edf",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "a28e54e2-bec6-46fb-bdae-e00443cd913d",
        "cursor": {
          "ref": "d2eed1e8-2ff2-43ba-8fab-aa18b43df57b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b7ee9ab6-3630-4ee0-8404-0bdd56b0f34c"
        },
        "item": {
          "id": "a28e54e2-bec6-46fb-bdae-e00443cd913d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "ff1fa5e7-b3be-41aa-95ab-6b5dddcc2386",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "50438a70-a2d2-49de-95f4-caadcc80c77c",
        "cursor": {
          "ref": "b935515a-6def-4e32-902a-867b108aabae",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d36e904-32c7-447c-adf6-42f7a6df5e4b"
        },
        "item": {
          "id": "50438a70-a2d2-49de-95f4-caadcc80c77c",
          "name": "did_json"
        },
        "response": {
          "id": "a3018eaf-b0d8-429a-b420-52c22fb5995b",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca406ff-3758-41dc-9dc7-e4b23bb81edc",
        "cursor": {
          "ref": "65df89a5-1f44-4937-8f74-5c94c72b09cc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "125074dd-cadb-476f-a6e5-4059cafb685a"
        },
        "item": {
          "id": "3ca406ff-3758-41dc-9dc7-e4b23bb81edc",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f5139d8-92f0-4122-9770-bdb417ed258d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca406ff-3758-41dc-9dc7-e4b23bb81edc",
        "cursor": {
          "ref": "65df89a5-1f44-4937-8f74-5c94c72b09cc",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "125074dd-cadb-476f-a6e5-4059cafb685a"
        },
        "item": {
          "id": "3ca406ff-3758-41dc-9dc7-e4b23bb81edc",
          "name": "did:invalid"
        },
        "response": {
          "id": "7f5139d8-92f0-4122-9770-bdb417ed258d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c61c11-4185-492f-b8a0-11286d3be128",
        "cursor": {
          "ref": "fd56f337-f856-4220-922b-d1bd22d5b64e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "299e8442-8303-4460-aa82-aca1be526d7c"
        },
        "item": {
          "id": "d5c61c11-4185-492f-b8a0-11286d3be128",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7914dbf8-38d6-4d79-a561-76947e995c1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 313,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74294b6f-2d1c-42cd-8e02-963432385f78",
        "cursor": {
          "ref": "28267339-4b15-4db3-9748-5301c8262fb8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "27fbc563-d0be-40a5-8912-0fcb07362b3d"
        },
        "item": {
          "id": "74294b6f-2d1c-42cd-8e02-963432385f78",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "1ae8842a-a935-4d80-a48c-697eb003b72a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5710c08-8145-44cb-9c16-212951d04fac",
        "cursor": {
          "ref": "4e4b0b13-18a1-47ea-930e-832e0998bf45",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "89b49426-7310-43ed-a6bf-e4e57fde759b"
        },
        "item": {
          "id": "d5710c08-8145-44cb-9c16-212951d04fac",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "96d5d35b-5ad3-4a49-966e-6d4624601c2d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b9f189b-f94e-4aba-a1a3-4fa580366339",
        "cursor": {
          "ref": "3c746844-f312-4d3a-aefb-bcab1b207e8a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f35e69e-e0c1-4640-b867-4b44b4360f6c"
        },
        "item": {
          "id": "1b9f189b-f94e-4aba-a1a3-4fa580366339",
          "name": "identifiers"
        },
        "response": {
          "id": "4b9726de-6628-43d9-8824-05540f2ff631",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "956c84d4-8125-460d-8f6b-ed0f38728281",
        "cursor": {
          "ref": "9c529712-5077-4cf7-8835-dd909ad20691",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b1d3f32b-f29c-4f89-9e6c-186084912a25"
        },
        "item": {
          "id": "956c84d4-8125-460d-8f6b-ed0f38728281",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7a299c89-a74f-4284-b566-929492f4b93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4f8b48-2239-4db6-b5e0-c389e89794b9",
        "cursor": {
          "ref": "d4284ce2-d382-4107-bb06-41168939326d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4575a8b9-7ca6-42e7-bb71-fc931abf7a9a"
        },
        "item": {
          "id": "ef4f8b48-2239-4db6-b5e0-c389e89794b9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5b07ef8b-4f61-4113-9b2b-733b4ddbe62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1bab47a-3ffd-4721-a193-2efac4f6a24a",
        "cursor": {
          "ref": "693d4fd0-34d7-4190-9f8c-821ff4d053ba",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "791f439a-647d-4850-a7b5-c73a1f526d97"
        },
        "item": {
          "id": "c1bab47a-3ffd-4721-a193-2efac4f6a24a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ccf1811f-b29a-4a5a-af63-cf3c3c97df05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a91ed6a-5b87-4793-8e38-30912e925865",
        "cursor": {
          "ref": "3effb220-0e0a-42db-bc61-9972b633ee77",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "2b5c3171-3975-4587-ad1a-3ed65618277d"
        },
        "item": {
          "id": "9a91ed6a-5b87-4793-8e38-30912e925865",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "79883c99-ec7f-4d91-8d6c-22daca6d78fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887ffc0f-6418-4293-a99c-7c3a77b40cad",
        "cursor": {
          "ref": "20748b88-1ed0-43b4-a7a6-9bfdf726f1f9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8cd59585-1e25-4e2c-b6ec-2798aae425a9"
        },
        "item": {
          "id": "887ffc0f-6418-4293-a99c-7c3a77b40cad",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "920a7cc2-8a96-4853-affa-7ae30536c4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9999f365-0b61-4c39-bb01-97879af98be1",
        "cursor": {
          "ref": "f064332a-0f6a-47ca-8722-bcb42b6f6c70",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bf9fdb9d-a101-4dea-9e16-90d5dbe07ede"
        },
        "item": {
          "id": "9999f365-0b61-4c39-bb01-97879af98be1",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "726b1782-0264-4509-b483-2100b4e4d80a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ef1052-2b22-4f92-8475-0109d1c6b0c7",
        "cursor": {
          "ref": "d64f601b-cd00-4b21-a9ae-753466470fae",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5e9b18c5-fbc1-459c-8048-0c32075d8c65"
        },
        "item": {
          "id": "f0ef1052-2b22-4f92-8475-0109d1c6b0c7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a5997cd1-fa51-4223-af5c-c197934ae67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9d7e13-39af-4138-9e05-5e75d3b3cd3f",
        "cursor": {
          "ref": "7d901cd4-fc18-4e30-a05a-09fe1143a5b2",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "82ba89ce-de37-4a3b-a8bf-9537f35f28e9"
        },
        "item": {
          "id": "ee9d7e13-39af-4138-9e05-5e75d3b3cd3f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b9b11eec-34d6-4775-863d-f14f9a6ef093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf3f98f-3f68-4456-a524-7e9731240edf",
        "cursor": {
          "ref": "f233c732-39af-4758-b258-311b5ea5588f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a13afa7-7da9-458e-aa6e-ee45c74283c8"
        },
        "item": {
          "id": "6bf3f98f-3f68-4456-a524-7e9731240edf",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ca7f0276-6912-4cec-a10a-9aff675c2164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f526c6-98cf-426c-91d8-bb30848d4ab3",
        "cursor": {
          "ref": "c0b1abf9-d16a-4a3e-8596-a35103074874",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "34b73d07-cf6c-4941-bd88-6f0627217ac0"
        },
        "item": {
          "id": "d4f526c6-98cf-426c-91d8-bb30848d4ab3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1d962426-66d8-46fc-86bf-21bbd49c8a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e0552a-ddb1-4068-b492-1bb4c68413be",
        "cursor": {
          "ref": "9f51a3ec-a7cf-47e9-930d-f98970c250f1",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cf7e29cf-462f-400a-b258-519505c0977b"
        },
        "item": {
          "id": "23e0552a-ddb1-4068-b492-1bb4c68413be",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "42c104a2-80e9-4ca3-9b84-26bd4010680b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62204370-276b-4873-8b89-503803476f23",
        "cursor": {
          "ref": "a61e2f91-1b1e-4321-b515-88c710435bc6",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e07f85ca-dfea-4631-867a-09663bf5fc12"
        },
        "item": {
          "id": "62204370-276b-4873-8b89-503803476f23",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c610936a-2af4-4377-9e16-fd382525ad25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db24b46c-d6d4-4b85-8302-749a5e04c944",
        "cursor": {
          "ref": "960e14e0-13a8-4193-87cc-699db009eca8",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7bc76040-9463-45e9-b1f4-e32ed47fb79e"
        },
        "item": {
          "id": "db24b46c-d6d4-4b85-8302-749a5e04c944",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c9593709-e79d-4371-99a2-8ba8358f1060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066016d5-6bab-4f01-80b9-45fea8b3c3a4",
        "cursor": {
          "ref": "835c6702-d0b8-4434-a8c3-fa41a3d4893c",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "85fc89e3-52b7-4484-a151-95900b8f1e9b"
        },
        "item": {
          "id": "066016d5-6bab-4f01-80b9-45fea8b3c3a4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "103990aa-fe9f-492d-9093-25c450708492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb79cfd9-eaf5-430b-9380-d4633420b43b",
        "cursor": {
          "ref": "693e8dcd-7f6e-424b-ab30-18210f57225e",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "67955aff-2fa9-47d2-9cde-f8204667b667"
        },
        "item": {
          "id": "bb79cfd9-eaf5-430b-9380-d4633420b43b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c180bbd2-1a5b-4db5-bde1-c521c372e0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df17fe86-87fc-424c-8119-96bbbc8a6c05",
        "cursor": {
          "ref": "f1b01c59-5c54-46ad-9b99-e1b17a3698a1",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c8b7e1c9-f87a-4221-a228-fbe866fe1c5f"
        },
        "item": {
          "id": "df17fe86-87fc-424c-8119-96bbbc8a6c05",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "88073414-afbf-4ec1-b8df-112ff25a4da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a1c352-bd6b-4364-a07d-1e2d515942d4",
        "cursor": {
          "ref": "ef00490d-8c2c-41e6-9ddf-b77bbde81ddd",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "45fa2f02-358a-4402-ae0f-514bf1b49e1a"
        },
        "item": {
          "id": "e4a1c352-bd6b-4364-a07d-1e2d515942d4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4c50cc09-3a6f-43e0-bff8-4952ff9f69e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de82f76-3293-4698-a601-5ca21c72e2aa",
        "cursor": {
          "ref": "19c86154-3f5d-4f92-8c87-450c5bd7a8af",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4d1c9724-1fe3-49b3-9e33-de9f7b702127"
        },
        "item": {
          "id": "9de82f76-3293-4698-a601-5ca21c72e2aa",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8f72fc52-5e47-444d-8768-6bff3315b20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee5b6f-a82c-44fa-8080-0c1aa1940256",
        "cursor": {
          "ref": "5a6e6d9f-7c8b-4537-8978-8c3d47a57a31",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "aecc5347-3718-46b4-9b20-5daba7a44204"
        },
        "item": {
          "id": "f8ee5b6f-a82c-44fa-8080-0c1aa1940256",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c9082253-e4ba-4e83-a0e1-a18b22cc07ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6428fd-91ff-4c07-a527-757410d310da",
        "cursor": {
          "ref": "6b8ca651-cab3-42c1-a8a0-8fd336763217",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "af6ceff2-20ac-43f9-b974-8e53121d8e43"
        },
        "item": {
          "id": "0b6428fd-91ff-4c07-a527-757410d310da",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b4bb3f72-2117-43c3-bf56-fb795f0174dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7364a07-7b8d-4024-b717-f596382c0187",
        "cursor": {
          "ref": "b8b8b257-8e87-4236-bb18-274bbe9d7e88",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e07c78e5-d0d6-4587-852f-c74f51ea7cd1"
        },
        "item": {
          "id": "a7364a07-7b8d-4024-b717-f596382c0187",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ca03b659-6736-48ca-8fde-b0785b0499a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08bf7a3-c105-44d0-9d37-ffa6602866c2",
        "cursor": {
          "ref": "ebe89c11-369e-4c15-a11a-7a0bc742c7b6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c5939550-2756-4742-890e-db9482c2b8cf"
        },
        "item": {
          "id": "e08bf7a3-c105-44d0-9d37-ffa6602866c2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "732610cc-5424-4c1a-a4d2-240962405e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed54b7d9-f4f6-4946-a1c0-20ff4030f2ce",
        "cursor": {
          "ref": "342360e3-9a05-4abf-96c3-e970bf7cc82a",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "760776b3-40bd-4fc4-9fe5-3a9c5838682b"
        },
        "item": {
          "id": "ed54b7d9-f4f6-4946-a1c0-20ff4030f2ce",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "988df1d6-1095-4a9d-b4ed-73aef62e1b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbee5d9-6de9-4dfe-a706-6fb9014993ab",
        "cursor": {
          "ref": "11065586-d9b6-447e-a301-29bf95f723ca",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9be7294a-792b-497d-a19e-3c32492924e7"
        },
        "item": {
          "id": "1fbee5d9-6de9-4dfe-a706-6fb9014993ab",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1ffb69f6-aacd-4062-af87-de4e1847384a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fcd8be1-f58f-4717-9b09-cf296f421339",
        "cursor": {
          "ref": "ad3b9d8e-44d9-42e4-8ef3-cbb0e5d3adc4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cb0c47a4-42d6-463b-8523-dc54e7e7d72b"
        },
        "item": {
          "id": "2fcd8be1-f58f-4717-9b09-cf296f421339",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8d616f72-d18e-46d8-bf49-bd7b824cfd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a1acbd-3f53-4b1b-9891-413392b84803",
        "cursor": {
          "ref": "8e38761c-b058-4e93-acc4-2eecb3b5df68",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "66ec134f-5629-48e6-b61e-8c5be589386a"
        },
        "item": {
          "id": "b5a1acbd-3f53-4b1b-9891-413392b84803",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f24a69f2-1992-498d-b4ac-3334050ba8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d0ce4b-b389-4c82-862b-410622c99f09",
        "cursor": {
          "ref": "ecacc4f0-2605-46e4-a816-f9a3e84a4f0a",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1c083c07-d3e1-4329-85c4-1e58e54db1a5"
        },
        "item": {
          "id": "01d0ce4b-b389-4c82-862b-410622c99f09",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a2d1f328-32dc-4b2b-bb05-6fe60bd21746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ba723b-f0af-4748-b1ad-5038f7921a16",
        "cursor": {
          "ref": "e24644ed-de70-4b2e-acd5-d48d88ed254d",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f33a5183-bca4-45df-b5ce-207689f292fc"
        },
        "item": {
          "id": "83ba723b-f0af-4748-b1ad-5038f7921a16",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7543228e-c2b5-4260-9e2c-57a71ef99866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a939e73-135b-47c4-840b-117d7a166ec2",
        "cursor": {
          "ref": "32603fa3-b265-4a6c-8bf3-7ba2bfe16969",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66f3ae53-bb1d-4c0d-997f-22e888d12923"
        },
        "item": {
          "id": "9a939e73-135b-47c4-840b-117d7a166ec2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "41c95e6e-b3ee-4508-87fc-b3ab62b29327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e846fa06-9059-4204-9349-31e5d07cda41",
        "cursor": {
          "ref": "09d3d62b-8d2f-4eb8-b1df-3bfe328fb240",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4f59f17d-e98a-473a-bebf-8a797c95ee0a"
        },
        "item": {
          "id": "e846fa06-9059-4204-9349-31e5d07cda41",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b3c7f651-f4f3-4809-bb15-3462cc28b5d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc9c2a10-bafd-4114-879b-a7a0e9388a94",
        "cursor": {
          "ref": "98d007ef-7208-45ed-b16b-9b6be90bd77c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2e1347ad-3cda-473b-8607-0f6b198e23bf"
        },
        "item": {
          "id": "fc9c2a10-bafd-4114-879b-a7a0e9388a94",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "95ea9592-8195-4876-a178-3c7d7bd6df0b",
          "status": "Created",
          "code": 201,
          "responseTime": 987,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6890b9f7-0482-46c5-93ec-d5970e403ecf",
        "cursor": {
          "ref": "38b2ca2b-f81a-4187-8849-00e0c2297cb1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e9cfb020-8395-44da-b10d-eb9236d13855"
        },
        "item": {
          "id": "6890b9f7-0482-46c5-93ec-d5970e403ecf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2b28246a-6100-4834-b1c4-3624a5f193bb",
          "status": "Created",
          "code": 201,
          "responseTime": 395,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2ed6898d-9b0c-49c1-9e10-d10377224680",
        "cursor": {
          "ref": "5dfae443-b2b6-4b26-a1c8-a19064081632",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d86b2b0-4c1c-4d50-95bc-375ea3e2fba2"
        },
        "item": {
          "id": "2ed6898d-9b0c-49c1-9e10-d10377224680",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "cc34c7f7-4e2a-4166-b0f4-50c94070ef5b",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a9cf62ad-3b68-40e4-9d02-9e3a4e9722d0",
        "cursor": {
          "ref": "c5c8ef6b-6f6f-44a3-900f-83727ea55556",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "923f5ba8-0387-4bbe-9f49-38ea9dd2beb9"
        },
        "item": {
          "id": "a9cf62ad-3b68-40e4-9d02-9e3a4e9722d0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "85375761-25ca-4bf3-b5d7-e09b9da2028c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f8f740-a664-49c5-8b35-f2b6b2e86a5f",
        "cursor": {
          "ref": "6a56cb04-cb42-44ab-b392-c395f586ba2a",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fd030bc0-c582-48dc-95b8-17c1d2430236"
        },
        "item": {
          "id": "77f8f740-a664-49c5-8b35-f2b6b2e86a5f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4a6b5853-ab58-4340-8c90-40433b64ec4d",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bd9f3f71-e0fb-4eed-9799-75ab2e4f9b1f",
        "cursor": {
          "ref": "7eed5482-797a-4e82-aeaf-8e6ee585a7f6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "38e36601-8b8a-4ad2-8cc7-ad21d4f2963a"
        },
        "item": {
          "id": "bd9f3f71-e0fb-4eed-9799-75ab2e4f9b1f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "2570c1a9-90c2-434d-badd-43a10bb036eb",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "5fde38b9-157d-4077-b7bb-49c31b31dbb2",
        "cursor": {
          "ref": "5c5e9445-05b5-4182-8eef-3ed8b9105154",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "78e4de10-9e4a-4964-908c-3c731afdd224"
        },
        "item": {
          "id": "5fde38b9-157d-4077-b7bb-49c31b31dbb2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5d6efe0d-fb84-4df5-939b-9f6501cd408e",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cad7f812-d3d9-4149-84f5-ba7b5e85e145",
        "cursor": {
          "ref": "6c567c2d-36bb-4095-b1ab-87968d3598af",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c07a7d7b-2212-4a36-8aec-8e6220a3974a"
        },
        "item": {
          "id": "cad7f812-d3d9-4149-84f5-ba7b5e85e145",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "52bc911e-996d-43fa-8356-e407f8939dfd",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c2969d75-058a-4a28-b41f-082c76612303",
        "cursor": {
          "ref": "6d13fc7e-a2bb-4f1e-a669-bc28e3a84e46",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8297546f-20c9-4ec0-a902-ea32158832b7"
        },
        "item": {
          "id": "c2969d75-058a-4a28-b41f-082c76612303",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a27c4253-fe73-42b4-9d04-7c45f8a8dd00",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1a3159c6-c96c-4ac5-b927-066145fe8799",
        "cursor": {
          "ref": "64dc4cfe-8541-41bd-bf72-321419a7f870",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ae1a1fbd-fb5c-4cef-a532-21dcd085b05f"
        },
        "item": {
          "id": "1a3159c6-c96c-4ac5-b927-066145fe8799",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8e5527b2-01a0-4e47-8d97-fb059fcc8b9a",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ce66ef21-0c4f-40d9-a1c0-7fd67efe5dbc",
        "cursor": {
          "ref": "63a11c35-63e1-476a-b202-d5ccf22452c5",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "fae0e735-be88-4fa5-b236-38e7b27228b4"
        },
        "item": {
          "id": "ce66ef21-0c4f-40d9-a1c0-7fd67efe5dbc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a42f75a1-3b90-4bad-b796-347b635828cc",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a37f14a0-7151-4ee5-8f31-9257db2e61eb",
        "cursor": {
          "ref": "1a6af1fc-4602-43db-9a3b-144060771f65",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5e120d5c-6353-4db3-8c49-79ebbe110238"
        },
        "item": {
          "id": "a37f14a0-7151-4ee5-8f31-9257db2e61eb",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "104f5d99-60d3-42ad-af67-a213d977a1dd",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2255dc27-8c0a-4270-9bf0-c6ee3b14d52d",
        "cursor": {
          "ref": "9146476f-d4e7-4921-9aca-4e9353194b47",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e8dab7a3-1ffb-48f1-92c8-6ae7774e7cfd"
        },
        "item": {
          "id": "2255dc27-8c0a-4270-9bf0-c6ee3b14d52d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "614c7e94-d00b-4ba1-a730-078ffe9503fe",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d1d02b8c-9740-49ca-a9d7-65b311ff3af0",
        "cursor": {
          "ref": "6abec1fe-dd38-428c-b9a6-d6749323377a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5347be1d-65b0-44ab-85c5-ba7e8eaa4c26"
        },
        "item": {
          "id": "d1d02b8c-9740-49ca-a9d7-65b311ff3af0",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7a8253f8-e1f0-49d6-aa01-bfbfdc6abb7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b0226e-2d73-4ad9-be47-d61a31d5a214",
        "cursor": {
          "ref": "89c4fef5-3fae-41e5-97c9-35f2c585e9a1",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "144d76f1-580b-40d3-9954-47cf7c4805e1"
        },
        "item": {
          "id": "95b0226e-2d73-4ad9-be47-d61a31d5a214",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fee79677-7cee-47a4-bb57-9462b524619c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74354b94-f07a-474e-a2f2-841c1d0c70a4",
        "cursor": {
          "ref": "5918bb97-22e7-4f26-89cd-0b056e4535ad",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5e53f874-2196-4120-a0e3-b171af4d2fa6"
        },
        "item": {
          "id": "74354b94-f07a-474e-a2f2-841c1d0c70a4",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d7e25e23-6942-4595-9c85-6bfed7890490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee3165e-f52e-4b20-aaf2-89a707b54fac",
        "cursor": {
          "ref": "12136098-637b-43a1-891b-4965a6e752ff",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "65a6d336-b3b3-4674-b160-0ddd5749aa07"
        },
        "item": {
          "id": "bee3165e-f52e-4b20-aaf2-89a707b54fac",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9493a519-86cb-4aeb-89b7-671fc8a80e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc999ee-5cfe-4b1c-a401-cda517276c0c",
        "cursor": {
          "ref": "81e8a31c-65cb-4602-a8f1-520fefe70b1d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "026a3b52-c06e-4755-a270-a6dfbd59f251"
        },
        "item": {
          "id": "9bc999ee-5cfe-4b1c-a401-cda517276c0c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "34de6d94-a872-479a-90b7-37544e82eaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97757111-a279-459a-94f9-055a9118b88c",
        "cursor": {
          "ref": "b5d2dc82-b404-4f05-8f84-4c92d169bd2e",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "444478c0-d54d-45ca-ba6c-070f8eb57b62"
        },
        "item": {
          "id": "97757111-a279-459a-94f9-055a9118b88c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "78b8510d-d467-4e8f-932b-d7b38845c865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc111ff-0a5f-4419-8b4c-0ad201a8bbfb",
        "cursor": {
          "ref": "9b67961d-de95-4aba-9ffb-bd24f2fafef6",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f6c1542b-c4c0-4d21-9cba-f53eb3d71223"
        },
        "item": {
          "id": "2dc111ff-0a5f-4419-8b4c-0ad201a8bbfb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f39d80e5-1dc9-448b-acd7-829dc315cddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e569fb-2308-44f2-bc94-1ca543722d24",
        "cursor": {
          "ref": "31dab76d-0f05-4331-84f1-e4b4d6cb8044",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "890a30ad-1141-4943-aeb5-bb2c8a87d487"
        },
        "item": {
          "id": "27e569fb-2308-44f2-bc94-1ca543722d24",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "11db746f-d4d9-4ae9-9fcf-431b864b8b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ba7b8a-866a-4c1f-b8f3-3bfeaeb3d74d",
        "cursor": {
          "ref": "347a6744-5d23-4087-b034-b55443e1c000",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96d78ecf-8ac4-4372-a42f-161fb993f3c3"
        },
        "item": {
          "id": "f3ba7b8a-866a-4c1f-b8f3-3bfeaeb3d74d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0ed757fe-d4fc-46ee-a389-141d2b198092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6a3259-076e-40c3-bc98-e43062749934",
        "cursor": {
          "ref": "7939670d-3672-40f9-bdd5-a0fd6675a44a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b61e8162-657b-4ead-af7f-c581e87f8457"
        },
        "item": {
          "id": "4a6a3259-076e-40c3-bc98-e43062749934",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "aef7dc94-f9ae-4138-96bb-e3d527f47f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bda058-e931-44fb-af39-3155d83451b6",
        "cursor": {
          "ref": "c9520ff7-35d8-41b4-ae90-e5e79b0b34c1",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6ef8d46f-3d60-4604-99b9-2bc4580d306a"
        },
        "item": {
          "id": "37bda058-e931-44fb-af39-3155d83451b6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8e63c140-fcd3-4a36-a933-616fb9acdde9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a26bce7-a2ad-4d3d-bfd9-bd3a00efe305",
        "cursor": {
          "ref": "0608ddbd-48df-4902-9c7e-9965b0d70314",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9a3cb786-1123-4966-a7f3-57f36ef759b2"
        },
        "item": {
          "id": "2a26bce7-a2ad-4d3d-bfd9-bd3a00efe305",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44862a2c-38bf-4779-b00f-2000dc67d13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d00a04-6f9f-4469-9756-1b26311834a2",
        "cursor": {
          "ref": "8c84d54d-11d6-4d7d-9613-904086724645",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "01d4853c-d51c-4c5a-a358-0a42a4913bc8"
        },
        "item": {
          "id": "c1d00a04-6f9f-4469-9756-1b26311834a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d49a6489-9c59-4e44-8f52-ea7a7494f04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9d4dd6-f497-44a1-a08f-a45163612b52",
        "cursor": {
          "ref": "64a4137a-806a-48ba-94f8-2bfa7db0caf1",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ada169e1-65fd-4b6f-b89c-8c73fbb1a07e"
        },
        "item": {
          "id": "3b9d4dd6-f497-44a1-a08f-a45163612b52",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7fea0b24-b787-40a0-b87c-79852526050c",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "548b0c00-7b14-4c1e-a306-a9902c30dcc6",
        "cursor": {
          "ref": "f677ef1a-f91e-43d1-8a1b-2923b381ccb0",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0c9609d1-6a40-4ca2-bbe8-fc5a802c371f"
        },
        "item": {
          "id": "548b0c00-7b14-4c1e-a306-a9902c30dcc6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "031dc149-a9dd-48fd-9ed1-cacf81bbaf02",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e9f4aecf-de19-44fd-a3d7-e8dc0ff686ed",
        "cursor": {
          "ref": "a01131c2-e2ed-4371-856e-7f893556e2a6",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "576768c1-64c8-47d6-8614-87dbeea9c1f1"
        },
        "item": {
          "id": "e9f4aecf-de19-44fd-a3d7-e8dc0ff686ed",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "cecd781c-c6a9-4a00-80e1-4a13d3dd6963",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b5823b8c-3ff1-430c-a6a9-a7ac96373127",
        "cursor": {
          "ref": "29e91214-b272-46bd-ae9d-ba6b4a766945",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "5c8f0c00-1ddd-4f91-bbe6-e35cbf3b6766"
        },
        "item": {
          "id": "b5823b8c-3ff1-430c-a6a9-a7ac96373127",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7b5a94d9-00ad-4c33-9775-4d538b789119",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f0a138a1-cf8d-488d-8710-b8d00a6e9b50",
        "cursor": {
          "ref": "2330e4f1-7acb-443e-9100-8e27faba6f2c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a5b9592f-9bda-4b79-bdea-35e0eb8e46f6"
        },
        "item": {
          "id": "f0a138a1-cf8d-488d-8710-b8d00a6e9b50",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b5edff39-75ff-415e-bf6f-b33366e86f5d",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "07e82dc4-f514-4240-afa7-04a9f824d05c",
        "cursor": {
          "ref": "07f8385f-68eb-4d6c-81d0-50028df81328",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "87fe4443-ca6e-4dd6-884a-426d6f5214e4"
        },
        "item": {
          "id": "07e82dc4-f514-4240-afa7-04a9f824d05c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "af9e2f9f-7ab4-4107-8569-545a57b9ca15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2ca03e-8860-4f71-a006-9232d94d3541",
        "cursor": {
          "ref": "e3f3a52f-e98d-45da-84bf-57e11b972553",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "864f1139-2a3c-4f8e-abd9-0d7ad3991ed6"
        },
        "item": {
          "id": "db2ca03e-8860-4f71-a006-9232d94d3541",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f8232991-6da4-43f2-b95f-ab247e969826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e89327-c5be-4e1a-901f-74546f5e597c",
        "cursor": {
          "ref": "70b89028-9c3a-4e5b-bda5-ca88e0ddb45f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5d9c0814-50b3-4e76-96e2-c8225a8312d9"
        },
        "item": {
          "id": "36e89327-c5be-4e1a-901f-74546f5e597c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d74c25c5-c13e-458e-9709-6463cb72d5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39198c65-ad32-4efb-97ac-9dd8aaa9bbaa",
        "cursor": {
          "ref": "d61b9ce5-317a-4576-8e8c-9953844ca899",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1e4e1ac7-5e7b-489a-ba86-177aa36d03da"
        },
        "item": {
          "id": "39198c65-ad32-4efb-97ac-9dd8aaa9bbaa",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "56c7c52f-1d10-46de-812d-00e38bf37839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09d86ed-e50c-4913-a83b-58498c64944c",
        "cursor": {
          "ref": "f47de7e4-4b84-4f13-8b7d-c7d374f3790b",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "abdbbe3a-7ff5-47d3-8470-2a3033fc8501"
        },
        "item": {
          "id": "a09d86ed-e50c-4913-a83b-58498c64944c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3c20da61-56c5-43ad-a626-f91c596863cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b43b5c-ce60-4231-9a47-d4aa0dbc673c",
        "cursor": {
          "ref": "f0ec5f4d-8858-407a-a791-7f1ef4dcc7d4",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8806771d-cce9-4ed0-bb4e-00816326504b"
        },
        "item": {
          "id": "a7b43b5c-ce60-4231-9a47-d4aa0dbc673c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "962c79aa-9287-4429-9ded-e511cc4984e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a85dfbc-fe72-4b8d-b3bd-1dcabb404ff2",
        "cursor": {
          "ref": "6606d3b6-8a88-48eb-b936-c9b1849b42dd",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f0b08461-f467-430e-92cd-74f0ffc66494"
        },
        "item": {
          "id": "1a85dfbc-fe72-4b8d-b3bd-1dcabb404ff2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5652a464-fa58-456b-a535-f101cd4e085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de877d6-d892-41f4-99ba-a0a0146f17f8",
        "cursor": {
          "ref": "ed665d4b-21af-4374-86f1-f292479c9f0c",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ed37578c-23a4-44cd-a694-95b513c1f329"
        },
        "item": {
          "id": "3de877d6-d892-41f4-99ba-a0a0146f17f8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "64ccc99b-0ac9-4cd9-9415-1244d6044909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349308e7-dfdf-4660-b151-d38e2ea03878",
        "cursor": {
          "ref": "dc90705e-b09b-4af6-9d13-2e38dd81789f",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d1fd920e-9f3f-456d-8db1-eaec8ca0420b"
        },
        "item": {
          "id": "349308e7-dfdf-4660-b151-d38e2ea03878",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "44c3edb3-17bd-41c3-8970-32ccf2b129d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db549175-c7df-4753-9f9d-54ccf029578a",
        "cursor": {
          "ref": "3de0ef3c-ddf3-4721-99f5-d0dbba4dd176",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0167b223-deae-465c-9eed-c4ac620f593b"
        },
        "item": {
          "id": "db549175-c7df-4753-9f9d-54ccf029578a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54d0e438-c3b4-4b24-bc0c-32fa5191be51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a337f5-9f98-4618-a27a-59780ba32217",
        "cursor": {
          "ref": "ee1ac46c-bc89-431a-a3fc-90be9df95a5c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "44d881f1-3eb4-41bb-a368-c04587265c3c"
        },
        "item": {
          "id": "42a337f5-9f98-4618-a27a-59780ba32217",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5758edf1-9d5a-4bfa-a6e1-ce8084738a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078356ff-0d46-49cb-b18e-6e43bad38456",
        "cursor": {
          "ref": "08f4e076-1ded-4f54-b408-e604333ff1a4",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fd312ba3-6432-410e-8426-10de2a2a9f98"
        },
        "item": {
          "id": "078356ff-0d46-49cb-b18e-6e43bad38456",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "26fc8262-8b00-442b-9ddf-3705104da579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac54292f-0701-41c5-b6a7-692f3a82119d",
        "cursor": {
          "ref": "2b978d37-d72f-40b0-8dad-770a8d5bb0b1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b8b71079-8b56-401e-9a1c-7db419d51311"
        },
        "item": {
          "id": "ac54292f-0701-41c5-b6a7-692f3a82119d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4d31d404-6446-48f3-a681-ae9c4d49ee9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b5c2b6-7b21-400c-9e19-e03d35e4ec97",
        "cursor": {
          "ref": "0b76201a-ab0c-456c-b524-bc202804035b",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cab20613-6609-4205-8754-b1adc4adcd18"
        },
        "item": {
          "id": "00b5c2b6-7b21-400c-9e19-e03d35e4ec97",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b430c2da-7e75-4d30-ae0a-ac7b7d949af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa959b8d-2a4a-41a2-97de-9759f7b6ff8f",
        "cursor": {
          "ref": "7380e760-7102-42dd-bb4e-ab9253958d17",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "034bc318-4c1c-4ba9-85c1-a8669b8a3bd6"
        },
        "item": {
          "id": "aa959b8d-2a4a-41a2-97de-9759f7b6ff8f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9e3bc4ab-83b6-4478-ba68-986452c65488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5eb9966-09d1-4407-85fc-fdf6249b6815",
        "cursor": {
          "ref": "1135c98f-d7d2-42a8-8e19-15e410b9c75a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e736aeb2-7713-4a89-ac80-a3fb7e4737ff"
        },
        "item": {
          "id": "c5eb9966-09d1-4407-85fc-fdf6249b6815",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "818c0eb3-b288-4b7c-af1d-941e4337bfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fdc03c-5cab-46ab-a07a-5e32e26c5d80",
        "cursor": {
          "ref": "fa0fa69d-25fe-4da0-a610-4e6fec2f0811",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f2781fa8-57fa-45f3-8c54-a165b61c5b10"
        },
        "item": {
          "id": "c8fdc03c-5cab-46ab-a07a-5e32e26c5d80",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "41570f5c-87f1-4903-8c8c-1ea5d8dfd732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11538439-5b2e-407f-9442-10af6dc2e7b8",
        "cursor": {
          "ref": "7a4d6942-c9f6-4747-9b20-2b5aef3b25d3",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c6d75b5f-9e44-4f74-a1d4-3e6e70381184"
        },
        "item": {
          "id": "11538439-5b2e-407f-9442-10af6dc2e7b8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3004938b-f738-4aa9-b43c-428bd539e667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca76a25-0633-4f26-8f49-d852179d6c19",
        "cursor": {
          "ref": "2f9df7d1-eb82-4a85-aee5-587a36d01728",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9835437f-6320-4cb8-8490-8cd443df0c67"
        },
        "item": {
          "id": "0ca76a25-0633-4f26-8f49-d852179d6c19",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "57731f3b-46e6-4574-a727-2633dfb86ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "045e8b91-5eb1-4a37-807a-0daffac46468",
        "cursor": {
          "ref": "55e00ac1-d652-4b72-a2e9-0618446f2a9f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "134de39f-1fc9-4844-ae07-390db6f3e50e"
        },
        "item": {
          "id": "045e8b91-5eb1-4a37-807a-0daffac46468",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "18f36c47-916b-41f5-86cd-cd14551f6597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11027dd7-257d-4e1f-b41b-2fd42aa100f5",
        "cursor": {
          "ref": "1b68ba79-15de-480b-a95d-80421f0c026c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "12d383af-f722-4b1d-8e85-53f1fc9d261f"
        },
        "item": {
          "id": "11027dd7-257d-4e1f-b41b-2fd42aa100f5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1f86e155-3fd2-4f0a-8225-186747e25c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b552248-3096-4e84-82a2-65f201f0687b",
        "cursor": {
          "ref": "d7b6203b-cef2-48bd-8c9c-c56bc23e9a76",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6928894d-0036-48f7-af86-1f6dcaa29533"
        },
        "item": {
          "id": "4b552248-3096-4e84-82a2-65f201f0687b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b82709c1-3d74-4c0c-b60b-8f4f31308ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ce824a-bde2-4617-85f7-378315834d79",
        "cursor": {
          "ref": "b9a15b62-6710-4963-8a5f-7bf9ee4bdf9d",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ff4210e4-e268-4584-b1b7-f66c33ed4fd6"
        },
        "item": {
          "id": "37ce824a-bde2-4617-85f7-378315834d79",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "06fe18f7-a6d1-442b-b2f1-71bbdfc02bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f09e034-bc80-42d6-a193-3b77d31ee7ae",
        "cursor": {
          "ref": "c054df63-72e0-44d0-9aae-c8f30be22c89",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "85d06eb1-9106-4e74-bc62-12c3d863eb22"
        },
        "item": {
          "id": "4f09e034-bc80-42d6-a193-3b77d31ee7ae",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8b9f45ef-d0ce-465d-86ea-3717d574d016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5757e665-1c18-4f04-885f-dd34289d8a09",
        "cursor": {
          "ref": "d84fbbf9-2e18-4202-9fac-bd025d05bf46",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7d36973b-4d63-4ea2-8b62-424b28b6959d"
        },
        "item": {
          "id": "5757e665-1c18-4f04-885f-dd34289d8a09",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2386f0a6-7e75-454d-8487-b1986eb5cc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c07532f-3d30-481a-8953-8c9222e1c2b5",
        "cursor": {
          "ref": "2c64f48d-c28a-4e6d-a18d-0f916bcd146f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b8c0ac6c-edaf-4a68-9965-aa172e1e2f52"
        },
        "item": {
          "id": "5c07532f-3d30-481a-8953-8c9222e1c2b5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "92f58270-5215-4a0e-b125-1f21a12ebf5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bede5020-11ad-4334-b107-bf6549546bb5",
        "cursor": {
          "ref": "40d61d81-2064-4878-9d7d-175da0e0eaf2",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "36bb9452-b279-49bf-b25f-87292f864d49"
        },
        "item": {
          "id": "bede5020-11ad-4334-b107-bf6549546bb5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a2d614c7-9c0b-48bc-82ba-54ca065ec1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8398b258-4b23-4c2b-933c-8e3eac4e3dde",
        "cursor": {
          "ref": "f19c1bf3-d07a-43f0-bd57-8bf10921afe2",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1a75f600-b133-4717-8b5d-ae5a361233b7"
        },
        "item": {
          "id": "8398b258-4b23-4c2b-933c-8e3eac4e3dde",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ff5b0730-55b9-43b0-b22e-08a5a735e174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77751901-f0b2-4e72-b33c-882151f4263b",
        "cursor": {
          "ref": "520ac346-d6d4-4232-b3df-3fc10211fc42",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a85a2c0d-92b8-4947-a696-68f02d956a6b"
        },
        "item": {
          "id": "77751901-f0b2-4e72-b33c-882151f4263b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "48855383-7f20-4a9a-90d4-ca1695effa24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b9e213-47bb-4b3b-9d0d-48480ceadcdb",
        "cursor": {
          "ref": "d330272b-8ac9-4acc-a607-7765c11670b8",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cc381c09-6e46-4b78-bcc2-7684eb4e6962"
        },
        "item": {
          "id": "04b9e213-47bb-4b3b-9d0d-48480ceadcdb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4ec6e165-be33-4f9f-9df2-0b7c1547199a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc20178-7449-4970-9052-d9d5850c2d94",
        "cursor": {
          "ref": "729d51a2-b9c9-4a64-b178-96e124c96956",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "898dfeaa-95c7-4f6c-8f29-6b52137e7190"
        },
        "item": {
          "id": "6cc20178-7449-4970-9052-d9d5850c2d94",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "03819c39-4d52-4d56-a2d8-9ab58a717547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f0266f-51e3-42e9-a62f-af67f0057503",
        "cursor": {
          "ref": "611c9dfa-1cad-4445-bc53-abbb09e7517b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cbd38d45-38a6-4f13-b2b1-05b71782b7f9"
        },
        "item": {
          "id": "68f0266f-51e3-42e9-a62f-af67f0057503",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "93b6c22f-a8ad-4502-96c9-8fe3641202ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50171b1-e816-4255-975e-657887c35a06",
        "cursor": {
          "ref": "9bbe2a9e-44ff-4eaf-a909-34a97a8d7bb2",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "97310793-ebbe-4995-bbb3-ddb181d1b061"
        },
        "item": {
          "id": "a50171b1-e816-4255-975e-657887c35a06",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2dd898b2-221b-4104-961e-38eab327a47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a67cb71b-33c6-4cfe-b1a0-e3d0282095d1",
        "cursor": {
          "ref": "d64bedf5-d83f-452b-8549-753c8386f8c4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6e73e507-e375-4829-8505-432804d5d5b1"
        },
        "item": {
          "id": "a67cb71b-33c6-4cfe-b1a0-e3d0282095d1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "ccdb388f-967c-4159-a0cb-8554e3cfc101",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc670e0c-e27b-434f-ace2-a705b37ee815",
        "cursor": {
          "ref": "9ec2799d-ad4a-4cc7-9cfe-9ab2b6ef9762",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f7a3b220-229d-4b22-9020-cd39517d00a7"
        },
        "item": {
          "id": "bc670e0c-e27b-434f-ace2-a705b37ee815",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e59fc11f-2e08-4ec4-9bd2-1bd7c34e1d05",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf51e6d4-a5e2-434e-aa38-b494e09157c1",
        "cursor": {
          "ref": "03637c76-1dae-4963-9100-5948c4fccf70",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "62a6d1a1-cd18-4bcd-ae96-5deb8ad86d4a"
        },
        "item": {
          "id": "bf51e6d4-a5e2-434e-aa38-b494e09157c1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b70f39b6-f8d1-43a5-aed1-eefb2b9256c9",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "221a82d5-f860-4b45-a9f5-04093c993bdc",
        "cursor": {
          "ref": "acc3e677-0b73-409f-8453-411afc8e34ba",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6bfa2bf0-482d-4a6b-8e91-5ec61f3d5864"
        },
        "item": {
          "id": "221a82d5-f860-4b45-a9f5-04093c993bdc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3ae9bd20-d3b8-42ad-8123-ae1c84463fd7",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdebe40-559d-4f9a-bfc5-8070439fbec9",
        "cursor": {
          "ref": "af82995d-7be5-42cf-8a76-3360a0d34d3a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "6099a799-c7fc-43e8-8486-30d3e2f93770"
        },
        "item": {
          "id": "3cdebe40-559d-4f9a-bfc5-8070439fbec9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9bf0c67d-aa43-423d-8898-1a17f1dec692",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-07-02T00:38:52.746Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-07-02T00:38:52.746Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "bb670bdc-cb66-4fc2-acee-60bd025e9cbb",
        "cursor": {
          "ref": "e7155bcf-1197-49c6-9364-58d90d27e796",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "66ee2ed1-017f-4ee4-9434-e76688944356"
        },
        "item": {
          "id": "bb670bdc-cb66-4fc2-acee-60bd025e9cbb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "12a5d70c-e1e3-4244-b16b-5a1f4de86699",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d871804a-c79f-47b5-81fb-3a4a7db8bbab",
        "cursor": {
          "ref": "6a0a8095-839b-4cb6-b2b2-b2237de40a77",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2ece186d-3be5-4476-9988-13c00d0bb195"
        },
        "item": {
          "id": "d871804a-c79f-47b5-81fb-3a4a7db8bbab",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a830a138-8ddc-4471-ba56-bbfc40d365b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa26bb21-e5e6-4fac-a5c4-3cde73a174dc",
        "cursor": {
          "ref": "2aac9f96-4c3b-4775-a6ef-f3d9dd890948",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2181357b-03ae-4058-955f-83e5885c1ec8"
        },
        "item": {
          "id": "fa26bb21-e5e6-4fac-a5c4-3cde73a174dc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "09b8d78f-21f9-483b-85f7-445c341ee1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e94aa3-d674-4df9-a696-c028e7389ef6",
        "cursor": {
          "ref": "f097621e-7777-4821-b407-a660bbeca3db",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "88c82b5a-8def-4f99-a91c-ef0b6b2d5619"
        },
        "item": {
          "id": "97e94aa3-d674-4df9-a696-c028e7389ef6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4d430ed1-deb0-413d-9261-042c49635436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea5c8d20-d2e3-47f9-ace1-332266b80990",
        "cursor": {
          "ref": "882949b0-e478-4338-92b5-e59972c5d1de",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "370e9527-2c3f-47fc-afaa-6599e4ed30a8"
        },
        "item": {
          "id": "ea5c8d20-d2e3-47f9-ace1-332266b80990",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f3e46884-ea62-4a6b-8082-8d2c7dc3cf6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddc21aa-0b9e-49bc-acb4-20f871266adb",
        "cursor": {
          "ref": "eb9d3a1c-6f01-4da9-b049-f600ab529e90",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "60713cef-1dde-48a3-9cf4-622eb2609d95"
        },
        "item": {
          "id": "0ddc21aa-0b9e-49bc-acb4-20f871266adb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "61fb403c-e895-4756-99e6-4a67284595e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db14cb6-1987-48e4-8fa6-e7930c283da1",
        "cursor": {
          "ref": "bd6ab190-2e00-452f-a0f2-98e0072b4748",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7e9a1140-7c84-4728-b31c-d31c1ea4732a"
        },
        "item": {
          "id": "6db14cb6-1987-48e4-8fa6-e7930c283da1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "43257e36-2d26-4d63-8d28-c2f27f9485e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c468d824-d0d2-4dc9-98bf-b0b0f96cc62b",
        "cursor": {
          "ref": "22566bda-ed89-4753-93d3-d59a596db357",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ea8b71b4-d28a-436e-886e-68a6aa43dff1"
        },
        "item": {
          "id": "c468d824-d0d2-4dc9-98bf-b0b0f96cc62b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e52d5fb3-050e-40ce-a9c4-53ea099db7a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c2ea2f-4d54-415e-8aff-4f3809c17c04",
        "cursor": {
          "ref": "dfa00c3d-a5fc-4a99-bb4e-048fa4e19b0d",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b079c796-3837-4d1a-b38c-01432e3df655"
        },
        "item": {
          "id": "d2c2ea2f-4d54-415e-8aff-4f3809c17c04",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f2c9f5d5-430b-4dab-b411-f8f7176af9c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a475c629-d92b-486d-8778-e37969d049c6",
        "cursor": {
          "ref": "735f292a-4986-428a-8668-80977f954222",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fe8235f9-4535-414a-832e-7c6de65d14c3"
        },
        "item": {
          "id": "a475c629-d92b-486d-8778-e37969d049c6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4b43e505-b69f-4233-a1c0-3116e4c43935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec03231f-7ba6-4235-aba9-281216666f98",
        "cursor": {
          "ref": "91112c20-d959-4e17-95c4-2b6341c3de90",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d442f1a2-3101-4c3d-a49a-07cda01557d2"
        },
        "item": {
          "id": "ec03231f-7ba6-4235-aba9-281216666f98",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18c3cee7-6592-410d-87fa-f03baa1faeb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b8c8e0-ff0c-40c5-a377-d770bbd4d884",
        "cursor": {
          "ref": "8b662c75-14e5-4917-b076-ff6a9cd8b31d",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1eb53b64-986e-4839-ad80-1eda5f3f108c"
        },
        "item": {
          "id": "65b8c8e0-ff0c-40c5-a377-d770bbd4d884",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "45eae854-522f-4c34-8926-6b42000421cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b28a337-0ee8-41b1-8903-91f8e5bee515",
        "cursor": {
          "ref": "85ecc51a-4108-4fc3-a57d-1dabeee0a58e",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "0f4573e5-1406-4cda-97d9-7db97120d254"
        },
        "item": {
          "id": "8b28a337-0ee8-41b1-8903-91f8e5bee515",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d8bb0297-3698-4bca-9852-59992257afdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c6a2f7-ecf1-4fae-8e4d-c55ef92e33cd",
        "cursor": {
          "ref": "716d8885-5464-4435-af0d-23073430a6b0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "741f1898-44c2-4d4f-952b-0fc9112187e5"
        },
        "item": {
          "id": "19c6a2f7-ecf1-4fae-8e4d-c55ef92e33cd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ebaa39d-711f-4b62-bc25-27cfeeceaf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f61b9a-2097-4aa9-816f-05ab70fd3d87",
        "cursor": {
          "ref": "cad667b2-317d-449f-8cfa-aa160602ea70",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dfa2dd04-d64f-4764-bca4-d0cd815ab418"
        },
        "item": {
          "id": "31f61b9a-2097-4aa9-816f-05ab70fd3d87",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc4748d8-942e-4524-b28f-4a81909902f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3779951a-0c24-49f2-9e63-b65a27756c00",
        "cursor": {
          "ref": "4770a874-ab7d-4c8b-b0ea-5860c5c6ba6a",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9ca59837-6994-4d85-ba37-7ffdf51a1007"
        },
        "item": {
          "id": "3779951a-0c24-49f2-9e63-b65a27756c00",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "136714cd-0735-47f0-a712-b7607811d1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9363dc04-1acd-4c74-873e-f4daa77d5fd5",
        "cursor": {
          "ref": "3116a5e8-4ce5-4704-a908-4d3edb1ba1cc",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "3b35802f-1364-422a-b69e-baf64545b21a"
        },
        "item": {
          "id": "9363dc04-1acd-4c74-873e-f4daa77d5fd5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b65a4814-2c88-4bea-9a48-7c495f2ff8d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4554f6-4bb2-46e2-8698-52416b8b3599",
        "cursor": {
          "ref": "03c52b4e-703f-47f6-9b8b-b0f20d75a454",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "6f03a363-3d24-4643-9f33-1b4d275e3c36"
        },
        "item": {
          "id": "4a4554f6-4bb2-46e2-8698-52416b8b3599",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "349a16dc-a34b-4e28-8834-2c9eac168058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f774dab-eda7-483c-98c4-13eac5e5af58",
        "cursor": {
          "ref": "08977d5d-2fb9-49fb-84b2-1a3d0d952a4c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "cc3d1245-2764-4b2d-95c8-99a02959fccd"
        },
        "item": {
          "id": "7f774dab-eda7-483c-98c4-13eac5e5af58",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ff0ded2c-fe9d-40fb-a3a8-cb34b284477b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35acb4eb-7f89-4655-a333-fef867dc6c26",
        "cursor": {
          "ref": "8d9d90fc-8a80-4acf-a85d-4c0cd78938d3",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2b3aa0c6-4522-4e09-9bcf-10b826861033"
        },
        "item": {
          "id": "35acb4eb-7f89-4655-a333-fef867dc6c26",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "52f1b132-21ac-4b84-8ce7-4dd531aed4fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9955121b-70a8-4584-8240-98f77debae3b",
        "cursor": {
          "ref": "3e955060-cfc7-4c3d-bb41-73b92c04690e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bd7c728c-97de-486a-ac11-c833a77d7fb5"
        },
        "item": {
          "id": "9955121b-70a8-4584-8240-98f77debae3b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "47fe14ba-ae64-4623-b924-41ee81cff454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8ea1fb-37aa-42d2-b610-baea3aa426b4",
        "cursor": {
          "ref": "74065997-db86-4be9-917d-bebb03fb7559",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fae8bf9c-0405-450e-bc8b-59757501cb7e"
        },
        "item": {
          "id": "0f8ea1fb-37aa-42d2-b610-baea3aa426b4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "975de40b-4a44-439c-835f-657759554c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54509935-e7a8-4a34-a6e3-9208eac43bd4",
        "cursor": {
          "ref": "e9ef3431-1099-440e-8501-e48ed501715a",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b0494b84-f3ba-49ae-b6ad-52d6b4f913de"
        },
        "item": {
          "id": "54509935-e7a8-4a34-a6e3-9208eac43bd4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b92a23ff-6eea-44c2-838c-28a96f604cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21977e4e-3320-4657-9e23-ee64b08e2d81",
        "cursor": {
          "ref": "8143395f-72c9-48a3-9ae1-40af618ee64d",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "20c174f1-b2ec-4c81-b47e-2c366bdd667f"
        },
        "item": {
          "id": "21977e4e-3320-4657-9e23-ee64b08e2d81",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "028c9743-a252-4d3a-88ee-21a7aed3402c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ca72c0-1847-43c9-a8e9-9a8e967a8f50",
        "cursor": {
          "ref": "ae368b22-1dbd-4faf-b8d8-b48cf9ff1478",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2a029483-436a-4977-8ca1-1ebce22e69cc"
        },
        "item": {
          "id": "23ca72c0-1847-43c9-a8e9-9a8e967a8f50",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5222bb2a-98eb-46af-9264-8c7aec20b515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b094b81-5da9-4b86-bb5d-be18dc966616",
        "cursor": {
          "ref": "818969a3-de64-48e2-8b73-6e7b598d93bb",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "bbf4ff9f-afbf-4bc6-84d2-c6ea6f3a756f"
        },
        "item": {
          "id": "0b094b81-5da9-4b86-bb5d-be18dc966616",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4cf01140-d25e-4a09-9b13-ec762bec5c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c277f90c-22a3-4006-8931-df58ee8b6d49",
        "cursor": {
          "ref": "3e8d384c-2396-4ed6-8b3b-7e1e4ba5bd7a",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "cbff7bb2-131f-429b-b6e7-bc7147317c6e"
        },
        "item": {
          "id": "c277f90c-22a3-4006-8931-df58ee8b6d49",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "071de098-6bb1-47bd-8f04-c07d27645cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac45cb11-d2ce-4d5a-b24a-625f944e74a6",
        "cursor": {
          "ref": "a6f870e1-4111-4101-b469-84817070703f",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5fe13a16-d449-4179-b241-8246ea7981f6"
        },
        "item": {
          "id": "ac45cb11-d2ce-4d5a-b24a-625f944e74a6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8fd2272f-34b5-4f7e-90d4-34ddc64c4a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ca5c23-57da-4a38-8067-ea340a796d8f",
        "cursor": {
          "ref": "9c6a4bf1-528b-4144-ab15-aeffd63cf386",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cbf29f58-925f-482c-b0fc-5e012d710b29"
        },
        "item": {
          "id": "65ca5c23-57da-4a38-8067-ea340a796d8f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0e878cb3-86a6-4ddd-adf5-6419053cc3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd1241-6c9f-4959-be8a-30e159dd0d70",
        "cursor": {
          "ref": "4527d75d-c325-4371-921b-52de37d4fd63",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6620a8cd-9971-4769-a5fb-ad45865460d4"
        },
        "item": {
          "id": "8cfd1241-6c9f-4959-be8a-30e159dd0d70",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "948f44b3-a0f6-4be6-a3dc-594690b36428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b17975-6be1-4324-8a19-761a485c2aaa",
        "cursor": {
          "ref": "5369c907-e08b-43e1-a8c2-22353ad1c43b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "643b4bee-2727-49dd-a1a2-3be8b7c791e3"
        },
        "item": {
          "id": "08b17975-6be1-4324-8a19-761a485c2aaa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8793dd4a-f6a5-4bee-8f2d-f1d7e6c03a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d611c70-1fb6-499d-87a4-8b682d6faa77",
        "cursor": {
          "ref": "ff06b042-55ac-4125-9bed-80a8a4537a91",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1bfbb0ba-b066-4f8f-844f-abfbc2d2dbe1"
        },
        "item": {
          "id": "8d611c70-1fb6-499d-87a4-8b682d6faa77",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b0e50af1-0df9-4252-8ea9-787db9f34d50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1257bf-331e-4c87-91a0-a879ce78b7cd",
        "cursor": {
          "ref": "f5f97606-50fe-4d01-8000-2451d38f6b30",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9c7a3370-339c-4e35-a688-273a01cfef16"
        },
        "item": {
          "id": "bd1257bf-331e-4c87-91a0-a879ce78b7cd",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2954a2be-dfde-4cf1-9c0b-ba5d631c3bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf14f7d-c5cb-4f33-ac30-3ceb7e393ea8",
        "cursor": {
          "ref": "25e66dfa-661f-4f8e-a70e-259fccdb8d1a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "00bfde31-70fb-4ef1-b4e7-7a5ea973118a"
        },
        "item": {
          "id": "dbf14f7d-c5cb-4f33-ac30-3ceb7e393ea8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e464a8ae-9ae6-4d6c-9b2f-f47871a25f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ed6dd1-6908-4215-8f01-1d61de40d863",
        "cursor": {
          "ref": "25c4addf-2ac7-42b5-9e73-817ab4ff8013",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1464c714-b757-4799-98af-73977551b4ff"
        },
        "item": {
          "id": "e4ed6dd1-6908-4215-8f01-1d61de40d863",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cc3e5623-30a2-4e89-acea-be1e5c98d9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28236d09-612c-4950-bbc8-8cec396ddf37",
        "cursor": {
          "ref": "d6cc62ff-931b-4a92-857c-4ca1500a3bd8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88d20465-bd00-4474-ae92-4944bd73a095"
        },
        "item": {
          "id": "28236d09-612c-4950-bbc8-8cec396ddf37",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "4225e863-6c63-430a-b968-761e6f8c3726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916148e6-3365-4138-bfbc-09cbe4d479fd",
        "cursor": {
          "ref": "0dc2c08c-088b-4c6b-94e1-b28373b7b828",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bd68711e-c9e7-4311-a13d-1a24585192e5"
        },
        "item": {
          "id": "916148e6-3365-4138-bfbc-09cbe4d479fd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "775af808-1e6c-42ee-a428-41d9ec5d6148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b34469-4b9e-4094-bbcf-27eb4b303a96",
        "cursor": {
          "ref": "ea80e52d-933b-4868-ad2c-0b0959ca30a2",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8b9a5463-2e06-43f2-8365-7f89a36d325f"
        },
        "item": {
          "id": "38b34469-4b9e-4094-bbcf-27eb4b303a96",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cd39c16b-1554-46bc-8a60-8fb95a9d7b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ec00f2-d90f-42b9-b9ab-6aa902eee441",
        "cursor": {
          "ref": "93f9a67e-edd4-4984-8dc5-39321a75c240",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "877bc0c0-71ea-4e24-a85a-175421738954"
        },
        "item": {
          "id": "e9ec00f2-d90f-42b9-b9ab-6aa902eee441",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a716c81e-266c-46dc-adbc-ec0490b0dbc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea9e17d-fee8-4cce-846f-b625a74262ff",
        "cursor": {
          "ref": "b37ce76e-2789-42fa-a4b5-7f0a8670d095",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "34104a92-3b0b-4455-add0-adb0e79a96de"
        },
        "item": {
          "id": "aea9e17d-fee8-4cce-846f-b625a74262ff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9ae1ac4a-898e-4a2f-8b00-7ab5bccadbcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd61c2bc-91aa-4df9-947c-6f4dda2f9232",
        "cursor": {
          "ref": "2a45cef8-1d46-43e6-96ca-2c2471936cda",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b8b4a74b-fa1a-4be8-9a2d-8717e97c66ac"
        },
        "item": {
          "id": "cd61c2bc-91aa-4df9-947c-6f4dda2f9232",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6aeaa7fd-0a09-4b45-b69a-1c7280c4928d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1237c843-dc95-4773-a725-06551435f27d",
        "cursor": {
          "ref": "53394bf4-e200-4192-b825-9d142cf67fb4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "192306c6-fdaf-4c6c-aaa0-028675654657"
        },
        "item": {
          "id": "1237c843-dc95-4773-a725-06551435f27d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "db123b20-05eb-44e6-aa12-40986d03b9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4465be-dbe2-4229-9782-7b6b259deb69",
        "cursor": {
          "ref": "f4ce4c8c-77e8-43e0-a1f3-b74a767659bb",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "611bf79a-2814-4fc0-81ff-7713cbd8a64e"
        },
        "item": {
          "id": "2b4465be-dbe2-4229-9782-7b6b259deb69",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5c13ceff-67bb-42f8-b16c-8d6eddbc47f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0eb6e3-0f14-4e07-aeee-95ed26b630b1",
        "cursor": {
          "ref": "58ffab65-7cb3-4826-8e57-fdba53de6cc5",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ec2fea71-34e9-4e3d-9e2b-008f24b2512f"
        },
        "item": {
          "id": "5a0eb6e3-0f14-4e07-aeee-95ed26b630b1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c9f7e447-7185-4822-ac1c-f9de36dbe259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd7685c-88ea-450d-914f-ab9c5b2408e5",
        "cursor": {
          "ref": "d50f2603-8f26-4ab8-95f5-46e7b109fabc",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "87cb53ca-e90f-4df3-b82c-067bef1904b3"
        },
        "item": {
          "id": "6fd7685c-88ea-450d-914f-ab9c5b2408e5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3fca5a4c-f9d0-46b8-b882-e8375b663229",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "5b2d8ef0-af08-44cd-b138-6f45ef0110cd",
        "cursor": {
          "ref": "570db048-e174-41cf-9707-66aa99766aa3",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a8ced71b-eaf8-48b1-8a01-73c7a35932ae"
        },
        "item": {
          "id": "5b2d8ef0-af08-44cd-b138-6f45ef0110cd",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "205fedaf-f076-41ec-b868-dff6ce8b5f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8de6306-5914-43e1-a768-f511c787543b",
        "cursor": {
          "ref": "6516ecf1-50f1-4ac4-9228-62350b9b25db",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "95711930-0af1-45f2-b98d-a3a9feb5f172"
        },
        "item": {
          "id": "b8de6306-5914-43e1-a768-f511c787543b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eedf34ba-222e-4b3a-927c-1b781ad00910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73fcbc48-f4ae-4c73-bc1f-4ee744152b1d",
        "cursor": {
          "ref": "be347a8b-eacc-485d-8234-425fa5533213",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d1b09973-3806-4a17-a641-9cf156bb8c29"
        },
        "item": {
          "id": "73fcbc48-f4ae-4c73-bc1f-4ee744152b1d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8c418bfb-60f9-4fff-85ff-733bfd214c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbcdfef7-d2de-4a75-b58b-3f3fad928599",
        "cursor": {
          "ref": "ba81ceba-0ff0-415e-a029-53690fec677f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f551c597-0074-4768-bfa2-ff3cc64a85f1"
        },
        "item": {
          "id": "bbcdfef7-d2de-4a75-b58b-3f3fad928599",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "76be4dd8-8d86-40c0-b8d5-673307f4939e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ed0391-829c-45a0-8587-1564f037a68c",
        "cursor": {
          "ref": "b76da9a2-6543-49f3-a758-8969f721167a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "45e7740c-08ba-42cd-8538-99dc8b71ca52"
        },
        "item": {
          "id": "73ed0391-829c-45a0-8587-1564f037a68c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3acfa053-370e-4851-b3d2-f9cecd0e4c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49cb40f4-6eea-4ed6-960a-11c536ddefcb",
        "cursor": {
          "ref": "609bac05-ad7f-4f1a-b83f-9f8eb3ad229f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9b34d86c-323e-4acd-979c-929da6003121"
        },
        "item": {
          "id": "49cb40f4-6eea-4ed6-960a-11c536ddefcb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "91607d1c-b392-4139-a471-f561293e2a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc899f9-d5e8-480a-b493-7974df403017",
        "cursor": {
          "ref": "a1fbf23e-8b5d-471e-83a5-1a069fe5a0ca",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "534138fa-4d1b-436d-a9ed-f1d928704482"
        },
        "item": {
          "id": "ddc899f9-d5e8-480a-b493-7974df403017",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5c1f9905-8b94-451f-bfc9-19d3c778ef13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa758a2-0f90-4bd4-9102-93d3eb0ac14e",
        "cursor": {
          "ref": "92bdca6f-7fb1-471b-bf1f-60a2b7d4907b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "8c2cea86-200f-4f28-9a9e-59e1a6331440"
        },
        "item": {
          "id": "ffa758a2-0f90-4bd4-9102-93d3eb0ac14e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b407c8ed-c444-4b9a-b051-dff285cf4937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270f8b73-2ac0-4338-a72d-c11b5219bbd9",
        "cursor": {
          "ref": "88e7903c-2f7b-4da5-962a-9c056c8bd5e2",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a38a7cfb-699e-4e0e-8670-876deaa70dda"
        },
        "item": {
          "id": "270f8b73-2ac0-4338-a72d-c11b5219bbd9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "52930a5d-759b-4c94-a2cf-656916f8c2c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c8134fc-1720-4cf5-8958-d1e5f0894971",
        "cursor": {
          "ref": "21441348-b362-4bdf-babb-1cfd17fd0e58",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "98f9e373-33d3-4519-b454-e48062cc1c51"
        },
        "item": {
          "id": "6c8134fc-1720-4cf5-8958-d1e5f0894971",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "168c3f18-e1d7-427f-92a6-e6c396f299e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e786e01-b166-4f91-8024-1a0eda3232d9",
        "cursor": {
          "ref": "403e8fae-6d9e-40ee-ae30-2818665bc11e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b37b5e6f-af85-42bc-839e-e8d11ccd395c"
        },
        "item": {
          "id": "7e786e01-b166-4f91-8024-1a0eda3232d9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3bb3543f-82a2-49ea-9900-26bd21471c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a6b927-74cd-4844-8ae2-c21d5cf0cb71",
        "cursor": {
          "ref": "4c3a678a-5504-4843-a90b-dc740cfdc704",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "760e6adc-291b-4806-a6c9-a53ceba8d10d"
        },
        "item": {
          "id": "19a6b927-74cd-4844-8ae2-c21d5cf0cb71",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b6947c4c-207f-4b16-8667-be9c5ad02a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d6181e-a090-4a7d-9c87-34082d7ac4d0",
        "cursor": {
          "ref": "4e92da3b-6a39-4548-a129-6f42306d1dab",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "52523067-3af8-485e-a477-4153bbb378ea"
        },
        "item": {
          "id": "e9d6181e-a090-4a7d-9c87-34082d7ac4d0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9b2c84d7-ea9b-4257-a7f0-06abf1a01915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba248f1f-bced-48b0-8b97-c4d5ac1550c2",
        "cursor": {
          "ref": "e9fe7d63-2cde-42bd-93db-7a08a4b4b9c6",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0e464b0b-c8f7-4c34-ba2b-70b23e946d3f"
        },
        "item": {
          "id": "ba248f1f-bced-48b0-8b97-c4d5ac1550c2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b2fb81bf-284a-4e43-9eef-a460e62cae6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b8558fb-e355-43a2-b483-490d10efa2eb",
        "cursor": {
          "ref": "c25cad9c-b5a0-48f1-b607-bad60bca5a74",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ec78d251-c31f-4dc1-b1ac-66c8ec5f49c2"
        },
        "item": {
          "id": "3b8558fb-e355-43a2-b483-490d10efa2eb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "047b37f6-cfb0-4b75-99f1-6268cd1ddcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d1c90a-d0c0-45f1-aa81-a309f4817fa7",
        "cursor": {
          "ref": "5b21cde2-aee6-4362-80dc-ba70d985315f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "05d85fd3-a04d-475b-a1b5-fa4646ebf140"
        },
        "item": {
          "id": "d4d1c90a-d0c0-45f1-aa81-a309f4817fa7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0a75556d-f52b-4d99-957c-a2ede0f28066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ecfa5b7-10c3-4c00-bc75-3ac4eb5e2554",
        "cursor": {
          "ref": "6005f938-2112-4c21-940b-33e6dcb84ee9",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f7d00bb1-4923-4fa9-9d5d-24ad04f7358d"
        },
        "item": {
          "id": "4ecfa5b7-10c3-4c00-bc75-3ac4eb5e2554",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "38dd12ce-c2d2-4130-a096-af0e073b7fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3876ff52-bbdd-4ed5-b4c7-0124baa25131",
        "cursor": {
          "ref": "59dbef14-c03d-471e-9865-3a3f1c7b3697",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7a33cc1d-2a3c-40c2-8944-d3245af3d854"
        },
        "item": {
          "id": "3876ff52-bbdd-4ed5-b4c7-0124baa25131",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c6068647-f77c-4822-8986-9223a1e0acc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be41b26f-5db9-4140-aee7-4c7777c1ec57",
        "cursor": {
          "ref": "4e727d9d-378d-46e4-afa1-49a0dd0c597a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "194de42b-bd38-4d3e-962b-d341cd4e5d57"
        },
        "item": {
          "id": "be41b26f-5db9-4140-aee7-4c7777c1ec57",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "33ad8150-1dca-41eb-8cde-d0e4466cb968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5c193f-2b17-4e10-9b9d-470aa6828621",
        "cursor": {
          "ref": "d29e23ee-f485-4f2a-a608-21fadd0bc649",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0b99112c-6f64-46d7-928c-9b000328b3cd"
        },
        "item": {
          "id": "ca5c193f-2b17-4e10-9b9d-470aa6828621",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a5f47f98-9e82-44b7-8bdd-94b170c5bd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5de39a81-fd3d-4c4d-8c6b-3cf06f2c7fa0",
        "cursor": {
          "ref": "2d382b98-64c5-436e-a1a8-c07d3c706822",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "798b33c4-034a-43c3-b282-31997474f8dc"
        },
        "item": {
          "id": "5de39a81-fd3d-4c4d-8c6b-3cf06f2c7fa0",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6300f3bb-5962-44cd-9ac6-7028c53aad83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6affeb8-f671-4a3e-be38-f2c220e6f0a2",
        "cursor": {
          "ref": "e1ef4f4e-0405-4ade-b026-4e0fc2813cdc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7f813f6c-23d5-41e1-bbfd-7fde65c0f121"
        },
        "item": {
          "id": "c6affeb8-f671-4a3e-be38-f2c220e6f0a2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ee3220e2-35d1-4260-b181-b124899a613f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfe01b9-01ae-4120-80f1-8404e18d2a81",
        "cursor": {
          "ref": "10b48b4d-de9e-43f4-85d6-fedfe04db639",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "822b7439-4a5a-454d-ba7b-965f8006f544"
        },
        "item": {
          "id": "dcfe01b9-01ae-4120-80f1-8404e18d2a81",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e066e500-b1d6-46aa-9ca6-a51fdaa89df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf2e128-3135-4c6e-a210-d6d3ab58b5e0",
        "cursor": {
          "ref": "7961aef0-24d0-404a-8ef0-5b43607124ab",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "695b79af-5a0e-4d8f-b8ca-bdfb84fdbf11"
        },
        "item": {
          "id": "9bf2e128-3135-4c6e-a210-d6d3ab58b5e0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "94c01709-2c5a-43d9-b817-00c61dc4560b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eb27ae-5e7a-45bc-8fbb-b59b0332beb8",
        "cursor": {
          "ref": "aa073746-9c5f-4fae-b44f-e857354899a3",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6fed7dcb-bfa5-4034-8c22-7ccffb34697b"
        },
        "item": {
          "id": "62eb27ae-5e7a-45bc-8fbb-b59b0332beb8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a53615cf-676d-4ab0-a123-edf63bedace4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418e0f8e-b386-4b5f-9fd9-bdbaf2f06f79",
        "cursor": {
          "ref": "f4a05495-f7cf-4ed2-8bd1-028ad9691926",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "cf95331f-5f4f-4c5d-b2d3-ac14bdce6137"
        },
        "item": {
          "id": "418e0f8e-b386-4b5f-9fd9-bdbaf2f06f79",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "9b2c0649-15ab-4e77-9312-57cebf6f4170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a35c0d03-a8d3-4ae8-b98e-489c75c23032",
        "cursor": {
          "ref": "5e053405-0a18-4c13-a7d6-9e33defff20d",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "24c059f7-ccf7-493d-a383-8bc51ac4d80f"
        },
        "item": {
          "id": "a35c0d03-a8d3-4ae8-b98e-489c75c23032",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8db6bc2a-9e53-4a37-afc6-8e01e5c78d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31316788-ecd0-4436-b1b0-c239120d1f10",
        "cursor": {
          "ref": "b75eaee0-7625-47f4-b138-d02fedd85986",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0622251f-2ee7-4327-b838-592993d4c888"
        },
        "item": {
          "id": "31316788-ecd0-4436-b1b0-c239120d1f10",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "72521483-8fa9-48b2-992a-0bc54b59f618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90210cf-aaf1-4cc1-8c0f-fa7a784e38d7",
        "cursor": {
          "ref": "161cfe32-2791-4b8b-a345-25b8cc57bfe5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "166e8342-8f04-4640-9ec7-3d82b4bb8918"
        },
        "item": {
          "id": "f90210cf-aaf1-4cc1-8c0f-fa7a784e38d7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1f7d8d0-863f-4c43-9b74-d47a92ed416d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d144e2e-4cc2-469a-841d-e057b07d8407",
        "cursor": {
          "ref": "9c888ed2-98cf-4be6-8ff8-ada2075869c0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "040015bb-6bda-4680-bd6a-1b7c5cee1be5"
        },
        "item": {
          "id": "8d144e2e-4cc2-469a-841d-e057b07d8407",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f69532d1-0ae5-4f87-999e-5f7bc709c95a",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4ebb7c03-3c28-4ede-b819-4c23efdadfd0",
        "cursor": {
          "ref": "f30e1ed4-5e81-4aeb-9d0c-fe0a861aca3e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "886c1f47-e903-4f94-9ea6-890427585fe0"
        },
        "item": {
          "id": "4ebb7c03-3c28-4ede-b819-4c23efdadfd0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "76ca09a7-ac17-4d99-ab41-d007d6d75d14",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "abcb0561-b4f3-4913-bdc7-f5a92feaef16",
        "cursor": {
          "ref": "aa15a158-9ef9-436b-897f-e54941ec1805",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "89a9ffbd-6729-422a-9373-60b6e6b977db"
        },
        "item": {
          "id": "abcb0561-b4f3-4913-bdc7-f5a92feaef16",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "63a9d23d-f8a8-4aba-9651-b87bcd703fc8",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "1469419b-06ff-4340-95cb-d1a5511309ac",
        "cursor": {
          "ref": "e8dd88e9-55d5-426d-b7e9-cb97eacc1661",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c0700e83-60d4-48c5-a8c8-ebe5eee8b601"
        },
        "item": {
          "id": "1469419b-06ff-4340-95cb-d1a5511309ac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4b23412c-e7d6-49e4-a625-2c5fe555f7e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916cb771-8a94-48e0-87d1-482d6cc44823",
        "cursor": {
          "ref": "8f622bf1-ef5e-4944-896f-f4f9996df3ca",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "221c6b63-a35c-4e97-bf1f-6c6574f62051"
        },
        "item": {
          "id": "916cb771-8a94-48e0-87d1-482d6cc44823",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6ac74e94-fa7f-4a33-a26b-0105d730a442",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "850bb254-34b6-4299-b5d4-afdd4dc6f45c",
        "cursor": {
          "ref": "4692f195-13b6-4fb1-89ff-8d50f7e89a47",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bf1ba3af-b140-40d1-8a8d-20a6ae5dda66"
        },
        "item": {
          "id": "850bb254-34b6-4299-b5d4-afdd4dc6f45c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c5cedd2-3719-4bd9-abaf-40ffa9ed2ee4",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "07f57e4c-4a6f-4786-9447-c0563bdd9e29",
        "cursor": {
          "ref": "a3cc9d3e-1e9e-4070-b834-996687de8131",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8f12c722-2253-4470-a796-dcb012c6c70b"
        },
        "item": {
          "id": "07f57e4c-4a6f-4786-9447-c0563bdd9e29",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f27025da-c472-48d6-aea8-841a4de535cd",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b320b391-0b7e-467b-a438-343196c20c0c",
        "cursor": {
          "ref": "41de0b72-fc3e-47f5-91dc-7a3a024ed152",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "79134635-63be-4adb-a5ab-67c295e0e145"
        },
        "item": {
          "id": "b320b391-0b7e-467b-a438-343196c20c0c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "45140cff-8adf-4211-b1ab-5a112a0e224f",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "8f30825c-70c8-449c-941d-a8623e8e25a6",
        "cursor": {
          "ref": "3f72c94e-bbbb-4d56-9c20-268b3d50231d",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f0f230aa-3371-426b-a650-d1b5daa6143e"
        },
        "item": {
          "id": "8f30825c-70c8-449c-941d-a8623e8e25a6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e55fc170-56f5-402d-9bc9-62ed1ba114b4",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "8a102496-a969-4930-8396-12d0e5baefb3",
        "cursor": {
          "ref": "57a8434d-3f35-4cdb-b913-63aa03e89e67",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9dd0fadd-2b60-40c8-965b-588e96354d7e"
        },
        "item": {
          "id": "8a102496-a969-4930-8396-12d0e5baefb3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4df94231-dbae-4212-85a4-ad2b91f79fd9",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "276f0436-576c-4407-b5f2-b0dceafb70d2",
        "cursor": {
          "ref": "e6d55e2a-4ad2-4892-ae54-2e6544fdd3b6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c2888514-19b1-4375-81a7-283cf5ad42fc"
        },
        "item": {
          "id": "276f0436-576c-4407-b5f2-b0dceafb70d2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b235a3e8-f017-44f5-9a06-fff84d1dbc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e754ac25-6431-478d-801e-9d97b1928f70",
        "cursor": {
          "ref": "96d0f408-0499-4769-bf36-66401f6cd6db",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "871d00a0-8101-4415-9486-e26fcde38682"
        },
        "item": {
          "id": "e754ac25-6431-478d-801e-9d97b1928f70",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d653d8a3-87b7-45c4-8a29-6af5b8efd1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a8e2ba-7a60-4a9f-b456-157552bec0a0",
        "cursor": {
          "ref": "f67a7bce-5b74-431e-b837-9a76237ebf91",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3a4af60a-e6e6-4b7d-9a90-1269dd6e9f18"
        },
        "item": {
          "id": "a6a8e2ba-7a60-4a9f-b456-157552bec0a0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "83a64f77-71c0-47ec-9052-6785c4e41e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea60dc4-76b7-45af-a170-a75dd5803d25",
        "cursor": {
          "ref": "b0312410-31c8-48e5-a43f-40e9c5666e7a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4936a3b4-57e7-477f-947b-d0a0ef41546d"
        },
        "item": {
          "id": "9ea60dc4-76b7-45af-a170-a75dd5803d25",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "18e55c7b-7de2-4564-b185-5914a6c502af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4553cc9a-4a7d-4cb2-86a8-537a6c995416",
        "cursor": {
          "ref": "e0edd1a1-bc3a-4ea7-9b9b-05e6639ae306",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "de42f355-837c-4390-a5cc-e4cb66ccf63d"
        },
        "item": {
          "id": "4553cc9a-4a7d-4cb2-86a8-537a6c995416",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c97a6582-65f1-4e3e-aabd-ac6087842a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ce703f-6851-4d3d-9ad7-5ad03e36e08c",
        "cursor": {
          "ref": "b7816f00-fd93-4050-a35c-ac4c9027a368",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6cfe49a4-f230-442e-a249-c08361b54963"
        },
        "item": {
          "id": "99ce703f-6851-4d3d-9ad7-5ad03e36e08c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0f46963-0f43-4be0-8cbb-940a315faa48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7c58b7-4555-4609-a364-da2ef7e93a2d",
        "cursor": {
          "ref": "ce59664b-3bfe-4dbe-8deb-cd13e4693119",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2adb282a-7ad4-430f-b053-7af9ef029e6b"
        },
        "item": {
          "id": "4d7c58b7-4555-4609-a364-da2ef7e93a2d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6595ac74-cddb-4449-b066-d430d952824d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fed5370-ba66-495b-bcb1-c5fb06ee682e",
        "cursor": {
          "ref": "83ca05a3-cc12-4b41-9b29-c0d5d80f6d94",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "fd031f38-bdef-4d44-91a1-ee212c6e6445"
        },
        "item": {
          "id": "5fed5370-ba66-495b-bcb1-c5fb06ee682e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fb89d145-fe6b-469b-8752-6a93fba6f5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba289ac-dbb8-4cae-ab6e-884848b641ff",
        "cursor": {
          "ref": "782acd4b-d91f-4fc3-a9fa-7de97f3d6631",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "66ec903a-51fa-4711-aab6-56e50040e2df"
        },
        "item": {
          "id": "9ba289ac-dbb8-4cae-ab6e-884848b641ff",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "875d55d5-0a76-42c6-8a1f-01532d7cf243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66cecd1-bb36-4099-b6b5-7ea6f2d295b6",
        "cursor": {
          "ref": "b8491e6e-a8d3-4102-89a2-0b3afc7fed1d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b16b021d-cdfc-4aed-860b-a44803e354d0"
        },
        "item": {
          "id": "a66cecd1-bb36-4099-b6b5-7ea6f2d295b6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2fd9ac55-46c0-4f0a-8c11-b33a04042857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15c3cb6-1e52-42df-b096-6c4afd9a08eb",
        "cursor": {
          "ref": "a4006268-c88e-4018-9ae7-8547079d52c5",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4ea2b193-a175-4dbe-9bf5-7b562474ddf1"
        },
        "item": {
          "id": "a15c3cb6-1e52-42df-b096-6c4afd9a08eb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3862a076-ecee-45e1-95e1-c7233e3c1d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c02e603-1532-4eff-96ee-413cfbc3afb4",
        "cursor": {
          "ref": "98a167a9-f409-4e97-ae0a-eb583809b073",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5aec774e-783d-4405-be2d-ec47e274f376"
        },
        "item": {
          "id": "2c02e603-1532-4eff-96ee-413cfbc3afb4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0b4aa7a8-e936-44d4-a4cc-2e01274367e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2fc4ac-999e-41e6-b83b-6210fd8f09d5",
        "cursor": {
          "ref": "1fdec1f7-1f67-4d02-ae74-4f5c1b60281a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "65ce6720-7617-4de5-aa7e-c25ec97c38dc"
        },
        "item": {
          "id": "bd2fc4ac-999e-41e6-b83b-6210fd8f09d5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0305609b-000e-4005-b4ad-a31448a265e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a066d1e-657a-4968-8575-8b5077896fd6",
        "cursor": {
          "ref": "3fc0d48e-e279-4d4c-a613-47cb4677d0ae",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ac46f903-3a53-4d85-b675-e89b762a02cc"
        },
        "item": {
          "id": "8a066d1e-657a-4968-8575-8b5077896fd6",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "042dfd4b-415c-401f-a18b-a42bf1a9393d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "1e4421b4-0101-4ff8-a5c5-303b27583ef8",
        "cursor": {
          "ref": "5b99d28f-4f34-428c-b6a0-e3e93c126941",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9ab99a35-2af9-4d1f-95ab-d3bbfdf8389b"
        },
        "item": {
          "id": "1e4421b4-0101-4ff8-a5c5-303b27583ef8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b10981c2-8b93-4c10-8350-d485046017a1",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "070dc916-3fd1-4f95-a2d7-0aa0f5ccdc3d",
        "cursor": {
          "ref": "ddcae9ae-88a5-4a39-aefb-b500e6e9ed49",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "92000b20-fd73-4c9b-bfcb-5047019fcdf3"
        },
        "item": {
          "id": "070dc916-3fd1-4f95-a2d7-0aa0f5ccdc3d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "679e3ce5-f488-4950-abdb-2c1c362e2af8",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7abb62da-0300-4ac8-9db0-d4dec4b7e251",
        "cursor": {
          "ref": "ae229dd1-34fe-4f7c-ab21-ee79fb4f8d1c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "02253b52-4c32-417e-9259-838ac5e91b7c"
        },
        "item": {
          "id": "7abb62da-0300-4ac8-9db0-d4dec4b7e251",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "82008de5-57ba-4161-8bb4-646ead603e58",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "0ded3fd2-4462-448b-9c4e-6a5c13e34a5b",
        "cursor": {
          "ref": "a73ac76c-ebe4-41f0-8696-e01796620f53",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5433c090-7398-4e03-9f1f-b18d15217868"
        },
        "item": {
          "id": "0ded3fd2-4462-448b-9c4e-6a5c13e34a5b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8db5ddd1-d077-43f8-8019-861815db9e27",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "2b1047fd-2d1f-45e1-96d4-50f857c99b94",
        "cursor": {
          "ref": "cb50c12a-5554-46ee-8d0b-abf9b1616285",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "597490c2-5d4d-40a0-92f2-ff50626ad88f"
        },
        "item": {
          "id": "2b1047fd-2d1f-45e1-96d4-50f857c99b94",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dfaa6aa7-15da-4f11-97d6-9bc2369a2520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08aaa5eb-80b6-4d9b-818a-4237480c84b7",
        "cursor": {
          "ref": "018228af-4fe3-458e-99bb-ca33fae54001",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "945369e5-492a-415a-8e72-bd075eef6615"
        },
        "item": {
          "id": "08aaa5eb-80b6-4d9b-818a-4237480c84b7",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "41b4e59f-c11e-47dc-9798-ebdbb1ea117e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278a0237-0806-4f8d-bb6a-ed552aa55a0f",
        "cursor": {
          "ref": "409de7e3-d465-4814-a7eb-b7914d701371",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d61af084-df9b-47db-9aed-fa6e3dae9b91"
        },
        "item": {
          "id": "278a0237-0806-4f8d-bb6a-ed552aa55a0f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4d392ef2-1e5d-4484-8f31-af70ae5ade20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9ceada-bebe-4d91-984d-659c4ea2640c",
        "cursor": {
          "ref": "dae35eb7-a18d-4cc9-8d78-4a35d27f2d3d",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "574028f8-eda2-4e40-9d5c-e01b113486a8"
        },
        "item": {
          "id": "9b9ceada-bebe-4d91-984d-659c4ea2640c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f9ac5134-3f19-4a37-aac0-95031af66de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9518fb11-c08b-402e-b619-9094235056b1",
        "cursor": {
          "ref": "ddf496f6-abb7-420d-991f-46aad99e07db",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4c43a953-ed39-441f-8b2e-943b329edfe5"
        },
        "item": {
          "id": "9518fb11-c08b-402e-b619-9094235056b1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9e88ac87-b278-4bbf-9a0b-29e122d589c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8286f5b-00fa-4ca9-a6b2-666d095a4079",
        "cursor": {
          "ref": "a2721ddc-3a1e-4563-8ca9-9bce1ec42a51",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8aca6f51-2b16-412b-b085-c562512b2c76"
        },
        "item": {
          "id": "e8286f5b-00fa-4ca9-a6b2-666d095a4079",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6f496bd2-1d28-48cd-94e7-f9fce55809a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf915ad-8d9f-4f19-a90e-00684a68ff79",
        "cursor": {
          "ref": "93c8743d-9df9-4ef7-86a3-f80ee38c06e2",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bb9df243-62f4-489e-a86d-350d2cf52bcc"
        },
        "item": {
          "id": "cbf915ad-8d9f-4f19-a90e-00684a68ff79",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "94d96765-f28c-49ad-a53a-10dd894339bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a093321-6621-413b-96bc-98c0ae8c331b",
        "cursor": {
          "ref": "47397635-7d76-4e6a-9798-37947960674b",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "99090f31-778f-4a57-8850-a511e5edd5d6"
        },
        "item": {
          "id": "2a093321-6621-413b-96bc-98c0ae8c331b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1d4ca077-00f9-4d68-b880-af2fee48c447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56c344a-7052-44d6-adcf-e2b26e8e493e",
        "cursor": {
          "ref": "9e891d43-56ed-4ff1-bc3b-53c17e7e2dcb",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cf5e9eec-751c-49c4-a440-3fdc82edd0f8"
        },
        "item": {
          "id": "b56c344a-7052-44d6-adcf-e2b26e8e493e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3751d6e5-510e-49f9-bb5c-d33ce0e76883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f7e162-207d-42c3-8c45-7a83d0c07b9d",
        "cursor": {
          "ref": "3fdb5e4d-3565-44f7-bc5f-f6966991bd96",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4ad179e1-8ed8-4636-97ae-bc42997dd5e6"
        },
        "item": {
          "id": "a2f7e162-207d-42c3-8c45-7a83d0c07b9d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c5a4dc0d-ccd8-4e1a-b2c1-b6c4ebbbaa6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c40039c-3720-4a31-8659-8f84ad021621",
        "cursor": {
          "ref": "9b8efbd5-b787-460f-9a8c-d343f81d2d6c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "539a4cd4-1864-472c-a147-3c1dac3bbf9f"
        },
        "item": {
          "id": "3c40039c-3720-4a31-8659-8f84ad021621",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7d53f7c3-bf23-4391-a93b-056e518b1573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d5f0eb2-1f11-4368-a2f3-ea4fc655542e",
        "cursor": {
          "ref": "e2a5c76c-5705-4502-b364-9043e2dcee28",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ac69c6ca-2b6e-4651-9368-7f9b7807a602"
        },
        "item": {
          "id": "2d5f0eb2-1f11-4368-a2f3-ea4fc655542e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "649b671a-7259-4f3b-96da-0a5ca6cb23ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f2851-e341-43c8-8b7b-343b5e6bf432",
        "cursor": {
          "ref": "ac2beddd-d7c0-4121-8ad1-e7c4fdecf394",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "06cd0e4c-b0a2-4ae5-987e-1429c7c3e91b"
        },
        "item": {
          "id": "266f2851-e341-43c8-8b7b-343b5e6bf432",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "1207056a-1e9c-4967-b56c-e007f154b27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a482b9-1c34-4f2a-8bcd-0949c37825f2",
        "cursor": {
          "ref": "b29d7c84-6d36-4481-bc6a-3c37b4d5c4d4",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "11fc2531-e742-4e5b-98a7-17aaa2a8b111"
        },
        "item": {
          "id": "e5a482b9-1c34-4f2a-8bcd-0949c37825f2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e329aa28-a28c-423b-957a-a1bd6e46b9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff8818c-2f67-4c86-8b78-eb7de98b5bf7",
        "cursor": {
          "ref": "e06c3728-1753-4368-aeb0-c82d02c557c6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a54947e4-6e3e-4959-8006-ea9943964d10"
        },
        "item": {
          "id": "9ff8818c-2f67-4c86-8b78-eb7de98b5bf7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "9159a858-fe6c-4f23-9b19-d279f2d47a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c082580c-c66f-44f2-ae41-153704cb33ea",
        "cursor": {
          "ref": "0e2dd03d-2bb1-4ee4-b6cd-ec039aec87e8",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ec38121b-0bc4-4c73-bef2-01a46450e526"
        },
        "item": {
          "id": "c082580c-c66f-44f2-ae41-153704cb33ea",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3ca66c8d-d15d-434e-abf7-9ba546ade817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca50c104-5344-4f07-9a9a-77c924bb5d3b",
        "cursor": {
          "ref": "c80e34be-e766-4f3b-956b-e2bd3f699c27",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1a5565bf-4ad8-4b53-ae93-f3b75ee21348"
        },
        "item": {
          "id": "ca50c104-5344-4f07-9a9a-77c924bb5d3b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "669efd56-71c5-4009-bd05-79f4dac65d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf89493-0e08-4493-85b6-dc1d1863fd2b",
        "cursor": {
          "ref": "11f3f1df-f90e-4c1a-a2d0-9063caa1bdf5",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bbd99a7e-1075-4158-a413-2f84f1f80e02"
        },
        "item": {
          "id": "fbf89493-0e08-4493-85b6-dc1d1863fd2b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3de17105-df2a-4f93-809c-9c04ed6ff151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68edf75d-05b3-4176-be01-9c98a171e0d1",
        "cursor": {
          "ref": "a149b289-1638-4143-aa02-f2fc2a5d4db8",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8691b9e9-258d-49c4-9493-f486401a4af4"
        },
        "item": {
          "id": "68edf75d-05b3-4176-be01-9c98a171e0d1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d0421752-7c48-4606-b312-bf6b6f6a0a5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6416108d-8d0b-44f3-95c7-b0b7646198c0",
        "cursor": {
          "ref": "caf389a8-867d-40f0-aae2-255cdc658be9",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "123738ce-acba-43c3-9202-dee5c28314f2"
        },
        "item": {
          "id": "6416108d-8d0b-44f3-95c7-b0b7646198c0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0bbc4ba8-dde2-4ec0-82c9-47ab3e9a45d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb29e6e9-e716-47df-a6b6-6aad8db1f377",
        "cursor": {
          "ref": "78a7f0c8-d1ac-4330-99c3-14a7833010ab",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "769ea24c-8fca-4b2f-a6cc-900d9782d066"
        },
        "item": {
          "id": "bb29e6e9-e716-47df-a6b6-6aad8db1f377",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "fdc7e0d5-c867-47e5-b164-5a360c07716a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13347c63-c184-4aaa-a09d-0545246eb161",
        "cursor": {
          "ref": "bf955d9c-45d3-4cd8-bf48-7c1213b77a22",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1be97e87-c840-4557-b37f-1421fecea553"
        },
        "item": {
          "id": "13347c63-c184-4aaa-a09d-0545246eb161",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "00139548-1c5a-41a5-8fc9-6d8a4b7b1a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5aebebb-5dcb-4946-bfa6-e2f6e3d6e908",
        "cursor": {
          "ref": "46223002-48e4-4b95-807c-73b7be438546",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9b1a6184-b81f-4d81-a615-103576bc98dc"
        },
        "item": {
          "id": "f5aebebb-5dcb-4946-bfa6-e2f6e3d6e908",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8ae9e399-6428-471a-bc9c-f5b32b40140c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd55b58-0b24-407b-935c-ac67d8be095c",
        "cursor": {
          "ref": "da38086a-7b21-43f5-b352-bd1353afd565",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2737601c-39ea-4607-8ca4-ca03da98fd0d"
        },
        "item": {
          "id": "fcd55b58-0b24-407b-935c-ac67d8be095c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "db8f33e5-205f-46c6-ac96-9c1c4c049d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6a6af2-ef3a-4b6c-ba2d-4b8656db6b11",
        "cursor": {
          "ref": "09349868-890d-41e6-8252-9469eef4da74",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e684719-e146-4666-8bdc-57abb3148dbe"
        },
        "item": {
          "id": "0a6a6af2-ef3a-4b6c-ba2d-4b8656db6b11",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4ad6a664-fe1f-4782-a620-172fa25f72b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6fff44-6024-443d-81a4-6eca9b7a0775",
        "cursor": {
          "ref": "2306e00f-126c-4e40-81b1-0792e5f38705",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "8395c770-2828-4baf-9ded-6bd3dd13c66e"
        },
        "item": {
          "id": "0d6fff44-6024-443d-81a4-6eca9b7a0775",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2c8f0f7f-88a5-4e7c-b6fe-6ad7e231ac9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3417bbc3-8cb8-42e8-b97e-e86cdf42d282",
        "cursor": {
          "ref": "8dbb8205-9122-47b1-91e3-6819d12989af",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9845951f-c567-4dc4-bfdf-7402b732a99f"
        },
        "item": {
          "id": "3417bbc3-8cb8-42e8-b97e-e86cdf42d282",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "eb61d461-bf41-4c3f-bc27-26e722ea5a97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb068273-1b24-4b92-be34-5c1e0a9f544e",
        "cursor": {
          "ref": "00fc4959-9229-4419-81e3-37b7b9d34e60",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "eb61f8e3-1c78-4aa0-b941-92ae0abf5d70"
        },
        "item": {
          "id": "cb068273-1b24-4b92-be34-5c1e0a9f544e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "13eb36b2-e16f-4726-b526-fb52e6f2e7e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b338f0-481e-43f5-bf28-1d9dc4273cd1",
        "cursor": {
          "ref": "119d5f6f-05cc-4a30-a7d1-bcb996182b6f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b7144fb9-d698-4881-835f-f95add6823d7"
        },
        "item": {
          "id": "d3b338f0-481e-43f5-bf28-1d9dc4273cd1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cbb79e77-490e-426e-a0b2-ee41a6612745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5121b46f-4beb-4541-9959-7373a6800ba3",
        "cursor": {
          "ref": "aec4922f-bf36-46a9-8013-3dab5e8f6ae9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "93ac2759-57ad-4295-a325-70f3796fde9b"
        },
        "item": {
          "id": "5121b46f-4beb-4541-9959-7373a6800ba3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cc96c82e-50f3-4f56-a5ce-18128a92e3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a05d16f-05b9-4c33-8fb3-f07fdcad1136",
        "cursor": {
          "ref": "41c5dd50-b1cd-459a-8be3-71320bdefcea",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "88146e54-74ee-44fb-b101-95b3a1a8d685"
        },
        "item": {
          "id": "2a05d16f-05b9-4c33-8fb3-f07fdcad1136",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ab8f056f-33bb-4caa-b9b8-642043a68ad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4164f166-8acb-488c-b4a5-5e3b855682d1",
        "cursor": {
          "ref": "769982e2-40b5-400e-810e-1aef94834811",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6e5d1670-e8dd-4716-8cb8-282d48daa57e"
        },
        "item": {
          "id": "4164f166-8acb-488c-b4a5-5e3b855682d1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ed7ef25d-1361-432e-8d1c-884560bdc677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5377f57b-1ebf-496d-8728-d6a08a586244",
        "cursor": {
          "ref": "f8f0b0dd-2cc9-45ac-b33c-0abddfc80d81",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "489ef720-452f-463c-ade4-96846474d5bb"
        },
        "item": {
          "id": "5377f57b-1ebf-496d-8728-d6a08a586244",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "733cdc2b-3a65-454e-b3c5-896d0dcb8b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268a3bea-5fea-4df5-a594-a9b3c3a3c033",
        "cursor": {
          "ref": "dc0fdd45-268e-4372-b77f-71bcbf3b394b",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5e692053-63a1-4913-800b-a5e7ae587a3c"
        },
        "item": {
          "id": "268a3bea-5fea-4df5-a594-a9b3c3a3c033",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9f99e961-a580-4387-af5b-b3b98479574f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096cca26-2ab4-4772-b2d8-bd612eb92524",
        "cursor": {
          "ref": "31f6f3c4-db33-452e-ace2-13a80fb8dfb1",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b95df69e-2658-4896-abc4-3f1510062530"
        },
        "item": {
          "id": "096cca26-2ab4-4772-b2d8-bd612eb92524",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "76b81e32-c2f0-4064-98a2-7967de9f461d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1791df-14b2-413d-8c38-ddd688a89442",
        "cursor": {
          "ref": "1539a57e-8c80-4e6a-9fa4-c2efd06ad87b",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "7086c2bf-ae00-4d70-93a8-d70542c53c54"
        },
        "item": {
          "id": "af1791df-14b2-413d-8c38-ddd688a89442",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e0223fd4-23f6-4199-93d7-9f0214ed2dbc",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "1c31d9fa-d0a7-479d-b975-e88a83a4e988",
        "cursor": {
          "ref": "ccc0e01d-707b-41b4-bc06-e07cdd0b9583",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f4c10d61-0361-4521-bd22-84634cd128c9"
        },
        "item": {
          "id": "1c31d9fa-d0a7-479d-b975-e88a83a4e988",
          "name": "credentials_verify"
        },
        "response": {
          "id": "558cc229-1fb9-4395-bab5-aca390237add",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0f8c50-6212-428b-a5e3-d215835b5581",
        "cursor": {
          "ref": "a3e0ccf6-3e10-412c-98a0-8611d8ebae3f",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a5f57517-5b89-4b14-b5b5-9356f2c220bd"
        },
        "item": {
          "id": "5b0f8c50-6212-428b-a5e3-d215835b5581",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2c19ef87-6244-4de4-a6dd-a7d9968b92f1",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd060d5a-0007-4db0-896f-15ef38e9450c",
        "cursor": {
          "ref": "a8b04f97-1155-455c-8113-f49877139d4a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96da44e9-0d90-4989-8641-a2ea2a89fcf2"
        },
        "item": {
          "id": "bd060d5a-0007-4db0-896f-15ef38e9450c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ba61587c-fc60-4f44-842b-1f45514f24db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd060d5a-0007-4db0-896f-15ef38e9450c",
        "cursor": {
          "ref": "a8b04f97-1155-455c-8113-f49877139d4a",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "96da44e9-0d90-4989-8641-a2ea2a89fcf2"
        },
        "item": {
          "id": "bd060d5a-0007-4db0-896f-15ef38e9450c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ba61587c-fc60-4f44-842b-1f45514f24db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133af2d2-0780-4a35-874f-cbf6cba9dd62",
        "cursor": {
          "ref": "c5b6201e-705f-440f-90b6-e4e29b0c56c6",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e64e8b34-0c51-4b8f-9645-75a3cea911a1"
        },
        "item": {
          "id": "133af2d2-0780-4a35-874f-cbf6cba9dd62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "37ec23cb-cf7e-482a-b1a7-f144624e3ffa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5d98ea3-9272-4a73-949e-013c5e3c0d1c",
        "cursor": {
          "ref": "4f017b76-5da2-4f62-a75e-d232e854fd7f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "502cd12f-8d32-4255-a631-de8a31b2d7d9"
        },
        "item": {
          "id": "f5d98ea3-9272-4a73-949e-013c5e3c0d1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "301e59d6-1917-409e-a536-f34dfa51a026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}