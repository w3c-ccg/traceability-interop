{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "33e73ec2-e2ed-40d8-982f-cb3e0cee8d36",
        "name": "Clear Cache",
        "item": [
          {
            "id": "96c3c27c-e5ea-44d6-b540-5dd60037706f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "17e5793e-aef7-49e7-9323-6a2c199d7b55",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f2c2126c-7e90-4afb-871f-3f8e3855da80"
                }
              }
            ]
          },
          {
            "id": "7c697228-c1b9-46ea-a56a-0273e8183d38",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5d808d6-e8f8-4e24-8399-849f163d1514",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98426da0-f3cd-4855-a43e-07b1ed899c79"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5a5c76bb-bfc3-4800-a71f-a924f55dc9c6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "701c295b-d9c2-426c-95bd-3057ec5a234b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ca5fe40c-47df-41bf-9718-f2c78043dd9b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "834449ac-d664-461a-a00f-af18e0379c3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "39b3d284-1f6c-470e-8897-e9b66bb5a86d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7da27097-54a4-47cd-bb25-6ca000e737e9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd3a3a8a-ea75-4a88-b1bc-97f5b02158bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8287ab91-bcb8-444a-a0c1-59ca2b93ef64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf4568cc-8305-48e1-b003-7000e5c09da1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "392a5425-e12a-461f-9eed-7a80e6fd1cfd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7ae9943a-64c7-4ed2-9e74-26b5aeef73b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4aa78a90-2bca-4d22-ba05-a37b0b0e2d12",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "003a09aa-15dd-4238-89d9-7eeca013422c"
            }
          }
        ]
      },
      {
        "id": "45cb8ae7-bc9d-4cf1-a98d-852747b9560a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "12d7c4d5-66b4-4c62-a277-dfab77b384b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2df19c58-bfb9-4a41-8731-80672e562666",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a5a9ad25-de47-4a52-91aa-3732e5d3421f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffb442e-709a-41a5-aca9-5f512db1fcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c897fe5f-f566-41ba-98e6-e062e319302d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57f2dbc-2ef8-478e-af0c-ab5bc7055d48",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377390ea-3387-4a1f-ac36-8658fd9aa5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e179fb35-f7c7-455a-a9a4-c92b05139420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9aeb8b-8e50-44a8-9980-ee983177e419",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c598f754-d922-42fd-8b3d-36e8b6bfebb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f569bc1d-8163-4073-be11-b36a4243220b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "14cfd5fb-a7bd-43b1-9ab0-dda968be7b3a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1362ada2-d960-4be5-a6a3-ccb8345992a1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97d4a98-0fcb-448d-a90b-316c7013f7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fadc1d3a-5ae6-4fb3-af5d-2b8e204589a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09caaad5-6a71-4f66-bd9c-b8697cceba42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544adce0-8ad6-458d-896c-9d5dcd526bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fa660f-019a-4bda-8419-792d29f0fbe4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ffb289-d665-4be8-af92-c64b747f175b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a48d193-0254-45b5-b5ac-e278a69186f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff64e439-9667-48b3-ba29-2f379f033482",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "82ca68db-dfc0-4682-a072-006dbbdf27e1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "aa25fce9-8bdd-49b8-9c2d-c8aa23865b66",
            "name": "Positive Testing",
            "item": [
              {
                "id": "65225b92-d5a7-48e6-b92b-be7cca308e85",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c609d9a-0f2d-4964-b17b-e4bbe3ea5418",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a4544705-9115-4b7e-bbba-f48911bea062"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "de1bf1c9-fd00-4a2c-a129-5b1248789507",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "fd6001e4-8934-4178-abce-514fa5a8677d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4e7e86b-fde4-4004-afa2-784c29ecfc4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dbdc45c9-fd12-4458-8984-a103cb7f1b89"
            }
          }
        ]
      },
      {
        "id": "ef32ba1e-3103-4ae9-b856-0f892e6aae9a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5986497b-7597-4b8c-989a-f37f05b428f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b96a2ce3-ef93-4f0f-b139-829931ce79f3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c3dcbe5e-1c5a-4237-8221-dd269b8c71f2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b33c523-cfc2-4cc7-a39a-3d7a26431115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d4e6610-42f2-4356-b777-164c2d83631c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f85cd5-97c2-4157-a3f2-07e4c6730d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61c6c559-901e-416c-8f37-4f96551b3c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48504f4a-d2f1-46d8-a1ac-13f2ef5df6d6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0324b781-3a59-4ed7-b96d-3c292fa29e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74de516e-1edb-450d-9e4a-4eefd800e6e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9607685-e5a6-488b-a930-ec042060ec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49866cd9-4865-4f03-ba6b-1143ff6b8b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d65aec-0713-4b19-bafb-13317c2b75f0",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90affa1c-d931-4a25-a9a5-ca291efa13b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68247d93-e077-4255-a2e3-a194830952e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68724947-64dd-4611-b9f3-7346a7dc09a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68b25dc3-2f71-4a3e-9325-af69669cd81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c80bbf1-41bb-4303-b85c-1bc22ed0eb50",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8ec7265-a8ae-4fe5-b8d5-1caf0e919370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7270fc19-685f-4e63-80c7-4fd6e2db3c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2b035d-3f85-4c27-afd3-ef87184a669a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "894402f8-b9c3-4ce0-8037-c8b6c0a396d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "698bbd13-f6bd-4a95-9e6c-169ffa742e5f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7d9255-7a19-48c8-a7ee-ffba4d7e9f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c943114f-0949-4956-ab5a-f41d225eb190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8cc45e-665f-407a-bf08-463c9eaf20d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d79ac69-633f-4316-a25a-e9f07cfcbf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384ef2ae-092a-414d-8ca3-df6c54336f06",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c081eb96-cbd9-4571-b799-30f46f383923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a567ea2d-9e42-454e-831b-ac547cc21e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bebdfeb-23bd-4413-b38d-207fd3759344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2294f692-df70-4de6-ac9b-f1a7ff743a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd1aff4-cca1-4f8c-b778-fc24540904eb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcd5f79-4cda-416c-bca3-fc40ce2c5324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0ceb1a-ebf7-46e8-bd31-8d764e67e784"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b992a1b9-03c7-4c1f-b0f6-46f040d39e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "280bca9b-7204-474c-bf25-c5efcbf4e581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df5fc14-2c8c-4083-9062-4a334f3fd16e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788922e4-9d0e-4e2c-86c2-79de6dc839ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e70eb60-f7ee-4594-b4b1-6b69b9f1e7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e589930-5cf9-4493-a1ad-89cdabb093ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e012c92-d5f6-4b53-89af-5fe885233475"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c217a9-5448-4fad-acb6-e33ce682e1aa",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09cbf10-adb8-4282-a103-627192f4c71e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ab486d5-fc06-469b-af86-38fe5bf1f87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5c7194-1303-452d-8f73-ebc1e11ad575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80ff953a-74c0-4f48-9876-7ae5269ca648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e678a0-c292-4e9c-95fc-8347e2d86b29",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8a311b-e35f-4875-b826-e48b7f9866cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e906c60-7fef-4c1e-b047-858cd23822aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7589537-44e5-40e2-a952-ac13f07cd393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "010a682a-edab-4b3f-a21b-605f89e5fd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807d0fc2-2e36-4cb6-8f95-1505017ca765",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41b2b9d-347a-43f2-b327-9458efb88295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31d49ae-83b7-4152-a8c9-355fcf731e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dedff0d-a412-4951-9ba2-8ec94b88a5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b20816f8-9fb2-4e7c-926c-784fa75493a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2e5d43-0d20-45df-a05b-433f024cd5f7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8484db-2512-4617-be78-2403c32cbb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48655fff-d9e4-454c-ab51-ac3a25a27da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b6e495-c3df-4b15-a846-bc94d4844659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45003772-0b22-4547-9a78-b96bd4394a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511ac36d-afc9-463f-9355-d50b786af95f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ced6c3b-3b10-41e3-970a-7edc437f5b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568a177d-adee-456c-b170-49d55610c65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65041eae-c83c-4464-aef9-2841ff672b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48d7165f-785f-4b02-be58-fb86c79ef7a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b44b263c-f8c4-4e90-b9cc-71f07397a4a2",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9105c197-3e98-44da-afac-bbe5885cd1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25707d29-1128-4a17-aaf8-9ec4884757e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbecdfea-5256-4624-83aa-cc88575a18c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b72b0a6-72f0-458e-bbd8-76df72fd1564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b037cae3-309c-463d-b175-db6e88a3c8b4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be79f51-560e-4ad3-a14e-e2ff604dd8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8e085cd-ca9c-49b6-afe7-f31653678c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63596096-b17d-4ac6-838d-12e298d9be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbb4aa1-64e8-46f4-a819-041cff0760bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff90c467-af18-431f-9a05-952d5c32fd9f",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4ef0ee-b9a5-4ab0-b092-aeef892f8f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871d13b4-cb50-4754-8a40-b97806553f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3776e8-89d1-4c16-9f13-ce0560b9cc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eeeb61da-a688-4544-9178-62ef255166d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762f0a0f-8c43-4443-9276-bf164272bb94",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9da6278-1503-4f95-b85c-e58e46aa0957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed59f447-84ee-48b3-af6c-e20ff3dd2fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50ca94e-897e-43e6-aaa2-a5d455009479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa84c80-1501-4b84-8de5-ae0087f7bf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c75379-fe18-467d-9168-07c1dc850146",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb15df1-5c32-4248-a2ff-97df166901e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d81b550d-cd26-4c21-9446-7622aa8d5c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0522da92-7ab9-4b41-a12e-ee12cf704812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62aaf1b7-d718-48dc-9bb8-7d1295932ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abbc762-5d49-426b-b23a-f00dd127c2aa",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0118f1c3-bdc9-49f0-a4d0-c317fb8fee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63649af7-2625-49e7-bf84-410d2847054c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb59609-fd97-4378-ab7d-d7aa2fb5aa47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "825a835c-9b29-49a6-9668-f55a1cf18fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42123957-2b92-4358-af5b-b483263348f3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d66216e7-e9c7-4616-9652-298f66bcf00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde40229-414c-41b0-a71e-1e75bf6aefdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d93da79-782c-4dc8-b547-afb1e3eacb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff487f94-fdc5-4751-b331-5a0164225aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2753bc-edfb-416e-a4a5-64f226f9a12d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcc8daa-524f-4041-bd28-371be9ad22f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ee40cb8-430b-4be9-82a0-68ecbf58ad0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518b96bf-9ce4-42d8-810e-25e9ad54952e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15a8153d-24f7-43c5-a88f-b2295a688c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a39337-bc67-4b1b-9b49-0423c8c684eb",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd88b23-2892-4985-bb38-4516dfb4282e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f5cd7a-0e22-4eec-a665-37bbcbfe7137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bd9c43-588b-494f-a773-f7381948486e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "733bb4a6-f3f6-4483-9c16-135f6fb0a926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aec1b6b-1285-43de-98ef-aeb7d3a95791",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf5dc25-04d9-4767-abab-a9346b2c9bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3610e6a3-d20a-4d56-8d85-75bfe4fd057c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95ea306-366c-45f3-9e82-deb30dab15cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67faaa35-37a7-4fe5-8c70-756127ed54f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bc0374-a6f3-434d-9312-d9d130cd905e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b59b2a-91ea-43bf-afa0-48583d203654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd641ed-f287-45d6-8933-35b6f97feee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71af56a1-872b-4644-b22b-6f907ff2350f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "46b242b6-d694-40a1-8a73-cedd84b6da1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebddf31-8380-42ce-a7c7-60cf0dad5a3b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c832fae-9280-4deb-807e-47c1c98fab87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da94d4a-27e3-4fee-8f9a-fc765971626a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96e1930-af38-4cfb-b694-d7baf763548e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "459a4e76-1001-4feb-b5c3-f413714f5352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362b8862-d4b8-4653-9455-cfea3721b1c5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391718ed-0312-4968-bcfc-7d51ce9876cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002ad1b8-b842-4318-80b3-37cdb3f47f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89946521-04f0-4c9c-a225-003bfce8dab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf8b9674-1b3f-4714-a854-7511cd497115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d139ee-6469-497d-8492-5aad50a378ba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12896223-cbbd-4f3f-8c2a-ea26d8f78de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fc512e-3ac9-4a17-ac3e-8e8283e8d310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df1b2ce-8bc8-439e-a855-3fd6c03f219f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "007f75be-edcc-439f-9f72-26266bbc37b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caca1aac-141e-4e40-b7a1-34097329bec0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e141fcf-95c6-4262-8b58-19194aa021d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e610ed70-d0cc-44db-a20f-e115d74bdaec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cbf145-f9c9-404d-8cb0-6bf4bcd1739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ad359f-f8c7-4af3-9938-6fcb6391a30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5c5fa1-337b-4ecf-bd72-457519c5f084",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac002b06-f176-4b97-bd11-f4ec5a903663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891185fd-19c9-4b66-b963-764f1b017359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa6127f-ac40-4d66-a191-49f4824d7be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30127f0d-0b86-4c49-a339-f6f409246403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d8a4cd-9683-4b9c-ade3-2df0ae88395c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeec683-aa9f-4903-8a1a-2832f259d236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64ed05c6-289a-4e3d-9959-53c4aa9570b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02f5e79-4f35-4a06-b931-78be6357d454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a8b4379-1894-44ee-bb53-d0a2b81b514b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7913cf-96c9-4de6-895f-0a2c700ce9ac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f35d64-1308-41bc-8c7b-a621a947c13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230b568f-0c75-4d92-a3d8-a0408e271550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e716da3-55b4-4279-ae11-d8ed272a8f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0da7ec4e-e203-4fcf-9721-b223bcbb4eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc048e6-2f83-4e4b-94d3-e2ceed71f307",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45613ec3-fd90-4a8d-a8a5-2fb613159a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c07b6f-5184-4283-a3f0-34ed8312c9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77aaf76a-63d9-4931-a026-1c298ec0baea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b92d48e9-87dc-4d43-8a26-ebb0ed2b7e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7ce1ad-d374-48ce-b44a-6d9eb619f54d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c533f84-66a4-4d7e-8e17-17b7d54836f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527730b6-e9bf-4194-9224-812f89a88f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97b62f35-511b-4a4f-8d8b-06e67af2541d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2205f35d-6897-461f-b893-e2e87ae67f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8a92c0-ed58-466b-b69c-d08a002f5017",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21f96e0-0881-458c-86ab-6195c6043535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb959d7-bfa3-4ae0-97a2-f5e2640b7752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83da5e1-bcf7-4a6b-b642-84ea488bc7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c75453b-472c-44cf-b96a-f4dadb27e437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806e503c-9fec-4b64-a159-cad345c3d69e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de8d7f5-3a36-4262-a70f-a2a298522779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924b2bd3-4880-465e-82a3-ccabc81ea299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257b3f73-6370-4cf0-afc9-5a442610d983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c642899-2f71-491f-804c-c193aec02ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bed8e92-2d3a-4653-b026-ac652818e9ab",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589f234e-7998-4e72-a4f7-82f1e2990972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0c4166-c213-4e7a-bf59-f761151c095f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfaee72f-d5b9-44a6-8d32-908800e0d7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "136bf516-8593-4884-bf38-da5b6ade90c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9035c766-9d47-4cd8-af9a-92713d2ace8f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b523a9a6-5bb1-41e1-9c18-fe69a9017dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f0a5fc4-fbac-4a20-9253-a853406221b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc4bf96-07d0-4c6e-b784-1b71c4667836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8f40532f-e656-4ffb-a7e5-60d78ec5e8d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6559edf3-84c2-4aa7-a752-d85a5f8e8324",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f84242-6600-4bbc-becf-ce956d98607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ba54ce3-ad78-4384-8abb-9b4b46da648c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566c284b-f41a-40ec-9054-9b121780d285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b03a6e08-e553-4d13-8909-1c7f78d2da67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c87c6b2-7da9-4f10-81ef-f06b244f6667",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cd5b79-9a21-4cc7-ab86-d1f7e98d5bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d38c73-3fd3-4c10-a732-e09a66c0113e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b39b7445-64b3-496b-b89a-50fc804a7e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a24b35fb-956f-4f71-acec-ae77f2291e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d137a10-4226-430f-a863-de3f6ee99fd9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fe7845-3b0f-47db-8cf7-e4ba825f622c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef67e15-15cb-43d3-9ccc-ef0b88949018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe4cb6f-c46b-47eb-80da-084d733b456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "562e360c-096b-4dea-8dab-301f29c50147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1461dc2-1345-46bd-b89b-d4d3401f8a68",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ab13a5-0112-493b-9510-357cb1223eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffb7ff6-9da6-4789-bf3d-977c244fcc24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b37d140-0139-4bfe-b21f-fa1f08e07d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a53f581-7091-4972-87d6-673a3c90e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b24f37-c2b0-4d13-a17c-4f1a8ed92702",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12db4d9-c047-4788-8fb4-05b6968e09e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "207e32af-637a-446d-98ff-3df6fbec025b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0767ab98-cfb0-40cf-bab8-b9d7b0fcbbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f59d7d4-d74b-4b6a-8960-c67885432814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbdbf6e-ac51-4a8d-9f85-ff2c68b79152",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bd14ad2-e1db-4eea-9e07-886303111a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf06a424-52bc-4e30-a5cb-02f4c61f89d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b3dbbf-3796-446b-9ffd-d5b40a135526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7742df-d8f7-44cf-bc18-3c6f3c272084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb89b171-2fdc-4aa8-9127-2e6cc186b781",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de4eef94-1e4d-463c-89d1-471a9f6be44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a317d0-70b8-4e1c-9237-3f4a764dc057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f7ed53-a811-4a19-8183-edc6d127fb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2967b0-4b02-4bc1-9e18-14876ec0dd43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7093ae-6c12-4416-95c5-06ffaac3f80d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609bcb23-f04d-41b3-8558-aedbe8de9c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7655629-4536-4604-8efc-356055ac336d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5629cc17-81c9-4bae-b11f-770d9dfd7779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a786ec14-cca2-44f1-9628-8659532df55f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e12095-43a8-4fe8-b965-d25b17639a3b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05e6e2e-e917-4ce0-8e5f-3d51aedb1c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a4c7e4d-1493-49f5-9196-4fa02df1c08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b847435e-e1a2-45dd-9495-623e5a67560f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec1c837c-b88c-4a85-b474-475ff1fe7e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62901fb8-5829-4db2-8002-ecbf3deeaaff",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9523a8c-e3d1-44e8-99d2-6dc830aa2a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd39423-1817-4edd-a04f-2780f31d85e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e75b8a-70d3-43e0-82e4-7c151fc03835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "62026af0-0ccd-4385-9350-195f3970c00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67150739-fc2c-4914-b1f9-b51ff638bbcc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7eef335-fc36-4830-80f9-49350f82d26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff4e63a-e2d4-4063-8539-47d5a74125d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab37c3e-95c9-4245-8286-224c708d969e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10e40751-5890-4275-bda8-d594a74cd24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe662d61-3733-4d7d-a620-f368b1859ea1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d786503-3fb1-4ee3-b681-9a8fbc2a8e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0490036-a50b-401e-8478-34f264dc7995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3030e8e4-1ab8-4dcc-9a15-7ee2e4125675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "969c4777-b0f1-472a-ad38-5be6afd4e50a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c9ed90-6a82-4c0f-8704-7edde43175e3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e887d4-185b-4931-913d-17b16aad0a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b26c99-b532-4615-9180-ab2e6d2e8ec6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ba6cda-421a-430a-8cf4-21114d7c072f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac99759-93d7-4c3e-a40c-6517c1093e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02053805-52a5-4988-90df-81004a5caf40",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3e4351-1951-4e6d-a51f-dc42c6c8debf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab98537-a690-48bb-bedc-2d6c87a4cd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29e117a-2297-48f1-9b37-417ad1e2efa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6df12fa7-983f-412e-9cda-bf3616277615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a351ee04-db5f-4134-a6c3-02866c685a5c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e05524-2d40-4465-9365-496f24923b7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c5b07a-2c50-40e1-a713-47e830f5fa02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d98c3aa-537b-4212-aae7-99dd533ac94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e75e9c8-ef0f-4362-b9bc-b97dd6a1e797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9224ad0-6687-4e29-ab31-12b099360ce4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc39212-1ef5-4fb9-92eb-288d0fa704ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eea15fd-648e-4711-95c4-41c73a4a448c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1a3585-c9a3-4d4d-b3ef-3ba99145fa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "82a730c0-10ad-4e6e-8322-3e22773d47cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e37c0d-4896-4f00-a8fb-b35a32089ce9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46b09c-59ab-437b-9a44-50c0153a7d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051a9dbe-c6af-4a3c-b3e1-4ad5219aba9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5bbbc8-436b-4085-ab8c-581447e7301b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9691aa77-18c9-4a74-90b2-6ab8e0f45882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0002480-f15f-4c40-b0df-ecc428d31c22",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "840be164-fa69-4240-935f-4ac40141f703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fde9da3b-0c20-4ff2-b34f-b8bc19db16d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a508c53c-8861-41de-a3f2-16e4857c0b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69318ac1-e7be-4e56-b1f3-314c0dd5dcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ff3e67-0c7f-47c6-8d6e-a81ba041adcf",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f95bf2-25b3-41d9-aea4-90f856a8cb04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1283c4b5-5720-4b17-b018-5e4494b0bd55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13dd5b84-d2c7-41e8-aeda-908a3a5ec931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13e4191e-e192-4b1f-a5ff-a73db75f435b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a469c9-325f-46e2-90c1-6fab4de6ffec",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536d17f3-40b7-4063-931b-fb17d353b394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c701b664-fbbf-44a2-b8f2-ce97d5bb9826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f42e59-862d-4bb1-8bdc-fe3071bdf4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c03ab3a5-ce92-475f-a78c-3e1ea1fbe241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8da388f-1ee6-420f-bf82-1ccb047512ea",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6523ca77-bf73-488e-8d82-528fcbf48842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "333c7523-8c3c-4ebb-ae33-d32e7fa9075d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4602c0d7-032e-4e51-b118-923a742e8618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cece0c57-8a1c-46df-8af8-7025e649e112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08d8093-dd9b-4c26-9ebf-6289fb88efbc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953792a2-e69c-461d-8216-7d93beacf5dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a72500d-76d0-4764-ac72-453033d39a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15d6989-99b3-4168-87fd-db0ba3e55132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c03b1958-8319-41ff-af8f-f5b7951655a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473d9c23-19b5-4664-8738-f1ec5e0125bd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73ff671-5a7f-4f4c-aa28-8e02a4f5be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46e767ab-b58b-4f27-8077-a2ad6a103b0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa400471-4a26-473d-9bd0-cfb9a0b3279c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14f897af-40ed-496c-936f-8c92974b2a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83447b6e-5041-412e-b9a8-edfe88d148df",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "650272b7-1c99-42af-b5eb-e61ae81ae5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8def7a-b7f5-472f-9e4f-975d36dd20f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d68f214-9e82-48c0-9a2a-9108aab5dae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3654b07f-b9c8-40ee-b679-dbd19b5d1cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4e6b36-e846-4a73-8d29-96e313f480e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba89ff9-04c9-4c07-b932-00a1b9b6ef45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860f3d7b-8828-4340-9c38-ea7b2d1d2dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0c6e15-1e56-4c0b-b3cc-200d1ddeac1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4110fb-ea14-47c9-ab1a-9afc39edae29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3efedb5-0a5e-4d4d-8b0a-8f9db85c8ab4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427219f0-020e-4dec-a716-72255fe7257d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b4bb038-2db3-4114-a50e-d8034bc9c288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f236d722-062e-4a9e-aef6-8c9462bdb828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a70843b8-378e-4e23-9d17-ecc2d85c8050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c197adf-ac17-4efd-8089-b7b8fa7cd5fd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902c9f6b-c42e-4a73-ae8a-65cacd3cd85e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62046b41-d864-4af4-90c9-2cf697285492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b5af35-3af0-4973-b8c9-bf6a232e689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9d04ec-75bd-41fc-8b28-4996cedd3c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab48db6-7d80-4275-be4b-be51e5cbfd1d",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8618b2-e3ba-45b8-bf12-a462b67fb69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3dd6e71-f4e0-4b59-8080-4c9d9dbdb900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f28171d-8321-40d6-8b10-9ce39fa45245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6101c028-ef89-438b-b0ca-c0aef66e1c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2cd5ef-c38d-4670-b1e2-f555aa0929be",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad40eef-2401-4ea5-ac22-e4c61590c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f89fe0b-1e3d-448a-b0c9-33e0d2bb3b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde799e7-6a54-43a8-92e9-2218692b92db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb81976-43ed-4682-bc65-a7984d41aeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2e4399-95a8-4a16-8711-6abf7532017c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba62191-ffbb-4049-a447-6aa2963ec8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0adaddc-cabd-4d39-bc82-dc81158d76e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d9e618-3fdd-40c7-82e1-c41a14364118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b64e4164-127b-4c93-9189-4acdbfcb4c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60027919-8a75-471d-b342-9601bd4e4a19",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13426e6-e5c6-4e92-af5d-0a06d3f92a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23113f5-151b-4775-a7f6-a60c8086e28c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2cf053-bcc0-4ad2-890a-4d2f45db3d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0efa8fd-dc53-46ca-81bc-7efdc8eb4132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854d5615-8bf1-4efc-9494-9d22e3c6ee7b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54eb3a82-0399-4d2b-98d6-28a930f49269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23256c21-0ad9-464c-b7ec-2dbe6444a6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4042ed8-35eb-44d2-a664-d4144b937e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcb29b6-d06a-4446-90cc-84cab1e0e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd391a03-f2d0-4e60-b0e3-46f957d12f54",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbfb7e1-bb6c-43d8-9ff0-0381b0598446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7f654f-4ccf-4d3e-a4fb-dc31066f08c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51137e75-7d4e-417d-a183-b13c4f696ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "00d52eb3-5c10-437e-8cdd-a1f8dccf2609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71fef06-239b-44a8-941a-e399904675af",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a329967b-49e3-4bd7-80f0-200835781da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd1064a-6968-44d2-a3af-59c20f2d71b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe61b799-f56d-4542-82b4-ab35e66fb580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "66b5c315-f65f-471b-a0cb-a1b7486ddf40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248c8f7f-615a-4134-b7d3-cdd7dd0740ef",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df46327d-3c72-493d-8f64-cd3d1742b5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63541f74-eb6f-4b3a-9169-6805b44dd88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d94cf19-781f-4212-9d61-0f2beb178e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8d7625-33f5-481a-b773-f03678508d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e81be4d-ac3e-4de4-9cec-0787996616e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d23efc2-9e07-49ff-9d03-5d25d32b5cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a44e2b9e-d840-4467-9719-d1541347f7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9340641-f33c-4cd4-8e67-cecfd50103de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea143c7c-3c7f-4876-afd7-f75847228f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf02c34-b27b-4d41-8ad0-c23539bc1d2e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d554c1e3-e040-4d4a-90e7-7a211c8aa23f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e0a7a2b-34cf-42cf-a9be-6fe0d6965931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cd9259-5023-4752-a7ec-08c6ab8a039f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6608be63-5a3e-4a0e-ae28-c52b95c682f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428892a2-315b-434f-b01a-fb97e8efe473",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27af04b4-2bbc-45f0-a157-f1a9981f1df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec714c1-9357-44b0-8be0-3574b0fa4711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04702581-87bb-4d6c-a432-0266bc53ec0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "581913a5-1540-467c-9d55-93ff68f4b0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfd2caf-29ed-4826-be11-a10e3ec1bb5e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099d7765-0068-461c-bb24-4ecdb3001d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c41fa94-ba38-4cca-bc92-a738d16903f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1094e4-3e5f-4aef-b820-f64c8e514e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66c0de1c-dbf9-44d7-9482-56e473c07b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024d2b8e-bd86-4586-aa13-8b6040653fb0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5978ef34-edb9-43cb-8a62-413fbd6ab46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401249fd-9664-46b2-b762-597a504a945a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98882bca-a20e-4053-b30f-24e5ed4a23dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88f2693d-cb14-43ae-9b0a-edbfcf258e50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47370482-b690-4e3d-be7c-4dac7c259a73",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b154f2-2050-4ddd-b33d-8a79393ad954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02ae0c4-d9dd-4857-99e2-55d8adf3c972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cee9c4-9e9b-43a4-b4e4-e63b24071f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff6f10e-fd78-47f3-8c4d-5105faca759b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068ff070-b71b-4108-b610-d8569e8cb1f5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18573db-13ce-4b94-a9bc-680085a4cd92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6899b13-879b-4811-b302-858631b118bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4382b821-6c7e-4188-bb9e-d310982cd865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae6b6b23-6ce9-4afb-89fe-a0f7ca7f0399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e147b2b3-0128-46eb-a4ec-bc1dc0fca651",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466c0a2a-a159-4dfb-82bc-28f994eecf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b5bf7e-9945-4190-bf84-358aa706ca8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3143afce-3d0f-4cba-87a8-4fab91c4a04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf15c39f-7aa3-4af1-88b6-8ad595606aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f951fd-4207-47ce-9dc4-b831c5e6af6d",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3959304-a473-4ed0-9de9-1ff9bfb84a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57252e9c-a9c5-4328-a904-da2ae536b351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8359dd4-5b0c-4fd5-93ed-c34ef59d5d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7f28e8-49ae-4547-ae65-a4d8276608e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bf06b7-acc0-4e6c-8b9b-eb0b8a986ea7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6334efe-2c73-4954-81f1-72f1715280a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88acbe35-48e1-47b3-8f8b-ac36c9308610"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37714fa-02a4-419d-894f-8521cc6e9071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2705d116-0c30-48a6-a54f-46a5bed8e7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a717bc21-5405-4fb0-9c9d-65f08c101211",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96fefe3-8f62-4256-ad79-0b753fc87bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6188176-125d-4915-90a7-d5ed7bc01536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "749b639f-5094-49de-804b-04e46b2581ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d36ce84-5b40-4e40-ab7b-90b8558b0424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a5a24a-ca84-4bc1-a435-2ea50022f217",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec9a7cb-8848-4c69-86f6-ff34a3129c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6520a19-a3dd-4dcd-9e1d-4ea68fe503b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605a93c6-94da-4d8b-ae37-d65532c47279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c456c31-85c9-4f46-92b9-514151a3df27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7338fc2d-f6a3-4d9d-869a-5f7b66e318ae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1c517ff-e19d-475d-916e-81b65f439b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8926b234-84d6-4e69-b37d-98cee9b9fa9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0520f94d-1b90-49f8-ad60-e703fa3aa54c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "99ee3959-8b5b-4909-9feb-dd1114dfaf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187a42a4-f8f6-4267-83c5-eac5775c9a52",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282ce06-325e-482f-9784-dc9325af220b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb085b7-de97-4447-966b-924bd4b5a285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a574430a-8c71-4c4f-a7a6-cc7da0e36aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58ec3d05-7811-4d55-9483-f232a450cf45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a444e9d-4a87-42a7-8576-878c1e23bb32",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d5a6bc-a4d7-4008-9b94-3bf87c4741a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a25462e-97c9-4fac-91c0-59bf897cd064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97369938-e1af-499c-be0f-7765c3dcf911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02d41c45-5fa6-4bce-aada-42f7f03b448e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9d056c-f9e1-45a3-845c-e28b4f709bea",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2540b23a-7c29-4be4-9afd-3338b598b849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2709384d-412a-4d24-ac97-b2fcaec2c5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068eb04a-b01b-4b31-8e49-367e7f7aa630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e698a2f-34af-4777-852f-2f213aadaf22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1657bdfd-2a95-48d4-a77a-e1dd5af0ba1b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fa49dd-f3dc-48a1-90f5-9213309e23f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc76696-b13d-4f77-8217-d911b7183b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee2bfef-d798-4fd4-89da-da60eb7f8dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "569202e2-364d-40d9-8a8d-9e9dd1bd40c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7a47a7-92ca-417c-98a3-79ff926ee904",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3a5e09-d25c-4cb5-9cd9-fa841f452c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef02b56-e48e-499e-81be-116ada887808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b720ed-0688-4060-926f-ceff97552e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "12d6e481-2478-41d7-8117-b2da63481dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1078483-ea2a-45fa-a805-8703474ec2a0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c0e4976-4521-4afd-b315-52f21587453e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f60027-edf2-4e70-9578-959adbdaf75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dcddfd-fc2f-4c13-8e0a-c50938da6fdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "04801aa3-ea56-40ce-8015-059e19079822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1fd997-97fd-400b-b7ec-bbe52130de9c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cceb470-0cb4-42cc-a424-d06ceb08745e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551921bb-8f55-429e-86f2-36cfad47a9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40726fd-ce6e-4e16-8fe2-e0c3cc8dd0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5445eaee-3fef-4e8b-8405-7d331c3cfffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5a6037-0351-4a47-9b9d-3ea7af50296d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70f2dfe-7bc4-4ad8-b944-864751ff0f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "074c4a95-ab4b-494f-8422-ba0a74eea949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff6cf57-9e3a-4c35-ab3c-b7f2b3fbee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fe128b-c279-4887-8887-80f033533690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00685f3-4bf1-45c5-acf7-e805d79d9077",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1683be0-b6e2-4782-9206-2ae8d7e7cba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cb3e1f0e-bb0b-4221-9d7c-ce1ad4689b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de9e8807-35d1-425f-bf9c-c8a2cf1079f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7da33a-eaa3-448b-85e7-1b204f5482c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4cf5b1e-7689-451a-a261-041b0d0be4ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa366856-fac4-4a88-95f8-388226bec5ba",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8575a63b-ed51-448c-a835-511f610cfb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "815a9e02-5349-4b6e-a744-3f61048cf380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290e4fe6-d642-49dd-b90f-1c5f31b8d4d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "dbc1912e-1617-4544-a859-58f0db57f98b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed7e5f7-011b-4362-90b4-4d5e19374495",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e23ca8-8f0a-4fec-9c04-b117b07eb5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "100414b0-a46a-4651-adf6-9dc06fba2835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bdbd60-996e-4fa8-998c-0a55f64b3c7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "12b1428d-f4ca-473c-9878-b6c0389f2c90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf841983-5eef-4357-8ffb-33672d59c1a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ef1366b-9d74-470f-b0c2-8a7e0f2e2a65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ebefdc0d-e148-4355-aeda-e9c8b47d4afe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64d3afde-6c66-4e1b-9791-caddbd74564c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21154ea1-269c-403e-be4a-54ae83eff0a5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47439cfd-6a4e-4ed3-b56a-54e1ee7a71e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3c87707d-707e-4421-9465-3fca38474f34",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "59cccb7e-e37f-49de-9f29-759ad370ad22"
                }
              }
            ]
          },
          {
            "id": "5984bbba-dfdf-4dea-aa2c-a3eddac1cfee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7c57ab1-54f1-4f9d-a808-3cdcd5325ab8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b233d7d-bf8f-4015-b201-578341ec75fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "24b0e858-178c-4ddf-8c85-3a5e9ec3c9a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "779da545-a5de-43b3-9112-ddba88b888fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52d8b7f8-5ace-429f-9d11-d9f769ff87f9"
                    }
                  }
                ]
              },
              {
                "id": "0ccdfedc-3e2b-4ede-bd79-09f1a2e05fd8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55513d32-51e2-4554-86ac-ee0ea48ea70e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ef63c61-d8d1-469e-a471-3335b68778c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d17db121-4167-4924-9172-0a28afac2dca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cfff5abe-4bd6-4585-9d5d-52985bf4dadd"
                    }
                  }
                ]
              },
              {
                "id": "f852e75c-2caa-492d-9e48-c0f58932fa64",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00caf4df-d251-4b65-aeb6-e42b4d50b0b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8eecf94a-54a3-4d83-95d0-4725087be6dc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "560eb47c-adb2-4a0a-b6d5-3546b036dca9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dc51b81b-9823-4a8b-8687-230bafeace73"
                    }
                  }
                ]
              },
              {
                "id": "d23a5ad7-ebac-490a-b5f1-dd8df1a1395a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c8d715e-3918-4f7e-bf30-f421480fed69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f255b6ef-0df9-4189-8c3e-0a4ddc09e6db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ec663cb-5d59-4a6b-9d96-87b4c8d0be38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e8fdc28e-3241-4ec9-996b-538d947a2f43"
                    }
                  }
                ]
              },
              {
                "id": "033ab942-2e28-40f0-89b8-db98325893ce",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0722498-7020-494a-9007-359933af3c92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd5211c5-3bc1-4652-9021-27adf533f5b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "817df5ac-3efa-4ec5-bda8-61ec5d9f30ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "796366f1-04f7-49f6-8094-fdf3925f6c16"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1577c125-bf36-4c16-88b4-7ed972bc054c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5c96353-468b-4359-8e63-5a96380ab024"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "46613fed-f290-45ca-ae57-ecbf7beffe72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "875008d4-2e06-42ce-8bbf-bb6f1dc49b45"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8bbe9239-a77c-4b05-a7d5-2b6f28cfcd8e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1a481cc5-47fb-40f1-99b4-d9dad6647770"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7ef4163-0ec5-48da-b2b7-9430d2fca558",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe4fe702-65c8-40ef-8c7b-25347bbe689c"
            }
          }
        ]
      },
      {
        "id": "dbf8489e-31ac-48f5-8a0c-0f346e3b3f79",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ae0ba329-e91e-44c9-895a-5d26ce804ad2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ce10a05-2c6e-41c3-81d2-d2ee0d40a0d1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5e536caa-3a1e-4254-bcfa-6796c3eed06e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4507c462-0d65-41dd-a940-f0fbfafb9a8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800b4c2d-6f62-404b-a346-72a170371d78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8124ee-c467-49a2-afc5-aa42ea67700a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "da3821cd-a416-42a6-86aa-414f669a1659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351b6571-5e68-437e-bd34-37750b1f5a10",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a9dd90-9a91-4b73-a524-b6bbbe1f256d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747c17a2-f42b-4159-8637-cebfa31e473b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14310ee-9196-435e-a337-1fcfeeee1d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "622397a8-f6be-44ed-a0ec-3244d1168fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137b2129-be02-407c-b4f4-338ac96e6ce3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94dba73f-d11c-4501-9df0-49e3125d9751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e99a943-6e0e-4ff9-a343-ff6a55bb6689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff070944-fe94-4bf1-b549-c6b39857b1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f44034c6-2779-49b6-852b-bdb0cc023585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813322f9-2285-448f-8086-14c1ca3ed81a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667a8c03-00bd-496a-a5ed-70fb3e3b7bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdeafa2a-631f-4531-90a2-3ed7636379a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2887b800-6d60-4208-9ffe-94f7941fd6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d21cbb2-460d-411f-82ca-195ba980595b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ba8f45-da93-4eb8-a080-7fab8da71e39",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74034ded-aa0d-4587-9915-9193b0bb458a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb886701-59e0-4991-a5d4-2ccb2796c420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52afcd0-a8c8-4811-8f97-0c39e728aa55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b57e4a0-5020-47c0-96ce-84e75d28b8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9100e2a7-df20-4463-96c0-7e30b1402e14",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185bb047-412f-4922-a08e-8fe885364ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48020798-04fb-4977-8518-6065d1795df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba34da5b-9552-449d-8b2b-069fd9e4e877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3929ffb9-670b-46fe-bc85-004aeeae1650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f39df3d-d441-473d-a3a0-d54b960da386",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32451cec-64ea-4336-8d49-b8b79a6961c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eada636-0958-41cd-8758-aa4d65a3b7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f9fb2f-1fc6-4607-bd16-a6c44a919506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9105fe3-e8d5-41cf-aa68-3990f1f9253c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9716163a-02ce-4b49-ae23-633495e0c820",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "980caebb-45e2-4a64-abb1-7bacfdfd1ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f72cb0-52c6-4ac1-8130-7c345897238c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97c2df0-0fd8-4ec9-90bb-6014ca6cb3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8668a4da-d778-4cc0-a603-98879911bc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee3ebdc-b493-4fc7-bf58-1a81b50273fd",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8496760a-9c5c-4876-8556-6b887400a590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bedf50-aa10-4f3d-84a1-a6d57870d887"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138de4b4-54b7-45af-aed1-734d167dd514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6fbabf-c099-4b8b-b74e-7a988b1f7be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a841a776-7b37-482d-b65f-cc7c5639857f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb32301-ae9b-4641-a7a2-b7ea983791c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e746599-6464-41a1-ad8b-c290fd6bea8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f34348f-2fc9-4536-bad6-9b9030228827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50572426-417c-4f2d-9061-45eef8356e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37a5841-2f32-418e-9afe-56f4a195213d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a7e81e-d48c-410f-8d59-7f9fe03ef7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cbe49e6-185b-4b10-89ff-b8f1e656008c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23f806a-ebf6-4005-ad14-b6015e0d99b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e23b6262-dfbf-4455-833c-46bfb85d4a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ad02c03-e12f-4499-8c5f-bd20021da8e5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c40b51-8adb-48b1-b99d-ba560375ae16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37735f77-74fa-4df0-ba19-99fa75c661b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41f5d5fd-da94-4c6a-936b-6a8e0e09be97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b80a04d9-e0c5-4e47-8f4d-b0fbdd1f5eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a2e4fc-b139-4dda-9191-aefda032e4b9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e75e56-608d-4a2f-9bac-f47f43b4f857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceacd428-ec72-4582-b23e-3f65b6092228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acec0af3-0f43-4bed-841a-6c4858f47519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "107f6f0d-b1a1-40d2-a792-2202b43a5dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9955757-fb53-4dd8-8850-fbbbd4a23083",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37947040-261e-4eaf-bd88-036275226bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee4ae64-f50d-42a5-86d1-972c43124b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc192b9-b39c-469a-b732-3e7f9010d229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b31fb4f5-51f0-48d9-af30-05adba3b863e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71175d90-eaba-432d-9109-f747ea9f7f44",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4cd3a6-6ce2-4515-8ac7-382c75dc498e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78ee2a9-6bcb-4642-8131-3f19a637becc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c639cff-628a-4858-80cf-7207de5b9ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ab7dad-0cb2-4141-816c-778563ac6d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4600149-c054-4909-b538-3b10db6d19ae",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2ae6ad4-eba3-4cbc-8668-55638473969d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919532a6-081e-4519-b987-01603cfc9571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76cc615-eacf-4b91-90c3-610a67666896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d83046e-eb93-48eb-9569-5c0344434e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5f9328-2c0f-40f0-84f2-a42f17af217e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473f0e66-48c8-4859-895b-330ad85767a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9712124-0ec9-486d-bffa-f6d4fe89990e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44880979-092c-48b1-8685-1391ce94e468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce884dce-5e15-4fe4-97de-55730c8c1b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7961664-ee5d-44ee-941b-e246b8a8bf54",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f417d615-1461-41b2-8c99-ac8f9965de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e77d8ab3-1e70-4fce-b42e-02cf07345ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dfd2d3-c2e8-4b34-8546-4829d6d5c803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e629279-91e2-4e99-90bd-b9e6a5bf5ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce1aed9-eadc-437e-9df5-def1e2c6ce37",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940970e1-e205-430b-8f4d-d0baf550c28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b88562-c705-45b7-ad04-f8de436720a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9d0fc7-5971-480a-978e-b7d04df3648e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82cb4b42-1987-443e-b63a-6f292ec7a8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e2f623-dab0-4878-beb2-952f93660d8e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529694d4-90eb-4d4c-975e-c07d025fb45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9111ea8-f0c4-47c1-9f2d-ee6c93ce9d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed1630a-9c15-4ea0-ad08-863f1ff990d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfeb7393-bda4-46ff-8bc9-6f22f62be407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600f9ae9-8d39-4716-85cf-84edb72570d7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932ce70d-a426-4ed5-872c-1448afb10c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67db2786-b2d0-4fbc-9c18-fb0b96ec1457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd70d87a-39ff-46ae-a7dc-975a47896fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a82307a2-604f-454e-866f-d2b021cd17cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9b27a0-74ff-45d9-a9fd-974d41860bbf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96904005-5b47-4be4-9166-687c5748a91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24368302-073a-4873-8618-29ce0986671b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca614d82-9443-47c8-aad6-14cf80226ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62dc6402-b002-4fc6-86f6-ef1e56163c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82e5156-f020-4e85-9479-0d3a2f0b0543",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d2c611-c5a8-48f0-ae7d-99d3e871588f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c55c68-2db8-4567-9ab3-801e45aab29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a75ab-810a-45b1-bba2-36b3f7fd440a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5a3935-e958-471e-86f1-d25e976a9cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a7237e-1f1d-4b56-ac30-1512b6f3b91c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79d4959-abb3-4370-8832-f05fa43fbe00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c86d2fb1-9138-42f8-b67c-ed891065ca4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f38d94-49ec-4522-89f2-559c7af707dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4feb1c5-dfa0-409d-9eb5-0975d7b11b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e925abba-06db-42de-b5de-5b4b7db4c9b5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f04c851-e89c-49a0-89f8-718289fbd0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f2fb47-6c54-4217-bcef-3ba2a2125df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8468bf-3088-400d-886e-e2f716485a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f1298b-40e5-41ef-a1ac-c2b88ab6cbd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929a2fa8-0512-48c4-84ea-98127f2a05dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b64e86-1703-4294-afa7-bfef0ea6338a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f2263b-0dfe-4fb5-9547-d9d074ad300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0879120e-3c33-4fb8-acfe-d8f40bb2c5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c27d025-7c77-482c-9727-4310e164a4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f663bb-534b-4f6e-a258-3aca50b29ac0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87623f03-5cdd-4415-b62d-a5055dbf093a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0473ae01-e8d0-449d-9c06-9229a6fb331d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "473f36f3-b972-49bb-b779-8f8a7bbc6df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12c2a77d-1f58-449e-b1ca-79cb2cb46f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be511b4-aadb-4789-8ab8-5348ef947236",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b0fd8a-c4cf-4175-b37f-1df1ae00a897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24c62be-bd4f-4e40-b94f-9add1d26a81b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3a04b6-47fe-43ab-96d4-66c2c7ccb2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4beabd8e-3ca3-4563-9845-b384494974b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962e92e1-c6f4-453a-8691-78d63f8d0d25",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729454dd-ee01-4768-8713-9165765f0418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93d881ba-1283-4989-b9fe-5a3a8c3e013c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5cdd9d-14a9-43eb-a46a-82c5741078b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c268d331-bf8a-4da8-8d1d-88a083abeb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fd3dde-8039-4e3e-98c8-27171abe6f98",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9781e0d4-91c3-42c8-84c6-948734137810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5523f8-6407-4ff5-b1b7-86a811575e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfdf896-8bda-4526-8cd2-03875b761312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1bb20a9-3ad9-4c63-a442-361e9f89ff64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2763239a-f5c1-4008-8b87-49d5f2abe091",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c6c251-b60d-4933-89f9-62086906310b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9d3d22-1fcf-4f91-b261-b5362dc8b968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eca5161-71e8-49f2-8170-4ac04f40991e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dafc184d-8bbf-491f-8222-a70818b1cdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40cc48a-4c8b-4a35-a7ee-e5aecf30e011",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8679f8-4832-48b8-a012-13bec5956733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4b2f388-f42f-4d1a-9454-714878a923c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b142c449-34c9-411e-b5bf-d4f8146619fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac8fa3a-8718-44c0-87fe-dc1c7b3b7c52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc17acc1-5f16-4f3e-8a0f-f19fcd9a0757",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc71e33e-381d-4855-a0e3-5a644d56cdf1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322850a0-8c37-4fff-ac6e-554a578dedee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e65cbe7-8421-4786-bc21-7271fbb30962"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c0b1d4-beae-4016-83aa-0a103594dcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a09675c-5f3a-46bc-b5d6-8293bed99b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "523f077a-3dbd-47d3-85a6-50ff56c00309",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b38f0c1-96b2-4cf3-bd48-c896552dcf58",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "c8b6b676-1a4a-4826-828b-59e2b115336e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000fea75-a205-4cf1-9f8d-ed3a7b126475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04b59d5b-8cdd-404c-a0f0-80f1a901be51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58b8b73c-f2d6-4948-9d36-39d04f97300d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c0f3712d-be4d-4c20-948b-20c8a0713c43"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3a2bc0a-f3b6-4a58-a031-731620ea5ebe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "142c2ccd-a3de-4f6c-b906-f8159a6756b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daba8624-6f6f-4c95-8afd-63bdeca39159",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e8bd43df-e2db-43d5-b9d1-45d43d45df0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "48a693e5-17f4-4158-9dee-33b28e8663c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "22a75283-dcf5-4dc5-a15f-5c7d46136269"
            }
          }
        ]
      },
      {
        "id": "a38b2f5a-76b7-4650-b397-9263f249e884",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "13e56a59-c53d-4361-9748-aa55fd740448",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b586e077-b439-42d9-b456-1359da69c5a5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "48440281-c73f-4229-93a2-d8d0f5c087aa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cd2f48-939f-44ce-8348-93db05ab5c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf36865-a9f4-4479-a482-51b5d0000d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a65bef1-e147-4018-847d-83b6e06a890f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8cf06f1-41d8-406b-a059-404d02a967d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708ca5da-7899-4e06-a49e-1b26c793d9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d74760-a5b0-4258-9847-c8b65b0ad393",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49de0643-c229-420b-b20b-7b6856d26c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ed0e3f9-a1fb-46af-a922-1b098d24bb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b62e47-60cf-4dcb-bf70-24bc3b52f8b4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faae0fe7-8a79-4d74-9fe0-9ee1eec01d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c39f0c-ec5a-4b75-aa4d-24ac5295e309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7151c4a7-cf10-4eda-851c-5091682aea05",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a535cf7-1518-4d7e-a54b-51bc4e4cf691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5da643-0341-482e-9894-96f13c569002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd038de5-63ef-4e5c-8dba-8ea62251a23c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c805194-50f8-4bd5-a255-4c9bab88a851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4e8e8c-54e4-4a59-8d10-5bcca1fd6e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574b6e8e-e4d8-420b-888a-d388c444d34b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c894bb02-3872-4643-9fb4-58a9b195f61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a60cacf-c908-47f5-8e12-dd12fa08b8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f67cd2a-8026-46a8-aa5e-2e9019e9b7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7677d9fd-63bb-45a9-b758-0b03297274ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d57e330-7755-4150-a39a-1acda531c5ff",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41b371e-9d21-419e-a079-5e53ede54530",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3c85cce-b145-4f8b-bec2-9c8977bf990d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2181a0d-0dad-41fe-961f-9e755163d0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec350382-e11f-4c91-b5f8-c186090c868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb35261-0173-47e0-8365-b536a01f0d99",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2a974d-7f0d-4b80-bc12-b7ffe3711013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d10851-e540-48ff-90bc-b8cd6a7fb93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153afbdd-f053-48b5-9013-c6b5937d0fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d55697-fe4a-4a39-bdfe-b381ca89b800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef4b955-fe3c-4938-a0e8-23da75e8b769",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1ca31f-6519-497b-9874-950721af45e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae1cd16-1fac-4859-a631-39de55bbf096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3477a361-a80d-4f43-ad6f-8af30e62e963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de3b087-2b90-4a80-896b-0fd1f6c06c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8b10f1-2bff-4cab-92e8-0678b955f0a7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446e9460-db9f-40db-aeda-4cdb78eeff07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da2f13c-be61-4512-8f56-b48371d55f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c723f75-3f93-4861-aaf2-bb79ed080c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb79f73-af86-4a0a-8a57-7cee02640142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da0b039-b81b-4d22-979a-017e013a1fd9",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da5c1f0-d4a8-4671-8c9a-ca26d8600a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24b8e89-95af-4b71-affc-3f0e4f113045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9339fd5f-ba06-4c32-a45c-ebd00fba8528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c640b1c-ced4-4c72-bfcf-0af651e71933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6a0b34-f2ec-4777-bfcd-40306b05255f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a22c891-67ee-4a36-af2e-73166d2b41ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ac678dc-48c3-42b8-bfe4-f7350b38e994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02a2c49-fcdd-418e-9732-f1d4efbd5b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365d5911-04c8-42cb-8be1-c8f812e5567f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894fb771-bd4e-44fd-92c6-3f7e0d81a343",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d787099-9d0a-4d78-91d3-75bc69ca5c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0347566-773e-4ef7-82b8-56947f476c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e873cc0-6a92-466d-8eaf-8f8f66cb1f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea1e3bee-fabf-4030-8b3a-0849c789a4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2942a8-34ae-4eff-af26-c9966756c196",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3abf97-38d1-49c5-8c86-7b89f6678c7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69402966-d34e-483e-9baf-8190c64e0414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e771c24-b830-47b5-8f61-6b1466a44629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583d4be7-34a6-4c43-b6fa-b836c3960ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842fb737-7206-4a5c-9983-66678024b918",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d074460-0182-4998-9310-f213ded7444b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27f2dd89-84b9-4c90-a890-c1049a7251f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e6b00e-9192-4d17-b346-48c9e4966137",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffaefe6-1cab-4d05-9ef0-a0584909e213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a81dc39-4219-44b4-a2ba-ee000719d170",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb2d59f-7c69-4c38-b20f-c4b80ecfadce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4aa920-8843-4a32-b68d-d94558ed4efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1835c68-af45-42a9-b27f-a75ebbf0ac9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8087fc6-9465-4e09-aecf-98104d318842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b125ab7a-b3b3-45b6-9237-519f6c5347a6",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580e3071-da83-472e-8afa-21e820322bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4e67e3-852d-47e8-84b5-71f643b37045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc19552a-c515-4acb-9da0-9a9a14defcf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba81585f-dd70-4c5e-8515-6c175ad2c282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36ad62a-09e1-4f84-8b7e-ab26b777c2b8",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2942d47d-6d08-4744-b7c9-75a5a32f3981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9703dc-68b0-48fd-8c45-bf6b9b47ef06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df152ce3-6329-46de-a4d7-0354108ab516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa43943-e46c-4ba8-bdef-f72ee6186d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9374608d-8c8a-42a2-b126-32dd0a6beebc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847d9171-5f74-42f9-8a0f-1440a8e37633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5de42e6-7c01-465e-8f58-27b385546540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12e18dc-cc95-4bc0-868d-8f76976a7419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b97b0532-d249-4f53-b765-8535248fc07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e070bc-c0ad-4a5e-ae3c-b2e8ef4ea9ad",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77e7d17-81e4-4cb2-aa22-8cf03d2cf094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c41059f-f574-48f2-911f-e82cc05bd95a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3bf93d-2fa6-41d4-8157-8022cb155ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "919de951-b261-4a92-923a-b1298937c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59841df-11ea-449e-adeb-ad1c4411c8d8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deecf121-a67a-412c-abc2-d5f234e16aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa43ae9-b7ba-4a9f-a0ed-a09fa4df86ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d007e331-d145-4c31-b944-d27e846c7d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0376909d-4e00-4c08-9f91-1258af4a360a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b2c72-4f5a-41f8-aa9b-c9929d450e3b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15bfc0f9-0a24-467e-9981-c6332f98046b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f028de6-ee0c-475d-9132-10d02bd2ac6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50708bea-5896-4360-89e3-fe947066043d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2247aa8-dc38-4c36-bbbb-1b6a9f5fda21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1f64ea-5c79-4200-95c1-acf796b3f824",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe25f90-d470-4028-a6f9-1a165f799ef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34387bf9-7019-42d1-9f44-4a983d8c6a03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e528dc59-2553-4d53-9c2c-731f9ba7831b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58f86d93-414e-4914-ab47-5075bdcf733e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ae7bf1-b1a3-4ef1-9bf1-bd6a9ca7d602",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2b05ad-8c78-4694-bbee-cc403a1cb70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03f8875c-70f6-4b71-9c38-f03a7faa9f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d443e66b-7064-4637-b120-ce75ac3b18b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6df7a0e-685d-42e4-8033-241daa16faf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f170b1-e5b5-4cc0-8c81-1f110c6121fd",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e20017ff-0415-41f2-a3bb-ff1180340286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5817ef6-6141-42cc-9ad4-fd57b228a409"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b79fbbf-3d42-4beb-9393-2db7d2ae2c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e76eaff-455c-4192-b01b-790305bd5730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175230cc-b725-47e2-a5ca-3b1277b3cbec",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f0d78e-facf-4bde-b668-4801141d5a15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae87ac8-98e2-4ce4-b522-4df34dda932b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fd9f13-637d-45d4-a847-fa418844fad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b33a814-6ee1-445a-9e61-ca759c6097d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a5d7e6-105d-4387-aefe-2686e3f3d6f7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e41712-aaa3-499a-bec1-9429779bfb10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74f8d9d-62fe-4edc-9675-3655ff719efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fa2ebd-61c1-420a-b7e3-8fd7a2bc9b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a996203-9cf2-41d4-b634-1c86219fe75e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb77984f-025c-47f6-bffe-f614b6d20171",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9d966a-b2ab-497b-bb7c-188de926ea3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d54bdf03-93b1-46a6-ab0b-49100c65adfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428c84d0-1c2c-4f7a-841e-e6e47a6bdea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efefe2ee-0bc1-4d5f-aeb6-cd4f2d8d29ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e444fabe-b92c-4b90-81e8-aaa5439e2001",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b102356a-6ae9-4e64-be4d-cd724726328f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad780247-3581-4bec-9dd8-cf75090c58ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a09d58-da90-40ea-82ee-062b551024e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d57e6bd-5019-4f41-9851-d4c929eb034b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33fa37d-3f6b-4f5c-ab1a-385bde7f6376",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31e39bc-24e3-4d16-b67f-567a2306df49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67cc43d2-1223-4fda-a42a-7b42b2b96ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d23459e-cc09-424b-a9ce-1114eef7705f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b108b4c4-bb27-48d1-ba34-953d989caf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc9c54a-e1a8-4fe0-8bd1-2f3341ea731e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af0118c-65e2-4ef1-b023-27052ee24970",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50d494ca-408f-4dde-a621-398f56640972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60e85ea-a419-483c-8394-9a2a99a867e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "353739f4-e8e4-41af-98ef-218249a3a793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44b6f52-7caf-4214-a05d-92801d172c5f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955a5f1b-08ac-4a53-9bfd-0ed48e7b3da4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "607f47e2-00c3-405c-ab94-1069e8141657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f283f453-cc8e-4f4d-864d-62433b88a73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceb7e7f7-dad0-49e1-9bd3-a00ecda750ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e8847d-3891-4b78-b6de-b803a07c732a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2c9c6d7-ea01-454b-8ab6-3a7ab093d71c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c4c594-2e05-4ed1-8751-099640b67b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5101f1-9764-4ad0-891f-470ce94c3d14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b4cc76-5b3e-44c7-8e46-8efc28207815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de72683e-e92d-4be5-9dd4-112a6e08c055",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d18f51-507b-4acb-9836-bec043935317",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93c1886d-0cd1-4e98-a787-c4c77ef68a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cedff5-dc28-42c9-a9d3-6860fc16ee8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2cdf4e-ffc7-45b9-b3a2-bea6e05b8fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1882df13-c57f-4d6c-b0df-5a483d4f0e41",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4817cdf9-82b6-497f-843f-c87a790d8a6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da28120-edbd-4db1-904b-11b3f0d60738"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59914300-685e-4a58-86b5-b5a23689175e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3e4999-fa48-4efd-9f10-a09b2e6ce636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c865f542-2ab7-42b3-a787-e510bf2a9640",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cafe0b-36c8-407d-a091-f5c118c197c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c536c90c-d3c4-429e-8521-93414246da35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb028b4d-59e3-4275-b4ea-121c5280d0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30633cbe-d06f-4f88-87bf-1ee94ebfefce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33254e8-f26b-4e19-9d95-ec6d4f7f56ad",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b906c0f-75b2-40ad-adfa-b4194a58718b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845ba60f-dcf7-46f4-b3ee-499084e4f5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af95feb-e1a5-4828-9b06-fcc3dc73397c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d0863b-51f3-4160-bd79-ccff31f99126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8efc78-b812-4675-af2d-df05b9df03bf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0452de29-293c-4644-aa1c-a39f03b9ef1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0b60a1-d569-431b-a225-52823735a04b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec4f548-fd7e-4223-b4d5-a716958bf725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddb60649-f0e7-4326-8843-eb49d5bca614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949b1b64-fb4d-4849-a721-fa9f7871f815",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826b3c0e-a779-4480-a5e6-ba92ef6b8bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab762545-449d-4472-a4a3-7f9e3f25da35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1381120-7283-4aae-a376-55999bbc45cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "020ecdda-713a-425e-9e86-b6b6e32c2f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e8ac7f-8386-44cc-8296-e10b793a4597",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f05b146-edd4-4985-96de-48f6482900da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf06b366-b7bf-4421-8c8f-8deb7f124efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7aba8cf-1bf5-4bd6-8a1c-1dd206097b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c13fb3-2c59-4d88-a56c-f130436a48e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55376fb4-6956-4d86-91d5-86d3b765090a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f29d507-014f-4e7e-8808-490ce6dce9bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5498e07-c92b-4067-b403-4ff285470102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eaa9b41-6f33-4890-a108-23216928864e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c88fb707-c69f-4c41-8547-c7457902a425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961b3fa6-91a0-4a54-8802-8406a70d0413",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47397922-af29-4fd0-bdd9-5d381ddba93c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419ee877-2b19-44e0-a313-35bd97a3dbca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9836ed-1e6d-4d97-84cd-0e4ee48a2fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e30e3ab-698a-45e1-a7bf-af76e2d018a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba4841c-67fc-4969-a2b1-c221626c40c7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1a77f3-ed04-410f-ad57-b1775b8235a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf77aee-5ca2-41a8-8ef1-a2ae7379e166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58113073-9ffa-4a29-8321-0decd98988f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5000e353-c90c-4c70-8a54-6b0dab29535e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242fef97-1a88-4ba9-91ee-6900bde8078e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bda04b-de89-4c12-8f62-5e20a83b32b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18256740-3734-4ea7-9715-ff3306195e34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0a540b-937c-44c4-9e17-4d15dcb3189e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae5413e-ddcf-46aa-9c9d-1234ca8f3d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a082e6db-d702-444e-97a7-6108ab1e08d9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987b985f-6f7b-4d1f-b34e-681e50e79034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50af1d7f-3576-4f6f-9695-10fe743ee5c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af967454-3993-4b48-8b3a-77fca6100920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b83e447-761c-448f-b5ac-961ecc5a6608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52568251-42ca-4857-bbf4-0811ebb7af0e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f86675-8bb3-4412-9e6e-f72a2eeab3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d08e7bb3-3cde-4e37-96d3-455aef1a514f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06feca6-0d11-44f8-a73a-f39354e6a3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99931dee-6e59-49ba-a97e-7f843c55b050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd79ddac-7626-4e21-808d-bef60069d264",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aad12c8-5f05-4176-b74b-a8c1fcd26e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2722d9d-0196-4491-81ef-df1033db8b9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b46c2937-130c-41eb-819c-d1ebbc9aafb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0b8adc-48cf-40f8-8f25-e7ae65784ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9e6d17-c010-436e-9990-5829469a2159",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36740364-a92f-4454-815a-12d6b938f642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c14cf28-c4a0-4262-a7aa-3b74bfdbf4e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cc354b-ed08-4bd2-92e5-f03ef20a3dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e4bd8b-bbb9-460c-b4af-53d7a320b6cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b265f40a-5038-4efd-88ba-191d8d958be6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383709ce-a974-42c1-bef6-e77258e2a93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f05868-0b9e-47d1-ac90-63c852d0b72e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e3476a-6e4e-4a60-9e60-9aed9b509024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f7ea77-7c2f-4473-8df2-ca15d0697ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436cedbe-1267-48c2-90b7-ee32c83701e4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62b8ae5-d56e-4f22-8e07-263616300c08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0026eb0-4419-47ac-9ece-f9f2d5e64b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfae5db-008a-46ae-9147-82023c8ff48d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a53d9fa5-584e-4102-ba01-126b20f5da26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86f12b6d-38a1-44d8-987a-144c38287235",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa21bfab-a489-41ee-a725-8aff8b29727f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb78939d-dfb6-4d1c-8141-7aaf4f442b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd8351c-1fe2-426c-a32c-2ac08d981448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a079facf-99b9-4b06-96d1-4d15b675122c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f00867a-1a19-4069-8989-4b82b45e2ff6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a815f5a5-72ec-4bd1-9f84-db9e83d7f516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5494914d-3f59-4ddb-adcd-ff909576f8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b09fb6-ce08-4ca8-94d3-523ca5e34bb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf220e7-d8ce-4867-94ee-51b6a4e1448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a03129-24c8-4646-bdba-7f731e473d5b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d111ad-ea9b-4ade-9a28-8454a6927fc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2db14e37-a07c-4945-a705-ddfd4db3c380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35001c6b-2116-4afd-a2ff-b22c3e583ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35f7f6fa-a27e-4582-9281-2730f2f5eb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99d555f-5e79-4dc1-9cbb-bec25be34a1b",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1efe4449-0e38-4e11-b8c6-7ddee6eee10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21c17dd-85e9-4144-9ee7-018feba53700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5f1183-534f-46e4-acfe-e815319512ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48745063-0579-4ac9-8026-141160761676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3543f892-7b3e-44fa-9352-c50fad9cba3b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a18c917-a57a-43f7-93ac-dfb9d3bf108c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05761cf8-81ac-4198-b2c0-3bccfc6ea78e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae427d5-d243-4b06-bab7-979faa490834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388c120c-5e86-4fc6-86ea-c44b5d3ada90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f90618-ab8b-4799-bf40-0132486fb19c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a42476-cc0a-444c-97e5-38dcdd487b3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12f5874-8d91-407c-8aa6-0a1f247c2973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe868dd5-3e34-42c9-bfb7-2ae3e9b658a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4075b646-7640-4956-9dc9-a5670b2e7496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4275f26d-f0b4-4e36-a47f-6307a45e4c55",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4c1194-0f3b-4922-b7d9-7d39c9f4dbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b82d0f6-caa6-4a3a-8356-d81b1150fe4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acd7154-4144-42ac-8786-ebd24671e9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4348ebdb-c92a-4375-b809-7881edd80154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34927ba-6699-475c-9461-e39a0950981a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a5e1572-e633-49d0-bc76-dce88dca1a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a259f056-6c60-44f2-893a-317aed086acd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d079f22-a7c0-4c2c-b888-aac704d96373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc56aa5-9b7e-4ffc-8fdb-d32f53153d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685c595f-cacc-4ee4-8d1c-db72ea0b01be",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1625a33a-d7d0-4948-a21e-2397c281b1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ecb702b-3c92-4cd8-ad8f-50a2db62b662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c760503-8d5b-46d6-9afb-5657cee5852b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe52748-7e32-4f2a-b5d0-d0f992b69c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0353a510-d095-45b9-bb5e-94d94db3a977",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7232f7-507a-46df-b3a1-b2a715212685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de8e904-f1d7-4629-a483-f67046bb694c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d8f77f-cd08-4c2a-aa80-53296b84257c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b942463-c36d-4c26-b342-53264e86bf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c85db9b4-03a1-4aba-91f9-7144aa16ebf6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2691f7de-6fa7-44a5-888b-97a41f4d33b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc53fef-c40c-49c6-90ac-eae85346aed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d60282e-f731-4c4c-94e2-92e4da26c72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc5f162-ce51-47bf-a6f4-eb18afb2ec0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d5262b-858e-4990-bedf-0244a0a94806",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924e33da-2525-49bc-bb78-6ca81a764dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3763f31f-addb-4540-9edc-9db64b8fab4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb75b48d-ca8e-4e75-a0a6-2c0fa928ab3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e847699f-7ee5-484d-97b7-4429bb071bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7527e6b1-5bdc-4edf-8973-732893bf781c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad53704c-99c4-4d3a-937c-f08b00071fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05df7932-75ca-46ea-aaf4-884f906473fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4ccd7a-70ae-4bd8-bb36-62d332695a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5ebe041-1075-498a-9819-c0ca401a9805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde8c30f-a301-44f3-bb2a-daf13d01ce4c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbea7716-937d-45a7-831e-4a86a875acd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbcaa16e-a580-4657-bd7d-585fee648236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c854ecf2-6a1b-46d7-84ec-e010f13a0e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86455455-a069-4d0d-8d4c-d5acb90643f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a11ecc4-348b-44dc-bd14-69a1727481ba",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310b7660-f0ff-45f3-b2c8-65f34da1577a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09cc718d-f03b-428d-b8ed-10694d23eb0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3233f69-7832-47cd-8efb-2ef5e789f23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ca9f39-90c8-4c29-9b53-30af92d8a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa5642e-c0eb-46e3-b483-9717f659d906",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdad90e-1181-4651-b475-1e5cc635e2ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db570a42-f9cf-48bb-b777-63655e994ca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76644bcd-41b0-4e23-8284-99601493a486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20a7786-e794-469c-a17a-f97bebf7f9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3350382-73ca-4cef-8094-bcd873bb9f55",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ceebf2-344d-4897-98eb-5ba2edb87105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82568022-5a1f-4442-ad8e-9fc66b74a0ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c40741b-5b43-4327-8747-963c2a37ec8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d31409db-45eb-407a-b9cf-3dc582ef00d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561771df-80ed-4911-9771-ac44bbc93cae",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24aa4597-5923-4985-97b7-3dd0c6bc71ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d3ea36f-6251-4c98-8e96-1c6f99f7323c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a06fd4-c967-435c-b033-209f25ba244e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573301dd-1bb7-4074-847a-393850d3876d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26878524-e13b-4c9a-a8e3-30a5c60926d4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cf1517-f676-4f33-9a36-61e41f567841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b414e8-eb26-4d7a-aaec-cdb2599cb812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd38680b-b3d4-4982-a5d8-54c0143faca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a638f05-6e75-40fe-ba02-8609876c8ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6460e7d-3a7f-464f-8de9-b027a888dfb9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d93785-c668-4541-95a4-484aab1175a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf52d1b-f45e-4269-a05e-1209946ff8c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03618a73-5382-4da4-956e-fc79e9435d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c865887a-4eda-4724-9983-1e4ea1ed27fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1362a5f9-6a46-4c3d-a582-9419366b9e1b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a304fa-1273-4de6-a1d4-ca0812505b64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be87fdbb-a1e5-4c80-a321-a358c45e73d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6673a0-2b20-47ba-a1eb-bf5bc29de2bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7689a711-e4eb-4656-8fa8-08e2d4c3b7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d77e5e9-cb99-434c-9500-3725b2b359f7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072251f9-5261-4a09-b7e4-773f496d9811",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe99fb0a-4723-45e3-9023-487059e2a088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "673dbb44-b1ab-4d6e-ace9-8539be53ac41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4745952e-b8bc-44c4-81d8-c13b4e64848b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584f60b7-b545-4054-8c73-d540caec0f3c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2e13df-8b43-4740-a99c-3c964fd1dc47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "600e1473-3c2b-4a68-8eae-76f113d0d352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270f0178-5bd4-453e-9614-162d31f8c215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2893e53a-20ce-40d9-9bd8-0676bc1994b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c1ed19-30d5-4ab2-bcad-6e7d5f154be9",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c52fc6f-9459-49f4-92a9-e08363cc3505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4add2666-bbe3-4b08-86ec-d65fd7f9096e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bb1366-60fe-49e8-a556-7ff2b748e8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1078f94-9312-4856-ac36-9904acfbe27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5001100-d8c9-4f57-a1e6-e6effc8e09a6",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a22488a-05aa-4e71-a171-314c69d53c7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aed0cc0-e480-49e0-8a6f-d71211cd2bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ffc6f6-8baf-49aa-83b4-71f9089c4e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0f2842-7e21-46c1-b9fa-80802c5e0664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f305c268-0f66-4c4f-b75e-f14eda3424a9",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335abb55-78ed-44b6-92e9-be8346caa1e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf11d3c-b09d-452f-8daa-7be3b3277fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b115790e-68d3-43aa-a2dc-b5024c48cc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34bf64d-46bd-41e8-bc61-8911b2754816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28262349-432f-4d30-8518-a54a1fa1b1e1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f6190e-bee0-44c0-9240-ff97cedb89fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a80447-d7e1-4f67-9657-c6cef9828c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6340b9-6f61-4358-8068-d1edafb26f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12ddba32-f784-4b70-a0f7-901c93f0bef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3894fd0-bcdd-4c72-bf18-efffe1169c60",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddef94c-f113-4fbd-bbfb-70dc531c6788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d98b6ec6-8ffd-4322-8011-7c890ce359bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaa9537-0f46-4aae-9a92-f020c2b5fb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5d7d89-59ed-4d69-8792-d2bd9b97193c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5577d877-3c70-40bc-a702-0d679b3d2a6d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98aaadf-0a11-40e8-b7cb-e0028f9e3831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344f7f2d-701e-45d7-bb0f-dd98523ce62e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee68eef-dc2f-4de7-a9df-788df2e792af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88e40b9-3144-491f-ba8b-73ee1d6376b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd1487d-87b1-4089-b9e9-64152ffc9e75",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c7038b-e05c-428e-9250-ba40c39a4bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d393ddb-adb4-4b06-94b3-6aad857c8669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22592346-744b-4450-968f-7c863b8662fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31380689-d728-4c89-b707-a0e2a69a9718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bb8c62-755c-4a76-8280-7bf092e5cdd7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2767f1f4-fdb5-4ad1-aefe-94b4b5bc4001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd30b54-b63f-4753-af27-338e33d21218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7262a2ce-5591-4e88-a77e-80a9416a5d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19da0f4-cbf5-4760-9517-9efb83855e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9339cfc-9cd9-4a8c-8776-3a7fb19c2d02",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2605619b-a961-4e62-a6ff-8bcf3eb25bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4018d9a4-5f31-4432-82df-cc1db4c7aa13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d34c5aa-2ff1-4cb4-b4b1-092e4a065a9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fa980d-2338-426b-bfae-ac9750632358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c5cb89-e202-4a4a-b174-397b9f43afbe",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beabeffa-d3cb-4b84-bc7f-2bda6087e11d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59910dfd-516d-4efe-86c1-d4fbfde2de86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67cb688-0f83-486d-be73-ab01195df72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eccb901b-55a0-4f61-b575-461fb41bd208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acacbe1-20f5-4402-8bec-0e857d18a8d5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5f20a9-9d97-4e68-a867-c6fac1c4459b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a21e0b73-db47-44ad-8bef-c59be3a24194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4071cd-ec03-4bda-a483-b47b7e5fb9d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e90028db-a34c-4521-944b-4be2418b505c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c385aeb2-54a3-4a3f-b15c-9d97005c04db",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798ce66c-a863-4241-8fe0-7b2811208c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "accd4e75-99b5-465a-be27-9da93c8885ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a91683-ccbb-4744-b21f-c15916297dd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e192e249-2909-469e-85e3-d0fdd6a86d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7009d1c-2540-4502-9d74-a100239018b0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc03dadb-2b27-480d-87c4-8c1588562860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5dfda4-3b2f-436f-9915-edf28ad98ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "582fa651-b006-4a08-9da9-45938e8cf446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b373c30c-ec2b-45cc-9075-49700f31d095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7353d9bf-29f2-43e8-ab4f-1fb719a28503",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab18c95-140d-4276-a83a-863ee40e8f56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3185ce8-9274-489b-8477-85b3ed4c4e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67177c73-c241-4c81-a7e7-9616582eace6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1305a105-1e29-4366-9003-1dcf2ddbcce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71602796-ed32-4611-aed1-a945fbc2348a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a3927d6-f089-4d2c-aa1d-620e31d58069",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c132a8e7-bd6b-4ed6-87f3-ef78bf734fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7e51adf-0bbb-4318-b7da-35e8007978a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ea3908-9810-4b95-ad0e-67441d9af511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9049a5-322e-4cd0-9730-df281e23716d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ff3f41-f461-4dc1-bb25-387cec1e80ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9959ac62-b72f-48a6-8ac4-3a6fa7dbaf9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d112c50-a34a-4b4c-b8c7-80ce989c7112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92de1cde-d132-4157-b8b4-7bd5de018f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1389446b-5372-4307-81d8-e091cda75f78",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d84cc4f-31dd-4b4d-ae75-40bf03d23907",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120e6995-b315-4c5c-9b16-96663441e207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab566e0-2a13-4e0e-9f82-e3aaf92bcb68",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42824f80-b518-4903-9588-5e2b647e8701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437bae5f-0f2d-4076-9834-c181c065ecfc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ed05dd-c0b2-4c14-a706-ce5885479d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df402b59-00b7-47f6-b808-2e2b51e909b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb5fe6f-29a2-4e2f-b31c-74291f2f5bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c661568-0994-4690-a4be-e7f99223b791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289d01db-2b5e-42e6-be63-64ea9c80c1be",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9347d07b-db64-4512-ae0a-f356233a696b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a76d96-ba19-4b20-9e05-868d0dc7d9fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224015b7-8d58-4aa9-b7df-4d9e36c9bfa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4283c83-0410-43e1-bc42-1c3b8fb078c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7bc442-10e6-47dd-bc30-4d60da2e673a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbc3e1d-4d9c-4b9e-b627-9ed367bcd2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cb84489-a974-493a-8dae-3e0d441d4180"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3bea76-faa6-43b5-b825-2ec1483e7055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675d4a10-004c-4ef5-888a-2015f0fc8f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b50d28f-09ef-4815-8c0c-30300389de6d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6957a247-56a7-4b37-b488-5a6d443c29f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2fe1499-fe32-482e-86fa-09137ce57284"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b52f68-4b5b-405e-956b-c2675184fb2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286dae25-eece-4237-be56-fafcde19e2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cf4c25-d8f4-47d8-a0c4-bdad77859406",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c621ca75-bd88-475f-91b9-0dcc6b777416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99f2b26e-a431-4206-823f-216f41a60674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e31af5-0b01-4b4a-a6b8-4260170c501f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ec4820-e56b-4a9e-aa26-78d6f30eb7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72febc13-cfcf-4318-a207-fcfa3a5ff9bb",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a779f3b-1303-413d-a46d-ff411064bc3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76875429-6fda-4add-8192-eda77e575b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f5dd9d-0358-46eb-8bda-bf92ca24c24c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e5bbeb6-415d-4fdc-8676-814580917ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8122d121-87df-4498-ae79-4cde3d8174b7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d03512-482d-49fb-8bb7-e87aa1623ca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9c263bb-cb4d-4dad-a617-005df269bcbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df13ccb-14b2-4e59-be25-0c7dd96c706c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a85d27ff-2005-4f96-be7b-6b80535d123f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01b5499c-6704-4f27-9372-159fcbb507a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ded3a574-0b33-4ecf-b516-c24922cea0fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6716446e-3c60-4479-852a-cccc94e5d6ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fefd6e5a-02a7-4c44-a2d5-437477d4f0c5"
                    }
                  }
                ]
              },
              {
                "id": "cd5d3934-3539-4323-addd-9451d350d9c4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02c483ae-0bc1-4d69-ad80-fe6e947cd10b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56efd7c1-6fc8-4dfd-b89b-e4f969f3e89f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d26ecf16-a27c-4a86-950a-1073849f4e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6896ba7-bfa2-43f7-a988-094f9e8e6552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0931d0f6-6299-49da-95da-cf0777c04079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a39b02dd-873c-422c-aeae-a14964b33d1e",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d84c84-8f8a-4bbe-9b71-71d293380187",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8db6497b-6f7e-4a2f-835f-9e7cff00c3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c7c4d2-67ba-4df3-a13a-3b69113de41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdcf3923-d541-49db-a425-b6510b126c05"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c36623b7-2946-49e3-9304-90a1ba71b0d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7387a03-1f10-4ba3-a0a2-f880db8730ad"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7482cd06-db81-488d-9ac8-d97536103c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2c66e9b-0c3f-48f8-957e-69a0380bcfb7"
                    }
                  }
                ]
              },
              {
                "id": "aa2e7e02-c13f-4d44-a723-7c3070f6c77c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e68b1282-f8a4-4a47-af9a-2fa58a2290cc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc3c34f-6943-4549-a217-b948c0f2f2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "289d55c6-c96d-4fdd-a007-f55400cdfbe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9429849-b0b8-46ba-ba55-f3a7284e5992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b81a3f1-b601-43f5-876c-ed807a0a4e5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e94e8eb7-bb29-4c1d-b7b2-f6a8ee3847df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ab0423ba-cf63-4dd6-9495-8007457d16d1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f04c322-d394-4d8a-8ead-0c9ca5d7d6ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "38a2d315-4455-4978-861d-de6a8d578e10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1031d4d1-94c6-4af3-9341-5b5be2f2bf50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "084d1f7d-7277-40f9-bd72-7c7ea2ff7353"
                    }
                  }
                ]
              },
              {
                "id": "4356d9e2-3b13-4542-ab09-924a9fedd27a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62e4336f-fcb1-4cfb-9113-5d0b22230d65",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e1e11e73-cfed-4ce7-a7af-0558b4582155"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c032677-69f7-435b-8829-6a93b51bbe64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beaab926-5dba-41ef-9583-09c39143d2ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff624fe2-8b36-42b0-82e5-9cd25a598012",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "890bbeda-9ca1-4bea-b6f1-d7148803387b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7dd6d98c-581a-4375-8c9b-05265677cb16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8e47009-48f5-4376-86ff-3e53f4ddd005"
            }
          }
        ]
      },
      {
        "id": "6fa9eb05-301c-477f-8e20-8af226fc16d5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f7e8147c-5174-451d-b6ee-72a4ad0f2507",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6c7157ae-9f84-4e55-bd32-4bfda37fbff0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e262b8b5-5966-4719-873c-8b82e1c272c3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "261f9726-5009-45b7-924a-22f6cb6d6244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b1e64e-58ad-4a12-a251-a7da3c605fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6f8bf77-04cf-47b5-818b-689492655060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e7389d-1d29-4948-adaf-520e884c651b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a720f637-54a3-4408-ab9f-651e66d6440f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad71c0b8-5593-4722-af76-e07f39201a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6d039b-ea86-40a9-8446-b5fef3f62b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8c743d5-e8db-4af3-94a0-111f5f0135d1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52050d1d-83fb-49ac-a831-2419126d4230",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9173af8-2d2c-49cb-9628-732794a2587a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f6b4784-c5c0-4f08-a08f-60d9b3531f67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0bf807a-a847-4f54-839f-27e86f71a65d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d311bc6a-cd31-4a18-a259-6f3215fb9c4b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "879beaa6-1ce6-4e64-bfeb-725071fe0c49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2838e8c-8025-4c55-a11f-36fe07f4a5a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0348bb2-60fe-4746-b715-91621bd3a5ea"
            }
          }
        ]
      },
      {
        "id": "b082c99d-0aec-4701-9ff3-4abff6124ac5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1ce6794d-2c65-4c7f-8dd1-977e71d9318a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1fa7e23a-e40e-48c0-b719-7bea5a3fef01",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07bc4204-899b-4da7-a760-456631bf2b42",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2033781a-1a45-4056-867c-413f5892767e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9b8daf70-3da5-4dfd-81be-42e723c01908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d9d030-7214-4c48-8c67-0c229e646ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "747211b8-70ca-4803-96a4-52432a3f1bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af58060-5d8b-4d06-bde6-e5a4f80780b4",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde6fda0-8cff-4c49-b0c7-eaa51d317900",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3aaff46e-be9e-4a76-843b-eff32f49fe14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63dbc80-6221-49e2-a1e9-f3742285b0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ecd248b4-e1d3-4c50-a6ed-21c0b9cef34d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d151b8f-9498-46f2-a991-bfc3446452ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "182db310-65f7-4b83-8ad1-8a5bc02699d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cdb9073-1a23-418a-b508-64d8ead8cc15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a17db5e8-289c-42e0-bd00-7c208ecfd46d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2afbf42-7078-406f-ad9a-48d6ba3dbe95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "126429e8-aab1-4730-a2f3-48c43564ae1e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cd8c427-2ef4-4d09-af7c-2d3acbbd50c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "389abb69-f7a3-401e-a7a6-a36c3f1b5f26"
            }
          }
        ]
      },
      {
        "id": "4e2c905f-fe97-4227-b454-39729985d4a8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e834cfe8-8899-4caf-8ba1-7efbc4c5974f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c561a115-310b-43d6-81d9-0e5c59527fa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f667cfe5-37c6-4935-9877-6b7db7481f9c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743c3349-bec7-438d-8f51-e8bec8160041",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f9f97587-4661-4bc4-88a0-573afffad9cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8257ecc3-4874-4630-b2d7-5c1be071f158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eacbede1-42fc-4173-85d3-a2734d29f0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40dddcc-1d67-4b8b-9bc6-aa419d158dbc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9728041c-e402-4b21-ac0f-e60162b382fc",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bd5342cb-8d2e-4f51-8958-5b8d028f9833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9ae93c-0252-4384-b980-cfb4c217e45f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87661e9d-de51-4756-832d-48d71f38f377"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c81bfe1-6df5-4bb6-808f-878f41d63319",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa6189b8-74db-4207-ab7a-47c345982f15"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdedb0b6-5b1e-4c4b-9de4-3dc11636fe58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fe366cb-7bd5-40e1-8e53-9d8f460cf6a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d6e4022-cb64-44e1-a4bb-7a97dcb588a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c9b07f38-85d6-4663-a0f7-e6830c8a2eae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b5db0e9-d4b6-48e4-a0a3-03216efd885d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b9eab691-fba1-4040-8658-07cc14fe04dc"
            }
          }
        ]
      },
      {
        "id": "5edc3a07-65f8-4641-bf98-482a18125a02",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a560221-8268-4625-bb2f-4dc132d427d2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "195a3bd9-6505-41c5-813c-89d3342d2116",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2c9118ed-ffe6-4e70-96b8-397988c7c448",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "146d03e0-77f3-423b-91a6-3268188e4519",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "630ebf97-baa2-4f7a-85ec-d662dc8cff22",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 10.156792133997321,
      "responseMin": 3,
      "responseMax": 234,
      "responseSd": 27.582633201062098,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675212305729,
      "completed": 1675212319174
    },
    "executions": [
      {
        "id": "96c3c27c-e5ea-44d6-b540-5dd60037706f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "503f8a9a-8286-4a49-a395-bfde86403ea0",
          "httpRequestId": "6c08ac4e-92be-4723-b218-32315cce84c9"
        },
        "item": {
          "id": "96c3c27c-e5ea-44d6-b540-5dd60037706f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f68c1e23-4fd4-41ce-99d3-c9f0c4de337e",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "7c697228-c1b9-46ea-a56a-0273e8183d38",
        "cursor": {
          "ref": "87e8cd68-2e5a-4304-a416-295bd021a82c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5bd75dd0-7efd-4ef4-9355-ab4c7a5eed42"
        },
        "item": {
          "id": "7c697228-c1b9-46ea-a56a-0273e8183d38",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "368d5536-173b-4efc-bc18-aa3a01b1a546",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "ca5fe40c-47df-41bf-9718-f2c78043dd9b",
        "cursor": {
          "ref": "74ac3d38-a696-465e-8736-ec411dacf2e0",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "539053cf-98d0-43d4-9918-fd0fd15630cb"
        },
        "item": {
          "id": "ca5fe40c-47df-41bf-9718-f2c78043dd9b",
          "name": "did_json"
        },
        "response": {
          "id": "5ad0d70e-7eb9-4396-8446-b56208d63c42",
          "status": "OK",
          "code": 200,
          "responseTime": 43,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a9ad25-de47-4a52-91aa-3732e5d3421f",
        "cursor": {
          "ref": "d948ae21-f894-40a9-9892-71cdb28bec19",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d421c73-9eb9-4d37-a48b-7207ca70ae97"
        },
        "item": {
          "id": "a5a9ad25-de47-4a52-91aa-3732e5d3421f",
          "name": "did:invalid"
        },
        "response": {
          "id": "13e7b211-6879-4d5c-b6b2-d06e73e9dc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a5a9ad25-de47-4a52-91aa-3732e5d3421f",
        "cursor": {
          "ref": "d948ae21-f894-40a9-9892-71cdb28bec19",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d421c73-9eb9-4d37-a48b-7207ca70ae97"
        },
        "item": {
          "id": "a5a9ad25-de47-4a52-91aa-3732e5d3421f",
          "name": "did:invalid"
        },
        "response": {
          "id": "13e7b211-6879-4d5c-b6b2-d06e73e9dc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a57f2dbc-2ef8-478e-af0c-ab5bc7055d48",
        "cursor": {
          "ref": "b1606a6c-23b7-49ad-a848-eafe785e7349",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9fef4f0e-6f74-4702-8a20-1d3fe6f6684c"
        },
        "item": {
          "id": "a57f2dbc-2ef8-478e-af0c-ab5bc7055d48",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d0a6214e-cdaf-48d3-a69a-294104cc290c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 46,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9aeb8b-8e50-44a8-9980-ee983177e419",
        "cursor": {
          "ref": "32eb1135-1290-4fa0-8470-33dc4471a79c",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4006dc5b-0cdb-40ef-baac-40d35bd0c3ea"
        },
        "item": {
          "id": "6d9aeb8b-8e50-44a8-9980-ee983177e419",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0b04c448-73d0-44e5-bbf5-d93ed0db91b8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1362ada2-d960-4be5-a6a3-ccb8345992a1",
        "cursor": {
          "ref": "7a69c599-2a6e-44f2-8aec-89101ba7da49",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9cdc6d78-d1a4-4676-baf4-5ce16ee35826"
        },
        "item": {
          "id": "1362ada2-d960-4be5-a6a3-ccb8345992a1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "026b28c6-64f6-43fe-92ad-9e51e5f19ede",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fa660f-019a-4bda-8419-792d29f0fbe4",
        "cursor": {
          "ref": "bf59a28c-1af4-4548-9ca1-bb408214c5dc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d7ee754c-a5bd-4f02-b6a1-66903b8dc7d0"
        },
        "item": {
          "id": "83fa660f-019a-4bda-8419-792d29f0fbe4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b17a2dd-4b88-46c1-b4f9-ca9ebe49a7ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fa660f-019a-4bda-8419-792d29f0fbe4",
        "cursor": {
          "ref": "bf59a28c-1af4-4548-9ca1-bb408214c5dc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d7ee754c-a5bd-4f02-b6a1-66903b8dc7d0"
        },
        "item": {
          "id": "83fa660f-019a-4bda-8419-792d29f0fbe4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "9b17a2dd-4b88-46c1-b4f9-ca9ebe49a7ad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65225b92-d5a7-48e6-b92b-be7cca308e85",
        "cursor": {
          "ref": "b3e898b0-8238-4cd2-ad48-fb7d157ea165",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1ffee115-7778-40c6-8333-e316a5664c75"
        },
        "item": {
          "id": "65225b92-d5a7-48e6-b92b-be7cca308e85",
          "name": "identifiers"
        },
        "response": {
          "id": "0d947fb1-a958-4fe0-b071-4a947d3a8db4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c3dcbe5e-1c5a-4237-8221-dd269b8c71f2",
        "cursor": {
          "ref": "59923116-d2ea-4634-81b7-5ff4500600dd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2da30838-94c2-41a0-bddb-fd990896c3af"
        },
        "item": {
          "id": "c3dcbe5e-1c5a-4237-8221-dd269b8c71f2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f9c7b7f-8499-4902-ac4d-0f970893b072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dcbe5e-1c5a-4237-8221-dd269b8c71f2",
        "cursor": {
          "ref": "59923116-d2ea-4634-81b7-5ff4500600dd",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2da30838-94c2-41a0-bddb-fd990896c3af"
        },
        "item": {
          "id": "c3dcbe5e-1c5a-4237-8221-dd269b8c71f2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5f9c7b7f-8499-4902-ac4d-0f970893b072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48504f4a-d2f1-46d8-a1ac-13f2ef5df6d6",
        "cursor": {
          "ref": "292b9b7c-fa12-4579-a0cd-3d73158291f1",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fd3fb8c6-b2b5-4cbe-a736-be108a68f1ba"
        },
        "item": {
          "id": "48504f4a-d2f1-46d8-a1ac-13f2ef5df6d6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aed9edba-68e5-4432-8503-6d3e683f8b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d65aec-0713-4b19-bafb-13317c2b75f0",
        "cursor": {
          "ref": "24833c55-306e-4333-bf14-5bf83c85bf97",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3dabebe6-f5e9-4ea6-9cd0-b9d9f27eba5b"
        },
        "item": {
          "id": "83d65aec-0713-4b19-bafb-13317c2b75f0",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2fe930df-4f4c-4fe0-a9a5-896006b3644e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c80bbf1-41bb-4303-b85c-1bc22ed0eb50",
        "cursor": {
          "ref": "91c227f4-6df5-4860-bb9a-eb7adf83034e",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fd80183d-22d6-4911-9f06-a975fa4d0bf7"
        },
        "item": {
          "id": "6c80bbf1-41bb-4303-b85c-1bc22ed0eb50",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4836c17c-6016-413e-a75f-ff9d221a668e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "698bbd13-f6bd-4a95-9e6c-169ffa742e5f",
        "cursor": {
          "ref": "9e0ae733-bcfb-414b-98be-b824ed6d28a9",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "90d61da5-0593-4ce0-9854-4a2b18c272b1"
        },
        "item": {
          "id": "698bbd13-f6bd-4a95-9e6c-169ffa742e5f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2a2f64c0-4732-4ec1-8b3e-34f8289d90f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "384ef2ae-092a-414d-8ca3-df6c54336f06",
        "cursor": {
          "ref": "4f01e26c-5c4b-4d39-855a-8fc0f60d43b3",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8cdeb401-6c63-4bce-b137-8c2264511115"
        },
        "item": {
          "id": "384ef2ae-092a-414d-8ca3-df6c54336f06",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "69708f34-c10a-4c1f-8743-3c67e448c348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd1aff4-cca1-4f8c-b778-fc24540904eb",
        "cursor": {
          "ref": "5cded359-5654-4e77-92cf-6bc48ebd8e53",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "be5c1e01-7d7a-4254-92bc-6551b95b1903"
        },
        "item": {
          "id": "4cd1aff4-cca1-4f8c-b778-fc24540904eb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c4fd2e54-7830-4b42-a1e5-65d2d8ca1690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df5fc14-2c8c-4083-9062-4a334f3fd16e",
        "cursor": {
          "ref": "6a10efed-6548-4607-a2b4-03052dc54ce7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aeb33a92-6786-4e57-9089-50aea8766d01"
        },
        "item": {
          "id": "9df5fc14-2c8c-4083-9062-4a334f3fd16e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "efc1321f-3129-42aa-a1b3-389018611457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c217a9-5448-4fad-acb6-e33ce682e1aa",
        "cursor": {
          "ref": "1a7b2b6c-8f93-4986-99da-7592c4f52f74",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "adaf2ff7-e0a9-4a89-9f57-1905ae8562c3"
        },
        "item": {
          "id": "81c217a9-5448-4fad-acb6-e33ce682e1aa",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5e47c057-9beb-4429-a65a-e0d3fc87ca2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e678a0-c292-4e9c-95fc-8347e2d86b29",
        "cursor": {
          "ref": "01d472b5-0658-4aa5-b12c-249e95bf86e3",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "da37333b-960b-4a43-8da5-44ffc8c1c690"
        },
        "item": {
          "id": "29e678a0-c292-4e9c-95fc-8347e2d86b29",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c18c7001-afc8-45d1-b59f-581d08499942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807d0fc2-2e36-4cb6-8f95-1505017ca765",
        "cursor": {
          "ref": "22aa8483-c087-4d9f-8fac-272fea7de36f",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3bb82b04-c730-4933-b728-de5c63f74ca5"
        },
        "item": {
          "id": "807d0fc2-2e36-4cb6-8f95-1505017ca765",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b7e8f62a-df7c-4bee-9e40-c67f824f763b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2e5d43-0d20-45df-a05b-433f024cd5f7",
        "cursor": {
          "ref": "caf14b3f-c66b-4f26-91e7-ad0e1163a749",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1803d42e-033e-4b0b-a863-846f9b1ea0dd"
        },
        "item": {
          "id": "2f2e5d43-0d20-45df-a05b-433f024cd5f7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "95cd0679-13fd-4a0d-bd88-d39cd659e82c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511ac36d-afc9-463f-9355-d50b786af95f",
        "cursor": {
          "ref": "03c609ea-9aae-4a0c-91d6-b32842bf19e1",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a6467eb4-3e03-4b0d-b0f3-947374946ed7"
        },
        "item": {
          "id": "511ac36d-afc9-463f-9355-d50b786af95f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a2622946-42be-4bbc-8f81-537b264e2440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44b263c-f8c4-4e90-b9cc-71f07397a4a2",
        "cursor": {
          "ref": "8540ad72-a10b-43a0-8fa5-ef052d27bee1",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9eddb8d0-ac18-4c39-85dd-741a6f394be9"
        },
        "item": {
          "id": "b44b263c-f8c4-4e90-b9cc-71f07397a4a2",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "d6dcbc0e-9a8b-4a02-8c17-fcee8d8bf11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b037cae3-309c-463d-b175-db6e88a3c8b4",
        "cursor": {
          "ref": "8edc16a6-7994-41a6-b40d-31b89afee9a5",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9e3b34d1-923f-4af3-b57c-03eddb4b8225"
        },
        "item": {
          "id": "b037cae3-309c-463d-b175-db6e88a3c8b4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7f963e40-6804-415c-ba5d-c00300443d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff90c467-af18-431f-9a05-952d5c32fd9f",
        "cursor": {
          "ref": "51811b15-7ea2-405d-94a8-4ad613772121",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9c6f41f9-671e-4021-8c35-91951ca64240"
        },
        "item": {
          "id": "ff90c467-af18-431f-9a05-952d5c32fd9f",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5ae3ce23-d4ad-4ea4-85a3-97f6229d9a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762f0a0f-8c43-4443-9276-bf164272bb94",
        "cursor": {
          "ref": "c51162cf-bdd9-4e7b-8c59-0a248713b465",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f9da997f-1eee-43f7-bd5a-385001ef2c66"
        },
        "item": {
          "id": "762f0a0f-8c43-4443-9276-bf164272bb94",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d86db400-2cd9-4962-bde0-04a1f053ba84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c75379-fe18-467d-9168-07c1dc850146",
        "cursor": {
          "ref": "87cae6a1-2a34-4c44-bdec-eceb0b2ed32e",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0dd8ae06-aef7-4b31-bd55-208b4164c7e3"
        },
        "item": {
          "id": "e3c75379-fe18-467d-9168-07c1dc850146",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "da55342c-f67c-476f-a6a0-bb096490efc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abbc762-5d49-426b-b23a-f00dd127c2aa",
        "cursor": {
          "ref": "915dd8bc-b1f7-4286-bffe-065cd6685f88",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b61318fb-6edd-4661-bf96-e6fd725dcb5a"
        },
        "item": {
          "id": "7abbc762-5d49-426b-b23a-f00dd127c2aa",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7c3a0e7c-d6a8-45e7-bbc6-52b8d611f1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42123957-2b92-4358-af5b-b483263348f3",
        "cursor": {
          "ref": "a859cd90-9729-46fa-9bd9-adc3f86a3178",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4686e7ff-b7a6-417e-b186-47323dcf5b0a"
        },
        "item": {
          "id": "42123957-2b92-4358-af5b-b483263348f3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6e06abd5-0253-42bf-9e30-8b90385bb45c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2753bc-edfb-416e-a4a5-64f226f9a12d",
        "cursor": {
          "ref": "2895200e-d60a-4d0b-b339-b38a3a8d8e54",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f890bea9-a247-439e-957e-c0b4d7d15ba4"
        },
        "item": {
          "id": "ca2753bc-edfb-416e-a4a5-64f226f9a12d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c71440ec-03b4-4fff-a21a-736306488aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a39337-bc67-4b1b-9b49-0423c8c684eb",
        "cursor": {
          "ref": "02af62eb-ea39-475a-acaa-6ebfed743536",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "729a501f-26ff-4940-9ca2-c534fd64da5a"
        },
        "item": {
          "id": "e6a39337-bc67-4b1b-9b49-0423c8c684eb",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "c72e388a-7ddd-4dba-9d27-7ae983f65049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aec1b6b-1285-43de-98ef-aeb7d3a95791",
        "cursor": {
          "ref": "3ac9af3e-f77f-4a15-a46e-491d6a50fdfa",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "93dd0a4d-a00a-474f-a83d-bdf5cfd34742"
        },
        "item": {
          "id": "1aec1b6b-1285-43de-98ef-aeb7d3a95791",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6c74aeb9-d78a-453a-8fc5-049fda6d1050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bc0374-a6f3-434d-9312-d9d130cd905e",
        "cursor": {
          "ref": "1caa9146-aa26-491e-800d-59d9d01120c2",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b9e443d8-1055-4f72-b619-4b230b2b6a67"
        },
        "item": {
          "id": "31bc0374-a6f3-434d-9312-d9d130cd905e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "aae3fb67-5c26-4822-83f5-6b5a3fe4cba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebddf31-8380-42ce-a7c7-60cf0dad5a3b",
        "cursor": {
          "ref": "c7ab3cb8-cdc3-45f5-9bf5-dfc1db6bc78c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4d436963-6346-4c3f-a940-a3f5bd0efc7a"
        },
        "item": {
          "id": "eebddf31-8380-42ce-a7c7-60cf0dad5a3b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3cab84ac-4272-4e23-973d-3b4d3e81008b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362b8862-d4b8-4653-9455-cfea3721b1c5",
        "cursor": {
          "ref": "a06956a3-7e88-42ca-8097-aa57cf390d0d",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "38b7c3d9-69ef-4012-b1db-7f9f2df38fbf"
        },
        "item": {
          "id": "362b8862-d4b8-4653-9455-cfea3721b1c5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "95738586-6c70-4b6a-9925-e74b9e5ef33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d139ee-6469-497d-8492-5aad50a378ba",
        "cursor": {
          "ref": "0e677a8f-b1da-4708-a41f-03452c3b58ad",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3362d4f7-cbce-4534-a719-a9208adebbd3"
        },
        "item": {
          "id": "b4d139ee-6469-497d-8492-5aad50a378ba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fe908248-9e10-4921-8b45-09e7b3edcf37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caca1aac-141e-4e40-b7a1-34097329bec0",
        "cursor": {
          "ref": "fe254792-45fc-4cd6-980e-98e16a987c3f",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5fd3e685-45eb-4efe-936f-cf981dabb535"
        },
        "item": {
          "id": "caca1aac-141e-4e40-b7a1-34097329bec0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a36b24c9-3160-4aa2-8637-df07165941d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5c5fa1-337b-4ecf-bd72-457519c5f084",
        "cursor": {
          "ref": "25af642b-8543-4448-bce7-7026c8225860",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a8584f8d-5090-442c-ab66-0ef7130c0dd4"
        },
        "item": {
          "id": "be5c5fa1-337b-4ecf-bd72-457519c5f084",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "57d5d2c5-2aa7-43f6-a19d-03997d3c0afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d8a4cd-9683-4b9c-ade3-2df0ae88395c",
        "cursor": {
          "ref": "b75fbea8-5a05-4ab2-b11b-c940a1c21a8f",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "86664f38-1de8-40be-8348-9e1e3188ecdd"
        },
        "item": {
          "id": "f0d8a4cd-9683-4b9c-ade3-2df0ae88395c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c20b1d11-890d-4d3c-bf18-7f321740addc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7913cf-96c9-4de6-895f-0a2c700ce9ac",
        "cursor": {
          "ref": "971d424e-585e-453c-b15f-61ff5005cc6c",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cec9903d-d203-47b6-ada9-163614412e35"
        },
        "item": {
          "id": "4e7913cf-96c9-4de6-895f-0a2c700ce9ac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0b169b33-3326-41a3-a868-1ab45e1147b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc048e6-2f83-4e4b-94d3-e2ceed71f307",
        "cursor": {
          "ref": "d4d72892-525e-4fb3-829b-f389cff29fee",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d9f773ef-ad9f-4d6f-8527-6c756d650eff"
        },
        "item": {
          "id": "0cc048e6-2f83-4e4b-94d3-e2ceed71f307",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ed8b0f32-3c27-4ed4-8626-ff75887fc9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7ce1ad-d374-48ce-b44a-6d9eb619f54d",
        "cursor": {
          "ref": "9bda9a5b-8d12-49ce-89e9-ec9455885c31",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c26efba0-151b-404f-93e7-d0c8f83b0599"
        },
        "item": {
          "id": "1a7ce1ad-d374-48ce-b44a-6d9eb619f54d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5d17895c-de82-416f-9455-e7da12baf050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8a92c0-ed58-466b-b69c-d08a002f5017",
        "cursor": {
          "ref": "6353325e-c7de-4d97-83fc-fbf88f6c4405",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e17ee287-80b9-4495-bad9-91f7200bd4ec"
        },
        "item": {
          "id": "8e8a92c0-ed58-466b-b69c-d08a002f5017",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b562452b-5e06-4a39-b25f-d3e29efe5453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806e503c-9fec-4b64-a159-cad345c3d69e",
        "cursor": {
          "ref": "20f32e3e-ffce-4a04-8b81-257f72ee3ac6",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "15ab8e46-4c81-4919-b5c7-cabe4acd72c7"
        },
        "item": {
          "id": "806e503c-9fec-4b64-a159-cad345c3d69e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f2585d63-bf95-41f2-97c6-c2cce24b6b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bed8e92-2d3a-4653-b026-ac652818e9ab",
        "cursor": {
          "ref": "35689304-8306-472e-a232-30d32ca480a0",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "824b0673-250d-476e-a600-f8cef057c34f"
        },
        "item": {
          "id": "7bed8e92-2d3a-4653-b026-ac652818e9ab",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4f1b6cdd-57f1-43db-a880-ed61de2035ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9035c766-9d47-4cd8-af9a-92713d2ace8f",
        "cursor": {
          "ref": "af6b1710-3fa7-477f-8dcd-4d48317d9b2c",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "582ed0e3-9b97-4d27-a66e-3f0188c5d8ec"
        },
        "item": {
          "id": "9035c766-9d47-4cd8-af9a-92713d2ace8f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "adee1ddb-cb50-40a4-a1e9-5ff2769feb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6559edf3-84c2-4aa7-a752-d85a5f8e8324",
        "cursor": {
          "ref": "988f86dc-3cbc-40be-b455-a6a04c80c0f8",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b666cd47-16cc-48d3-ad83-7ec9396bd09a"
        },
        "item": {
          "id": "6559edf3-84c2-4aa7-a752-d85a5f8e8324",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5156f82c-4b6f-4744-aae9-6e75ccf0e7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9c87c6b2-7da9-4f10-81ef-f06b244f6667",
        "cursor": {
          "ref": "3a83979b-f294-4610-ad56-79b2b48956c1",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "6fefa39a-ff0f-40f8-b554-35c2a125309d"
        },
        "item": {
          "id": "9c87c6b2-7da9-4f10-81ef-f06b244f6667",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9a3fe6b6-eadc-4467-9450-6f48756920e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d137a10-4226-430f-a863-de3f6ee99fd9",
        "cursor": {
          "ref": "46de7730-7c18-4ca5-b06a-4ded39832f6b",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cd6629cb-4cbe-4734-86ef-3f8a9e407b06"
        },
        "item": {
          "id": "6d137a10-4226-430f-a863-de3f6ee99fd9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "cbe14346-b234-4f2f-8431-ca7d7aad70f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1461dc2-1345-46bd-b89b-d4d3401f8a68",
        "cursor": {
          "ref": "9a76154c-4362-48cc-bcbb-cb79494b395b",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "80e306df-076b-4bee-965b-a17d4f496b79"
        },
        "item": {
          "id": "d1461dc2-1345-46bd-b89b-d4d3401f8a68",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2f677f9f-e0f0-4190-bb87-80ae486c06b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b24f37-c2b0-4d13-a17c-4f1a8ed92702",
        "cursor": {
          "ref": "0b6f2646-5424-4a83-ac71-64ff95219629",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fc708bf2-56e1-47ff-a942-a6a751c3e99f"
        },
        "item": {
          "id": "71b24f37-c2b0-4d13-a17c-4f1a8ed92702",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7090d144-b5d0-4bae-840c-ba6328f80baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbdbf6e-ac51-4a8d-9f85-ff2c68b79152",
        "cursor": {
          "ref": "69ddcb3d-85c6-4b58-87cf-35ff1102edde",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6ac8fccf-922f-4116-a770-522d0e1acc64"
        },
        "item": {
          "id": "6cbdbf6e-ac51-4a8d-9f85-ff2c68b79152",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bf2e1729-75bc-4867-b724-7e4831d5df06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb89b171-2fdc-4aa8-9127-2e6cc186b781",
        "cursor": {
          "ref": "95e9b201-be2e-483b-bd58-5f9aafafe5fa",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "08b396fd-f15d-4947-91d0-6d8e9bdea694"
        },
        "item": {
          "id": "cb89b171-2fdc-4aa8-9127-2e6cc186b781",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "30e4c488-0669-4e24-8a4a-9a11ed4fe1d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7093ae-6c12-4416-95c5-06ffaac3f80d",
        "cursor": {
          "ref": "d7447332-00c6-45cc-afac-280e18f6b324",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a742f1c2-7232-4703-b674-03678e647637"
        },
        "item": {
          "id": "0d7093ae-6c12-4416-95c5-06ffaac3f80d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "68e8c8d4-a7de-4387-8ab0-09071431e8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "18e12095-43a8-4fe8-b965-d25b17639a3b",
        "cursor": {
          "ref": "4dbeca47-5ac8-41c2-b0a5-ec446f8dd39e",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "71b52894-70ec-410d-95d6-7e8d06c2c59a"
        },
        "item": {
          "id": "18e12095-43a8-4fe8-b965-d25b17639a3b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e296f96b-87e2-407c-b72b-4d54a274581e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62901fb8-5829-4db2-8002-ecbf3deeaaff",
        "cursor": {
          "ref": "008ce003-7c2e-4dbe-971e-fa0cf4f11b22",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1162d5e2-e6d3-4e06-9821-108b1066b778"
        },
        "item": {
          "id": "62901fb8-5829-4db2-8002-ecbf3deeaaff",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d8edcd21-8b03-4428-85a9-5f034638d7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67150739-fc2c-4914-b1f9-b51ff638bbcc",
        "cursor": {
          "ref": "b72f4d66-960f-4d03-9f01-175a9fc9ab64",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8534e685-7d14-44af-aff3-993d697642bb"
        },
        "item": {
          "id": "67150739-fc2c-4914-b1f9-b51ff638bbcc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5a1ea535-cb01-4ff5-a0ce-63764509f25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe662d61-3733-4d7d-a620-f368b1859ea1",
        "cursor": {
          "ref": "e550f98c-babc-4503-ac01-bb7ddcc826d0",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4778f113-007a-4b30-b039-c9194f7a587c"
        },
        "item": {
          "id": "fe662d61-3733-4d7d-a620-f368b1859ea1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0323586e-d7b3-4bf5-a3fc-57cd4417078c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c9ed90-6a82-4c0f-8704-7edde43175e3",
        "cursor": {
          "ref": "2df3de66-bd09-4073-acb0-4fee23b7a059",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8e735d54-43ee-4015-9fcc-8ddf42ca7b56"
        },
        "item": {
          "id": "37c9ed90-6a82-4c0f-8704-7edde43175e3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "656f94b4-2094-4658-b208-c9b27e099ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02053805-52a5-4988-90df-81004a5caf40",
        "cursor": {
          "ref": "7652220b-74fa-4f37-9d2e-fa8a5a62b28e",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "dddf820e-6ba0-4f14-b890-1b44684e3057"
        },
        "item": {
          "id": "02053805-52a5-4988-90df-81004a5caf40",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5cd2648f-31d9-4c99-a847-395c498da7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a351ee04-db5f-4134-a6c3-02866c685a5c",
        "cursor": {
          "ref": "6037ac15-7e5e-43f6-86e9-d9581c6a9e26",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a884e8dd-c786-4464-aa0c-936c56b61ac3"
        },
        "item": {
          "id": "a351ee04-db5f-4134-a6c3-02866c685a5c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "00d44a3a-985f-48c6-9425-bc5c178500e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9224ad0-6687-4e29-ab31-12b099360ce4",
        "cursor": {
          "ref": "57416d87-fc5b-4b9d-b466-39879d1fe231",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f177dcec-d3cf-4669-879b-dcb125bedfa3"
        },
        "item": {
          "id": "e9224ad0-6687-4e29-ab31-12b099360ce4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d6867a2a-9fc0-46aa-bbf9-9450f94ae55b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e37c0d-4896-4f00-a8fb-b35a32089ce9",
        "cursor": {
          "ref": "db203510-b477-43f9-b03c-586c5f0e13c0",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7dcf68b7-42e9-432f-b147-746ce8046f0f"
        },
        "item": {
          "id": "31e37c0d-4896-4f00-a8fb-b35a32089ce9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "48a476e5-45e4-4559-938d-be2fcc7df045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0002480-f15f-4c40-b0df-ecc428d31c22",
        "cursor": {
          "ref": "7ea9fa2b-48ca-415e-9f2c-7d3d1f48017d",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c4332078-eb70-444e-9787-cdb7a15f641a"
        },
        "item": {
          "id": "c0002480-f15f-4c40-b0df-ecc428d31c22",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "55fe126a-36e2-47af-ab57-1580534692a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ff3e67-0c7f-47c6-8d6e-a81ba041adcf",
        "cursor": {
          "ref": "9f351898-feeb-4c5b-9b9e-2c5831b44433",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "eda81d89-a9b7-4138-92d7-e7fb96cfeb74"
        },
        "item": {
          "id": "69ff3e67-0c7f-47c6-8d6e-a81ba041adcf",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8eda09f9-a3ef-40df-8fa0-550291504847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a469c9-325f-46e2-90c1-6fab4de6ffec",
        "cursor": {
          "ref": "7dfcf2af-b793-4291-b30a-8dd5ca1f2095",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9bfa7489-055a-4567-b980-63184133cc7e"
        },
        "item": {
          "id": "a0a469c9-325f-46e2-90c1-6fab4de6ffec",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "00f8ec82-c814-4153-b1ea-c2a25dc32705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8da388f-1ee6-420f-bf82-1ccb047512ea",
        "cursor": {
          "ref": "60386a2f-1608-41ed-9f31-7c9128065ad9",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c897b464-902e-4560-809e-2b7515c28bb3"
        },
        "item": {
          "id": "d8da388f-1ee6-420f-bf82-1ccb047512ea",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "478fc512-b58d-4e8c-8425-2de130b78e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08d8093-dd9b-4c26-9ebf-6289fb88efbc",
        "cursor": {
          "ref": "a23885ad-250c-4346-a4e5-10ef01ef614d",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "89dac3b6-889c-4af6-9fcf-61b9237b2a47"
        },
        "item": {
          "id": "d08d8093-dd9b-4c26-9ebf-6289fb88efbc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "81e79ad4-da50-489f-8ba3-402138fea9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473d9c23-19b5-4664-8738-f1ec5e0125bd",
        "cursor": {
          "ref": "89ac4089-cd63-463b-9abc-01257311f295",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a979461b-348b-4d50-8cb7-b64fdf76d971"
        },
        "item": {
          "id": "473d9c23-19b5-4664-8738-f1ec5e0125bd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "698579e1-5c52-48a8-8562-0d466e475043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83447b6e-5041-412e-b9a8-edfe88d148df",
        "cursor": {
          "ref": "e6424614-508c-4dee-a525-43a129466443",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a32dff4d-f96a-4aa8-a229-704c74a1c66f"
        },
        "item": {
          "id": "83447b6e-5041-412e-b9a8-edfe88d148df",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "874329d1-9467-43de-9e59-45fe272a97b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4e6b36-e846-4a73-8d29-96e313f480e6",
        "cursor": {
          "ref": "35c6d523-971d-4608-a8fb-dd65dcd6d17f",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3ec99e2d-7abc-4d9c-a2a2-1f154fad4507"
        },
        "item": {
          "id": "9f4e6b36-e846-4a73-8d29-96e313f480e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8939eb37-fbb7-4180-9fa2-22eb5c61ad10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3efedb5-0a5e-4d4d-8b0a-8f9db85c8ab4",
        "cursor": {
          "ref": "bf9c6e6b-d780-4148-bfad-b243c6b20ec1",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8e5399ad-c5d7-466f-8035-3a803c1c3b9c"
        },
        "item": {
          "id": "a3efedb5-0a5e-4d4d-8b0a-8f9db85c8ab4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "24519e5d-f38d-4d52-b4bc-8717bb86920d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c197adf-ac17-4efd-8089-b7b8fa7cd5fd",
        "cursor": {
          "ref": "38d101e5-9f01-486e-992b-90e3f79032fc",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "b6fba6f6-d161-43a7-b7ea-3469eef74128"
        },
        "item": {
          "id": "5c197adf-ac17-4efd-8089-b7b8fa7cd5fd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1ac4b9d3-f72a-4eb6-8afa-cdc98b64a76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ab48db6-7d80-4275-be4b-be51e5cbfd1d",
        "cursor": {
          "ref": "28e4abdf-0f09-4de2-aefd-5b977ea4f9f7",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "318cd274-c08b-4713-b4de-13b03009a10f"
        },
        "item": {
          "id": "9ab48db6-7d80-4275-be4b-be51e5cbfd1d",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f57cc7d5-1b8f-4c62-a9da-3690a42d2a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2cd5ef-c38d-4670-b1e2-f555aa0929be",
        "cursor": {
          "ref": "341a3ced-f897-4148-a231-b5fb8ae32ffd",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ef14217b-593e-43d2-a29c-f3356d1eef31"
        },
        "item": {
          "id": "fe2cd5ef-c38d-4670-b1e2-f555aa0929be",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "28a25e0c-9d3f-42d2-a65d-64b2f88c3416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2e4399-95a8-4a16-8711-6abf7532017c",
        "cursor": {
          "ref": "b9d6ba27-a842-48a3-b88d-dd420db1ab25",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "26e15a8f-7954-47ef-b47a-43ae944e4a4f"
        },
        "item": {
          "id": "7e2e4399-95a8-4a16-8711-6abf7532017c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "04f82466-1d45-4901-8d4a-c514c96e913c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60027919-8a75-471d-b342-9601bd4e4a19",
        "cursor": {
          "ref": "a3628267-a19c-4526-ba8f-ce69b0c3f0d2",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6cbb8765-d3f1-4572-9c62-ae5066154570"
        },
        "item": {
          "id": "60027919-8a75-471d-b342-9601bd4e4a19",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8f46fc6c-c3d5-4104-924a-58b31323ef86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854d5615-8bf1-4efc-9494-9d22e3c6ee7b",
        "cursor": {
          "ref": "9c16f5f5-eeea-44ab-a57a-1fa82d84446f",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a9099661-78c8-4918-911d-190766a63a32"
        },
        "item": {
          "id": "854d5615-8bf1-4efc-9494-9d22e3c6ee7b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "71ad1f5a-03af-4298-8b66-02d164d6bc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd391a03-f2d0-4e60-b0e3-46f957d12f54",
        "cursor": {
          "ref": "50787e50-e787-4164-b176-a1a8d15a4d7f",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "cfa38435-92e8-43e6-9052-986be3a51360"
        },
        "item": {
          "id": "dd391a03-f2d0-4e60-b0e3-46f957d12f54",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c959ffb4-c1d5-4277-b8e3-cd423a00a63a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71fef06-239b-44a8-941a-e399904675af",
        "cursor": {
          "ref": "4dde9c79-b59f-4d34-82cf-6af2d92a34a9",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ddcee111-697b-421a-b8ff-75cbe9258099"
        },
        "item": {
          "id": "b71fef06-239b-44a8-941a-e399904675af",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d8cfd4df-dae3-42a4-b2e7-e494234921dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "248c8f7f-615a-4134-b7d3-cdd7dd0740ef",
        "cursor": {
          "ref": "62bc9492-a450-44b4-831c-659a09b18781",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "53787d6c-595d-4d1c-9a5e-f44769688598"
        },
        "item": {
          "id": "248c8f7f-615a-4134-b7d3-cdd7dd0740ef",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "60930591-b7e9-41aa-86cd-bef212a3fcea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e81be4d-ac3e-4de4-9cec-0787996616e0",
        "cursor": {
          "ref": "b9e3957c-3486-42fd-99e7-41211bbccc00",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "38030202-ec75-4ddd-8191-4c17a11cfe02"
        },
        "item": {
          "id": "1e81be4d-ac3e-4de4-9cec-0787996616e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fdf318af-9c2f-4201-815f-5daa55b2fab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bf02c34-b27b-4d41-8ad0-c23539bc1d2e",
        "cursor": {
          "ref": "a5d27325-1e46-4434-9fcd-970778a56c07",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e75abeb-6b48-46d9-833c-13377fc33f76"
        },
        "item": {
          "id": "7bf02c34-b27b-4d41-8ad0-c23539bc1d2e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f5cf8621-eb27-4103-a97a-a4db49320be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428892a2-315b-434f-b01a-fb97e8efe473",
        "cursor": {
          "ref": "80d97456-cfd1-4d34-ba48-b0a16fb06bae",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7a05cd62-22aa-4f16-8721-60c4912143a3"
        },
        "item": {
          "id": "428892a2-315b-434f-b01a-fb97e8efe473",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a1b65a06-bbf8-4a79-9ea8-a3b2742df17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcfd2caf-29ed-4826-be11-a10e3ec1bb5e",
        "cursor": {
          "ref": "8e625f99-e519-40df-ac6b-4719b5566282",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "fa634c83-158b-484f-b1c5-b492321309d4"
        },
        "item": {
          "id": "dcfd2caf-29ed-4826-be11-a10e3ec1bb5e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1b2ee409-796b-41c3-94ae-46c9b4c2787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024d2b8e-bd86-4586-aa13-8b6040653fb0",
        "cursor": {
          "ref": "ba43c28d-4011-45ec-b1a3-a99820268894",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bb218da2-4562-4d9b-8161-81aa3129e999"
        },
        "item": {
          "id": "024d2b8e-bd86-4586-aa13-8b6040653fb0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "03b8e208-a7e1-48ee-a395-aeb3cf527836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47370482-b690-4e3d-be7c-4dac7c259a73",
        "cursor": {
          "ref": "70aeccc1-faf9-4637-b968-0d8ec645add2",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8365c335-e59a-4188-9498-a953a492011d"
        },
        "item": {
          "id": "47370482-b690-4e3d-be7c-4dac7c259a73",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "35051d13-8c6a-469f-85da-d6f4086d6c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068ff070-b71b-4108-b610-d8569e8cb1f5",
        "cursor": {
          "ref": "c2d62faa-9040-488c-946d-d04fd902f62a",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8934d27d-ea6d-4517-9f6f-7c34a4ea023d"
        },
        "item": {
          "id": "068ff070-b71b-4108-b610-d8569e8cb1f5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5b6e92ed-2983-4e65-bae3-06aba4758c5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e147b2b3-0128-46eb-a4ec-bc1dc0fca651",
        "cursor": {
          "ref": "4159f8b2-c6b3-452c-891b-9ed391ad37d4",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "50961381-6b8b-4a58-a413-686254e037aa"
        },
        "item": {
          "id": "e147b2b3-0128-46eb-a4ec-bc1dc0fca651",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7ec4345e-55cb-467d-ad6b-32f5f2fb6be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f951fd-4207-47ce-9dc4-b831c5e6af6d",
        "cursor": {
          "ref": "9965f7c6-47b0-45e0-b839-d8a1b7d04de0",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "674ea4ec-e2f8-4636-b90d-f1cb197cae0b"
        },
        "item": {
          "id": "a2f951fd-4207-47ce-9dc4-b831c5e6af6d",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e002ff4f-6bbf-435c-be2a-9d8c920c4b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bf06b7-acc0-4e6c-8b9b-eb0b8a986ea7",
        "cursor": {
          "ref": "237d8b91-6939-4cf1-ad16-5fc1c3f79949",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1cc51f3e-bfbd-4a7a-9f27-6704a41818ca"
        },
        "item": {
          "id": "e0bf06b7-acc0-4e6c-8b9b-eb0b8a986ea7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4e7cea34-6d9a-4391-a75d-14a9413dbebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a717bc21-5405-4fb0-9c9d-65f08c101211",
        "cursor": {
          "ref": "a76365c9-f3f5-48e0-8139-8e2f44e53daa",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8a5f5a9a-5e28-4d20-aaf7-547de64777e3"
        },
        "item": {
          "id": "a717bc21-5405-4fb0-9c9d-65f08c101211",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7a6d5fc8-419f-4087-9fda-e7dd2f00bbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a5a24a-ca84-4bc1-a435-2ea50022f217",
        "cursor": {
          "ref": "0d17a3ad-d2be-4b07-9e3d-8eaeb9a3a7a1",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "4bca89a4-c139-442a-91e5-051f7cec59f5"
        },
        "item": {
          "id": "45a5a24a-ca84-4bc1-a435-2ea50022f217",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1a7c0614-ae5f-46ae-bdec-3bc1e2902ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7338fc2d-f6a3-4d9d-869a-5f7b66e318ae",
        "cursor": {
          "ref": "c5cf4d8f-a1aa-4efc-aef6-e7473e134970",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "63226ce3-84a3-445e-9f18-f2ce4570fda1"
        },
        "item": {
          "id": "7338fc2d-f6a3-4d9d-869a-5f7b66e318ae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0850eba4-b218-4d96-b87f-0c46b090a0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187a42a4-f8f6-4267-83c5-eac5775c9a52",
        "cursor": {
          "ref": "4a1e08c9-40d5-4a5b-a377-e54f4b7399eb",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "189ce0dd-86b1-47d5-9642-7801d7158125"
        },
        "item": {
          "id": "187a42a4-f8f6-4267-83c5-eac5775c9a52",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e99976b4-4644-4e0f-9c39-6087917f9ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a444e9d-4a87-42a7-8576-878c1e23bb32",
        "cursor": {
          "ref": "7bf68ac7-5134-484a-8065-534a14ee497f",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c5b5cba3-d0c9-4c1c-aeef-eea49d66b2d3"
        },
        "item": {
          "id": "2a444e9d-4a87-42a7-8576-878c1e23bb32",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ac6d70f2-d855-4ceb-8ace-13f306e4c55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9d056c-f9e1-45a3-845c-e28b4f709bea",
        "cursor": {
          "ref": "76b64a56-d4e4-4f8f-88fc-40bdd89bccd3",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b1f4c9b7-a8d2-4e87-959a-8cb1087f0cef"
        },
        "item": {
          "id": "1c9d056c-f9e1-45a3-845c-e28b4f709bea",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "525855b1-dd3a-4634-bd8f-aa22e795c86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1657bdfd-2a95-48d4-a77a-e1dd5af0ba1b",
        "cursor": {
          "ref": "64b0027f-3ad2-43d8-9d76-c3011aab386f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a6079472-e28d-4ad6-9b57-8258a4f715de"
        },
        "item": {
          "id": "1657bdfd-2a95-48d4-a77a-e1dd5af0ba1b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "001ed07e-3977-46c3-af2b-0e97d0e9aa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7a47a7-92ca-417c-98a3-79ff926ee904",
        "cursor": {
          "ref": "b35773aa-259a-4cc6-883e-13e34debc389",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b2c8bd28-23d9-4a18-a58f-75d65a84e461"
        },
        "item": {
          "id": "ff7a47a7-92ca-417c-98a3-79ff926ee904",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6ec3488d-0950-443d-8e7f-b13a8beb80d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1078483-ea2a-45fa-a805-8703474ec2a0",
        "cursor": {
          "ref": "b5ebcec5-1716-46aa-9ce8-6a7609e648ea",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ce29d872-f818-452c-8438-635a5816fe8c"
        },
        "item": {
          "id": "b1078483-ea2a-45fa-a805-8703474ec2a0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "7468b00b-d316-475a-867e-2650fb0766bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1fd997-97fd-400b-b7ec-bbe52130de9c",
        "cursor": {
          "ref": "dadb50e0-2618-488b-8766-8efae657fd7c",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8a89fe8a-51e8-4324-b9b9-efcb7d9863bd"
        },
        "item": {
          "id": "eb1fd997-97fd-400b-b7ec-bbe52130de9c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8d2fe11c-1574-45b4-9df9-c295b31da6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5a6037-0351-4a47-9b9d-3ea7af50296d",
        "cursor": {
          "ref": "154d1dbf-e989-4fac-b0ed-0dc60cfd22dc",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "746ec50f-3699-4434-a43a-66c01fb6172e"
        },
        "item": {
          "id": "8e5a6037-0351-4a47-9b9d-3ea7af50296d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7d21abbd-2a83-42bb-8893-8f56ab9b2b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00685f3-4bf1-45c5-acf7-e805d79d9077",
        "cursor": {
          "ref": "6836c841-1163-4da2-94ec-75a7bcd6fc3f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "783d8615-1f1f-47eb-a793-3029b8f56154"
        },
        "item": {
          "id": "f00685f3-4bf1-45c5-acf7-e805d79d9077",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f23d0113-c913-4d60-8990-1be0e3ceb535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa366856-fac4-4a88-95f8-388226bec5ba",
        "cursor": {
          "ref": "e6febf67-dc6b-4a3e-9439-6a332aae8632",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "e4ae46bb-66f3-433a-8b39-8a9f68a0601c"
        },
        "item": {
          "id": "fa366856-fac4-4a88-95f8-388226bec5ba",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "945923cc-73fc-4b03-90c6-0e4451bd6fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "7ed7e5f7-011b-4362-90b4-4d5e19374495",
        "cursor": {
          "ref": "575b7f51-9a5a-4d03-b317-c7987ef5f8ac",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ece2b81b-2cab-42f1-9a08-e88eaca7a833"
        },
        "item": {
          "id": "7ed7e5f7-011b-4362-90b4-4d5e19374495",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b48a9921-403a-4a02-a0a4-1ac23c6fd78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "c7c57ab1-54f1-4f9d-a808-3cdcd5325ab8",
        "cursor": {
          "ref": "30aa5574-48e6-4a86-a83d-1e6185deab84",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1e87a8b5-7f1c-40aa-8155-305b819e9e16"
        },
        "item": {
          "id": "c7c57ab1-54f1-4f9d-a808-3cdcd5325ab8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4b08c996-5c46-44bc-90d2-9f3bf230afa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "0ccdfedc-3e2b-4ede-bd79-09f1a2e05fd8",
        "cursor": {
          "ref": "a6552223-66ef-400d-bca2-031e81248782",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "41cd0d56-c98a-4caf-b591-663698ca17b9"
        },
        "item": {
          "id": "0ccdfedc-3e2b-4ede-bd79-09f1a2e05fd8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "30ae06e7-defb-4ad4-a74b-01b4f081eb5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "f852e75c-2caa-492d-9e48-c0f58932fa64",
        "cursor": {
          "ref": "3bd74fd6-9451-4faf-816b-0b7b65483934",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "101d76ad-bcf7-472f-85b9-8b8b7157370f"
        },
        "item": {
          "id": "f852e75c-2caa-492d-9e48-c0f58932fa64",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e4541e41-739e-4e4b-8e9f-9c4f64bf93d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 13,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "d23a5ad7-ebac-490a-b5f1-dd8df1a1395a",
        "cursor": {
          "ref": "f891a394-4d72-40dd-bc7b-dded21677b7f",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "100ac35e-6260-4a3c-bc40-2fe799e8fb92"
        },
        "item": {
          "id": "d23a5ad7-ebac-490a-b5f1-dd8df1a1395a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4ba90dce-b6af-49c0-b3f5-569b65c17b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "033ab942-2e28-40f0-89b8-db98325893ce",
        "cursor": {
          "ref": "e8e7e894-ed2c-4fad-b08b-9985738a809a",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bd762e92-d347-4a8b-b32d-ebb706202612"
        },
        "item": {
          "id": "033ab942-2e28-40f0-89b8-db98325893ce",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5d8e01c3-f6e2-42ff-958d-9b565502fcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "5e536caa-3a1e-4254-bcfa-6796c3eed06e",
        "cursor": {
          "ref": "68dbe3a7-be58-43d6-b451-86f596af940c",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "796dbdf3-510d-4f1e-b149-09e17a4b60b0"
        },
        "item": {
          "id": "5e536caa-3a1e-4254-bcfa-6796c3eed06e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4e34f970-3ab4-4c55-b6db-6f448a3ff7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e536caa-3a1e-4254-bcfa-6796c3eed06e",
        "cursor": {
          "ref": "68dbe3a7-be58-43d6-b451-86f596af940c",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "796dbdf3-510d-4f1e-b149-09e17a4b60b0"
        },
        "item": {
          "id": "5e536caa-3a1e-4254-bcfa-6796c3eed06e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4e34f970-3ab4-4c55-b6db-6f448a3ff7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351b6571-5e68-437e-bd34-37750b1f5a10",
        "cursor": {
          "ref": "569f63b4-6937-408a-91ea-a47de17aabc9",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9b3a5aed-57ec-4f70-9ac8-827a4fa0175f"
        },
        "item": {
          "id": "351b6571-5e68-437e-bd34-37750b1f5a10",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e6bbd77f-61b3-49d4-a666-9552bff6cd95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137b2129-be02-407c-b4f4-338ac96e6ce3",
        "cursor": {
          "ref": "012c2f4f-4e82-4ad8-a4bf-9574c24a9926",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "574e4fad-edf5-4ce8-957f-70bb531f70eb"
        },
        "item": {
          "id": "137b2129-be02-407c-b4f4-338ac96e6ce3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b0e97124-c390-443a-b1c2-6bb8aff351cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813322f9-2285-448f-8086-14c1ca3ed81a",
        "cursor": {
          "ref": "26671e35-bb02-41d7-bf74-22c96ab7b956",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "287024e4-469d-4b90-a03e-2b6fb39e07fa"
        },
        "item": {
          "id": "813322f9-2285-448f-8086-14c1ca3ed81a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5f4a9639-b31b-47ce-bc8d-87d8f59968a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ba8f45-da93-4eb8-a080-7fab8da71e39",
        "cursor": {
          "ref": "901b27ec-afd6-49a7-b243-078eb8edf496",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3c4d62e9-1030-4b86-b9a2-8bf897f9ec6c"
        },
        "item": {
          "id": "d9ba8f45-da93-4eb8-a080-7fab8da71e39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fac31b88-b995-4249-86b1-4b21db30aa3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9100e2a7-df20-4463-96c0-7e30b1402e14",
        "cursor": {
          "ref": "69570486-d692-4ee3-be7a-e7c26cd56a04",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d89bf577-efa3-451d-8734-47d557220e13"
        },
        "item": {
          "id": "9100e2a7-df20-4463-96c0-7e30b1402e14",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9b769114-747e-4f9b-a1b1-813fd4e5639f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f39df3d-d441-473d-a3a0-d54b960da386",
        "cursor": {
          "ref": "596fd281-1d8e-417d-8066-716fff14410d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2feea75a-81ee-4144-bbf5-6321c3785681"
        },
        "item": {
          "id": "8f39df3d-d441-473d-a3a0-d54b960da386",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f763820d-931a-451e-809a-b33be4a427bc",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9716163a-02ce-4b49-ae23-633495e0c820",
        "cursor": {
          "ref": "4c1cc8eb-4630-4b80-a7a4-aa14c9ed06fd",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "e2ffa9d9-043e-4b84-b4a9-d32b3e4b012b"
        },
        "item": {
          "id": "9716163a-02ce-4b49-ae23-633495e0c820",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4d00f128-24c7-44a7-ad98-83dfc75c0bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee3ebdc-b493-4fc7-bf58-1a81b50273fd",
        "cursor": {
          "ref": "1948ac16-ef37-4790-86fd-2d5aebbcb82d",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c7c16a62-468e-42e9-b82a-dbfd91273b51"
        },
        "item": {
          "id": "1ee3ebdc-b493-4fc7-bf58-1a81b50273fd",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ca53f640-2d1e-4f9b-aeb4-9a4049bd7125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a841a776-7b37-482d-b65f-cc7c5639857f",
        "cursor": {
          "ref": "ccbe2947-beff-4ac7-891a-c1db3b1c77bb",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5984aa88-2998-4558-a3c8-4b037295d371"
        },
        "item": {
          "id": "a841a776-7b37-482d-b65f-cc7c5639857f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0b86c705-5557-404a-b489-e61d6af7d0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37a5841-2f32-418e-9afe-56f4a195213d",
        "cursor": {
          "ref": "83067c1a-271a-4399-93d9-6f3dc3bfddc3",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d1fdee06-31d1-40cc-a9e4-d7980c2e1468"
        },
        "item": {
          "id": "d37a5841-2f32-418e-9afe-56f4a195213d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9533544c-e0ff-4026-84e1-b44fb7380798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ad02c03-e12f-4499-8c5f-bd20021da8e5",
        "cursor": {
          "ref": "700b929d-233b-4226-8870-ff7f7b95e398",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1ff7e062-a8d3-4ca5-b159-a3d534ccbfe5"
        },
        "item": {
          "id": "4ad02c03-e12f-4499-8c5f-bd20021da8e5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5eb3c6a4-1a46-4d1e-9a6e-e1147fa23024",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a2e4fc-b139-4dda-9191-aefda032e4b9",
        "cursor": {
          "ref": "0220ea07-14fa-46f2-a3dd-edd404aadac2",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e157f59f-3437-48df-a5db-34721bc18b04"
        },
        "item": {
          "id": "44a2e4fc-b139-4dda-9191-aefda032e4b9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ae4f15d-9581-41fe-904d-773e9ead8ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9955757-fb53-4dd8-8850-fbbbd4a23083",
        "cursor": {
          "ref": "6e0f1663-fccb-4ab2-9829-d60f1af16fe8",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0e14072c-adf0-4ccb-866b-51e376c6f453"
        },
        "item": {
          "id": "b9955757-fb53-4dd8-8850-fbbbd4a23083",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d8c78d10-3c82-417e-91d9-88dfc1621401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71175d90-eaba-432d-9109-f747ea9f7f44",
        "cursor": {
          "ref": "6df099a6-ea13-439b-bb98-f267897827ad",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9ba1bcc4-43a1-479d-8d31-dffd4c552c9f"
        },
        "item": {
          "id": "71175d90-eaba-432d-9109-f747ea9f7f44",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b4bcc7e1-704d-4da3-9d94-ff29ef57d72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4600149-c054-4909-b538-3b10db6d19ae",
        "cursor": {
          "ref": "c308fba8-f558-4fba-98ae-a0cb767968e4",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "49e64360-e241-41f5-849c-eeab4693a080"
        },
        "item": {
          "id": "b4600149-c054-4909-b538-3b10db6d19ae",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "82cbbc20-2421-484b-8b07-ba1dab4d8b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5f9328-2c0f-40f0-84f2-a42f17af217e",
        "cursor": {
          "ref": "3e044da9-51ea-4aa9-ac21-73131618e5d4",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e47cf57f-c95d-4f69-8337-f6ec03ccbd7e"
        },
        "item": {
          "id": "1d5f9328-2c0f-40f0-84f2-a42f17af217e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "63e786a0-b610-4cf5-9c91-e5582023813a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7961664-ee5d-44ee-941b-e246b8a8bf54",
        "cursor": {
          "ref": "0b3c1a51-83a3-4313-8078-d16b7e32b4b9",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1262b3f4-cf01-44e0-9519-f2a45f6fa62d"
        },
        "item": {
          "id": "d7961664-ee5d-44ee-941b-e246b8a8bf54",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c7e002f0-6805-4cf9-aec3-6cd2758bd7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce1aed9-eadc-437e-9df5-def1e2c6ce37",
        "cursor": {
          "ref": "c96f8d98-d51b-4851-bcdd-ae141a0019d5",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5819adce-54fd-4e11-a00e-f7dbc9fc76aa"
        },
        "item": {
          "id": "6ce1aed9-eadc-437e-9df5-def1e2c6ce37",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f3a16ce7-267d-44c8-bc73-e2b53d9dfb31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e2f623-dab0-4878-beb2-952f93660d8e",
        "cursor": {
          "ref": "0567c2ff-ceac-47ab-9d4e-fb088c700a5c",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f9d50f64-9cc9-401e-ace5-13574e806215"
        },
        "item": {
          "id": "46e2f623-dab0-4878-beb2-952f93660d8e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "16461151-3122-4431-ad98-7cb04cab14af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600f9ae9-8d39-4716-85cf-84edb72570d7",
        "cursor": {
          "ref": "089662aa-d616-4c9c-b7b0-04514bc05b3b",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bb234a69-7f41-459a-a40e-e188907d5f2c"
        },
        "item": {
          "id": "600f9ae9-8d39-4716-85cf-84edb72570d7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ec6b784e-22db-4a96-ae43-2f76e04c3344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9b27a0-74ff-45d9-a9fd-974d41860bbf",
        "cursor": {
          "ref": "284b6345-d51d-495d-8521-85cc0e3eb892",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4699b072-d6f1-4c92-a6d8-7f7cc88a2fa9"
        },
        "item": {
          "id": "be9b27a0-74ff-45d9-a9fd-974d41860bbf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "465f31dd-216d-4d34-bac1-28cd83cbcef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82e5156-f020-4e85-9479-0d3a2f0b0543",
        "cursor": {
          "ref": "b91d9b01-a589-437d-abb6-6cea40048189",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "55db9a34-d9d4-4875-9c7b-d4831dde6d77"
        },
        "item": {
          "id": "f82e5156-f020-4e85-9479-0d3a2f0b0543",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "116a0ddb-2551-434c-9f17-1a853bc6075f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a7237e-1f1d-4b56-ac30-1512b6f3b91c",
        "cursor": {
          "ref": "f6e514a6-3259-4a1e-807d-16cb312d1a37",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b837ecd8-e1ec-404f-8f82-9264f78497d2"
        },
        "item": {
          "id": "d9a7237e-1f1d-4b56-ac30-1512b6f3b91c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "89f39a27-8295-490e-b54e-478d6879b4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e925abba-06db-42de-b5de-5b4b7db4c9b5",
        "cursor": {
          "ref": "08020947-3ad8-4cb4-b8a1-12533795c650",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "119c8925-32a2-4204-959c-58e3018fd3dc"
        },
        "item": {
          "id": "e925abba-06db-42de-b5de-5b4b7db4c9b5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "030557bc-7487-4080-9bd3-ee3e5425946f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929a2fa8-0512-48c4-84ea-98127f2a05dc",
        "cursor": {
          "ref": "941416fd-6b44-4e4e-b48c-0167b3bc8f71",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "b64e1a04-1366-4531-974f-a2acd49ffe07"
        },
        "item": {
          "id": "929a2fa8-0512-48c4-84ea-98127f2a05dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8f3939da-6975-44ec-b5cd-ad1e515cf8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f663bb-534b-4f6e-a258-3aca50b29ac0",
        "cursor": {
          "ref": "ae4d650a-0c3f-442f-8e1f-5618e37f614c",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "075b4a21-c7ff-4c58-8f24-b4f06211a621"
        },
        "item": {
          "id": "56f663bb-534b-4f6e-a258-3aca50b29ac0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "30cd0ce2-c166-4952-957a-3b7c55572d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be511b4-aadb-4789-8ab8-5348ef947236",
        "cursor": {
          "ref": "951ba667-b1b1-4128-b91d-d3fd266ce14c",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "923216e5-888b-4261-ae96-1a0c7c368cd3"
        },
        "item": {
          "id": "4be511b4-aadb-4789-8ab8-5348ef947236",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4a5b4e7a-c33c-4b21-ac9d-e2bc3f333163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962e92e1-c6f4-453a-8691-78d63f8d0d25",
        "cursor": {
          "ref": "cf8eb4f5-8708-495c-b1c7-191ad57935a2",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "31921a14-18e8-42b1-a42c-c454dda78fad"
        },
        "item": {
          "id": "962e92e1-c6f4-453a-8691-78d63f8d0d25",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "059f3119-4481-4af8-9506-1c27b12dcbb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fd3dde-8039-4e3e-98c8-27171abe6f98",
        "cursor": {
          "ref": "1f7b89b9-f3ae-43ca-91fe-0e4c28a444bb",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7694dc49-31bd-41fa-b808-6253aca19c5e"
        },
        "item": {
          "id": "43fd3dde-8039-4e3e-98c8-27171abe6f98",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1d14f3e8-1859-4954-ab91-a41b816a42ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2763239a-f5c1-4008-8b87-49d5f2abe091",
        "cursor": {
          "ref": "b36cfcf2-ea8a-4d12-8268-31f45915486f",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "273f6b58-7686-4f17-a916-128da1fc8b77"
        },
        "item": {
          "id": "2763239a-f5c1-4008-8b87-49d5f2abe091",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "431392b9-0c3a-457f-8865-fbb252e0ff53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40cc48a-4c8b-4a35-a7ee-e5aecf30e011",
        "cursor": {
          "ref": "6d93849e-02e1-4aa7-9f7d-8dd4c26fa273",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c4d61128-5634-46a9-9365-1510c8a00f7b"
        },
        "item": {
          "id": "a40cc48a-4c8b-4a35-a7ee-e5aecf30e011",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9c4ad7db-71aa-41fe-b1e9-ce8f3fd25253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc71e33e-381d-4855-a0e3-5a644d56cdf1",
        "cursor": {
          "ref": "6e49eca2-4c13-4646-a476-104a6428a44e",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9424281a-9311-4948-9f2c-58e132f11f5b"
        },
        "item": {
          "id": "cc71e33e-381d-4855-a0e3-5a644d56cdf1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "71ae614f-cd37-439e-b5c5-47bcb9833295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "523f077a-3dbd-47d3-85a6-50ff56c00309",
        "cursor": {
          "ref": "2f1b98f5-c95d-4495-8a22-1caa1de26869",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ff45a2a1-ee24-4bf4-96a4-2fdb17eb77f1"
        },
        "item": {
          "id": "523f077a-3dbd-47d3-85a6-50ff56c00309",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "15dda7d8-1df9-40a7-8f1b-a557cf6d69f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "48440281-c73f-4229-93a2-d8d0f5c087aa",
        "cursor": {
          "ref": "36b4c57e-adaf-4600-8a8c-4434ee28ef63",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6b74f06-0960-453b-a7a0-86e1ea407bca"
        },
        "item": {
          "id": "48440281-c73f-4229-93a2-d8d0f5c087aa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "88d4591a-a7b9-4de8-833c-41eaba535731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48440281-c73f-4229-93a2-d8d0f5c087aa",
        "cursor": {
          "ref": "36b4c57e-adaf-4600-8a8c-4434ee28ef63",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a6b74f06-0960-453b-a7a0-86e1ea407bca"
        },
        "item": {
          "id": "48440281-c73f-4229-93a2-d8d0f5c087aa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "88d4591a-a7b9-4de8-833c-41eaba535731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a65bef1-e147-4018-847d-83b6e06a890f",
        "cursor": {
          "ref": "08b3457c-fd11-439f-8408-3b2d9dda9189",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "28be6137-036b-4ed3-b2e5-01e410790f8e"
        },
        "item": {
          "id": "5a65bef1-e147-4018-847d-83b6e06a890f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "be266476-a752-41a1-a216-1d49aeb6e050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d74760-a5b0-4258-9847-c8b65b0ad393",
        "cursor": {
          "ref": "a994fbd8-8823-45cb-be22-9065f3674611",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "64687157-fcfa-4ca2-8635-4c9eb350fe3e"
        },
        "item": {
          "id": "19d74760-a5b0-4258-9847-c8b65b0ad393",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c7c4d276-250c-4107-b32a-71581ffb70e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b62e47-60cf-4dcb-bf70-24bc3b52f8b4",
        "cursor": {
          "ref": "b720c09e-452a-4fe7-9457-a7532d44a692",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "ca6fe79d-297e-4510-9586-4cd282064d22"
        },
        "item": {
          "id": "75b62e47-60cf-4dcb-bf70-24bc3b52f8b4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "0cbdf79a-991c-4a9e-96de-9a6530301005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7151c4a7-cf10-4eda-851c-5091682aea05",
        "cursor": {
          "ref": "a2a78712-e2f1-442e-8c79-0814bb6ecd1b",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e5b9884e-e323-4010-8947-58893be44e95"
        },
        "item": {
          "id": "7151c4a7-cf10-4eda-851c-5091682aea05",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "46ff98b2-5210-4c00-89aa-425952f1a241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd038de5-63ef-4e5c-8dba-8ea62251a23c",
        "cursor": {
          "ref": "2b5d9c71-5b51-44d8-9b01-66ca3e2ccf42",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0c44c199-5a3e-4ce8-a889-48d907e887c7"
        },
        "item": {
          "id": "bd038de5-63ef-4e5c-8dba-8ea62251a23c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dbe01240-e0f0-48e1-97f3-97b9882be567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574b6e8e-e4d8-420b-888a-d388c444d34b",
        "cursor": {
          "ref": "848c036d-be34-4f82-8f41-55311a1a9dde",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d96fca1e-0fd0-460c-a5de-39bb65bfc6ed"
        },
        "item": {
          "id": "574b6e8e-e4d8-420b-888a-d388c444d34b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3838bfcd-fb7d-4b36-af71-f86be7e08287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d57e330-7755-4150-a39a-1acda531c5ff",
        "cursor": {
          "ref": "5632da4c-e542-417c-837b-75f36e991be8",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "69627783-c6af-4129-85dc-31a57360e399"
        },
        "item": {
          "id": "3d57e330-7755-4150-a39a-1acda531c5ff",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "032f9902-7f5d-4f8c-88de-f4568a0e8c32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb35261-0173-47e0-8365-b536a01f0d99",
        "cursor": {
          "ref": "84a683f1-e740-4a87-95d8-22c013f32cb2",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b25d1625-1f6e-46a9-8b31-e0dc631c797d"
        },
        "item": {
          "id": "fcb35261-0173-47e0-8365-b536a01f0d99",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3f3ea43f-7c3a-40b6-9cfc-c51045124e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef4b955-fe3c-4938-a0e8-23da75e8b769",
        "cursor": {
          "ref": "8ac483e6-90e4-4259-9552-4f15f298bf36",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "20958a73-750b-4d19-a00f-9a450dcde7db"
        },
        "item": {
          "id": "7ef4b955-fe3c-4938-a0e8-23da75e8b769",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3f0023fc-bd76-447e-bfb5-ce36a7fac24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8b10f1-2bff-4cab-92e8-0678b955f0a7",
        "cursor": {
          "ref": "779251f1-b5ec-42c4-9ddb-0f3e34515888",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8ff7bcf7-0f3e-4080-9081-7ae6bb8794f8"
        },
        "item": {
          "id": "2c8b10f1-2bff-4cab-92e8-0678b955f0a7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "80abf715-c5b0-4e8b-b5b0-8741fb655d57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da0b039-b81b-4d22-979a-017e013a1fd9",
        "cursor": {
          "ref": "71874fd7-83e3-4b0a-9cff-b831013c6d12",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "be44b00a-4811-4128-a520-ca5c3c43f0b1"
        },
        "item": {
          "id": "9da0b039-b81b-4d22-979a-017e013a1fd9",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c8ffb1b4-2b33-48b3-9d51-b964fdaf64a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6a0b34-f2ec-4777-bfcd-40306b05255f",
        "cursor": {
          "ref": "6e069863-630c-429f-88b1-a3c8f26d7341",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5b488cbb-fcf9-42bd-b976-67a1c74daebf"
        },
        "item": {
          "id": "8e6a0b34-f2ec-4777-bfcd-40306b05255f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fbb3269d-52a9-49b1-9755-607acb984c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894fb771-bd4e-44fd-92c6-3f7e0d81a343",
        "cursor": {
          "ref": "a90a798d-050c-4d21-bc8a-49b0c19cc8e4",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bd4deb8d-db9e-4707-a8d2-4857e4d390e3"
        },
        "item": {
          "id": "894fb771-bd4e-44fd-92c6-3f7e0d81a343",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "02109680-9e16-43b3-8c54-4eb2a9ce1386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b2942a8-34ae-4eff-af26-c9966756c196",
        "cursor": {
          "ref": "0b67aee8-53a2-4e6a-84b5-f341b5b7f922",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "3380de56-edc2-40be-beb7-e35ac6b9116f"
        },
        "item": {
          "id": "7b2942a8-34ae-4eff-af26-c9966756c196",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d7c92c33-a3b1-490b-ab13-3f627af75994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842fb737-7206-4a5c-9983-66678024b918",
        "cursor": {
          "ref": "043cbd4a-9b8b-4fd4-89c0-451359adca98",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5f375147-0043-41f6-bc9e-3e4ab45c5c95"
        },
        "item": {
          "id": "842fb737-7206-4a5c-9983-66678024b918",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e038819e-4028-4f68-8f5a-3b5ac51c8d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a81dc39-4219-44b4-a2ba-ee000719d170",
        "cursor": {
          "ref": "6fac98e1-a54a-4447-80b0-96a1134f221a",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "8de6fd82-18a8-4248-b117-ec8b63543e9e"
        },
        "item": {
          "id": "6a81dc39-4219-44b4-a2ba-ee000719d170",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5df73e2c-274b-4d89-86d8-0a206ff21aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b125ab7a-b3b3-45b6-9237-519f6c5347a6",
        "cursor": {
          "ref": "78c559bc-b65c-41bb-869e-b17ba12db1e4",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c47a905d-ad94-49f5-9d4a-fca9948fee78"
        },
        "item": {
          "id": "b125ab7a-b3b3-45b6-9237-519f6c5347a6",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "8911b2de-75f1-4f6d-b328-0b53dc15a0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36ad62a-09e1-4f84-8b7e-ab26b777c2b8",
        "cursor": {
          "ref": "c9eccf40-cc61-4cfa-94d8-bd5f79df0a6d",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ceaf9daa-e2e7-4166-80c0-f9b9c28f48cf"
        },
        "item": {
          "id": "c36ad62a-09e1-4f84-8b7e-ab26b777c2b8",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d5682b15-03c6-4513-b1dc-470d84f14cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9374608d-8c8a-42a2-b126-32dd0a6beebc",
        "cursor": {
          "ref": "a5cbdf7f-d3c8-48bf-bc3d-554934e3fc31",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "742d89b9-157a-46c9-be85-9d1897710315"
        },
        "item": {
          "id": "9374608d-8c8a-42a2-b126-32dd0a6beebc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dcc65283-78a8-4008-a36b-ad6ccc96ad30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e070bc-c0ad-4a5e-ae3c-b2e8ef4ea9ad",
        "cursor": {
          "ref": "b6f81031-6298-46e3-af4a-b67b1210ba5d",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c564536d-6173-48a8-95a5-fe5225e02b21"
        },
        "item": {
          "id": "40e070bc-c0ad-4a5e-ae3c-b2e8ef4ea9ad",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4425da2a-ac5f-4a6e-bfad-0ea0d105ad35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59841df-11ea-449e-adeb-ad1c4411c8d8",
        "cursor": {
          "ref": "e95ad1c1-4e58-42f8-928f-4b3bdc0b445e",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "055b3d0b-7c93-49ff-a47d-498e18d7f452"
        },
        "item": {
          "id": "f59841df-11ea-449e-adeb-ad1c4411c8d8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "023198c6-8048-4744-a975-99da91ca07d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0b2c72-4f5a-41f8-aa9b-c9929d450e3b",
        "cursor": {
          "ref": "42c3708a-4c30-403e-9fc4-228685a74d80",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "525b8e96-309f-4a83-b2b8-b61997d06171"
        },
        "item": {
          "id": "af0b2c72-4f5a-41f8-aa9b-c9929d450e3b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "71b33f31-cea6-4db6-ba61-538b1e5d13df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1f64ea-5c79-4200-95c1-acf796b3f824",
        "cursor": {
          "ref": "4e5ac0fc-ca04-4a2f-a5a0-ed4b631dd6ed",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "55d11619-423d-452c-8c30-9e78b106f560"
        },
        "item": {
          "id": "1d1f64ea-5c79-4200-95c1-acf796b3f824",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "df72adae-4118-4d79-9eb1-5b3722c4fd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ae7bf1-b1a3-4ef1-9bf1-bd6a9ca7d602",
        "cursor": {
          "ref": "2f80d875-7592-4a17-a825-95201e1ae52c",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "990c1b0e-684b-4d77-922b-bf9ecf427fe3"
        },
        "item": {
          "id": "58ae7bf1-b1a3-4ef1-9bf1-bd6a9ca7d602",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "09c73883-f6e1-4850-927d-215bfa68afb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f170b1-e5b5-4cc0-8c81-1f110c6121fd",
        "cursor": {
          "ref": "ec48c65c-d60b-4b0b-b7ee-eb828b052e99",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "29b6865d-c6fd-463b-973f-096f9f1a1662"
        },
        "item": {
          "id": "f3f170b1-e5b5-4cc0-8c81-1f110c6121fd",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d48c17e4-6b14-4970-b353-da7efd676d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175230cc-b725-47e2-a5ca-3b1277b3cbec",
        "cursor": {
          "ref": "fe10dd42-6415-444c-95c5-50a27f7c0cc3",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "55247a13-b29b-4cfe-a02f-0b715e88b211"
        },
        "item": {
          "id": "175230cc-b725-47e2-a5ca-3b1277b3cbec",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f121cb08-a699-4106-a51a-59720122e8ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a5d7e6-105d-4387-aefe-2686e3f3d6f7",
        "cursor": {
          "ref": "e33ab2f9-dd18-41bd-943c-3eace3df4c75",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b7bc1226-86fb-4eec-a9ec-ab74ebfe8a7d"
        },
        "item": {
          "id": "f7a5d7e6-105d-4387-aefe-2686e3f3d6f7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "78c1042f-2004-4d9b-9188-2c152c1f216b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb77984f-025c-47f6-bffe-f614b6d20171",
        "cursor": {
          "ref": "66b23b42-7b88-4515-8091-52a345ab0aea",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6a4fc4fa-3ad6-431d-ae3b-f175ddbb82ac"
        },
        "item": {
          "id": "bb77984f-025c-47f6-bffe-f614b6d20171",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3b3d56f5-b554-4ae1-996c-58d7d5609e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e444fabe-b92c-4b90-81e8-aaa5439e2001",
        "cursor": {
          "ref": "4cf05297-e190-4080-8437-e129b7477b11",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3656afb3-fcba-4947-a533-e31723f769ba"
        },
        "item": {
          "id": "e444fabe-b92c-4b90-81e8-aaa5439e2001",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "45d11bb8-d889-4108-bfbd-90746cdc4045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33fa37d-3f6b-4f5c-ab1a-385bde7f6376",
        "cursor": {
          "ref": "07f200b3-1762-4fbe-b874-a7e1f583f323",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "734d0b3f-4d2c-42a0-8ec8-1bf9881e95c7"
        },
        "item": {
          "id": "a33fa37d-3f6b-4f5c-ab1a-385bde7f6376",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ca83cc74-2437-4515-a8e2-a8fb992491c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc9c54a-e1a8-4fe0-8bd1-2f3341ea731e",
        "cursor": {
          "ref": "6ad930fb-631b-461d-af84-27bc7dcbc36b",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b5f69f6a-39ab-44a3-9062-3cf0294f5048"
        },
        "item": {
          "id": "cfc9c54a-e1a8-4fe0-8bd1-2f3341ea731e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "7d07f50a-65f0-45c1-93d8-25bbafcc3893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44b6f52-7caf-4214-a05d-92801d172c5f",
        "cursor": {
          "ref": "ccb7c999-f67f-47f9-8f97-c8b42a2af1be",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "23167016-c9d0-44a8-b292-7ed0fa112f20"
        },
        "item": {
          "id": "d44b6f52-7caf-4214-a05d-92801d172c5f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cef78c14-a634-44f3-86cb-58247aa1f499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e8847d-3891-4b78-b6de-b803a07c732a",
        "cursor": {
          "ref": "3dee1b90-4189-4497-b451-0676213abbeb",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "eaaea29b-a839-483d-b5de-6f007db82a63"
        },
        "item": {
          "id": "60e8847d-3891-4b78-b6de-b803a07c732a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "84184561-192c-4585-a379-6483e61bda11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de72683e-e92d-4be5-9dd4-112a6e08c055",
        "cursor": {
          "ref": "d1c44b8b-4b62-4ca6-938e-d341f2924879",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "4bc5344e-981a-4ea6-bcfa-f8431bedd70f"
        },
        "item": {
          "id": "de72683e-e92d-4be5-9dd4-112a6e08c055",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fa9e37b3-69e3-47dc-9702-4cf184d8c2ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1882df13-c57f-4d6c-b0df-5a483d4f0e41",
        "cursor": {
          "ref": "d6a8f950-cb2b-442c-8d90-39bfab5c3261",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7f5de042-ca14-4d4b-a2d6-059675d565eb"
        },
        "item": {
          "id": "1882df13-c57f-4d6c-b0df-5a483d4f0e41",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b0daadea-d697-4e4a-b881-85eb0f02cc1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c865f542-2ab7-42b3-a787-e510bf2a9640",
        "cursor": {
          "ref": "dda298cb-e524-4f42-809c-1bdb1c395749",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6eb491bc-d432-40d1-b53b-6151d2eaa4ca"
        },
        "item": {
          "id": "c865f542-2ab7-42b3-a787-e510bf2a9640",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5eb68e0e-494a-410e-adad-ef944ab29cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33254e8-f26b-4e19-9d95-ec6d4f7f56ad",
        "cursor": {
          "ref": "57267c6f-0f00-4fef-8117-3ed2ea944270",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "37b2fc09-0c46-4509-a0cb-06658fa0f2e4"
        },
        "item": {
          "id": "c33254e8-f26b-4e19-9d95-ec6d4f7f56ad",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "258c6116-0bac-4e33-9e8f-a7e0a85d4edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8efc78-b812-4675-af2d-df05b9df03bf",
        "cursor": {
          "ref": "d5604d90-a340-412f-9b99-3e7fba968798",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f3d60b34-24ca-4096-af6d-ce7c13c3ca07"
        },
        "item": {
          "id": "ee8efc78-b812-4675-af2d-df05b9df03bf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ed499740-ac32-4270-874e-2b4dabc25d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949b1b64-fb4d-4849-a721-fa9f7871f815",
        "cursor": {
          "ref": "fde6d80a-19f7-4271-a705-1bc75ce38fe0",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "919c8be0-b983-47f2-b5f1-9e07e5ba4982"
        },
        "item": {
          "id": "949b1b64-fb4d-4849-a721-fa9f7871f815",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d71b3124-2fd0-42a1-8e5a-82764a7f6e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e8ac7f-8386-44cc-8296-e10b793a4597",
        "cursor": {
          "ref": "47fb869b-a8e3-4788-abbf-0737cf21b848",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "bcda224e-346c-4434-93e1-5b80cf851a4d"
        },
        "item": {
          "id": "f9e8ac7f-8386-44cc-8296-e10b793a4597",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9f99c8b7-a025-4421-8b46-df84d31ffbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55376fb4-6956-4d86-91d5-86d3b765090a",
        "cursor": {
          "ref": "65e280ca-e408-49cc-9d91-f2adb2564537",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b552b19b-f5d8-4448-a446-7ea665427484"
        },
        "item": {
          "id": "55376fb4-6956-4d86-91d5-86d3b765090a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "3077b954-c2b0-4b10-8385-6f2420bd6219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961b3fa6-91a0-4a54-8802-8406a70d0413",
        "cursor": {
          "ref": "28898773-5ac4-4e82-b35d-6a1f726cbd73",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "5ed097e9-ab0e-43f5-9b34-80f6f027f09a"
        },
        "item": {
          "id": "961b3fa6-91a0-4a54-8802-8406a70d0413",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cc5392d0-6182-4783-956d-9f8c52524649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba4841c-67fc-4969-a2b1-c221626c40c7",
        "cursor": {
          "ref": "da0079d6-0725-4d6c-824c-33ba64e5b193",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0f6eedb1-92bc-4ec4-b95a-5c634c9978be"
        },
        "item": {
          "id": "8ba4841c-67fc-4969-a2b1-c221626c40c7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3e3fa0d8-16ed-4b17-9152-3f4a6d292585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242fef97-1a88-4ba9-91ee-6900bde8078e",
        "cursor": {
          "ref": "e8e72af5-12d0-4fab-bb8f-f4da942b6983",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "37fa7efd-eb7d-49cc-a669-4782df0b75f0"
        },
        "item": {
          "id": "242fef97-1a88-4ba9-91ee-6900bde8078e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fc3e2f46-e04f-4a00-8e02-9c7d1ef77242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a082e6db-d702-444e-97a7-6108ab1e08d9",
        "cursor": {
          "ref": "b82733ef-eb40-42b3-a921-a130179b105d",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "17f87cfa-e9e7-4344-bf8b-f166d3adea13"
        },
        "item": {
          "id": "a082e6db-d702-444e-97a7-6108ab1e08d9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "553f46e6-a1f0-457e-82c0-be4610a84da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52568251-42ca-4857-bbf4-0811ebb7af0e",
        "cursor": {
          "ref": "40a0a5fb-bb81-4ab0-aeff-f02d37cc7cd2",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "074b878d-49ce-4cb7-a495-8c4cc8e6fa4a"
        },
        "item": {
          "id": "52568251-42ca-4857-bbf4-0811ebb7af0e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ff314bb1-5c6c-4aa3-8569-afdc9f14ff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd79ddac-7626-4e21-808d-bef60069d264",
        "cursor": {
          "ref": "ecd22813-ea78-420f-83a9-3682e53cd1f7",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5bcd955c-810d-444f-b61e-8e0f54ae88fa"
        },
        "item": {
          "id": "fd79ddac-7626-4e21-808d-bef60069d264",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0edbb764-88af-4938-b9e3-3d97281c8338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9e6d17-c010-436e-9990-5829469a2159",
        "cursor": {
          "ref": "0e27219a-f6aa-43ff-bf82-c06ee9a684c1",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "310a0aae-c2bf-41e7-89ad-11eb2a0a5872"
        },
        "item": {
          "id": "1a9e6d17-c010-436e-9990-5829469a2159",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9a9eb7fb-2a07-4379-8ce9-1fc02431a54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b265f40a-5038-4efd-88ba-191d8d958be6",
        "cursor": {
          "ref": "e50c4a52-c297-4cca-9549-edcd56b0494a",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e59d9fb7-fab6-4108-ac12-79380338c153"
        },
        "item": {
          "id": "b265f40a-5038-4efd-88ba-191d8d958be6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e1918c4f-6045-4ab4-8880-439d8b5b88d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436cedbe-1267-48c2-90b7-ee32c83701e4",
        "cursor": {
          "ref": "b0aaef31-e80e-4c11-95d8-02f41911b7f9",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "21e8f2a6-dc9d-402c-8295-f02ad4ef0112"
        },
        "item": {
          "id": "436cedbe-1267-48c2-90b7-ee32c83701e4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "421b173f-84a8-48c3-8e57-8e002eb7e62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f12b6d-38a1-44d8-987a-144c38287235",
        "cursor": {
          "ref": "6fed5a01-528d-4486-b48f-217e8363bd54",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7160480f-7f70-42d1-ade0-76729f44afa4"
        },
        "item": {
          "id": "86f12b6d-38a1-44d8-987a-144c38287235",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "723ca873-51d7-4258-83ba-a7b1efec2d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f00867a-1a19-4069-8989-4b82b45e2ff6",
        "cursor": {
          "ref": "84ef5185-d351-4747-8322-a1401d155c86",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fed87a83-8e8a-468d-a921-cfae01868136"
        },
        "item": {
          "id": "5f00867a-1a19-4069-8989-4b82b45e2ff6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a653021f-a8cd-4563-b9bd-791a297b43a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a03129-24c8-4646-bdba-7f731e473d5b",
        "cursor": {
          "ref": "777d7b1a-4d48-41cc-bb74-5a52fd03a11f",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa65a6d1-de78-4b49-93e3-63f9f4b5b83e"
        },
        "item": {
          "id": "96a03129-24c8-4646-bdba-7f731e473d5b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "31804f98-f735-4028-a1b6-7b3fda2ee831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99d555f-5e79-4dc1-9cbb-bec25be34a1b",
        "cursor": {
          "ref": "bc243191-efd0-4b5f-9d19-3ab50ab9f10f",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a2f19ff5-6102-4060-9b37-020e6fb06ce7"
        },
        "item": {
          "id": "e99d555f-5e79-4dc1-9cbb-bec25be34a1b",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "583150d5-0a1f-4e53-bfc7-06eb1d403586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3543f892-7b3e-44fa-9352-c50fad9cba3b",
        "cursor": {
          "ref": "4a8fde71-6cf7-4960-81a6-24349cbe07d9",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e8f45986-c86e-4c65-a780-4ec831ef8d06"
        },
        "item": {
          "id": "3543f892-7b3e-44fa-9352-c50fad9cba3b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "524dec3f-e192-4b20-8ae0-c4c9e33d6259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f90618-ab8b-4799-bf40-0132486fb19c",
        "cursor": {
          "ref": "8de2180e-c255-4fb7-bbba-d687ea30509c",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c0df5d2a-f7ec-4b28-99c5-e630262a1eff"
        },
        "item": {
          "id": "21f90618-ab8b-4799-bf40-0132486fb19c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f08b7965-93f4-4548-bcbc-8e1680e796d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4275f26d-f0b4-4e36-a47f-6307a45e4c55",
        "cursor": {
          "ref": "d215a3bf-e1b5-4946-90d2-681e1902f804",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "42948657-52cc-4119-aaf3-313a721e04f0"
        },
        "item": {
          "id": "4275f26d-f0b4-4e36-a47f-6307a45e4c55",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8b1a33c5-746a-41ac-a52f-95f77d9ed344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34927ba-6699-475c-9461-e39a0950981a",
        "cursor": {
          "ref": "1f494f61-c21f-4a95-9335-834143a51364",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "468197f7-8ba2-4720-856e-f157fcb4c35c"
        },
        "item": {
          "id": "c34927ba-6699-475c-9461-e39a0950981a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "273c3971-e2b7-4145-adce-c68f73baa74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685c595f-cacc-4ee4-8d1c-db72ea0b01be",
        "cursor": {
          "ref": "2776edc1-c289-488b-bf58-7aca7c6a4ec6",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "17fd2ed5-40d7-4b02-9917-5b9e0e0f4f0a"
        },
        "item": {
          "id": "685c595f-cacc-4ee4-8d1c-db72ea0b01be",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e9a62d9d-22c4-4b18-b137-cfdc7de08c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0353a510-d095-45b9-bb5e-94d94db3a977",
        "cursor": {
          "ref": "135a5e1b-a1bc-4b12-93e7-db272b585c84",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ac774336-25fb-4bfc-aeff-b7f07426fdf1"
        },
        "item": {
          "id": "0353a510-d095-45b9-bb5e-94d94db3a977",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bc9f01f1-9c98-42e0-9ca5-8adce8bbd44e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c85db9b4-03a1-4aba-91f9-7144aa16ebf6",
        "cursor": {
          "ref": "c344fdf9-3cf8-4f25-80da-2953fd245888",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "eab12b45-cb9a-462b-8f62-ff912cc81139"
        },
        "item": {
          "id": "c85db9b4-03a1-4aba-91f9-7144aa16ebf6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "d18498f6-c1b6-4900-838a-d12895eb0634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d5262b-858e-4990-bedf-0244a0a94806",
        "cursor": {
          "ref": "a8d57c32-1564-4142-ba05-deeeb569c803",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "039ecde1-b535-4814-8a4d-aa07ff123c22"
        },
        "item": {
          "id": "33d5262b-858e-4990-bedf-0244a0a94806",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b7c0c877-4d31-40c8-b5f7-d5c2e590b591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7527e6b1-5bdc-4edf-8973-732893bf781c",
        "cursor": {
          "ref": "0db85997-00ef-4efe-ab43-d5ff804b596a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "be64159a-fcbc-4e8a-a0a8-8a36e6d8225e"
        },
        "item": {
          "id": "7527e6b1-5bdc-4edf-8973-732893bf781c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "49cd8734-cf9a-4406-a671-1959c738a14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde8c30f-a301-44f3-bb2a-daf13d01ce4c",
        "cursor": {
          "ref": "f6d19cc6-2035-4bac-bfd1-a0677fad0650",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f2953662-4d93-4426-977e-68eb85ac53a7"
        },
        "item": {
          "id": "dde8c30f-a301-44f3-bb2a-daf13d01ce4c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "80bbd51b-03e0-47b2-8254-9af471aee239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a11ecc4-348b-44dc-bd14-69a1727481ba",
        "cursor": {
          "ref": "df29980c-936d-4871-b3ad-81d010d45108",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "aa73a888-a09b-4c6b-9917-d157023c1b27"
        },
        "item": {
          "id": "6a11ecc4-348b-44dc-bd14-69a1727481ba",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "89a942da-e3f2-4ff0-93d6-c4d590c29315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa5642e-c0eb-46e3-b483-9717f659d906",
        "cursor": {
          "ref": "a335ce55-742a-400b-878a-830289cbf5b2",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1c94f6e9-ad36-4295-8c02-b141b8262ba7"
        },
        "item": {
          "id": "9aa5642e-c0eb-46e3-b483-9717f659d906",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "551fd70c-7570-49c1-8e92-6844d6e78418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3350382-73ca-4cef-8094-bcd873bb9f55",
        "cursor": {
          "ref": "4f423283-5f05-4725-a319-3c30414c72c9",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "498cb341-7009-4dfe-852c-693d200e7884"
        },
        "item": {
          "id": "b3350382-73ca-4cef-8094-bcd873bb9f55",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "422d5143-65e2-4a4b-8f19-5d095e5caa0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561771df-80ed-4911-9771-ac44bbc93cae",
        "cursor": {
          "ref": "e571ea17-a43e-4f6d-b1ce-2eb2a58eb6c1",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f3f35624-a499-468e-bae9-61dab336a2e0"
        },
        "item": {
          "id": "561771df-80ed-4911-9771-ac44bbc93cae",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2bda1721-e5a9-4dbf-986d-89f836918e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26878524-e13b-4c9a-a8e3-30a5c60926d4",
        "cursor": {
          "ref": "0e735dee-c08f-46a0-ab6d-c44bafce7500",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "06f71d1d-5748-4cb8-b658-07cd6542aef2"
        },
        "item": {
          "id": "26878524-e13b-4c9a-a8e3-30a5c60926d4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "27fc8610-829e-4cda-8db7-821ce609082a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6460e7d-3a7f-464f-8de9-b027a888dfb9",
        "cursor": {
          "ref": "d1ddd8e9-f997-4bb2-8368-230be12d18af",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3cc8fbf3-b6a6-4f36-a5e8-ea6b74f5db7f"
        },
        "item": {
          "id": "c6460e7d-3a7f-464f-8de9-b027a888dfb9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ef7b0206-4af2-4244-a7bb-5886abea32a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1362a5f9-6a46-4c3d-a582-9419366b9e1b",
        "cursor": {
          "ref": "b70991de-6916-479a-9759-e2b66c6fa8d8",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "56b207e8-2b15-46b3-9b2c-1e600846c403"
        },
        "item": {
          "id": "1362a5f9-6a46-4c3d-a582-9419366b9e1b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "30dee8a5-59bb-40dd-a9a8-0e3af525b693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d77e5e9-cb99-434c-9500-3725b2b359f7",
        "cursor": {
          "ref": "44a671e7-0430-4db3-8cf0-6acfbe36c4eb",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "90ed2a7a-1451-4108-a50c-c793ea8f2887"
        },
        "item": {
          "id": "4d77e5e9-cb99-434c-9500-3725b2b359f7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "de82b310-7b17-4bc9-9719-4532037b1d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584f60b7-b545-4054-8c73-d540caec0f3c",
        "cursor": {
          "ref": "e57468fd-d8b7-4b1d-bd24-6e7e2256f96e",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d23e54b6-a28a-44c0-9263-e4ba1c121880"
        },
        "item": {
          "id": "584f60b7-b545-4054-8c73-d540caec0f3c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "436f5e55-e008-4dfa-b5e1-2f5be061df2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c1ed19-30d5-4ab2-bcad-6e7d5f154be9",
        "cursor": {
          "ref": "952e0d8d-38d9-4b30-a7c2-2870aaaafda9",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "38e7f91c-0ca4-4c1a-a5d8-a9929f1ba560"
        },
        "item": {
          "id": "90c1ed19-30d5-4ab2-bcad-6e7d5f154be9",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b6a02a43-3aa4-44b0-bd30-5337d7d8c415",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5001100-d8c9-4f57-a1e6-e6effc8e09a6",
        "cursor": {
          "ref": "86ca2be4-bf11-4fa5-8a7e-1ef11b7d0d5a",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "61f7b3e3-40ed-4f4a-ba6e-152cf01851a3"
        },
        "item": {
          "id": "c5001100-d8c9-4f57-a1e6-e6effc8e09a6",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3bf304f8-b6ba-4be7-8eed-309ec156112f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f305c268-0f66-4c4f-b75e-f14eda3424a9",
        "cursor": {
          "ref": "c280213b-4afa-493e-864a-e7e4ac1af395",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3ec6a805-3b7d-4240-866e-ad8e51cc2d43"
        },
        "item": {
          "id": "f305c268-0f66-4c4f-b75e-f14eda3424a9",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d9e2ca20-5230-4642-be55-50fa15e5bef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28262349-432f-4d30-8518-a54a1fa1b1e1",
        "cursor": {
          "ref": "19d9f079-67ea-48ad-829c-504aaa1c3ed1",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d029d264-f910-409b-bc14-be258f200876"
        },
        "item": {
          "id": "28262349-432f-4d30-8518-a54a1fa1b1e1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "63737e98-600a-44c7-89d3-7f486eb070bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3894fd0-bcdd-4c72-bf18-efffe1169c60",
        "cursor": {
          "ref": "5e6c4571-5e2d-4f3b-9064-6ec774fc2c5c",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "50a376fb-b245-4189-9207-bb8ed1bfbc39"
        },
        "item": {
          "id": "c3894fd0-bcdd-4c72-bf18-efffe1169c60",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "74a1044c-cd4a-458e-8d45-2c5436d1e063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5577d877-3c70-40bc-a702-0d679b3d2a6d",
        "cursor": {
          "ref": "0b2f7956-1d4b-4f48-ae74-73db255f227a",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dec02b32-67d1-435a-a1e2-deee53dd8010"
        },
        "item": {
          "id": "5577d877-3c70-40bc-a702-0d679b3d2a6d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fb03f196-380c-429e-995f-6bf651cede58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdd1487d-87b1-4089-b9e9-64152ffc9e75",
        "cursor": {
          "ref": "ae62addf-64bb-4ec6-9861-57ba636ebff6",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "92c2f6a7-5073-47db-8428-20809da86aa1"
        },
        "item": {
          "id": "bdd1487d-87b1-4089-b9e9-64152ffc9e75",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "14062776-bded-40bd-84aa-fc956322802d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bb8c62-755c-4a76-8280-7bf092e5cdd7",
        "cursor": {
          "ref": "369dc0ca-72b1-46f0-8815-97caf541a0f8",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dc9f2e8c-10de-4373-a67b-0f6f54bcafc8"
        },
        "item": {
          "id": "f2bb8c62-755c-4a76-8280-7bf092e5cdd7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d2b865f2-5e0b-4fcb-8b8e-b4903cf53337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9339cfc-9cd9-4a8c-8776-3a7fb19c2d02",
        "cursor": {
          "ref": "03724575-74a3-4b82-9dcb-18f7f6e5f706",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "31c94477-735b-4c8c-be68-a96f0fa36482"
        },
        "item": {
          "id": "c9339cfc-9cd9-4a8c-8776-3a7fb19c2d02",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "97952cb7-9f03-4d99-9fb6-002093bf9b52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c5cb89-e202-4a4a-b174-397b9f43afbe",
        "cursor": {
          "ref": "c1094cfa-ff80-4c13-93f0-50de709afacc",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e16cb1c8-06ef-45fc-9d12-381f02342c85"
        },
        "item": {
          "id": "03c5cb89-e202-4a4a-b174-397b9f43afbe",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ae2f3d6a-00a2-4707-9666-bd4f15780934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acacbe1-20f5-4402-8bec-0e857d18a8d5",
        "cursor": {
          "ref": "dd79de49-2fa2-49d4-b080-69f83cb512a8",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "17430009-592f-4a27-a67d-9da1593c621a"
        },
        "item": {
          "id": "0acacbe1-20f5-4402-8bec-0e857d18a8d5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5481e157-ed00-41ce-ab61-df24f31cc82f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c385aeb2-54a3-4a3f-b15c-9d97005c04db",
        "cursor": {
          "ref": "be58352b-2dc0-481c-97c1-491cf54bedc8",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "966e9dba-6e33-4a0f-b55e-bef01041cd32"
        },
        "item": {
          "id": "c385aeb2-54a3-4a3f-b15c-9d97005c04db",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cf88a154-02e9-4134-85c8-95af17deb261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7009d1c-2540-4502-9d74-a100239018b0",
        "cursor": {
          "ref": "8b4bfcd9-2cbb-46e3-a065-01db8819a1bb",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c7d4ace2-16c9-4130-9acb-08e7569de2d0"
        },
        "item": {
          "id": "f7009d1c-2540-4502-9d74-a100239018b0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "7a024607-9e9b-4111-9294-421dc5064c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7353d9bf-29f2-43e8-ab4f-1fb719a28503",
        "cursor": {
          "ref": "3d473976-19ea-4a2b-979a-2d18ab6e7328",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2daf8a56-9bea-465a-9234-7f6c51d7ec1f"
        },
        "item": {
          "id": "7353d9bf-29f2-43e8-ab4f-1fb719a28503",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b275c95b-c47f-4d2c-ad6d-8876e68c0ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71602796-ed32-4611-aed1-a945fbc2348a",
        "cursor": {
          "ref": "cafe5a08-d6f2-4c86-b6ed-89266ef0dcb0",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9bdede7d-1df7-41b0-b000-4f142d0ca78a"
        },
        "item": {
          "id": "71602796-ed32-4611-aed1-a945fbc2348a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dbe79bed-ad47-4a7e-92f9-f87a4390e73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9049a5-322e-4cd0-9730-df281e23716d",
        "cursor": {
          "ref": "58567486-12a9-4fe0-a1ec-3555f04a25b8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b39faa7a-dd82-4a34-b6b0-4f188b632cdb"
        },
        "item": {
          "id": "9d9049a5-322e-4cd0-9730-df281e23716d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0bf4ee3b-9d86-4b86-848f-a28e19c474f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1389446b-5372-4307-81d8-e091cda75f78",
        "cursor": {
          "ref": "825aea33-dcd2-42c2-a154-fe6be0aee1ca",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d9e4198d-3bc4-4206-ac9e-2470b739efbc"
        },
        "item": {
          "id": "1389446b-5372-4307-81d8-e091cda75f78",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ed041af3-2812-4c72-99e1-1ae47d465632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437bae5f-0f2d-4076-9834-c181c065ecfc",
        "cursor": {
          "ref": "49e1ad66-acdc-44be-ac51-1bfe04b42068",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1b6957c4-7dbc-4c59-a0e7-97b76949c3be"
        },
        "item": {
          "id": "437bae5f-0f2d-4076-9834-c181c065ecfc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6e49f9fb-8531-4637-80cd-c850f525ef59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289d01db-2b5e-42e6-be63-64ea9c80c1be",
        "cursor": {
          "ref": "c1e3d959-672f-42b0-a8d0-1e9e34972c3c",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "87cb12ee-6d52-4ff3-8eda-e5d562fb977e"
        },
        "item": {
          "id": "289d01db-2b5e-42e6-be63-64ea9c80c1be",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "774e8670-6f4c-4c0d-8bce-2007ee9c964c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7bc442-10e6-47dd-bc30-4d60da2e673a",
        "cursor": {
          "ref": "3ba1d0d9-9e88-4190-9310-ab8fbbb6f89b",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8f83e3a0-778b-4268-abfb-03bb9b920ccb"
        },
        "item": {
          "id": "2f7bc442-10e6-47dd-bc30-4d60da2e673a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "56744f69-7ffe-4eb7-8c33-93dd2513db2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b50d28f-09ef-4815-8c0c-30300389de6d",
        "cursor": {
          "ref": "df752f20-423d-4fc0-9c23-037c7d648dc4",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b5345119-f7d9-4d5a-97f9-f72069d1225d"
        },
        "item": {
          "id": "2b50d28f-09ef-4815-8c0c-30300389de6d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4811949-1343-4628-888d-8be3f694a611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cf4c25-d8f4-47d8-a0c4-bdad77859406",
        "cursor": {
          "ref": "1c90ae34-49a6-46f8-89b1-9f6d3b6f5426",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "068d3ade-214b-4606-844d-96ff1c151b77"
        },
        "item": {
          "id": "d2cf4c25-d8f4-47d8-a0c4-bdad77859406",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "f88276ac-6af6-4b8a-b550-5956141bb666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72febc13-cfcf-4318-a207-fcfa3a5ff9bb",
        "cursor": {
          "ref": "2b0fc4a8-8350-4d44-ad87-8d83d24cd4c1",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1c0e3da7-8cb3-43cf-92e9-4007a2fb0400"
        },
        "item": {
          "id": "72febc13-cfcf-4318-a207-fcfa3a5ff9bb",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2a8a184f-54ad-4595-997f-2b66a36e8b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8122d121-87df-4498-ae79-4cde3d8174b7",
        "cursor": {
          "ref": "8f4ef06b-3d8c-41d7-b832-adcd2f69fbbc",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "279771b4-8c58-471a-b02a-579d8fc3d03c"
        },
        "item": {
          "id": "8122d121-87df-4498-ae79-4cde3d8174b7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "cf17a6a9-0649-4f5b-bdd1-7ffce4593d89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c483ae-0bc1-4d69-ad80-fe6e947cd10b",
        "cursor": {
          "ref": "1cafaccf-6555-464f-99a7-d99d24d8e9e1",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "91e62ea5-0243-4d2a-a6eb-cbab1179f666"
        },
        "item": {
          "id": "02c483ae-0bc1-4d69-ad80-fe6e947cd10b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a1322ad2-5905-4dad-9dfd-76a9359b5dc3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 4,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39b02dd-873c-422c-aeae-a14964b33d1e",
        "cursor": {
          "ref": "a34fd798-2575-4f72-9494-beb1a65dfcfa",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6e631e4f-f258-4439-abcb-b1e12cf61b1a"
        },
        "item": {
          "id": "a39b02dd-873c-422c-aeae-a14964b33d1e",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "72a3d5c4-0222-4e5c-9449-57f82c3708ff",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 4,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68b1282-f8a4-4a47-af9a-2fa58a2290cc",
        "cursor": {
          "ref": "928a36af-a95c-4d4a-bf3c-9d5aee49d701",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2f43d092-e40a-4315-8688-a51a5178b16c"
        },
        "item": {
          "id": "e68b1282-f8a4-4a47-af9a-2fa58a2290cc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4431d4eb-dbaf-445e-b257-7f0a3e280d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ab0423ba-cf63-4dd6-9495-8007457d16d1",
        "cursor": {
          "ref": "5ed562e1-f72a-4021-a6ed-3ecd808ddb6e",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b273e113-3eed-4a71-91b4-43937959ac79"
        },
        "item": {
          "id": "ab0423ba-cf63-4dd6-9495-8007457d16d1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "afc10fe4-0ce4-4448-95a2-9e86dc04e3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "4356d9e2-3b13-4542-ab09-924a9fedd27a",
        "cursor": {
          "ref": "5ecb4219-353e-46ce-8667-17fc2ce9e9ff",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ede8ed91-61cd-4d66-b968-d7381a06173e"
        },
        "item": {
          "id": "4356d9e2-3b13-4542-ab09-924a9fedd27a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c6bcd07f-4e4f-4a3a-be83-1902f00e1204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
        "cursor": {
          "ref": "90dec41f-50e3-46a9-bd75-1a887af20517",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c1f8af2b-1383-4ca3-86fd-fea72290ded6"
        },
        "item": {
          "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
        "cursor": {
          "ref": "90dec41f-50e3-46a9-bd75-1a887af20517",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c1f8af2b-1383-4ca3-86fd-fea72290ded6"
        },
        "item": {
          "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
        "cursor": {
          "ref": "90dec41f-50e3-46a9-bd75-1a887af20517",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c1f8af2b-1383-4ca3-86fd-fea72290ded6"
        },
        "item": {
          "id": "02054c8f-4318-46d7-a161-6b08ea873fb2",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f0e7389d-1d29-4948-adaf-520e884c651b",
        "cursor": {
          "ref": "f2f6af44-152b-4e5a-91a7-b6e1b9cd730e",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "119216ea-f681-4410-a4bc-52692dde11a2"
        },
        "item": {
          "id": "f0e7389d-1d29-4948-adaf-520e884c651b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "07bc4204-899b-4da7-a760-456631bf2b42",
        "cursor": {
          "ref": "8c1c9df9-5aec-4658-a9de-85d4ebbd8b85",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "31f6b7a3-5a28-4ad1-9d78-dff69f9d8934"
        },
        "item": {
          "id": "07bc4204-899b-4da7-a760-456631bf2b42",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "07bc4204-899b-4da7-a760-456631bf2b42",
        "cursor": {
          "ref": "8c1c9df9-5aec-4658-a9de-85d4ebbd8b85",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "31f6b7a3-5a28-4ad1-9d78-dff69f9d8934"
        },
        "item": {
          "id": "07bc4204-899b-4da7-a760-456631bf2b42",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "5af58060-5d8b-4d06-bde6-e5a4f80780b4",
        "cursor": {
          "ref": "a38ed532-5e97-4e4f-8071-4917ccc4ce98",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6b5410ad-1e56-4a35-b858-e068201325b2"
        },
        "item": {
          "id": "5af58060-5d8b-4d06-bde6-e5a4f80780b4",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "f667cfe5-37c6-4935-9877-6b7db7481f9c",
        "cursor": {
          "ref": "0d47f6cd-2bb7-40f3-9c36-fc3d309c0c9e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "94eb6a3d-af20-4f98-9700-ed4afe777027"
        },
        "item": {
          "id": "f667cfe5-37c6-4935-9877-6b7db7481f9c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f667cfe5-37c6-4935-9877-6b7db7481f9c",
        "cursor": {
          "ref": "0d47f6cd-2bb7-40f3-9c36-fc3d309c0c9e",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "94eb6a3d-af20-4f98-9700-ed4afe777027"
        },
        "item": {
          "id": "f667cfe5-37c6-4935-9877-6b7db7481f9c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "c40dddcc-1d67-4b8b-9bc6-aa419d158dbc",
        "cursor": {
          "ref": "3b59ab03-b4ae-4269-86ec-14e8e9e8f5d2",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "928d8784-5bdc-4957-b7e1-01cb214fb683"
        },
        "item": {
          "id": "c40dddcc-1d67-4b8b-9bc6-aa419d158dbc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}