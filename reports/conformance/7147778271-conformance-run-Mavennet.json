{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2930d28d-25ce-4c78-9383-c7fd8a06f467",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a754f08a-5df0-4c84-a7f5-a7c816257907",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9c0687a-4b8e-4352-8f8e-f66b20dc2f37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17832411-6087-4583-a825-01410fd5138f"
                }
              }
            ]
          },
          {
            "id": "168340fc-7e58-4720-9a42-fd45094e9e82",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6c3cdbbb-681e-4069-b587-1b03a80c58e0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "421702c0-8ec8-47bf-8879-35263a6803f6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0671f590-4b41-48b8-95db-99feceba1063",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "91263473-756b-4671-a59b-f5d0dbd8667f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee69288a-5956-4fe4-9eea-1ed92a8a089e",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1ec5cb81-791b-453f-a7a3-30b2aaf99896",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84aa4629-ffcb-44d3-9bf4-21c5c910118f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "829b5d9c-b08f-470b-93b8-6ad215ebbc5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe19e6bc-9295-4a70-b17d-d57d4a517a94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "831a740b-dbd4-4231-b857-acf45d013f60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca406051-43e6-43b2-a17f-e834cd4edf47"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31073b6e-f589-41b4-8826-3709039802f6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6ffa3474-e131-4765-953c-3d75bb232e8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc9b957b-59fe-4371-bb44-7edd50b65f7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "93833178-183f-4eec-84df-5220fa670fea"
            }
          }
        ]
      },
      {
        "id": "c555e3ce-93b5-4ad7-978f-11db87a05bad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5f0173c1-e9a9-4f1d-86ed-26ea0ad8357b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2bb9795-e3fe-4d6f-9ddd-99a5db3719fe",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bcede975-535a-4b03-bb42-b6bee5808713",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f7f4e5-04d0-4e6c-a6cf-2cc2f5b0263f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4399d4dd-bcc7-4dac-bdc1-4f0a1d781a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e4e87aa-0639-40ea-af63-ac527bbfb7a0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7af2e9e-fa34-4933-82d9-a72c221af357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d720da1b-d00e-4b42-ac81-f14fe8cd205c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9602678b-f4ad-4060-8e4a-e0f0c586e00d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9df9b7-efdf-44f4-aaea-b7a59c0aef84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f08cc737-36d0-4f69-ab19-c1a3c3f21031"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eddeedb3-71c5-49be-acd8-0052d8be177a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e9d759b-3fd4-465d-95fa-fb9392a4cbfe",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcf8a67-b647-470a-9902-539238a5b075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b8ba44e-ef32-436e-a55b-3d9f5c90c65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b355a0-8cfc-43d3-96b7-f852f20ac9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c432478d-b310-42a6-ba81-e1d0c03e2d6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dd786057-29bb-4c6c-99af-9aeb57b92b4a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f87b654-05a8-4dcb-aa0e-f2971d0ba3a5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "557cdb55-8187-40ee-aef8-188e1c513079",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4ff38a0d-5c00-46a1-b05d-83aaae921c3e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c52c705-077b-466f-bea3-3da231afb72d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "eb779e0c-cbb6-4cb6-b589-5e3471de8f3e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c60b45f1-9a23-4a7f-baa6-d6ed38c03ece",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a27ac9c5-9b64-4a87-ba91-918b8b4c7341"
            }
          }
        ]
      },
      {
        "id": "aa8b1128-c90d-4200-a35d-152ae150f65a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0c9a3ec8-a6b6-4cd8-bcfc-b72aa3eda369",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36d7770c-d8b5-4c99-aa57-69d15dd433b3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7b482bc0-cded-44a6-a0eb-a7ae6fa79d18",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d8703b-cbc9-4e86-a163-8e497326cef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf10ac4-e762-400d-943c-27d56614faae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b7cda4-5d6b-434d-ae6e-584c66dc942e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01fbb1ba-a784-44cb-806e-a6e78fae0654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76498d0a-28de-4bd3-b6bb-31f9e8b3ea1c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9788cd03-2536-48ec-bf0d-56a31c2eab03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa9eaf9-49d2-4966-88f7-2b72c6ca78c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5162b098-e60b-4488-a0b5-06928807bea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57347da9-88c2-4195-b0e0-eff52ea81c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d9ab16-7e2a-46d6-a235-eaf053b8fac7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2952b641-6e37-468d-bd1b-2839ba2c7e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee41f232-1fdf-424b-ada2-056869413f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67825deb-1bf7-4c4a-a615-1f4b8a46ed96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "116a451a-98a7-48a2-897e-7cfb235eed1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45318c7b-848b-4612-a176-a4a5a4ee97aa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5fd72c-2198-4627-b0ca-c867ad65b457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25830e91-7020-4f0b-a73c-09eedddb2c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf7122d-6ea8-434b-a8a2-feca87ff7074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38b8f97d-b7f8-4456-b04e-762d578ec17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48476d9e-999f-4fe4-a59a-70a91f8bdcfa",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664d1948-61c5-4b3e-8b93-8053cfd9821e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ce580f-a0c4-4f4e-863c-92cf0e987c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600ca892-15bd-40ad-8d86-98af8848a00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82b10b4e-aede-48cd-aab5-8fcd13b13248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c241faf-3974-491c-8cbe-92876be3d9ff",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e61020-dd05-4594-9531-ee2dfb725fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fd416b-684a-4bf5-b5ae-2bea7f9a21e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52de9a25-7c38-4f19-869a-1d8ba5d3a858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce8b8c75-7d9a-4a6f-97a4-096b2004f9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841d1baf-e76d-4031-b38b-9518a60da48c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0422e658-3cfd-4e6b-ba9e-f2b7c35d89c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aeb0156-5292-4006-9245-e8691c4d7492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215fbb6c-4e8a-4ddf-8385-9765d2a24db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1a757b2-3c1f-480a-ac16-694317dcc3e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84b4e88a-5a36-403c-b3b8-4174e6bf69f9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2648977-850d-42f5-9f6f-211ee75268ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d93fc508-1f8a-4ef4-834c-a3d8200e08ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be8853a-e01e-4f1b-aae1-dbed1fe7e76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1493d13-5cc4-4d9e-a43a-415446c02446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f938324f-76c6-450b-97f3-d5010ce3d6c4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f18d78-9972-4fce-9263-68917206e983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6cd6daa-ca5d-43f8-8135-cffe743c01f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94722537-7d7b-491d-9521-e911304cdecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48becccb-11f3-4eb7-b10c-776daaa52936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d6d8780-0f4c-4431-ba69-d5bf376583f7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51986211-65d6-4455-a702-8319ab95d52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627bfa19-6955-41d5-88c5-26452e8fae48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267d6546-7db0-4169-93b6-d34c51f6aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82718286-fc1a-46fe-8031-ec6a5c53217d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76f845a-afae-4414-bef0-8e11a3b68a31",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d34449e-ac48-440c-b9f2-d81d0effef95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd37fe04-71ca-440b-95cc-356b5f705195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18090e30-5fb6-4a67-95aa-fdc324494335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34195191-0332-465a-ac7b-95eea7888d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a674b70f-9ca6-4aff-9e5a-cc3b0748f3e0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a7d320-b03c-48e8-a6c7-e97ca91ce54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36154bb-fa40-4f70-8581-fafa217ea47b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0988df-ea06-4633-b217-35a9bcb7656f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0428e8a-cc22-4d24-b10c-ab6e3c0c4bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8e298e-7d04-4e59-a898-992c4d429e92",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367b7dc5-cf53-4f45-bf2b-b164403787cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34845539-b02d-4a42-8118-80c17825be24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5767876-003a-4d70-b93b-d330aca3cbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c70e0a69-4104-4c69-863c-4b0918f370ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2a9a0e-1178-4691-a66a-dfbf2429a919",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db1f744-8aaf-40d5-86ba-2c7f3145ab69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464a2b31-cef2-40fd-b7f9-e009a0866665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d658e680-ed70-4f0d-b8e9-0e9927083dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84cbff70-8a4e-4de4-bcf6-18da5da8fd6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57a6918-87ac-413a-9d5d-95ea64bc1e11",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3b3a11-2ae9-4547-84e3-3d0c86c7022d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e48c34-9f42-498c-875b-de10dfe57ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ca9ce7-5056-40b6-98ce-388f7ddc59d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64d5db3d-7575-4f22-9fde-dd0f790bcc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7d3aa4-ee95-4e31-ae92-63bdfc19f658",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f47b06-236c-41df-b027-c69ea706a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac9038b-8462-4be5-975c-7ccdce6b36ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3415746f-f572-4fc6-b9d4-83db14a4a62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42971f55-4e2d-475f-bfb5-8ea8ffaa324d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbfe2bb6-e39b-49ae-89c3-7f0fbdac38c6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ec250e-8581-44e1-86e9-c805768f5dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5695abec-85ab-4f63-b9fd-fda30896999f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481c65f0-3bcc-49b9-9ee6-86f9cc42adff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "540e64b1-b0a2-4af3-a025-084ee8145ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea4d1f1-32f9-4308-bf9a-7cd3a5cb0dad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b3a32-33ed-43c4-8d12-6f2573a8b705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b52737f-dd12-4e22-b5af-a65b68ce9f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4112a695-7f03-4da9-8fe3-67c73d841bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c343be-1425-4d8a-80fd-c96874477fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3eb4636-9e98-4361-8ed8-efe06c120e92",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e7284b-d107-4308-ab1e-ec405f21589d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e84dfaf-c0da-4686-b66b-a387eb598024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8bdb40-c9dd-44c0-92cf-3e9bdf59b52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9a177c-41a0-4cba-a34d-954b61723f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed92dfeb-da1f-41ea-8b01-398374380c20",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b6828e-c109-49cc-a47c-9d225a70d40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b3cb02-d6cb-497f-a2a3-2a94c772bb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c57410-217a-42ce-924a-927def38c0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39004e5d-66bf-42b4-953d-ecf651f15cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461de061-f421-442f-b161-8b6f2c8a59ee",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41678c0-a29a-4d60-b381-96f14d27fb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307efd3c-afa6-449a-a6bd-f7afaa8a69ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c202e8-a97b-4433-abbf-773d38f2e3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ce182d-97b4-4bf4-8216-144506ab91a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2f79c8-0fca-4b90-a54e-37e6272bc196",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6135da86-2503-40f6-93bd-5b31a8e74ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c181358b-ff8a-4ec1-b660-4d0011a01ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb0a440-e463-4eaf-befb-f23fe9de8649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e803badc-ee6d-4c44-848a-28433b6a4250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec037ac1-d6e0-4c16-92a0-90ff3f7c2c88",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6406d388-2a1a-4a55-9af8-75915c6ecb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe75de6-a098-488f-8fef-d1c514072c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd34eba-96e8-4469-b767-ab9dd75e96f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d13b5edc-6b5d-4d31-9ab5-496cb936e733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2a0c5e-304d-4cdd-afc5-b8c3df241301",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03092eb9-8146-48cd-bd5b-3bc607be51ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba5b8a9-c383-4c8c-a59a-1c26f3b60411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b335aead-6aa1-4c30-9faa-43795617adeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "315fdac8-dab3-4cce-9776-57d2e8a06fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a81da7a-96b8-48cc-96cb-c908154eb67b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9001e6c0-fd5a-438c-9243-5cc8c6b44e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15eceb61-1171-49d2-a316-73c43ddfef4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262338d4-d878-4b99-8dae-ccb71b095271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53c979d9-3b0a-4c07-82d5-3f71d225b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0dfc4dd-6e74-43cf-b5b0-c3ccedd232ca",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b079bd8-b143-449e-b2a5-656cc7233f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bdb482-bb2c-4b8e-8d30-cc25d44854c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fca7d7-6865-466e-ae1b-ade5e28efb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2def61a6-1f5c-447f-8de1-3d41e3e354a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383f0e98-ca3e-4740-9602-7d2aba413215",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bfe179-44a7-47c5-b0e1-93332e9f5a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458e038c-aedd-4169-87f7-86373e2faa4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ba5ca1-5db4-4271-b833-a59d6334e91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88ce2fac-9df7-475c-b42a-01cf2140e503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8866476-e36c-406d-aa54-ce35bc2a69a7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72da3fda-fa77-4a56-b590-c78e1468df92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43e41ad-0791-4a33-bddb-c2a89d7e3c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa994583-9dcb-4f92-bf6e-76d04c3bde86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bbfe227-2ac0-4791-819f-23e04dac143c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2819a7a8-5136-4de2-a2f2-198bfc83df81",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c6f9efe-a279-4947-a22b-790ff0da1200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae4bfb9-b0c7-4782-850e-227e2b417502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1811ee67-1f75-4c3c-9743-f4da3f59aa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb4e209-e2a5-4082-9f81-7871fbf986d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03e68e33-a78f-4ce6-aeee-ac1442617f22",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6751a4d5-58a8-48b7-8781-46b9a02648e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20e146e-f9b1-4086-ba3f-5ecabbd0aa18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35d46f3-e46d-44cd-ab7b-7214415c4b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a10c73d4-0bef-4b78-b673-3f1fac47559c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d859f7-efcc-4463-bbd1-b2b824f7633c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797f0e9c-398a-4da3-844e-81176337e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff96a44a-0ecd-49ef-ac6f-87bf4049784b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44260abe-ea3b-4ee5-ad48-7144e969daab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b94e79c8-039b-434f-9aee-04a7fb67a8d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ea0787-0974-44d6-a0d7-b54f812e1761",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8313035b-8232-47bc-a597-55e8103c577d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a1e44c-c8ec-4533-9664-7c738d03d7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cc3eb5-e014-4b36-8b0b-dac08135e543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d080fc00-f57b-4920-9477-a2f11453e9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b68b7266-5a06-4fec-8133-d3740e36e330",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90272ba9-8704-40de-804b-28ddb22b8adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a34cd52-052d-4d82-b00b-4498ec9acefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bdb71d-c225-400b-a01b-911688177cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6b6ce8-3891-4a1a-ac5b-e67d6f2b56a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3454f94-0d08-491f-890b-81364233bcfe",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdab8e1e-6b08-4941-aa5f-04d77b96ca48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581bf39e-5257-41c5-928f-0714146af291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698e2599-11ea-4d51-b5eb-a76708ba8905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9a3094-5593-4b60-9e68-ea92dec4b188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbc58f6-c492-4638-9073-aafd70df6d45",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8056cdd-fb42-4eca-bea5-537a4433e86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce56b020-27c3-4f09-802d-0871d03d633b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9472a338-00f0-4d39-a2f7-f8db77cdeb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0fcce944-5eb2-4c95-8acc-e5fbd4ff1244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285ff113-e417-453d-bccd-f7b86b77e4e5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9ea5dc-b1bb-42e7-aebc-81bd750e6349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae40d2f6-5252-4e93-9887-35e6efe18ae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14dfc8d7-d24a-45cd-a3e7-35390955b9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0aea7f-44b3-4c43-af62-ed943a10c772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65db35c9-af77-4a16-9dee-e7766348caf3",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "525160bc-a0e2-46bb-8bb6-2af1c161a94b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3806820d-2cbc-439f-bed3-dfb77f7f72e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1910ad8f-ad7f-4471-b68d-9fb44bfbbf65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17330b97-f901-4a55-9841-732baae0d719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f15774cd-da1f-49e0-b1ab-b04a1af4815a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5020cb8a-c267-40b4-86e7-98f0e09e6cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e4d063-3d44-4706-b996-2bd1d699839a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9335ff-dba0-413e-8002-b6016893a166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65bf8682-e313-4a07-b4f8-f37cdf866aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6011e2a-a6f0-48f5-bf7e-0fd7a446a671",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a481d9-342f-4841-b737-b53f918aa895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ee5068-b6ae-4520-87b9-d2d5927e2627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f140a9-633e-439c-b580-570841d5a70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6837c8-667a-46ca-8103-a7c8db449599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8d1e37-d386-4c0d-a4f0-24721a8ed859",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014bc051-452c-475e-9524-f57574363e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99dc485-4f23-4b34-a92c-4def47f07879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f13dd54-d395-4e6f-b4b6-ba0c6232dfe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "609d84a3-f72b-470f-9456-eaac27950a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdac57c6-4d49-407e-a343-fb59961a1cd4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273fd84b-3157-44c7-a836-949de4cc3e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0285d694-43fb-4a41-99d0-f4a36227aa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a489b421-dd1e-4e2e-bef1-bc959f4b4fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe0247b-ee98-4f69-bd36-f68d2c0d8339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8c7f93-9e85-4fad-9ac6-0fcc3e77bbaa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63edf145-0f8f-4d46-a351-0a28704c788e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146ce150-dc03-44f2-b1db-40b0ee80ed8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49022934-89cf-4014-b072-15aecfc4cdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc935a2-1b9f-442a-aade-770ff65a4bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c73963-54d4-447b-a433-aacb912e3f00",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e84978-f638-4886-b6d2-a316884dec17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a18ac9-492c-4884-b6f2-c6576c29e27f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26207de-ee63-4d15-8c20-0a7e8aa2510d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5038c589-6f59-4810-96dd-e5cf61306937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee15ecd-c7da-4e24-bbb4-1d4bfaee9b92",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d41d85-cd03-4374-96d3-5ac323d4d5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc5ef47-05e0-42ad-a874-97442383edda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a205e8bd-71a4-4fcf-ae15-bbf7e9a2a4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d701765d-b91b-4d2f-bf3f-476a3ab51610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0c4c73-d7b5-49de-98f5-58a70892b441",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33ad81d-2aeb-400f-b734-7555bca38d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8780b7-3930-4758-83e9-5546e4c14480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c896c5-5ae9-4781-bbca-8d0850486c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77810b3e-f265-449a-9975-b04fae7455a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b95a979-7255-42a1-b93e-3cf98c6c3c0a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa671e1-2a0e-4ef1-a296-79a8ecc75f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb734e2-2319-4120-9ae3-5bce54993e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b5ed208-a74a-49e4-a9d9-a8a8d37fbf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cfa3ecd-eb04-49aa-94fe-ae5621bc18a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9975744-1c76-4efc-a6c4-bb7d2a7f92f5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4a258c-88d9-4753-8a0b-f69c3fc01f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18934eef-2f6e-41c5-8174-13abd98e2b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9eb2ef-147d-4ac5-bc3c-5985c67e648d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2604518c-61b0-4ff4-ae15-51254c0a6116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73639d9a-a6a5-4b92-a3b2-885328d11e76",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60fe571-1a2a-4f82-b009-c0a7801ccfe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "364a99a3-3285-49d5-b2e1-bae2e326a5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad174ca1-0b49-49ee-be2d-cd8d9bc54198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dce85f09-cc18-4f8f-bf86-6947ac960397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f43245-2631-4118-9c4a-6ffce8932139",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db20396-0d5f-403c-b379-10e7d9a3631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89deedfd-0c70-44d0-8bf6-5fd0fde8ede0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aac4539-3336-4a1a-bfd1-8f2cc8b25b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed855d9-de26-4566-abf0-f80a9160e2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725a9750-79de-410b-9655-291826fb9c8a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4dd7c3-4f79-49e8-ade0-cac65626cfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc036c6d-600c-4219-8509-2ab8cd6d939d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b2558b-81ab-475c-bf23-a73dc3e518c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12c18252-d78c-4bd8-93eb-1b1e5b317dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f910227e-778b-4e16-a5c0-83c02683cfa0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c06c944-e163-4bab-8049-2fcecc117db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a497d02-f288-4c1f-88f5-3c2f3ef0ea5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340a26f7-290f-449d-976c-df308154c3ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b29574dc-ea9d-48cb-8bd4-2f03b138446d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f528a862-e5b9-4ea6-8ade-f7291bdda9f4",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8407da46-6301-4ee6-8681-f6aecb5bebdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b121696-79e2-4076-9cda-176219ce083b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6abe29-3c34-41b1-9ca8-f49cbf4a3ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7b3994-a151-4419-81d0-5866fa7700e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef75477f-e672-45fe-8152-fc459e7ca5a2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d589a94-30d0-47cd-a804-9768ca1e045d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16f1b324-0c3d-4b6e-a121-a1d2961d3048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e8755f-2de0-425f-ac37-b69950f18a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2de118c-f996-4859-8b0f-2f1b130b69f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb730222-9802-4322-a62a-9aca967362d3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e2ecc1-d32b-45bf-ade6-764edf79a370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1f09ca-370b-4d73-be03-ccf07f9eae7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e19868b-6bf6-450e-95d3-6bbda532fd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28a20b4a-4cf6-4c1e-b320-b9b668b03b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13c5760-69eb-4414-94eb-c3b8abc41517",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00c80e87-27f3-48e9-bade-93deea97faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f7275a-74b8-4a2b-b857-e7a913183126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077def15-e4b0-48b1-863c-e193a203a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4da15f-8d71-478f-8b63-a0158549c5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f717424-f0aa-49fd-ba80-eb76e3c06dce",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c957e9c-f4f5-4025-8eec-2f647df1494d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e090a1-d0fe-4f5a-b24c-b431bf082d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484e5896-16c7-4bac-be3f-7855ced52838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "755afbbf-d9dd-4823-9b8d-0d3378cacafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81f07ba-a222-46fb-9aae-4dc4028573f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5347499a-ebbc-4822-adcc-8a36d8b97491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cfa708d-d9de-404e-b564-734e0fc7dc51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cc052a-c081-48a3-bbb0-5aec8722375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff4b6cb-9a4e-4443-b064-1e0c5c13768f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabc5607-f824-43c7-86b5-5156b802e7db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c588c4-ed8a-4ac9-99a9-098f07cb98ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a673f152-ce50-4bc0-969a-e5099c46f781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe36673b-8d45-4271-a3c7-9218ca1e8729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba86d17-8eb5-4232-bd60-dd88507c0a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1eb30a3-6dda-40ee-a1f6-d40580ad7af7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d0a7e8-2352-440c-b166-7cbfda15bf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5985090-5d31-48f5-b2c8-48de70bf5681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3247d2af-9764-4371-940a-f5793466e6ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a21fb87-d4b9-41af-8e43-01fffa08c347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72f38f9-2d06-47c0-9eb0-2b942bfdecee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c68974-c807-4e18-9d6e-c5926b39b4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f89f1c0f-6fcc-4806-9b6b-7fc95a5686cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fa60b2-b97c-405b-81f2-745cc5648f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6869873e-0b72-4da0-9709-8454cc2e57c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b98b6bfc-5e39-444e-bfb1-7ae25d7a65f8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55972901-e6d6-41ee-880c-560af9b7c35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8b267c-773e-4c34-b823-b11e83cab5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f79b7dd-90d5-4ae7-a578-8856d75f78d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa3392c-42a5-4bbd-93e7-0d3e80aa11f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbbf73b-8564-4804-a5c8-ac591be3de65",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182672c8-0e34-4e92-ad70-eaa7d3992e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594e92f8-4159-4f84-bfcf-23f0ecca271b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7c6fd3-848d-4251-8457-0a5e7569e239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "597e6bfd-e664-4f01-97d0-a0751b59364c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de4231c-1bc8-465e-94fc-45ea5cdc4cec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed7ac5f-976a-41fa-b929-e881791788f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb55dc77-d06c-4ab0-8924-b24d5d974099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c412bd0-8e2d-4128-9c19-91d586e875e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "66658b88-4bbd-4460-b84a-13f591b61a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4546dff-96eb-4eac-8f0e-bce30695e54f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a02cfb2-ae66-4409-8af1-61413253c113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01569b04-ab0b-43f3-8e67-d65133e75865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b5ac68-fff6-45ed-9780-d774cdc2d426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2902d3b-416a-43cf-b3de-ccbb07aa6262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f2e844-9589-4fd5-9de3-1d6cf24d8664",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dac5c2-9456-4a5f-8aaf-0207c3438041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfd1b7b-6d8e-4481-8b24-6bb2bdc26364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc8a5b6-0b7f-41c4-bdc3-6425a00cf0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc249929-6ffb-4151-9979-67f1f9f168c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986ebc28-6e0f-46a7-98c0-24cf8989b60d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e957e1ce-ae97-407f-bc4a-ab747a046058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3320c869-d931-41ae-846f-7176b04029cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f777327-3efd-4693-9b06-68a127126f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac549c7b-725e-4c2d-acc6-118a50ef66b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "770b257c-196e-4d89-9c6b-6f8172a8b6d1",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0f83cd-482d-4f58-bcb0-c20193c5e257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d1d3fc9-c211-4150-93ea-c66807067889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be9bff9-1a52-45e4-a3fa-c0ca8afb292b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2026add-96a8-4fa3-8751-46204f526f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760076c0-82d5-4b89-9726-08533fb90ca4",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb41ac5-48cc-484e-9d5f-0699969884c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4323e80-f1f4-415b-98d5-a4817cb61381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5686c381-9b45-43df-973b-d61505cdb50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "48f527ce-f5f9-442e-b823-ec56d905da1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70acadeb-c89b-4560-9ac4-67e82182d789",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb57517-88cf-4516-8e92-ac83abe9b02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598341cf-88c0-4401-a954-22b404716ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b2b058-5484-452d-9342-77066f25a06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "166c9e2b-2bbe-4672-a840-2bc0b8dc6658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a522ca0c-4055-467d-8714-3a085bb65670",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b506759-ebbf-4338-a546-28580b3a1e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb44259-0d63-4f08-acb7-24bef9c80358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cf3327-82bd-4ed5-b857-a5bf6e5d9ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8b7f79-cfa1-450d-9bf1-54e26fd99c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb3fcad-218a-4add-8cac-506f91c42dec",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9a5b7e-5303-4963-b702-7ff95ce6f82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cca7326-d58f-4394-9682-883e898dc5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f8bb07-0b26-4259-872d-934cc3d9fa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be10218f-2b50-4d19-aaad-228486dd20d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e884b1a7-ec0e-47e4-b6fa-dbce06f528f6",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9936eae-35f8-4ab1-aba4-a3530ea482d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a57467-d228-479d-9a2a-fdb965809b45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17ec9ba-0ce6-4dc5-923f-93456bea0ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50595844-f9fb-4182-9c46-935951db61b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3152edbf-7e41-4e74-b554-b76b0c73c63b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25990095-77dd-4654-8e8b-9970107dd781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3bfeb5b-1463-4769-9aec-ee16225c194f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6a06d4-02d9-4b34-8d98-c6686e0fef20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b094f3b-0431-466b-a1ff-73bf614fb782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fdd695-8100-4ddf-b217-6201f31ad0d7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7074c2ad-60e1-4b83-bfdf-4177ee6d2411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8378d1b-3f8f-4dbc-afc6-504db15f311c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fdfcb40-595d-4fd4-9bc5-398bb0252f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2271cd7-c3dc-4eb8-9a4b-aa8597313390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcfe217-73db-44ac-ac65-f7baf1e6a5f9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b876d1-4ce6-48c4-8166-a9f006ccce82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bfcfb98-7a21-4179-b785-b90cad5b5ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a58534a-6a76-4b61-94f2-5c066ff90b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8d09624-b957-438e-8f2c-dd1728691e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cabf4a-2509-4d03-8873-5b5772aa2cb5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67b1cbd-2a72-460e-82c9-05b341da79fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a06636-33ec-4274-985f-d118a4319e24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff6ddad-269c-40ff-b9ae-8c8113b4004a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05cba5a-5a44-4d2a-88fe-8a027a17fffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828beac8-3d60-42b2-a17d-56f95050b54d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7ff277-0ffa-4916-936c-4093162c23dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "088961bc-22e9-4431-9a26-7d356906cd3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870579a0-1507-452d-a70a-f8dfac26d69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7b3393-3c04-458e-86a7-6b3caf503261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2865c35d-5433-43e5-bb96-149fdb7ea076",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bf2838-5332-4f8b-8e42-0aa083ebea93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78ce486-6210-48ee-9eef-f4b7aa9e7a7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfe247e-70a7-4a64-8a49-65f20a0fa87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c5d278-a96d-4780-a41d-64805435959c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4860d2c9-4ef9-40ee-9064-55fb9914d74c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85639667-8899-4685-92bc-9b3137086a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752f8d7c-bd90-4ebe-a51e-2829e27569ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45414a59-8105-4164-b074-387d3d622a43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a115fb9-e3d5-4e60-a219-e894bfb76306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaf3dd6-d6a1-4c63-9ac0-590f673d2fd4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f8e9df-77a4-4655-b5c6-6d76e670d3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ae70dc7-4b91-4e8d-b004-51fe9a5cde7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de386d2-1a31-4cc3-8bcf-973a045a9d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f41cb7-36f2-4005-8eaf-18de3c233ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3af8635-0b2a-4207-9483-9a28845970ab",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1f56ca-c816-414b-a3dd-78b43ed1f2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7799cf4d-7528-407b-bed3-2b23cfef1ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56afc12a-fc54-41e3-88e5-915d621a2564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d1970e-f17b-4f04-a1c0-2a5f5158ea23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6720152-3742-4f62-9ac9-34bd4b33e88b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dfda36-f917-4c84-b709-69c0614a80a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33eb727e-cf3e-4dba-bea1-187808895231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d61999-2368-440b-b433-9cf0fb363015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71a7bbec-ffff-4eec-ae8e-de2f1800c1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56100a1-174e-4435-8729-f1233721d1d6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98154c64-bbc8-43cd-8848-62ae14148d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412cf0ce-e0fa-4898-903a-37b9a5809547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01135b52-718d-4e5b-a41d-28e2fec2394e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8200e79d-67e3-4ecc-bbb6-2d76f6722bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fe075b-0327-4073-aebf-15ef3cc20018",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b51c4cc-0c8b-4dc2-a236-907c5d30000e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c61832-33d5-4e8c-b770-0347b84d53df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a70697-96bf-43d6-afc9-6a4da8290f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa217776-00f3-48e1-ad18-70d8a4339c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea3de9c-1504-44a9-a41b-c62d20767778",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8343b897-3426-4c5a-8dd3-ca522f9565f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af052db4-950f-4e7e-ac3b-ab42114d3a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b4f1e2-1ad7-4a29-a088-e4147aa916e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe9b214-a4b8-40bf-8019-fb17f15b6f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0deb7b-7b34-465c-8e3b-aeb6269194a6",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bda4b3-bdca-4534-978c-1aeed21ff24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce37791a-8ef7-4113-9674-016d30cc3365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356379d4-046c-4652-af1a-d90d250dda08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "981a2405-2cde-4ba6-a312-88460cf6c290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468008ee-c700-4252-8b19-68d390349fe0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7b90c78-78e8-4a5c-a086-cdad9d1b82e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351c7741-4624-4dbe-a81f-05a54aa21ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d754af7-1d28-47d8-814b-4306623a5203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "707cb39c-c2d5-42e3-98a0-66f1d649a84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe2256e-d94f-4e90-9ccf-cd48333aadce",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd3c48e-52b9-4596-8785-0451dd1d4de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78b1e8be-7587-4ae5-9420-f05c5579d881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce06d36c-e796-4598-96fd-59d6962dd168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b22f7f-774a-47fe-a779-47523e843065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeabf11-02ad-481c-a5b5-9535a8074baa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c137608-6493-47a9-95c5-e75c3e62810e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ad3fea-ce78-4c6e-902c-d95fdbc4390b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1b4279-1efd-4211-bb66-4c0ef88a0a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a69c2776-d0ab-4c4a-bda2-45154f3588c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "894280a2-ce5a-4af3-9b63-79c33ce90a1c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607f4a60-0e4e-4a86-8b74-df24f91a0669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42262db5-5d94-4c60-bb98-a825c7375c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54909281-3328-4bc4-8e58-9d1c6329b57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5237c4fd-4dad-49c2-b2b7-15a88d1dcc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182cdc03-3927-4e6d-b6ce-b9bc98dac30e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578a4925-24a7-40da-aa65-679d905c2935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc66569-64ce-422b-95e8-1e6d73721c23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a934cf-f437-4e70-ae33-4416c2e59065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f524c15-1c1e-4594-a719-e55aeacd524e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aeae71-d9ef-44c7-a75b-bb8487bf0e17",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10473cf-e4e0-4694-90b7-0b546380232a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8a3076b5-7adb-4446-93d2-23272b83ec2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67704cca-1e4a-42ab-ac02-8665166698ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2318464-7ab7-4080-bed6-d9c10a70da27"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7f89d29-6446-406f-b54b-5fdfbd8a4f99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f1415ea0-32d2-4250-a413-7be435c94d59",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd96163-16d7-4047-9ecc-c57d59f1a2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f33d2db-0cbb-4991-821f-7acbab79c62e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7301144-df01-4763-904a-a38f2a88cd81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "65378957-1343-4697-9613-7191be4bee4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c16ecb52-645f-4b57-9806-c3825b99163a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d608fed8-e48a-4699-a2cc-4fd38a896217"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8fdf887a-f38f-4154-acd4-b62e5ee73f7e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81801306-b8e9-4ee4-8dbc-361c8998f3c4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f786992-4bfa-4815-99dd-d0c880642466",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70440ad0-cd5d-411d-8a41-4454a8323f37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b9a2102b-3faf-43cf-bf04-1e1eace0f923",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "97e37a14-7081-43a6-b938-fad43e292f62"
                }
              }
            ]
          },
          {
            "id": "40f1f3bc-3861-447a-ad09-71573f791065",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c5b6bf66-4edf-4834-9279-c710f5eda0a4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f6750e23-369c-4cbe-8951-256136c14a0a",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92df2999-ca27-4c62-baf6-14482bbd56ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7866aa83-fdca-4e19-8855-96d36fd21360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7a16cb-3e9a-4c69-9469-a1fba65f5a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ddbde3-1cfd-4b67-bf09-bd95a197967b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "19261582-7624-475c-8a02-53586c0ae4c4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "795cd004-3d9f-4ac7-8bb1-c8857514867c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bf718f6-65db-4d81-abe7-9c5a9bb4e36d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2db3ea23-baf0-4e24-8546-8ad2cafe8e4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3bf292ee-df96-4a1d-bb02-602743ba53d8"
                    }
                  }
                ]
              },
              {
                "id": "c41bc8da-be42-45d3-8e8d-5cdf5ca38112",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33bdf310-8d45-4a68-b504-01a8c40b5fff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6f3dc75-f70b-4847-9fcc-1a506b9a18b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e2c236d-8b3c-46ce-b09b-1a7bf4932518",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "71a44475-22cb-492a-aecd-b4c695437a92"
                    }
                  }
                ]
              },
              {
                "id": "2d6d4d6b-7b80-420b-b2d9-55c7dfed25b9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "85b9dc29-9255-4e7f-9a7a-b66c0084df94",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25405ae9-4933-4a8f-9380-947a6c993bf6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b7eeb7e-737e-414c-bac0-5cb471d39589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8304110b-9a9f-4727-8517-d48a3a5ea3d3"
                    }
                  }
                ]
              },
              {
                "id": "42f5799b-74d5-41a3-8d31-fb7900ffcbe8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccee6a90-616f-47cd-8ef3-b1cf48fe15d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c912d69d-d64d-462e-8672-e5b70aa863d5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8672cc81-1a1a-4923-be1f-836926223ba6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b1e4d7ed-3f14-4371-8989-b1de4641c790"
                    }
                  }
                ]
              },
              {
                "id": "e72d9013-ef7e-419a-a139-12e94039e207",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43dcb024-2c78-411f-9454-08ad5a6b3ad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "20cdd5a2-70b9-4815-b6ea-f0d4d3583fa8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df392c07-a444-4f15-be04-e775a7f2d038",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "781ec521-c2ff-4682-a212-e46d9e9492fe"
                    }
                  }
                ]
              },
              {
                "id": "3bf80724-f6d8-4663-8825-4c242a6116b4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe9f8549-0119-4c89-9abe-e4438cbe77bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "120d2751-29ed-4ee4-8543-0a7e78169caa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c21ea8-a8dd-42f3-a75f-024d3aa92496",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7a4f3f5f-0863-4780-b8de-16ca36922bba"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41aaf034-37d6-45cd-abee-fcb22bda8ffb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0292355-4e90-4d1d-a202-26df4c27c202"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "52844a8a-5c7b-4064-ae6b-a11b08149f30",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb955e73-65c9-498e-9f88-04586b3db264"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5ac6a15-a0e8-448e-a724-750cc8eef285",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "61ef66cb-3bb4-44d2-aa03-a0eda2111cb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f5bd7c5-7d3d-4875-b06e-7074cd946623",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "022ec70b-dc14-40bb-a3c4-dbf597048e20"
            }
          }
        ]
      },
      {
        "id": "4e8f66ba-512b-4b1f-868c-3659c4219b3f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6f69d929-0670-470e-9b41-2ce21ae6b578",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f940ff3-9267-4afb-8852-beb877bf648f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "85449d2b-e700-4b8d-a430-45c895bab4b5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e92fee-2054-4706-abd5-8b4aef422640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0703efa-5401-4bbc-8d7b-51d510c559a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377bea12-665e-47ad-b0d0-0ced2b901da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcdc691-6b22-4691-8979-d8a21bae2068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5fac1e-0fbf-4613-be6d-9637a6a68c8d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7607952-8977-4dcf-a415-ec45b82b1c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b089d5ff-3d5a-4002-b2cf-e45fa94c87e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a301a3a-90da-43bc-8bb6-d97d5de42816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1efa73ba-efe5-4e82-9ffc-25cf878e3ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be26434b-069c-48c1-bd61-238624270ca3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424d86b7-13da-44f3-9918-f04078f90dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6aa07e-2fea-47ab-ad71-e061d87abdb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fdb015-dc48-4853-9a14-ddcec863c982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f7f9118-515d-417f-97a2-4dc6c2928812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25ab880e-7e20-4d08-88e5-395d9aca23cd",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad0cc183-146c-4ed0-a048-98d47ed6fd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5494ff5b-ffb7-481c-ab5d-416745cd9775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdc2986-2aaa-48c5-bc09-58e2f24a3356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad977175-da8b-41bf-b3c4-24db605bf7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a564a97d-659e-4392-8cd5-57222391c59f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba67b86e-c140-40fd-87a2-5c68793b6003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b7a6a9-c044-4b16-b645-8be7918007ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f608907-1e7f-44ea-bd2d-4b8084c4a2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2e4e3f-a380-4e1e-9ba0-1aad1f5767bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3408e088-1515-473d-ae04-607a1c287024",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78defa4b-fbe3-4e45-8685-b92390e5d69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb6652b2-fee0-4ac2-925e-2b9588ae2637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9555ef4c-be3f-4e1e-9865-d26b359d2c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cdab8e-7d33-4417-928a-459252db7d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5520370-f588-4cbc-84c8-089d95349be7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeabd75-4671-4460-9528-5f8c85a883dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f57d14-85ee-40ab-bb62-4d3690167113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523d1361-f549-42af-a6f6-7665c832e04a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb529b87-22af-452a-b665-c326e9ee17b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad10c7b1-a77a-4b47-95cb-4a99e32ef615",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a263c943-538c-4466-8f44-3082fc69ff6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf8f9a7-3e94-4c58-814c-faad1fe999f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d26a84-1fd0-448b-b5d0-49248ceb29c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0709772d-900d-442d-b93d-955fb0e5f2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87af5b29-a17f-4e4a-9529-35dc91da1093",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af05e126-cedd-4c1d-86d0-7cad8d19af07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59cd9548-ef95-44bb-a783-21ec6732c753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868e0ca3-94da-44b5-a6a2-f020c8b2839e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ab541d4-22c8-4f67-a5c3-4bb7f1c24bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3866a3f8-1599-4bee-9c33-a692636968d6",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047bbf15-e89e-40ec-97d6-4eb68b7d807d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5efe5f9-5496-4288-b9b3-2418479bb86a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60be2ed2-ca7e-4a63-bb5c-7033afbd20a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ba3c66-b603-44cd-96c0-2c008604b707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e82fb5-923a-4b9b-b173-706ed6cbe377",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8001972-fcd3-4537-9a0b-fd79f90c84ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d70cc618-c471-4085-b3af-95a35fded5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c563e88c-83d6-4f83-ac1b-efac5420c831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "090221da-1da6-45c3-a34c-3fee72a487de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f1861d-a7d2-4aa3-ae87-4a72bbaa44ed",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ff44f4-8fe6-48a9-ba9e-09d2e154a564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a94b1a-bd5c-42a6-bc95-2765bd6f7cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9133ba91-f7b4-46b4-a9c1-fb280c18cf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5e7de6-5f21-455c-9170-abb22811c016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a3e8df-161e-43db-87e4-7d17d8ee5b0e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b3445f-0396-43fc-b32d-7e87320d300a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b370598-ed63-41ee-8347-31983d049740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb67dfa-e279-4126-aac3-c583b7ea8907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0669a4d-2d07-4911-ada1-44590bfa7c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9821b267-9e49-4dab-9755-364fc7aa48e0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410f9521-92fe-4a88-be6f-9704ffb21452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971699d0-e646-468a-b1da-c1881a6ef4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dba940-0d4c-4d0a-a72e-0a7de1fc4a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7db18089-466a-4021-8efb-d01ecc070d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3973664-c11a-4b5f-ba0c-3b91b7086168",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cfd4a9-cb92-475a-851d-b0af2da6c400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a9ec28-3981-4cc7-af91-60a59e134a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe47254-1fb6-4fb8-8623-364909c5cc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a941a284-74b8-415d-a2b3-c1591d85b19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84163e4-0504-4d86-be52-5780ec2b1a34",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6f4feb-0227-475d-9b24-0d58364c5661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a66837-4305-4239-850c-0b918e410403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6000754-de28-422b-98bf-f71273958ff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b62633bd-d41f-4173-a86f-2ab3949a6930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f7cef7-9d08-41bf-8d65-43b426295a30",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46a859f-7fbd-4514-befc-9c1e4359a5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a336fe2-4b07-48c5-944b-032c1ec3a35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d55e9cf-fe2e-4220-9cb1-f5851076acaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b8cc89-de5a-420c-b039-078bdf1addbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1544e90d-b406-4a4f-9140-59a3509f1e36",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "066a1cad-9aed-4420-9121-2e229f5d0052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72443d0-0aae-4c97-a2e6-3f405450f795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c751d747-1930-4ef2-ba2a-640a703cf9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8f15d76-d9a4-4b1f-afea-309b46ecfeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dbb0883-2bcf-42d9-bd30-d36a1d15fc30",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b4b522c-7d92-4ce7-88fe-a1d64a22c820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15288f2-6c52-42eb-9a66-9d00226f26f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61780ba0-3c76-4627-a14d-100b97bc3c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91dd43c8-c644-4cbc-b0be-f75ffe4a379c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccaedc3-0927-4acc-9344-ae6a2d606edf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85afbc1b-ec5b-4539-959f-3e184ca604a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc4e1b6-4638-4c7b-ae3c-2dc83c4e9ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4064da3a-e9e0-416a-8e4f-7577a5ee56ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04896d58-442f-4ebc-92da-4b12f9aa27df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf5b1d4-b778-4130-a4c9-d2f91eddd606",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bf0369-9f00-4dff-ac6b-53bc52c6c613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c91665-6915-47fc-a52b-71857239c847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e165da46-c858-4925-9993-f8751214e5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58bf7353-f81e-4e7e-930f-eb1dd10d6ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7880332c-7d4d-4ede-8b89-f8363dcce394",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aeaef60-06ba-49fe-b958-5a4d5dcc052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bbb42b-13a6-48bc-838c-33fe0048da56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e438957f-80c3-4ab9-aa07-5cfc50fc8fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d1d06f-ae93-418a-8eb4-d65ae048f5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7e89d8-fec3-4d23-a5e7-f1815f3ef9d3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3f1078-2fa4-4aee-8256-bea78b4f2e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb78ccf2-f5de-478e-a6d4-661c68076210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bd0a62-31fa-403f-ba75-e0e12f7170b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "674d0222-9297-4e89-8ec4-8d8caefe2a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b889f16d-23fd-4a8f-856b-597fedd2c117",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4b8541-77ce-4eb9-8dcd-3c7045e60c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d2670e8-0c8b-4537-90b5-c648266bb9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4c41a4-427f-47da-96c6-b49e0091aa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f07cf6c3-fa1e-4c44-93ec-d96eac66b5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65dbf945-d39c-4336-9fb4-2e3e1e1da896",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0034979c-f082-4ef0-8c2d-2a32b40b01b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea2d7f8-45bd-4bd6-880d-b64569872b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbf09f5e-8cc2-4620-9240-b6c38da10571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbb2d20-9819-446c-81fc-69a279ccaae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c328e2f2-dc8d-4f86-bcf9-29ff641b12f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c906bc3-ffca-4612-b22d-ca1838dba018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa7f368-e1a9-42ac-9f3e-eb52a020c6fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26509cb-e6b5-4999-8e86-c3267c219898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e298d56d-e19b-4d90-b46f-b136180c8c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6859a064-48d4-4782-9d42-22640332258e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db477136-e7f8-4ad4-a817-b4a5501cb11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3357049e-4bdc-443f-91b6-166153977e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080fe450-3364-444b-a86b-58e679afdbb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3eaccbf-dd7a-4b37-8611-83e755735a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c91fd44-7807-4fc7-81b3-1dca43dcda22",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e90ca6-b119-4247-9290-fe521e2476c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc39028e-d91d-4c0a-a29b-330958600520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aca34f8-8527-4f3f-ad13-46e771da85e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce58cc71-d548-49d4-a2b1-7c79c401a4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff10657-7bf5-4ee8-909f-25ec712e9f68",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65968b6d-6e25-4f49-9db3-036017fd92e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3df792-94db-464b-a93a-bb873f95448b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d4130e-fc06-4946-8968-ddb07a675d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c4f10a0-7426-4459-a6b1-d0cd3692eb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "589d3179-2413-43d1-8402-9fe03ac76498",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c4e979-64cc-47bb-986c-8e8b2adbfdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b14624-0be6-4ca8-87f5-e5f9eb3d8bc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706d7d90-4a56-4494-a558-6f297ae4ffea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "664c74fd-4181-488d-8e89-cb7c54c6b7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb821c8c-db37-4f71-9fae-644a27eabcef",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae4fa51-efab-49fa-af46-39c17e20b9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629c1e99-fca5-4771-9ae6-abaed266063f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c5bd1b-80f5-481a-a62a-14e8c26f5764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a2bf51-bd21-4a9c-8c7b-fb06d821b1b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f6a2df9-59f8-43bb-8b31-dd70399905a5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3921b1d8-ab41-47e5-ba1b-2bc0df8dfe91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ab52008-64e1-4be0-9cb6-d9fe015a74e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2def477-62fe-44dc-9a8f-7918ad9414a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf934af-240e-4c97-ba3d-5578b8e2a756"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7908504-fe23-4d62-81f0-46d818798271",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c21a08b-8e0c-4c93-b971-2a7772869510",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e2634c-8d8d-434e-b4fd-69661354e224",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "69650bcf-4d06-4f2d-8fe9-2a8699f7c87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d77012-1d73-4835-9122-8a59de3f1530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eed9f4e7-98ee-46c4-887c-a7eee6ffb154"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42cb10e7-7845-4396-ab61-6cf09f0a7927",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "745ecbe5-b894-42d9-81fe-90dcf274dbe1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6696d0bb-b314-44f6-8730-2e6a7baa866b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4b17dd3-fb0d-4982-bd20-c1c0c4f89e1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b77ddb71-880b-499d-aa0c-51f34968cd8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "46655517-1ba4-40ca-a69f-a1b8866f1201"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3083527d-6416-4d35-ab83-a06dd0697cb3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "850b7233-335d-4623-9373-e3b162cf939b"
            }
          }
        ]
      },
      {
        "id": "feb34eae-f714-4706-a8f1-5c66e41d3719",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "b3622ffe-926c-468b-abb2-0f8d72155c2e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ff1c60fe-07c7-4924-8a10-0feb2debb076",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e586c69-ed25-4f0a-9747-5a9b3dce0dc1",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83069df1-fd5c-4725-a640-9ba0acab3685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695b7e0b-6136-463e-8f5e-fd436b21f849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de91ecd9-bbdc-443b-ae2f-287ee1c39cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fada071-282a-45fb-8b18-3777bfaaad1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e406640-ca60-488a-8b5b-0dede24b06a7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebd9afb-7311-4769-9098-6bbe5c1e932c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e260a26-bfe1-4725-9ded-5cefd2709692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40bace0-c8f6-4b15-94a2-bb06a4f3f50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2d1bd8-b529-46c5-bd1b-70276fa17e58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c3bd15-8875-453b-8580-ad4a3e73d5af",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "690f81d9-9a7f-4665-bb9c-5dd9ec3317ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4188d040-5089-4559-8b3a-24f64ffeeeea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13ad984-b808-4f45-bd01-1e92c3b09b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63223d2-fa54-489c-be14-2cdb5225f4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73c824d1-2564-449e-9fb9-440b7a0652e8",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8419193-10c6-43b6-a3ee-06f84b2798c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5284702-d231-4675-9c20-7c3a92ce1628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a396d6d-f099-46e9-9a0a-573d841facc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49049b23-d7c7-4016-bbeb-a523b954925b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab84598-7b2f-413d-aae1-d868c011aaf1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9755df0a-480b-45f4-b705-9fc20ede2358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d75422-f202-4d54-9b33-60fc02a87150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeeadb4-3187-4a1f-9792-7f8b3b787cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94431a15-e5f3-49e5-a711-b040aaf02961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb8da57-dada-423b-be2d-6df56b888c95",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b96d9a3-86b4-4300-8db2-61feb187f558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8f9368-84ec-48ec-87dc-9997b8fdfd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6791a829-9f22-426f-8cd4-dd028ef90d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a351681-1998-4c53-b776-4ced9074e75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab6cbc9-1eba-45ec-bac0-5f4c6552ffbf",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f205d0ef-734f-4748-a892-540af990b432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4224110-eae4-4eee-96aa-172dabeaa863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52f82fe-c88a-414f-b7d1-eb08e3a72bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf518cf-e4b9-439a-a112-1cd38427fe58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4fd3c6-248f-4916-97ca-e0fa2f55d6be",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41942ba2-b6aa-4e0d-a332-018e2cac8a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820c4abb-6479-4013-8d13-f79244db6b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e254bf9d-1cbf-41fc-b997-b79b0edc2d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "822e7194-0101-4d98-a44f-34fedd8dda34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35127c61-ea0a-4dc9-b52e-be79ec0790c7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e20929-ccad-4f06-9374-305d6271f5bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c31fb335-c0b0-4871-8aa8-d5374f3054a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930fa321-633c-4d97-902b-2ac38d321644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b94ec6-db0e-48eb-ac54-ee17d068e262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa2210e-4b93-433b-82ff-ed68c184dc3d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29818fae-96c3-4633-8a9c-8cd0c18135c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3777257d-c5f3-4403-b7f9-78115f494be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee28512-503b-41ae-99ca-94b23fa7d369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11b6b827-d153-4576-8795-36deb7cd0995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cdbed8-73e0-40d2-ae0a-011c8d72e97f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eaba55e-8005-4abd-86d4-44d7d156cc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1e5ff1-ae02-4dce-8ace-983b11ed7f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b592412-2e6f-4f6b-94d3-f3a048b1b83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f40346b9-99ec-422d-bf29-b701d19f1966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737f0549-7b8d-4f02-92df-c766fa3bf8ee",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d3a26e-5b81-44c8-bb76-8dfc9d1a4b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c69c539-b417-4066-81c4-4b8f0f745f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3622c8-fe36-4b10-9c07-41292752b9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2339f9-6bf8-4afe-ac86-078d97c8264d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7b0dc9-d3e2-4758-b11c-82addb951250",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e978e7fa-cc34-4891-96e0-a9f1235b786e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc12d305-2b7a-401f-98c7-82ecc37f20eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186935b7-4d61-4940-855c-ab126e5be2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c294a9-401c-4881-b090-63418cc00036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a07004fd-d04f-4cc2-a7e8-34d38026fdfa",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205a24bc-922d-4029-8691-43b218e4b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40984996-c9a5-42ee-ad63-38411868480c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9426f31e-06b9-4926-864a-32d4fda31b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbcfe5b8-d7b6-4e49-bcbf-de8eb966d96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2220115-9a62-48ee-83be-268847795e42",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada8a881-8f04-4f26-90bf-77c1407b5a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a451cd-86dd-483f-8faa-5902a1f83573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee12909-503c-42c9-bbfa-b187f3e16600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a96a63bc-37d1-4028-8f1c-a9b183a581f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d058dfd-7675-4979-9e9f-910d7958be20",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f5896c1-d243-4a63-b65b-cb8771de1fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f3208db-25ac-4aa7-82fb-4f98623cab4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7277e3-bb1a-43a8-b842-39ee39075f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b959d10-0959-43f0-8e20-a2033ff87cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e9ad0e-44c5-4f27-b05c-b2e997c1e0a5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74754d1-3de6-403f-afd9-a8a2e7fcc1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1257621-7360-4254-9609-1b46d52baf5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77110ff7-7a67-4fb9-a306-f4e49f779f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0fa615-e2d5-4586-b125-baff9bf09e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ab0164-4491-4942-a2f1-d0f5d94b0cbc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e2f96c-e639-45cf-b1be-98f1abe684ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f65bfbc-0a6a-44b0-a18f-ef286141f52a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7686bbc4-0af7-4181-a1c9-15d6265a149f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "421235e6-e657-41cd-8699-ebed47104b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95d1d1d-cb77-4e7d-824c-1fcb725e3f99",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7920fa7-3bf1-49b0-8f20-c70c7d2a1ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f29bf47-bc6c-40d7-bd50-fa0cf448b8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f852257-d2d7-41af-b689-3a15b3293a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb8cf3f-7f55-44e6-8cb9-6df736c5cebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a23ff5ff-1236-4b50-bcec-8d8a301628af",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28c1fee-346f-40c9-a559-d5f0ef91c7ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9448668-04e9-48b1-8b7b-b0113467fd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffb19ab-0866-4c60-a6a8-0167fcbb303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25898fa1-0bac-4e01-9346-65ba386890de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda17a8e-a100-4395-8404-54f5b3e01a90",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ab1b34-0366-4fb8-ac47-0f120d104c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24fef194-9802-4154-a251-7485e80e5faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d493b0d2-2339-4fd9-82ce-f736950158f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6c5432-259c-4b83-8cef-873d1f688ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b69e7e8-d7c5-44ac-8586-8faa3cec5513",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a73caf-2acd-4718-b362-afb73b261523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91faaf1-f082-44db-87e6-3268f7093618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0449709-5432-4848-9c07-9bd8d463da3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c383f6a-9511-4d06-9e91-a6da8c3fce27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a06b84d-fb10-4853-9fd4-ec39564a15ac",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b99b1c4-1c89-4bf7-90d7-da8d585b3e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6a7616-8cf1-4c05-9469-7b4b05f49641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78fb147-6e0c-441e-9f88-e6b4e9f74630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e21f62bc-6558-4c33-91bd-954aaaaf267f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065c6f1f-ca7b-4088-9e89-27485bcb7fa7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b838a456-2fd9-4e42-b737-7a63f61400b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e06dd51-e25f-4109-937f-8e5a655656e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45430ef6-738d-43f0-858c-f6f2e59dc42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e42e513c-60c1-4f0d-b279-a76092279f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "240d1e3d-79a7-4b63-9d98-814a0f57e2bb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9069cb-851b-4fa7-8708-243a4ec93980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17aab626-67f9-4951-a15b-efe43095bfb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02120a90-c966-4426-9890-6aea790468c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6656643f-1c4d-4cb2-a9fa-016d0b7b8a3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817af7b6-96fa-4e89-a6fd-daed7324e63f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bf3c0f-ed07-48b3-8986-7069e5355183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1685a14-2983-42f1-836e-2e31d768a6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1082707-d645-46a7-a283-70aa2e2b3c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ee5fe17-e2e4-4ab5-aa74-8d2817dc0411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f1344f-2410-4812-aa3b-98bd75567c3a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2805fd47-10d7-4d64-ad0f-e636cf91396f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fee6fc-ca72-4358-9268-eb67b46dc6d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc4b2c3-e142-47f1-9505-39ffc9768cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "647fcc19-00a3-43bc-a2e7-9c121a2a1031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820ab67f-85f9-4fdf-a609-25011e490049",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e041c27b-5e6b-421f-bce1-dae0a7e0b1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e138dff3-6713-4ee6-8c48-adbfff89d122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eb9f74-7abd-48d2-af5e-09ebd54d4010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff24af62-c81b-4939-aa9c-8cdf663b1cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50827ac-ccdf-4fdb-9c1d-302cb87c2b72",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de35a880-720b-4d0c-b08c-c991aaf5e7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "182b6161-65c2-4c1c-b33f-1693b357dc49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13d558a-358e-45e4-89be-7b6a6d3d9d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c0a0a3c-cf72-4d7f-bf1a-bc214c91677c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f80cf7-94ca-4618-b2e6-705e3146c59a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641b8c81-b732-46b8-81d4-8872345f2b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2035b4e-1b00-46bd-9830-a8131c3532de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a4cfb6-48a6-4dd2-9ad9-d47965661de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c651cf7d-7565-4875-91fb-24667437d965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc3797e-b92e-4d32-9869-b1d01e051784",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff86db6-44bc-413c-82bd-f35b5f9466c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f696c6-ed47-4bec-bbaa-ebb5d4bd2d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80e0dfcd-dafe-4ffc-a41d-811fe851fbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "868a3c26-8d75-4032-97cb-4f1b97aa6e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76d8bee-e157-4fc2-a98c-6cb2e1faf918",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521e2a5a-bf9c-4a0a-86a8-9fada84474d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7545d8cc-5959-4151-9452-acc1894fee0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adfe63be-690f-4e7b-91a4-c13a165964c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46ca96d-9ab6-462f-bc49-9cd78ac01eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94feb1bb-58a5-4d14-980c-80e6bf8aad79",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa7f11b1-5ccd-42d6-a5f0-a241c3842249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3daafa21-e693-4d27-833a-79c319327afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1a0e87-6f54-42bb-8ead-9c0eb330622b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2706be6c-88d1-4bb2-994f-062404487146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5895d2bf-4337-445b-ac7b-b4661bec390f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c90c2be8-5a46-4bd6-ba23-784568a0a883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "216b533c-9c6c-4f09-99e1-f92e34cd9dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a84e73c-0c90-4e32-a65a-e5fb14bc4284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0abbcd7-fa91-449c-9071-66d751bc5e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11282ba1-cc75-476c-9184-cd33008ebc04",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a0f6a6-244d-463e-986c-c11991810e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07e10d8c-a62f-4662-a2ae-4109904c318e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346ca075-0589-4dad-a935-3d2e29aa9687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4920ae47-5a7e-4468-a713-999af4150390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0c5d3b-3a9f-45e9-8dea-7123f31415bc",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e569de-7cfa-4b1f-87e9-94e574e29ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090d8453-2a59-4447-a538-cd0ad760a581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c9f4da9-0e68-4e19-9c8a-4f20adaa1484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8af96e36-22ad-4338-abcb-ad15f34616c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61557e90-e6bd-4300-a7f3-5a06d3f1db7f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45625156-9367-4a40-8e9f-9fafbefc92f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe6f8b0-d0e6-4291-b017-e19b6b556417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd687e9d-3251-4c4b-b8d8-d76982f02ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1412b1f-0e25-41b8-8864-38460217adb0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3666259-9c00-44d1-acbb-bb71076d81f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "400df477-0e5d-4faf-9cb0-ea7ee3c5bac4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d539b8cb-3f44-49ff-9556-26c691c5d77d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "afb0dfa1-1fa2-4eb5-ba29-7b4ffdcac034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59677375-79b6-486e-885f-27ae4582922a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d54abe5-08ac-4c1f-af34-0cea106c3d0e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "388f8741-64df-4284-abe0-b9f43dbc37a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ac83b10-d3b6-4e36-a21d-360ac8be3242"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86bd6333-7588-4474-9b28-718b9b0c4230",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53d32ada-0102-4de3-ab98-804018761a4c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bebd976a-35fe-44b4-b184-4b275b48f6da",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "75172103-1f2d-43d9-820a-9b99f8b7d321"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16a59f7a-3c4a-4837-a0f1-90908a3a3de9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "852dd09a-3c63-48f5-a339-feac53572b35"
            }
          }
        ]
      },
      {
        "id": "2ec8cff0-8249-40b7-8e8e-a08885e9bdb1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7c63e424-5777-41b1-adec-504a485719fc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5cdfdf4-3dc4-4a3c-b07b-39074cea99c7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8240e79c-fa12-4a58-91f9-9d25b8a8cb4e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33976525-7c47-4ff3-8d7c-2f6cdb4b3644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9716707f-20b8-492e-9a93-ac4a9b13add2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1278ce9f-f46d-4dc1-bf4e-adc1e1a7a0ae",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdd0e8d-4925-4628-8a44-1aa8f2527a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9e31ce-f8a9-4e55-9963-9b9d78948bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230b4a0b-d388-4a0f-9750-6c075f26a05d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47579fff-e73c-4262-9b4f-f8bba6878a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45f3072a-fd29-49f2-89b5-49c25421baac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dc0da2-a949-4514-af56-f590fab87311",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e890524-bd8a-4e3b-bb5e-0adb193b1b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da25866-c2d3-4580-ad84-484958df8dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3524658-3ebe-45e0-a09c-9796f79e4e7a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3649bd02-6dde-4911-bf9c-8fbbf304ce72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8770b9b-24da-4c93-9d47-7b818cdf320c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145f14a6-8f8b-4b49-b5a6-5571a549321a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa08eb4-df2b-4197-9549-a3a17693f62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977b0c59-c07e-4884-8a00-8090b3783abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7dfd06-5642-49f1-ba71-60cc13995ab4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b866d8e-b347-426c-bdc5-f18351552faf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2b4a5b-1fd1-45ae-bdbe-5985804fdb39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f8af7f-07b8-4312-ad74-88537907eaf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5904ae3-d4a1-439a-acd7-a42a5644e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76861bca-7037-4478-9fa4-c516acbe2fbc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ae28b5-960c-4add-a39c-adf773b2a1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ace22b39-19f1-4fa7-abdc-bee960b7e576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4fc3a2-98dc-482a-b1cd-cfad60f8d279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd3ab1b-f41e-4ed7-9bb1-f1a6758af979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44fa4d6-2004-4624-b57b-4004a6642fa3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ed84d6-ed77-49a6-9bc6-75dc52d170e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1cf71345-139d-4292-a0e7-7edfd907e941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eaf40c8-7add-47c2-ba49-e9d6216dc3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda90dea-8e2a-4c72-a5fa-b51adb8671f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb287fc3-0bb1-4865-984f-31eb5ddd17a8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dc1a9d-ba75-48e3-bc92-62c844ebeace",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19ab6819-9dd4-4abd-a5db-735f7621bae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5548daf3-2335-4350-881b-6819a6f66ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cfd053-c8eb-486d-93bb-2c1465cbf2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697f1be2-2ff7-43a5-9bd6-fd5a94be3165",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7692ff63-d233-4c19-a2d9-9f0a027e5244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3f45a9-fc24-44f4-9ee3-ca28da833390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37a34ce-6854-4188-acbe-6bc91dbf1ff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "def24c50-8273-4e37-be03-c48606368670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081f4693-7d87-4276-a911-ed37049f5453",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e72013-8762-47f0-92ce-73de0a4d8678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327f4931-ebea-4404-a362-7f1cd0f4e820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b6ba3f3-d33f-46e0-8c83-2478b3284648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "754b0881-b272-4dbf-aa2d-6391c28f2e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7bba14-e456-47d6-abfd-007e524ae03b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900ce1d8-e981-4b0e-9711-af5ad918051b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d59a9f17-e5f3-4480-ad2f-660f28656203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a70c68-e892-4457-ae6a-151bb71898a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a55c25-d27b-44e9-8f4c-07d6e88af3f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4046134c-0a0e-4e1e-8487-fbe9ab2d42a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9abfd4-e277-4b7b-88bb-5b414135d700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46d2a19b-ecbc-48d2-a82f-46fc88edf7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbfab49b-a15a-446a-940f-bf7533a3157b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68ad23f-37f4-48d1-bbdf-dc9f3733c00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f18f90-38e5-4ea7-8dbf-a0bfa19b3b1f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4608716-3e21-472b-9eb5-0487b5b66d63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eca0e1b2-1868-48da-8e56-c8a032b556f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209cb948-6348-4fb7-8cf4-53c15825857a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485ab7c2-a15e-429c-b67d-fce0acb81ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c3989b-84eb-4a45-ac3d-cba6b777f7bf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a871621-13f4-404f-85f8-5535d2d1efac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79f26a96-98fc-4bb1-9f1d-cc2115baacca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394d5299-1cc4-4f9f-90b1-8e889a98351d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b3b8aca-565c-4081-b1a4-35eea32ce792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac799bc2-fb83-49af-a5c1-bafab2ab7143",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb4c851-f5a1-4208-8207-84d11e797b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca6c9af-399b-4a71-8ff0-75fee59a3e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc2a227-b970-4098-a65b-269805330fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b012aad-9e23-405a-b17f-48cc6f0829ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e5622a-7b17-4959-992b-eb6503aa1b6f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb24b6ef-b745-425d-9de4-da68e0578514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d6c7b8-6c7c-4f03-938a-de5fc2d0c7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76677d01-323f-4070-a7d4-e051d7368583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9968d87d-4078-444a-8982-1c6663f49972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d9a9db-8f6d-439c-8606-05678558c83a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59911b2c-9635-49c8-ae2a-10432f3e2cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53fd27a-6a6c-424a-add7-c0a30e952951"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3580396e-a665-48ab-865e-809877323a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d58296b-786a-47b2-a967-28ff44d9aa7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345ecc09-a270-43d5-a801-599ee483ca48",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfe58d5-e9e3-43c7-9d17-c85c1f7649a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389faf19-b3ec-43bb-b953-2f623792a388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdac215-e812-4713-b90d-514a0e25d711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40ef049-82d5-4036-afd8-73a4cc9a5506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5123c8e5-521c-4d6b-b2e4-d56d77ed1f2b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3417b35-42ec-4283-a064-a776f98dd331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526d0431-b14c-45f3-8ab8-b354d30bdfd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65fd9dfd-778b-4174-8b14-7dcd148f5595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70bf7d97-a010-4c29-ac21-57a3f9470b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5fe710-f537-4822-9f18-e01e149dadc1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2fca0c-359f-4c43-b52e-bbf90d7f5a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351fb5a0-b399-4901-bac6-20e8de14a85c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c0f7e3-1c8f-41c9-895b-8bb213da0502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec0a9cc-de3b-46e4-b959-b769fd23c831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049985f7-c555-4966-89b9-82c1a4d7df4a",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafd3bad-54d9-47b9-a0f3-4379aa2d7aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e9f129-f0e6-4086-8486-8000b35e2ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe60faa8-4989-414a-be6f-2ca32d96e531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f30e7ac-4d78-4dbb-85e7-0162cce657b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093508d5-c785-4b30-b580-9dd499ddb6fb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62670b1f-386a-43f0-bd92-046b7201dab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e920c28e-5524-4075-a3f6-9fb36f1913de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e504320e-b548-4294-9734-ab40b5ecc1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b62e5b-8d83-4050-a512-944fe984528a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6aa5039-3a6d-48f3-b1ac-6eccf771f880",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28177a6-ef14-41b9-b9af-bbf26605693a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27fdc813-cb4d-4029-8980-4dbd29c25bac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ccfcac-54ce-47d0-93a3-b2090a001706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9acc657f-f8cd-4bde-9e37-2486b8b546c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496197c6-4bff-4c81-979e-274ce99a3ce7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "083b8b4e-749e-458a-9ea9-a3180d4f9047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aa8c362-9675-4d91-a7e4-877b6089e8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9feb56-c72d-423f-a033-c4e1ecb6c3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd526c3-f790-43db-a883-a9ac961038fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7ae820-5641-4283-be66-f1f64d0d792e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f22b64-797f-4827-ab0c-7b4da654f7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd4f3d8-c61f-4e70-b279-44baeb7a0886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d2a45e-38fd-4553-87bb-259e169cdd94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "109de307-3393-4e89-a749-d246008d0c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8c7909-4da9-463e-8354-924adeec79b0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840a78d4-9a3c-451f-b230-da16e77c8ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c547fbb-7a45-4ca0-9cd1-c5da26beea68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a113518a-cd80-4ac7-8ba8-123a15ba56d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97972f5-b9f0-49ce-9a11-09689fbba63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad2d40b-c9ee-4777-9671-b0dc84328537",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfba2ae-a946-422a-8afc-4356d7ef0842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2da4922a-170a-4d94-ab27-ac71732e190b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3426d9-702c-45fa-9ef0-a19ef35d8a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba30d72a-b24f-45c2-b906-fdb29eb74ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff69224-829e-4b61-bb90-0b2c2e9db593",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882c76eb-5f72-4f56-a674-358bacc77f53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8055cae9-d556-44c2-a60b-be224ed28188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65db6344-fd87-4e49-b968-0680b16f3e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3274bd-e14e-4e24-9773-20d817de5c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae0d5de-28ad-4512-8530-3edcb7880ec8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef10c42c-3009-47bf-b04a-f41478695b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe0a249-0936-4c60-9918-ba8f4a1a5460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7643f1-0047-4969-9253-2196490f9771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631391f4-a09c-444d-9f53-da9f091795ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6a6ca7-1bd7-4917-8cee-1547aa807826",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f27cd1-d75b-4ec9-a81c-4b1c916fc3b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a96ddb8-c9f1-46cc-b003-31abc62c9d5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa46eb08-966a-4181-9564-1cf952ef4420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c87a187-179b-473c-9997-026940eb9e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394856ad-0ec3-4ffd-b83d-3327e565f658",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815df678-32d6-4c3c-8e55-295697c4a956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51638f3d-6205-4021-844e-3993ca3f9f52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05b86ac-611a-4e34-b745-fa6aadf48612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78428852-17f3-43e8-ac5a-9023842373d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b87589-57ed-491f-946d-e33c75ebbb83",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066b3f3a-4d62-4de8-991b-d1a6de22e1fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c40ecb76-0847-4e2a-a605-ca15eee23901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748c369e-a88f-4b7a-a784-0a4243080fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffd5139-88ab-4893-9b6b-4017c8841f09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf2123e-de84-466c-9ffa-195792b38edc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48475458-6977-41f2-b844-2383be280c46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f75f6f5-6bd5-4891-a6c3-b03942e7e09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbbd386c-7a4d-4962-b508-b8a871329d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7785932a-6c18-4550-8436-a219cd192053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0e30f5-a5f3-4b8b-9701-3b24e2bf5d34",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9840b57e-5393-4b7b-9e08-2159e5fafafb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd63de7-3b0d-4f06-833c-0769bf9b4382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f84f3c9-c2e5-4a52-a4be-3bc64103d3f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbafd908-6be1-49c0-a092-8a3825f4cbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce7480e-96c1-4d2b-86b5-69e8d9c89d97",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb93455a-191d-4bd3-8378-226678f33b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f67b45e-de51-43e6-8055-aa8f0a49c202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e03fcdc-9f49-4053-a9c2-212317a37584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d106d68-732e-4dda-8e3f-94c849bead3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18937579-1bd7-4a80-a110-ae53306680f2",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2afc53-4dde-4062-a7b5-63b907d8564b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d9ddce-ce4a-4d66-8eeb-c275e7161ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6359e30-2b37-429d-ab64-e05868048bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fcce014-ec4f-4c65-a18f-f9d24a4a77e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abaf89d-216b-49fc-ae43-37ff405ede5c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e09e5e-e836-408a-93b7-9b2cea1ef764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43e8b09-56df-4a84-a28b-4fa06b9c3f06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05bb369-a150-49e0-a51b-29b98d582b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d60a52c-c1b4-4742-a6c0-83b7161b441d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c246da8d-4386-4aa7-8bc7-26769b68fb36",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b395c2-d0fa-4c8f-a4db-a2740516c2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe68abb-bf0d-4527-8577-b0ed591ecad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d423b817-b8a5-4883-a580-b657cc19c102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70bfb6b-f150-44a2-b16d-4ec71aa4915f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4580a8-bd3c-4e1d-8a57-a04fe89b5e6c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1ca637-8d27-43f2-9cdf-3db2bec480e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8468ac13-5ab7-4927-8c24-c512f431c3bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32e21b2-5be0-4d4b-93b7-273d90c010a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaaf444-97c3-45d2-be6f-2a5e4b448bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c8cfc56-f96e-4e01-9c01-4211d2e306f4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c762bc-6054-4e41-9c53-bf1e33d413d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4928ce-0585-407f-961c-2f0ac77dd32f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cca53aa-fed8-4e0d-a222-b3a72e92455c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b116b02d-d745-4b71-9369-8145754697fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293b2452-c7d3-49a9-a68c-9847a1c633b4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f896c6bc-843b-4dbe-8687-d5e25fc1735f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34d2c56-0dee-4ce7-b9b9-8db037a48ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54299bb-cabd-4750-ad9c-97ea350d47ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ed8bf2-9390-4048-8764-d1da75469f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d38001-60f3-46e4-a4d9-653b58781b2d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d50a1e4a-59a8-47dd-9dc6-308d7217c87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3dd89c-a394-42c6-be61-dcfc70039ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0408c9ff-b9d3-4e5f-955e-854d6bd1917f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f6552d-7409-4bc3-a1ad-80380d15a5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb004d3-3881-48c7-b9c5-b4bdd3426f18",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c6ddaa-a836-4081-9f67-378fe1ba4579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7330634-4479-41de-8e70-67826b8cd0ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7468b9-5e07-41b3-90e3-f89528651d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba19bb62-8a14-4f7a-b16d-dc26675b7e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9d61a3-da76-4527-8b7b-5d8cb428c5df",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b2044c-bc9c-4f7b-b4e0-cc8c65aa09a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f22f095-5fdb-4c47-9bb2-92140d44df58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be9af46-d3fc-4fd8-8b40-63c2e15ecb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a23a96e-9111-4568-9123-9fb8876c05a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8beb89-b531-444b-993b-69622e706ae7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6d1dd7-4974-4983-ae57-7ba3aa93c079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41d541bc-d2ca-4cc6-9c45-e044a82de53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "930cd984-0793-4d36-85a8-c11d05feb1b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab2aacea-21de-409e-b67d-436710590a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531da670-3025-4a2c-8573-713e455908b4",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294589cb-4971-4ebf-9eea-777d7b8ceb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0277c196-e05a-41cc-b5eb-d0126c57548e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0578ed73-1e39-4930-9f78-cbed7e225585",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "166f7be9-2352-47ba-bc10-16b39786ed11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "118e0617-f850-4033-a24d-433fecc546b4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4221f01c-2a61-4606-a270-fea8507b0ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324ce8aa-e357-49da-b589-b29a78312311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d25bc47-6082-474c-a697-138862ec8fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4ea71e-6dbe-42d6-9fef-2f3d59bd8f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b83c8c-af7f-4a72-b0c0-e67271b38959",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89495c09-7518-4391-9e96-65127478a398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1abec8-6e95-4cf9-8f20-c2bc4bce655e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a357614-e615-4b12-b8bb-1972bc69775c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4112fcbd-f65a-46bc-be9c-1a15ab31e895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99565f8-2a73-46b4-9020-53803f886b2b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb367b0d-0826-4fc0-bca6-2c699aa43a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21b3776f-578a-418a-b282-9b5596996aaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642b4d62-ab2f-4a98-917a-f8ce5bdebe2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1d10e9-7cb9-4e65-9203-a136979b81a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1278a07d-0d7a-4654-b019-c96bb4c646b4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c97cc53-26ce-4718-a85a-5760557ba8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "578ae125-8d30-4640-890b-708bd2943a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34c1842-a5c8-44f4-9fd4-c12c28c58cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3f9c7a-e577-4b8b-8026-0d910ea61068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebedfd0-f736-4ebe-aead-f9a29363408a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3cd629-e48f-41d5-b13b-e3c170d99d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c52867-41ad-4f98-ae2d-04adb661d427"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf615b8-015a-417a-8ff9-40b3aee2bdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc6e3eb-242d-49d1-9494-0442d172eab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89daf6b-07a7-491f-ae3e-766408098ca1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9cf679-0592-42e3-b49f-753299802053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c14560-553b-4b4f-a9e8-d8a3fce1a5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e71ee50-509b-43c6-b768-c4e91c50acfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c646746-6c91-42cf-a56b-58e2f04f70d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4957bf7-a860-42e5-9944-f6c627fa4d0e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f42e77-b1e0-436f-8ed5-614a2c82adb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fab7c840-8c65-4976-bf39-d4acdfeec967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfaa20c-18a2-4fd8-86aa-2a55b5398916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c19c6daf-26e6-4b8a-b474-57c09be3bb0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28468b1e-bad9-41d3-b903-53b3b2986c3b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8e2d56-6c5f-4e5b-8bb8-5f57f9247cb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74927309-2c5d-415e-b53d-c83165681774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6500428-80b6-43a9-a05e-f2de90311df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a4a70e-3e8d-4c4f-ac03-b3b36c8b6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6968b675-ca3a-4f9d-9c31-bc475189300a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6429dd5d-94c6-469f-ae38-77ab4e46b081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913c608c-2107-4f96-a8c4-6a125b3387e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff4c70c-e8b2-440a-8b64-c3e968d54c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3e1b6b-e459-46d6-85ed-d22d88a3530e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb9bdc2-bb82-4892-9ba7-95a516f1ddcf",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6187d29a-e842-4cc9-870e-1b3179949a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879f1191-b4c2-43e6-92e3-311c01c788d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa39f5c-5b10-4e2c-b06a-f7f667e26fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843dea7b-5ad3-4881-813b-525e8d04eedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fda466-c268-4c17-a14a-2aaf6af10712",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fb0e13-37a3-4bed-b298-59e084ea7569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91474f1-fae0-469b-9ac7-ba6764b36a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35529058-b7a5-4c37-a46c-6ade882f93e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4b4473-7531-4399-83f3-dec251accd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5329bb-832f-473c-8bdb-09493c48c005",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e58ab40-b49f-4e0d-945f-d5be924f6953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37b655b-b1ba-4f27-97de-254aa02aa721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e07438-19ed-415f-b517-f145e96f30de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2c62811-2785-4697-a959-933fff6fbb5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4514ac3-f0e7-4dbd-9c85-915274509941",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad726cb4-d6be-4928-8aaf-4ef7eed1d461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32f5820-1447-4746-b75d-51aa585549e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e0d2d4-b0ba-4c99-b1b8-cafe62d2ba5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f156b20-d145-41a7-a6f4-be4cf0d44b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c326dd-bd89-474a-9540-72c74f8a33ca",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfd7167-1bf4-4ad8-a0de-e5318755c18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ac9e8f-cd3e-4db4-985b-42540fb046e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4759a17c-dc14-4b4b-9a66-91f2dc8632a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fa93731-fd54-4424-96ef-52830bfe142f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c48b4a5-b233-4d4d-b6b6-d663d2a8b2fc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c6afe4-100b-4efb-b64b-10a235af4a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f3bdc8-cefe-4461-ba02-82f8435b0ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3a621f-07e2-4c0e-8930-f543d3b1f2c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7e507b-b05a-4d2f-afae-6cd87a71be4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6018ebb2-3936-46cc-a433-b640b831270e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0569f2ad-2aa2-4357-a1d9-32f4ccf5d4a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dacaac7-572f-4012-b606-79c9d88d9a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9cad37-7e5f-4c44-bff8-8111958abf57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427764fe-204c-4a6a-8736-7c522f75007c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b91602-d2a8-4737-8e2e-2f39d21396a4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb225b29-0062-4fd8-9690-29f0f15915b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e2d885-a3fe-491b-970f-6a99ba74c723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42bf972-7354-49b3-a1ef-ae33edc19b8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7aa434-1d4a-42bd-b9c7-9b6f11d5aed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e5aef0-6b66-4831-a07c-e2bd6a8fb8a2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e62930-f5b9-473d-a682-9872b4d2cf4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "328df9b6-aaf2-4ce4-906a-5b8e9f6bfc80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ada9bc-b3f4-4360-bb09-148daece6e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d14b78-ae3d-4c88-b570-4ac2e44952d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7aa6ee8-2a48-464d-a2fc-0922c4b48190",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371ae0dc-e0b9-442c-859b-2b62c0fe0d2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3f8a71-db50-490e-b58c-f0852a484f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b84f4ca-ddb4-4b6d-9069-ab68aa1bc285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2fdefb0-17cd-48ae-93cb-311489d854e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdf281d-69d9-479d-aaf8-eedbf573513e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351cdd2d-4073-4934-8480-4b6b789ba21a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e7ee0f-4c83-4ba4-9c6d-92b18a4b9371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75aba677-0569-4642-a9f9-ff4ee6f81989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9890017-5866-4b3c-b3c5-99b6947eec0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90c2257-4e69-4d2e-a936-b117415cad6c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc38151c-23e1-40d0-970e-ee3178fea93b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd5e5ca-bb6e-47b8-82c3-49de45102278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadc7595-96f3-4939-827e-5b953610bef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25e8300-f5aa-413c-8626-ec4b5d980b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5adf69-2c36-4ae2-9622-1f52edd9e4cb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ebf8ddc-d48a-46ff-a444-cd92b91e3f8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442694f4-f429-4435-9281-fab9e0087a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f974a53-4720-4de2-a354-40683e60b331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd994fc-08d7-4de1-963a-57fb0e230470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89771664-59fa-4e04-bee4-e1ea0c0c73f3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c50b8d3-f905-46bc-bc1b-fc46fe21e5f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "602b947c-922c-476f-885b-a347356d882d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5291886-8f9a-4727-ac0f-2ba1c434c9cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc685259-931f-41fe-8f71-155e04f0cb39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14a0a15-55c1-4f00-9362-a03157489413",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c92e3f9-345e-436e-859d-b97d5437623f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49fd51bf-81ba-4810-8938-d5f7b63105be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf25e8f-87a5-4778-af9e-a73068c9c462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80d6c95-8dcd-415c-8622-be60f20cb103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5b5706-1d10-4a3d-a9c8-d86d24f318a9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c121859-7c13-41f9-9564-b3494162f509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f020d8a1-c57d-478b-a09b-77a9563b7189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd9d31-ebf0-4d01-89cf-a9adfabe9ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b7d6a1-133a-473e-b3f6-bf8173694cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4675d6-7cb5-414a-9615-b5fbd9e846e7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c709eb60-152d-4827-be0b-617d307083ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "240bd01e-be7a-4489-8556-7789865b152b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a04ef4-1aea-4886-8cfa-43e5d18fb40f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d4534e-13ac-4ec0-a656-7f5b5ce6e1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d9a58b-3770-424e-bf54-79bce8d8c955",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c50826a-5fd4-4162-bbbd-2d6c5c62c3bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce157bd4-c326-4f48-8dde-1f7a8f04f9ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee02f847-2e03-4282-be47-06d3bd7b4cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297413b8-5730-4542-ac5a-c1c390080503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3938e7a3-e19f-4f5e-a652-784ac49d1d5e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59f3c0a-4084-4b30-b64d-e94b28798fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "753aef02-5b98-47d7-9863-5de5728c5af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f56bc1b-e2e5-48ce-ae53-30571e3d21f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456fa1ef-6813-4b33-8edf-dcaee3c7657d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c9e0f9-1276-46a7-acb9-3fe63fea402e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9bcd777-5e7d-409e-9f71-3c04ee10cd8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af05e58-4d6e-4d7f-b721-2f8ae9d04e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d486103f-972d-4033-93fc-18e5118fa922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aa17eed-4f8b-4072-896b-ca8bccd46bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190e4290-4bd5-442f-bd7d-acad2982a854",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eee1c8b-df16-4fd7-a41a-d90fb61c0bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96f69086-1e95-4798-8d05-17988d081877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1163a2b-dbb4-4673-9f2f-3844ace5d4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3cd323-13f3-4256-bdfe-7ddf117e3473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66fd8bbf-87b8-4416-8521-dce66f151a60",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ed4ed0-cee2-406d-8c22-2ae2bd5016b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1197958-7452-4215-a574-8857be02e97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40cb369c-7d6c-4596-bdee-1ef26832c226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3400fe10-dc72-46d1-ae9b-d518da66fa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb42477b-32e5-4eec-ac50-23d40ffa8b88",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f915cc0d-c769-4310-be3a-4b2e7d69bfdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2308a549-aed1-446f-ad39-54d4ca4e039b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f386942-8086-410d-9151-28820a46386e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d354744-3ed5-4f62-8c0b-0dd9724ed825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e967bb-8aa9-4f09-90f9-cfc820095536",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee31d1a-02e1-4130-ae19-108f07a73cdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fee9633-5253-4876-a500-024bd996a21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13801e6-34d0-47e7-9391-2d6344c5f83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079a096e-8719-407e-85b4-309074c9688c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667ad269-da2c-4234-ac80-158418f41ece",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda61964-e415-4b87-aa13-6caa01ea2a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e17ac4ba-8065-4fe8-97c2-1c49891f8cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c82e518-fe5d-4802-b348-3951d41da098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ada387d9-7cff-42f5-a7b5-e3be9cbded31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5555a2b1-0e20-4689-8bcf-84735a67262d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96340704-3961-4191-9ccb-37127b086047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb9ecc0-9cac-4abc-b38d-3e64f2a4ea20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec397593-0ce5-44a0-b919-de3c63527c05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfc3c4b7-6ba4-400a-9b7d-745f9f9db436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb2793a-8644-4db6-b72a-162c2cc1d70a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9b75f2-1f31-493e-9641-7d319d188d8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49b2f235-bf93-4229-8c6e-407ce2a5b402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6555d2-1d8d-4304-83f3-99413d89948b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7fbc532-e870-4585-b1c7-c9cb39b20a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727c166b-f807-4895-b119-b8e1fdc181ce",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f7598-f261-44c2-9019-f8d99ffefa57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d46189c7-7361-43c7-b514-24ad11746dff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1422e99-e531-4910-8bd8-bc7f0f4a76a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd65bdd0-90e0-488f-a151-5a7af3730601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a70a96-2902-4195-a96b-92487ff8fdf7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5fcd89-01a3-4978-a1c7-d7c33047b2f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9c070f-566c-4894-a747-e5b5be4ed8d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149ba0ea-cfff-41c4-bfa4-ae7a657ec4a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4920e0d9-fdfd-4b3e-adf2-69c404999f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba941981-55fb-4640-873d-1ffdc561f902",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ad0f57-78c5-4b2d-a443-0851b59137c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edff1de5-591b-4cad-bc0b-3a83a3825667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ac3648-c68c-4db3-96da-85e8aacd0c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acd4b8a0-a28a-488e-8b14-662a53210675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9c18f5-6c5f-4f6e-88a3-eaa9adf3ecdb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ecd2843-0bcd-4f8a-ad5b-73b877e3f30d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aeef1904-414e-4632-82a9-510b64cfd0dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8448abcd-1308-4591-9b2d-fc1f52e5e315",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7748a9a-615c-49d1-b0d2-d7ae79ae0aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ff82733-d3bb-45aa-9226-4d22d6f2f2ad",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199f49da-d94f-4e3a-96c3-2119bcea5833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0989734-8d7d-4ef0-813c-17738653523a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d735f61-7200-4d96-adfa-d5fa1b2d350f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd478a1-5139-4a62-bdd4-711de8c499a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7932d1-80d7-4cb4-8ae3-8a90324ede61",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32608ebe-237c-4aea-a49c-f0bc63f707e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc128e5-4b30-463f-8943-7c8a47b55ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65fec92-beb1-4570-9441-6f68db5752eb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a55d7195-82be-4c5f-923a-e8e0310d94dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0ded96-bd7e-4bad-ae63-eaf5ed2e2129",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ca5c54-da5b-4574-8363-8c034af9428d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0441d8a2-6e07-45a5-ad86-eb9ff884773d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84f2aed-17be-4465-8156-7f23d09e78df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167a538c-7258-4aa3-aa26-6ab2770ab152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feac941a-21d6-4e54-82fd-d235fea19035",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d95f22-ef76-4833-bd32-c40298f57d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f95bd88-2634-418b-8f42-f4084ccc4b88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "556a4ff7-e238-4edf-994c-11218eed2c8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6941f74f-4e39-43a8-aed4-4f85cff953c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8112a7-88ac-4392-86e5-c8c4ffb265fd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8634b1e5-e76a-4468-af12-549fa5f12222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42e4b176-4760-4d02-bb36-6d7bb3e2c535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9079440-947f-482e-9f6b-6fac9fbe5815",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaf46cf-9bf1-48c7-ad6e-5d3b93e2a2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c39196e-a7c6-4aea-b091-7f83d54055b3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f11a285-cee2-4cb3-86f8-6df654ed1bcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42a82c94-60d2-4d98-8310-1e721b417cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd41dd1-c1c2-4cde-89bf-a43ee7f7cb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "178b9e7f-7de2-4cc2-9bae-f71bf97a7b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8737259-327a-4aa0-992c-6b4a8c0a22a2",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621243cf-4ae3-4ce3-b9a3-516fab8a346a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3975b23-edc4-43a5-8fd5-d7a2e6f5f5b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ffd2c0-42ec-4803-bc94-97ddc78c14e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e7ae53-9713-424a-8d9a-f3d97890505a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bf7833-b05f-4825-846f-dfe0dd52298d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abf09a6-1626-4480-9cb5-f84888af4324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d9935fd-c473-41c4-97ae-a36c94156ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6348df-fa3b-4e34-937d-afc66133aaa9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b65efbd4-24a6-4fc8-9f25-a56128816d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fcf1d9-c472-46c9-ab2f-55350c087a6e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960a7161-f1b5-49c6-b07a-079e83ef806e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39728969-781e-4f4b-93d7-901f7fac081f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6374fb-2be4-44b9-a8cc-c04459b9c6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c68d771-61e3-46b1-8a29-b2d57415fee5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f76773e-aca8-4c82-bab0-bbb66c9ae950",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75b68bed-a749-40e1-a849-ea2965835997"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "247a27c0-7877-41d4-a9e3-3de5ff29c1a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "302c765b-2b42-4a0d-8055-a3f645b0fa84"
                    }
                  }
                ]
              },
              {
                "id": "b2040369-401d-474a-a632-3c1996c8542a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fd04c1a1-39a6-442a-aed3-fca3e55ce78a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8177be85-e3a8-4527-89aa-fecdec7785e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7de751bf-0516-4a1c-b7be-ff5f58070f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37875d82-0e9c-477b-a6f4-454915e5772c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f533295-6b58-4978-9f39-d075b18caf2b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68927ab7-4ece-410d-b11c-3e2e6edc0925",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02493b5b-637e-41e8-b2c8-97ac5f9e4ac7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e10e12a-0d9a-47ff-beea-8fadbedb22ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b347ae1-8222-4ee1-9232-12bed5537c18"
                    }
                  }
                ]
              },
              {
                "id": "537060cb-0011-44a4-a5da-56d2af6a4afe",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "594f4208-14c7-4ae1-b0ed-548e585207c0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55e247d-76b6-4586-ae5b-a3d14f11e7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6845bbaf-f757-4cfa-986d-4229efd6a243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef98f535-7892-45ed-a0f9-397a97da4210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2abd372-9956-4ab4-958a-f21852c368d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2b62756-556e-4923-be55-1618ef1baffe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "764a83e7-e042-4287-a170-437ffc797940",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de6dab73-fd48-4f19-8aae-e0ca7242f018",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "68d77d63-440a-40cd-bb61-2284911cef74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e899c046-a0bc-48ca-8c0b-14cf5458fbb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56df76b7-95da-4559-8952-4169794a4857"
                    }
                  }
                ]
              },
              {
                "id": "6c762d9d-254b-484e-ae3d-7a66a381352b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "745e0f9c-5b5d-451b-9d4a-f5384ba2911e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f075c155-74c4-40a4-8ba5-abbe7b8a0165"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aea2f7f-3707-4491-9deb-86e0f505ec6a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9b67eac-19c9-47a9-9408-6519678ac83d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce376445-bf3d-4005-a873-7ab79740c467",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c347100f-15f4-48c8-a3b6-ffb15e65f7e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9852a414-18a8-4579-ab09-f5bde836386e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "764aacc9-acdd-438f-8c9f-54a128b91b73"
            }
          }
        ]
      },
      {
        "id": "0f4bfad9-2e19-46d0-9c55-9c2f5389c5da",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c68130d2-c3ca-44a5-8a84-6fc26a57a231",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cac2969-a80e-4fdc-9b03-b49a233b0f64",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee441aae-d941-4b92-8b74-00e619d3540c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48846bdc-34e2-4fe7-9683-6e2b2b363e97",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "83ee3fd7-cee9-46d3-9020-9f7d15303e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa19e16-5faa-4219-aa9e-0cd846d648e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bac7740e-ba05-449c-bc64-12622b9c46d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e484df9a-b5fa-4e58-b75f-18e2e4acf005",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ea11573-3d46-4148-b462-7481c32e9d80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb11c517-8489-4129-8911-01bf16cb00a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b2939b0-3504-4472-8982-1fe985808db5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "449a7d15-4343-43ca-bc85-f63099401320",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "4af71332-c782-451c-a7d6-5b83ccb0a4a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f801bcb6-6a29-4574-a029-056cb039a3ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "80f8c26a-38cd-45df-a1e7-a409b2836949"
            }
          }
        ]
      },
      {
        "id": "a74de03a-ed5a-45cb-8a5a-4eba46842439",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fd4c57e5-9a38-4186-bf36-253c1f0afa4e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c619527-4b9a-453f-974d-e5722834c3da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86af9527-2750-4ad0-b8bd-ac40ee08998c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b27c467-a721-4e0b-9b7a-b1a9e5bcf3a3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38c9aacf-a904-4385-8952-b41cd96b8cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40b5010-42e3-416c-97b8-affc523e128b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0b7b5ed-a254-49f7-b352-89715f138192"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7050172-96ea-4e9d-97dc-2531540b88cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79692904-f760-47d2-885a-efdf6dd8c369"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2096739-c129-42bc-8cd7-676db7db0a3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11870f8b-3c34-4cae-b858-a59556df1d53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6b51be6-f98f-4157-bad5-73625e18d8d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ab4158ea-376c-4f0d-aaee-fa02fb9f4fca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c56d694b-3286-4eb4-9de6-6318e9f5d8d8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0377175b-827d-4689-a84d-82945a934335"
            }
          }
        ]
      },
      {
        "id": "01b865f6-ee87-468d-8664-31d393c27141",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b34ab325-cc81-4471-969e-4ca102af0689",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fdbb1cc6-526a-4c3d-9855-bb10a481ca00",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "34c41b7c-1122-41e7-aef4-30fdd6f6ab29",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca56f6f9-b97b-4986-8846-566b7a45135b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05eb6390-3661-4942-91d5-ef352b9a0d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6476ac74-5850-46a9-8e1f-0443a61d8977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "baf3a7f6-d102-4bfc-888f-1e862bb621a5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e7a55115-432b-42b5-973f-0882a8eafc50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4781d85f-3497-4093-8502-c8962959b76f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0601c59-4071-4c6c-90f5-986606f482e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "491bf154-3a73-46a6-ab2d-35a6abacece1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d1170b1-2fcf-4162-af93-f241791a2576",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d0e3a0e6-c487-49fb-8ce2-fc0089d2104a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e249560a-b882-4d7d-9bec-b4fc26c04a92",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e6878c5-2bfe-456b-a0b2-c6f97bfe78c1"
            }
          }
        ]
      },
      {
        "id": "8d6e2be9-cc39-4b13-8c0a-20462b166e8b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bca8e104-2faf-4e18-8847-4f171310d61a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca8142cd-3810-490a-b8e6-d46d9ed37309",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9547c8e6-b337-4252-8bc5-7e2c0cb9445d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d38037f-bb39-4f44-b5a1-7f8aaef52b24",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a028ea70-60c3-43a3-9c26-ec06ba0a1310",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.27017543859653,
      "responseMin": 9,
      "responseMax": 682,
      "responseSd": 69.68959237887765,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702082102617,
      "completed": 1702082128759
    },
    "executions": [
      {
        "id": "a754f08a-5df0-4c84-a7f5-a7c816257907",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "febc10eb-b6bb-4f01-ac71-8fa81d9f0f2e",
          "httpRequestId": "0a7ec6bd-8570-463d-bb7a-d58461fda6c1"
        },
        "item": {
          "id": "a754f08a-5df0-4c84-a7f5-a7c816257907",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f488512b-fe70-4d44-8ae4-2746adde5df4",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "168340fc-7e58-4720-9a42-fd45094e9e82",
        "cursor": {
          "ref": "5dfe3638-0d97-4252-8837-69bcb44f21c2",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b531154e-ab3a-4960-9273-e5eafc48cb10"
        },
        "item": {
          "id": "168340fc-7e58-4720-9a42-fd45094e9e82",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "535ee2ce-7f25-4c4d-81ce-26e11d3610e5",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "ee69288a-5956-4fe4-9eea-1ed92a8a089e",
        "cursor": {
          "ref": "d786a476-2c9f-4a19-a88b-5f2f404ed655",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e7ffb35f-4b7a-4761-8431-3cc1e1ab09a0"
        },
        "item": {
          "id": "ee69288a-5956-4fe4-9eea-1ed92a8a089e",
          "name": "did_json"
        },
        "response": {
          "id": "d28d7563-5bd6-4018-ac33-0fe69c4cd168",
          "status": "OK",
          "code": 200,
          "responseTime": 258,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcede975-535a-4b03-bb42-b6bee5808713",
        "cursor": {
          "ref": "49688e92-9de6-4845-bf35-2eb6043d2aec",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bb19d324-2612-4744-a4e8-34404168f6da"
        },
        "item": {
          "id": "bcede975-535a-4b03-bb42-b6bee5808713",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5bf70a2-cdab-485e-a1d8-fbb49782cf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcede975-535a-4b03-bb42-b6bee5808713",
        "cursor": {
          "ref": "49688e92-9de6-4845-bf35-2eb6043d2aec",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bb19d324-2612-4744-a4e8-34404168f6da"
        },
        "item": {
          "id": "bcede975-535a-4b03-bb42-b6bee5808713",
          "name": "did:invalid"
        },
        "response": {
          "id": "c5bf70a2-cdab-485e-a1d8-fbb49782cf99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e4e87aa-0639-40ea-af63-ac527bbfb7a0",
        "cursor": {
          "ref": "7db4c645-9c86-4f4f-8541-b26650020515",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "49fb5fa3-bfdf-46e9-ab13-f950e21ecdf7"
        },
        "item": {
          "id": "4e4e87aa-0639-40ea-af63-ac527bbfb7a0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a70f1383-0abf-4b44-a776-f58bf5d45805",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9602678b-f4ad-4060-8e4a-e0f0c586e00d",
        "cursor": {
          "ref": "fb594da4-fb50-426a-8ba6-7e8440d3b617",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "fbcf9476-2c07-4ae7-9433-731135fdb9f7"
        },
        "item": {
          "id": "9602678b-f4ad-4060-8e4a-e0f0c586e00d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "44907273-fdee-46e0-b31c-b874d9e7c2f9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9d759b-3fd4-465d-95fa-fb9392a4cbfe",
        "cursor": {
          "ref": "9d809bd4-7500-486c-be78-f3fcd82d6673",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3075c963-40e0-4dd2-9aae-ff2956ee9c72"
        },
        "item": {
          "id": "9e9d759b-3fd4-465d-95fa-fb9392a4cbfe",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0604edf8-1403-465b-8e91-4bac8e68f33c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f87b654-05a8-4dcb-aa0e-f2971d0ba3a5",
        "cursor": {
          "ref": "14574341-e932-4a0b-9800-e5004df10a50",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "62d21b90-703d-40f1-a8d5-ebf44adeca9c"
        },
        "item": {
          "id": "2f87b654-05a8-4dcb-aa0e-f2971d0ba3a5",
          "name": "identifiers"
        },
        "response": {
          "id": "2822a97c-48d4-4aed-9709-7a3d3fa143ca",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b482bc0-cded-44a6-a0eb-a7ae6fa79d18",
        "cursor": {
          "ref": "ce4d687c-51e8-4fb3-b472-bea16d6884dc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1be247a8-5029-4e61-8231-b734320bcd61"
        },
        "item": {
          "id": "7b482bc0-cded-44a6-a0eb-a7ae6fa79d18",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "aa39181e-8176-493f-b597-f08caea654b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76498d0a-28de-4bd3-b6bb-31f9e8b3ea1c",
        "cursor": {
          "ref": "92277998-bc47-4e7d-a28b-ea05fa51494f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a7163963-b5cf-4bca-a33b-b49c4e1d175e"
        },
        "item": {
          "id": "76498d0a-28de-4bd3-b6bb-31f9e8b3ea1c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9b1afeae-ad32-408f-a47c-b15015f1da7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d9ab16-7e2a-46d6-a235-eaf053b8fac7",
        "cursor": {
          "ref": "de7b5254-efb0-4b09-a061-20f4e56f39e8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ca4c6d77-ebc8-479a-b74c-674f71a1687a"
        },
        "item": {
          "id": "85d9ab16-7e2a-46d6-a235-eaf053b8fac7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2b3de7d1-1e99-496e-a9b8-902bdc1e0b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45318c7b-848b-4612-a176-a4a5a4ee97aa",
        "cursor": {
          "ref": "193ab254-7227-4dd4-9e44-010dd19839f5",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d6be7a56-6ecc-45f9-9397-8df307103c02"
        },
        "item": {
          "id": "45318c7b-848b-4612-a176-a4a5a4ee97aa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "76630fc6-112d-4e68-835f-acaf7cdae25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48476d9e-999f-4fe4-a59a-70a91f8bdcfa",
        "cursor": {
          "ref": "78a781bc-ad46-4302-9c27-82734be25471",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9c693b44-b955-45a2-9934-21615574ae4e"
        },
        "item": {
          "id": "48476d9e-999f-4fe4-a59a-70a91f8bdcfa",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "81af5722-3c4c-4566-bdee-3c1d69ba5e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c241faf-3974-491c-8cbe-92876be3d9ff",
        "cursor": {
          "ref": "2f45e381-da9f-4805-b908-f0c64eed9908",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "12b1b35f-8d45-463b-9207-28f07a858172"
        },
        "item": {
          "id": "3c241faf-3974-491c-8cbe-92876be3d9ff",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "0f0018c3-dfce-4d4d-83cf-a2c793afa482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "841d1baf-e76d-4031-b38b-9518a60da48c",
        "cursor": {
          "ref": "cab5abf6-56c8-4413-9f0a-3ea0f3be4b19",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "062cbe9c-d88b-4f24-bae7-d66e9d777162"
        },
        "item": {
          "id": "841d1baf-e76d-4031-b38b-9518a60da48c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ecb516c0-3a58-4309-a877-d07b6daa9734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84b4e88a-5a36-403c-b3b8-4174e6bf69f9",
        "cursor": {
          "ref": "a5e28658-6590-4f22-93e9-93787a035e12",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "043bf64c-39e8-45e1-a61b-18296f77f29d"
        },
        "item": {
          "id": "84b4e88a-5a36-403c-b3b8-4174e6bf69f9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "31160c74-d469-4860-b817-4ea6e97f9805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f938324f-76c6-450b-97f3-d5010ce3d6c4",
        "cursor": {
          "ref": "b7a6b0dc-e46a-4b68-886b-665f487f3477",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "54ba017f-88df-4046-a6bd-7f07607b5390"
        },
        "item": {
          "id": "f938324f-76c6-450b-97f3-d5010ce3d6c4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8404b076-5966-41e1-bfd7-cbe0e3cbcc64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d6d8780-0f4c-4431-ba69-d5bf376583f7",
        "cursor": {
          "ref": "5996fb98-79c1-4b88-846f-76eda48a8fbd",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "d695c15f-ffcc-4d3d-b6d7-c5810d890ea2"
        },
        "item": {
          "id": "3d6d8780-0f4c-4431-ba69-d5bf376583f7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c972373e-51d9-4cfb-9cff-25775746e9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76f845a-afae-4414-bef0-8e11a3b68a31",
        "cursor": {
          "ref": "d4645c5a-47fc-44aa-9b36-c1185997505f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6eda7842-d25f-4405-9587-930cebf2fdbc"
        },
        "item": {
          "id": "d76f845a-afae-4414-bef0-8e11a3b68a31",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "888619ff-ba0c-4110-9b8c-eb0c1312f878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a674b70f-9ca6-4aff-9e5a-cc3b0748f3e0",
        "cursor": {
          "ref": "5ca7b553-9c78-4b1f-a547-df7ed2ed60cc",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e2ed4394-e3cc-45aa-a9f2-fa9ca710ec7e"
        },
        "item": {
          "id": "a674b70f-9ca6-4aff-9e5a-cc3b0748f3e0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "51c34af3-6950-413c-89fe-271bc84a9f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8e298e-7d04-4e59-a898-992c4d429e92",
        "cursor": {
          "ref": "dc8532e9-fe1b-4fad-be16-ebb3d8e3b89d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6a58b902-7cc5-4c65-8762-5f18836042e2"
        },
        "item": {
          "id": "fe8e298e-7d04-4e59-a898-992c4d429e92",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7ddcd02f-362e-4c8e-874a-bd8d70a9d53e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2a9a0e-1178-4691-a66a-dfbf2429a919",
        "cursor": {
          "ref": "6b4ed571-f030-4c03-bc32-e7b17568d304",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5bb57482-6f26-4a84-a3fa-bc5aa4d3890e"
        },
        "item": {
          "id": "bb2a9a0e-1178-4691-a66a-dfbf2429a919",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7dd3bc76-a0ea-44a2-b61f-bc38ad91f296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57a6918-87ac-413a-9d5d-95ea64bc1e11",
        "cursor": {
          "ref": "71e3a957-7fee-411d-aa64-f6ad0d9b98bb",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "30ff34ee-50c4-4897-bb7a-c140b782c4e0"
        },
        "item": {
          "id": "b57a6918-87ac-413a-9d5d-95ea64bc1e11",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e34718c5-b814-4ba0-9eb2-84d456c98c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7d3aa4-ee95-4e31-ae92-63bdfc19f658",
        "cursor": {
          "ref": "0054daf5-b5ba-49a6-8537-179a05056987",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9f5a13d4-1082-49a6-8dac-adf92d8ed8d2"
        },
        "item": {
          "id": "fa7d3aa4-ee95-4e31-ae92-63bdfc19f658",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6386f1fc-185b-4792-aff4-e935e534f65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbfe2bb6-e39b-49ae-89c3-7f0fbdac38c6",
        "cursor": {
          "ref": "d84e5047-e6bb-43b8-ada5-71e497a45f37",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "57d0c8e6-accb-48a8-bd3c-175e312062ab"
        },
        "item": {
          "id": "cbfe2bb6-e39b-49ae-89c3-7f0fbdac38c6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "de4be466-1a0a-42c7-87a2-69bf0d648a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea4d1f1-32f9-4308-bf9a-7cd3a5cb0dad",
        "cursor": {
          "ref": "ef25ca4e-ede5-48a8-8897-7b46cecf9e93",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "dd919501-a121-4c34-a76d-f1119e16b93f"
        },
        "item": {
          "id": "0ea4d1f1-32f9-4308-bf9a-7cd3a5cb0dad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6ccb1588-75db-40df-8ee5-3f0beffb4afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3eb4636-9e98-4361-8ed8-efe06c120e92",
        "cursor": {
          "ref": "9a6ba726-24c9-4663-9663-aa64624a156e",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "22350143-0b83-4392-ab98-fda4ef910640"
        },
        "item": {
          "id": "a3eb4636-9e98-4361-8ed8-efe06c120e92",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "16e9a7cd-3672-4c3b-9fcf-afcfd0a586f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed92dfeb-da1f-41ea-8b01-398374380c20",
        "cursor": {
          "ref": "597b1b85-04ea-430a-9ad7-c75aa158c843",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "809afafc-5a71-40b0-8929-c8a9c0edd688"
        },
        "item": {
          "id": "ed92dfeb-da1f-41ea-8b01-398374380c20",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "0e324628-267c-453f-847f-948e7099cb20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461de061-f421-442f-b161-8b6f2c8a59ee",
        "cursor": {
          "ref": "ae0bae6e-c306-4997-b0c4-497906434309",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "12b77c44-f7dd-4f3f-9715-1b90ecf351a9"
        },
        "item": {
          "id": "461de061-f421-442f-b161-8b6f2c8a59ee",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "382eb089-1eed-420d-8802-91efcceb7b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2f79c8-0fca-4b90-a54e-37e6272bc196",
        "cursor": {
          "ref": "dd55b004-616e-489b-af16-d098b20c1b6a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ae7f5376-9e93-44ae-af5a-cc0dc973c28a"
        },
        "item": {
          "id": "bc2f79c8-0fca-4b90-a54e-37e6272bc196",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0b2e235b-d0f2-47f0-a8d3-3e94a7f9d0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec037ac1-d6e0-4c16-92a0-90ff3f7c2c88",
        "cursor": {
          "ref": "0f8fd84c-f6a1-489d-8187-1f7258680ea8",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a73da37f-a6be-4e74-9530-23a47725c15a"
        },
        "item": {
          "id": "ec037ac1-d6e0-4c16-92a0-90ff3f7c2c88",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d8d83698-a021-4363-9712-f35b086c85e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2a0c5e-304d-4cdd-afc5-b8c3df241301",
        "cursor": {
          "ref": "4ae35bfb-7196-402d-9977-6b575a8a3726",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8bdd260f-6909-4691-afbf-1883be22a954"
        },
        "item": {
          "id": "5b2a0c5e-304d-4cdd-afc5-b8c3df241301",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ecc88743-ba8b-4dd7-b23c-e8bbcaa6cb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a81da7a-96b8-48cc-96cb-c908154eb67b",
        "cursor": {
          "ref": "550ea339-68ba-4d3e-b336-b6f66f429bb6",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ec049d7b-2484-4705-a727-b4fca58b889e"
        },
        "item": {
          "id": "9a81da7a-96b8-48cc-96cb-c908154eb67b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "56286abd-6b2e-47ae-ba85-c645849c82f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0dfc4dd-6e74-43cf-b5b0-c3ccedd232ca",
        "cursor": {
          "ref": "34491868-5cdb-461a-8f65-68c98fa596c1",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cd347959-5fe9-4b01-8a15-afe4528f42e8"
        },
        "item": {
          "id": "a0dfc4dd-6e74-43cf-b5b0-c3ccedd232ca",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e976874f-9bd0-471b-b566-4e8b30d6bacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383f0e98-ca3e-4740-9602-7d2aba413215",
        "cursor": {
          "ref": "5aa88b0d-94d1-471c-8ea0-6f08e16c9514",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "fbb61795-7053-42fb-8d82-9b970727d1b4"
        },
        "item": {
          "id": "383f0e98-ca3e-4740-9602-7d2aba413215",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "9e187986-c94d-48bc-b227-0feb0c7f10a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8866476-e36c-406d-aa54-ce35bc2a69a7",
        "cursor": {
          "ref": "a44297b1-bbc0-4dc7-aaf2-2ef8c9bbda01",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "63c4747d-a99c-4710-ac15-f0b54e3de324"
        },
        "item": {
          "id": "c8866476-e36c-406d-aa54-ce35bc2a69a7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7cb4d98f-3887-491e-8573-6c956a1e7ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2819a7a8-5136-4de2-a2f2-198bfc83df81",
        "cursor": {
          "ref": "fde1aae4-3c3a-4520-bea1-7173ad1b911f",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7bfc945e-f983-4585-9663-e736c447a001"
        },
        "item": {
          "id": "2819a7a8-5136-4de2-a2f2-198bfc83df81",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7ec50d76-7350-4105-b9d4-8c0be9282cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03e68e33-a78f-4ce6-aeee-ac1442617f22",
        "cursor": {
          "ref": "3322f0c9-d9bc-4238-a3b2-da5131df6c5b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e3d9c116-9c6a-4681-a419-d56d6ce2cdc1"
        },
        "item": {
          "id": "03e68e33-a78f-4ce6-aeee-ac1442617f22",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e7b2d4b5-84ae-4d31-ad85-704375b0ba58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d859f7-efcc-4463-bbd1-b2b824f7633c",
        "cursor": {
          "ref": "830f8927-2670-4fc5-9007-cadaaea0cdc0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7db3f034-5a26-4b46-b67c-6e33e7cecd07"
        },
        "item": {
          "id": "97d859f7-efcc-4463-bbd1-b2b824f7633c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2f0dd2bf-83f5-4561-b7b2-7f2885c682b5",
          "status": "Created",
          "code": 201,
          "responseTime": 682,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "15ea0787-0974-44d6-a0d7-b54f812e1761",
        "cursor": {
          "ref": "e734af3d-72f8-48ae-ad7a-f25aabf07051",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d666d843-09e0-418c-a3e8-bcef66f8bb0e"
        },
        "item": {
          "id": "15ea0787-0974-44d6-a0d7-b54f812e1761",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "71c71aca-3329-447f-9bac-7da9b03cd198",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b68b7266-5a06-4fec-8133-d3740e36e330",
        "cursor": {
          "ref": "0672362d-69b6-4887-8790-c51a86e78d58",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f43d8f8d-1093-46d1-8629-685b05f79d78"
        },
        "item": {
          "id": "b68b7266-5a06-4fec-8133-d3740e36e330",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "42015a77-8bc0-4c68-92eb-640e75950b4d",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e3454f94-0d08-491f-890b-81364233bcfe",
        "cursor": {
          "ref": "8fa0db4f-a1e1-428e-a8a8-806575099848",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b44082f8-2005-4918-b9d3-58ab237eb4fa"
        },
        "item": {
          "id": "e3454f94-0d08-491f-890b-81364233bcfe",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7b0c5fa0-5980-4cd8-a2f2-0cfd493e2b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbc58f6-c492-4638-9073-aafd70df6d45",
        "cursor": {
          "ref": "a8bb440d-1055-42bf-846c-b911675805ca",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "60223995-841f-4ab0-ab2c-5e1571f72205"
        },
        "item": {
          "id": "0dbc58f6-c492-4638-9073-aafd70df6d45",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "60ec6e46-995c-4f72-b050-111b57a50043",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "285ff113-e417-453d-bccd-f7b86b77e4e5",
        "cursor": {
          "ref": "5ba1f095-47a6-4b29-86b8-5cc32e2c8c16",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9c88470a-399f-41b6-912c-aaa8141ebedc"
        },
        "item": {
          "id": "285ff113-e417-453d-bccd-f7b86b77e4e5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ea0518bf-879a-483d-a296-5c792a892b78",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "65db35c9-af77-4a16-9dee-e7766348caf3",
        "cursor": {
          "ref": "fe881dd6-0c93-4c14-a812-81d05fb499da",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "91e4d863-29ca-472f-8d46-c1041d4d59a3"
        },
        "item": {
          "id": "65db35c9-af77-4a16-9dee-e7766348caf3",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f48adf5d-f4aa-49be-a29a-93b3baf524b5",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f15774cd-da1f-49e0-b1ab-b04a1af4815a",
        "cursor": {
          "ref": "f24e26b9-29a9-42cb-99f0-18d38c9349d3",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b7518ee6-6b01-4796-b6c0-8dd9ee21c68e"
        },
        "item": {
          "id": "f15774cd-da1f-49e0-b1ab-b04a1af4815a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e8750823-51d2-4648-bef0-23a125eb01bb",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b6011e2a-a6f0-48f5-bf7e-0fd7a446a671",
        "cursor": {
          "ref": "8332cd97-de3b-4467-a73e-3e05b87b9060",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7ac679ae-93e2-4d33-b013-aa2b9ad72282"
        },
        "item": {
          "id": "b6011e2a-a6f0-48f5-bf7e-0fd7a446a671",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ad74da4a-4f09-4482-9068-d4bb1ac2a274",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0f8d1e37-d386-4c0d-a4f0-24721a8ed859",
        "cursor": {
          "ref": "51f7f944-7430-4741-9c9e-d508c1415c71",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5bfdf994-13cf-4d72-b5a0-f43c3be7ae06"
        },
        "item": {
          "id": "0f8d1e37-d386-4c0d-a4f0-24721a8ed859",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fc7b1b83-5850-4225-a347-cec88e6de1d6",
          "status": "Created",
          "code": 201,
          "responseTime": 207,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "fdac57c6-4d49-407e-a343-fb59961a1cd4",
        "cursor": {
          "ref": "f5037163-c6b5-4cea-9cfa-8d24570368b5",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "097f81ea-bb4a-46e4-a4a1-c0342aa2831f"
        },
        "item": {
          "id": "fdac57c6-4d49-407e-a343-fb59961a1cd4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bf599ed3-841c-47b7-854a-4768f6ceccb2",
          "status": "Created",
          "code": 201,
          "responseTime": 392,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bc8c7f93-9e85-4fad-9ac6-0fcc3e77bbaa",
        "cursor": {
          "ref": "334046ef-43c7-4411-9de1-9acc1fa12f8f",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "71a2fda9-0a25-45d4-9588-07169c699913"
        },
        "item": {
          "id": "bc8c7f93-9e85-4fad-9ac6-0fcc3e77bbaa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "689f0e17-2fa0-4029-bec8-85ae22729317",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "04c73963-54d4-447b-a433-aacb912e3f00",
        "cursor": {
          "ref": "ea14cbee-bb96-4ed4-80de-88dd1128e86a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "030958a3-7886-4301-8cca-4cb06fbfaab8"
        },
        "item": {
          "id": "04c73963-54d4-447b-a433-aacb912e3f00",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "710175dc-7777-4387-80b2-97e18691a661",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "3ee15ecd-c7da-4e24-bbb4-1d4bfaee9b92",
        "cursor": {
          "ref": "a620dd1f-b862-4d4f-a33e-425259fa6cf5",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fac3fbb1-ff60-4637-864e-0b651a7daa70"
        },
        "item": {
          "id": "3ee15ecd-c7da-4e24-bbb4-1d4bfaee9b92",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c1f036a8-1af7-4a9b-b40c-b471720144bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0c4c73-d7b5-49de-98f5-58a70892b441",
        "cursor": {
          "ref": "a1e0c1c6-a3a1-4ef9-a19f-d00def7000d5",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3ad06fc3-2403-4a78-b6e7-bc226466477e"
        },
        "item": {
          "id": "7d0c4c73-d7b5-49de-98f5-58a70892b441",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "68f235ef-3c39-496b-a78e-ef701974939c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b95a979-7255-42a1-b93e-3cf98c6c3c0a",
        "cursor": {
          "ref": "68c52fdc-6fa2-46e4-96c9-8463ff4ccdde",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "92e804c2-1406-4c94-b7b9-8b909cf0e5ab"
        },
        "item": {
          "id": "6b95a979-7255-42a1-b93e-3cf98c6c3c0a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "41badb13-3971-4250-a2b2-f799dade230d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9975744-1c76-4efc-a6c4-bb7d2a7f92f5",
        "cursor": {
          "ref": "b9cec812-6329-44c5-8e2b-6990d56507c1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1448566a-f10b-4afc-bca2-f31050e3d20d"
        },
        "item": {
          "id": "f9975744-1c76-4efc-a6c4-bb7d2a7f92f5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bb20c497-2394-42e3-81c0-8191e2ec0301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73639d9a-a6a5-4b92-a3b2-885328d11e76",
        "cursor": {
          "ref": "0738550d-72b6-4992-918b-dc82ca44a5ec",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "42e092e8-8734-4b5e-a48a-d3cd120df3c8"
        },
        "item": {
          "id": "73639d9a-a6a5-4b92-a3b2-885328d11e76",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bbadd458-7fd6-4b0e-ba97-a425394e27ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f43245-2631-4118-9c4a-6ffce8932139",
        "cursor": {
          "ref": "fdcee71c-486b-457e-841b-8ec0cc6831a3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "3e616d2c-42e0-463e-96cc-fd30e316fbfe"
        },
        "item": {
          "id": "62f43245-2631-4118-9c4a-6ffce8932139",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "63f6232b-8006-4652-9702-5858ccb4f4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725a9750-79de-410b-9655-291826fb9c8a",
        "cursor": {
          "ref": "3de47301-692f-40d8-84ee-278c4c588f15",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "907f8b77-efe9-4f50-85ec-4840d792ee37"
        },
        "item": {
          "id": "725a9750-79de-410b-9655-291826fb9c8a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e7be3f7d-ab70-4995-9695-e5691ddd5906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f910227e-778b-4e16-a5c0-83c02683cfa0",
        "cursor": {
          "ref": "883235f0-8250-4219-8d24-704429cba5a4",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "464a0006-b0a4-4353-ad67-733acb47f3ed"
        },
        "item": {
          "id": "f910227e-778b-4e16-a5c0-83c02683cfa0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "06a46704-09a0-448e-900e-20fbdaeb1e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f528a862-e5b9-4ea6-8ade-f7291bdda9f4",
        "cursor": {
          "ref": "515318fa-0d11-43c2-a043-d31e3261fae6",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bc5d8eb3-39bf-4499-ad2c-4eb6be84de21"
        },
        "item": {
          "id": "f528a862-e5b9-4ea6-8ade-f7291bdda9f4",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "04e19d92-c0f2-4e77-91fc-4d8af0dcaccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef75477f-e672-45fe-8152-fc459e7ca5a2",
        "cursor": {
          "ref": "c071c1eb-956f-4eab-b901-04fd89b2496b",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "103c5ad7-8037-421d-9d11-fa68f72a84c6"
        },
        "item": {
          "id": "ef75477f-e672-45fe-8152-fc459e7ca5a2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cc161c10-acd7-45ad-b6e2-8e615750764b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb730222-9802-4322-a62a-9aca967362d3",
        "cursor": {
          "ref": "5fb35c3c-9fbe-4607-bdcc-ea9634531ae4",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d84ae7e8-eaff-4995-977c-0178e926db8a"
        },
        "item": {
          "id": "fb730222-9802-4322-a62a-9aca967362d3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9e139265-52a7-4d54-b130-072e589e41e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13c5760-69eb-4414-94eb-c3b8abc41517",
        "cursor": {
          "ref": "fdbe05e5-ea60-41c2-b05e-b2ca82e809e6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8ce4837a-c37d-45fe-8827-b381737cb84a"
        },
        "item": {
          "id": "e13c5760-69eb-4414-94eb-c3b8abc41517",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0d627a9f-80ee-41f4-be97-c5c6d2671648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f717424-f0aa-49fd-ba80-eb76e3c06dce",
        "cursor": {
          "ref": "f6b31bf2-fc65-4016-8d6d-7ee6126e6eef",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "034a437f-94b9-465a-a884-8965f78d3914"
        },
        "item": {
          "id": "2f717424-f0aa-49fd-ba80-eb76e3c06dce",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7e8aebb2-f126-4e00-8c81-e040e181260f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81f07ba-a222-46fb-9aae-4dc4028573f4",
        "cursor": {
          "ref": "dd1e09f2-4d7a-4c0d-81c6-4a48fbc03199",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6bc319c8-ea4b-4707-9f65-ea78e791b4d5"
        },
        "item": {
          "id": "a81f07ba-a222-46fb-9aae-4dc4028573f4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a00e3c60-078a-4753-80e4-85be2d6920eb",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "fabc5607-f824-43c7-86b5-5156b802e7db",
        "cursor": {
          "ref": "264e9110-1892-4a3b-812b-c19225f1d345",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "767778c3-53d5-45f4-b43f-9c5bd5a6176a"
        },
        "item": {
          "id": "fabc5607-f824-43c7-86b5-5156b802e7db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3974771d-38d5-49f5-8cb4-2d4942adfe50",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b1eb30a3-6dda-40ee-a1f6-d40580ad7af7",
        "cursor": {
          "ref": "c97f66b3-f907-47a5-b11a-5c587128958e",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3fdfd4b7-befa-457a-bde3-1cc120486b1e"
        },
        "item": {
          "id": "b1eb30a3-6dda-40ee-a1f6-d40580ad7af7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6fdb9462-be58-4634-baea-918bee84df1f",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e72f38f9-2d06-47c0-9eb0-2b942bfdecee",
        "cursor": {
          "ref": "f27f938a-8ac6-4bcd-aa6c-07676ed6bfe3",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "75555e45-420e-48c9-b210-be3f43a76fa2"
        },
        "item": {
          "id": "e72f38f9-2d06-47c0-9eb0-2b942bfdecee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a5663906-1fa5-4fde-8569-652f48e9d02c",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b98b6bfc-5e39-444e-bfb1-7ae25d7a65f8",
        "cursor": {
          "ref": "acd52c8d-dd58-4fbc-a447-0b75ba308ad5",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "38c93bd8-6544-4f87-965e-d15bc04ab8b9"
        },
        "item": {
          "id": "b98b6bfc-5e39-444e-bfb1-7ae25d7a65f8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6ec4d68a-22ff-4512-aa49-9351ef742de5",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cfbbf73b-8564-4804-a5c8-ac591be3de65",
        "cursor": {
          "ref": "9baabcd0-57d4-4154-8aea-7f386f19ef8c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dc14acd0-aecd-46f6-a058-00f4b309d119"
        },
        "item": {
          "id": "cfbbf73b-8564-4804-a5c8-ac591be3de65",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ad66e7c5-2cb0-478e-ac8e-29aa701c8cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de4231c-1bc8-465e-94fc-45ea5cdc4cec",
        "cursor": {
          "ref": "a38d438d-fcfe-4e00-b8a0-e6fde54cf59c",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bd05fb86-213a-45f7-b0ff-09e64583ab68"
        },
        "item": {
          "id": "9de4231c-1bc8-465e-94fc-45ea5cdc4cec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "778d92a9-db91-439b-9df6-6b118b15d94c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4546dff-96eb-4eac-8f0e-bce30695e54f",
        "cursor": {
          "ref": "712fecbd-f30c-442e-a37c-56e15df0d30c",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "43c36363-9778-49f6-b37e-d029c10189e6"
        },
        "item": {
          "id": "e4546dff-96eb-4eac-8f0e-bce30695e54f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5788a685-7c95-49d0-80b5-be181c513802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f2e844-9589-4fd5-9de3-1d6cf24d8664",
        "cursor": {
          "ref": "19d63793-353f-43c0-8ab9-fe9773190bd8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "35324516-b89a-4468-ac49-b874ace7eb5a"
        },
        "item": {
          "id": "c9f2e844-9589-4fd5-9de3-1d6cf24d8664",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a49a18cb-420c-4fcf-a4ec-d43ed6811d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986ebc28-6e0f-46a7-98c0-24cf8989b60d",
        "cursor": {
          "ref": "aa68c45f-5d36-4bc1-80f0-d64e3099dd89",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8aa044d2-0353-4f9f-ab45-78146a681eed"
        },
        "item": {
          "id": "986ebc28-6e0f-46a7-98c0-24cf8989b60d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cd97438b-3a88-4714-abb4-42f71436dc57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "770b257c-196e-4d89-9c6b-6f8172a8b6d1",
        "cursor": {
          "ref": "02bc5b1d-5515-403c-918c-198d24e68e24",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "32afddbd-f88e-4103-83f4-656a5af026bc"
        },
        "item": {
          "id": "770b257c-196e-4d89-9c6b-6f8172a8b6d1",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3fef7b3a-cc09-4259-85c1-9b891542f043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760076c0-82d5-4b89-9726-08533fb90ca4",
        "cursor": {
          "ref": "1bc5d963-9c40-46d8-825a-1dd2188e8fa5",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "96548484-96f6-4a6b-8ba3-ac4463dd26fc"
        },
        "item": {
          "id": "760076c0-82d5-4b89-9726-08533fb90ca4",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "208499d3-bbf9-40c1-a4ce-f1efa88fe639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70acadeb-c89b-4560-9ac4-67e82182d789",
        "cursor": {
          "ref": "dab3db2c-3a68-4c65-8d3e-7f04a2b5620f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "550a8fce-67b1-46ba-95c7-a6693e4280d4"
        },
        "item": {
          "id": "70acadeb-c89b-4560-9ac4-67e82182d789",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "be05df01-afd9-48b1-98fa-810a512483f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a522ca0c-4055-467d-8714-3a085bb65670",
        "cursor": {
          "ref": "fb4bac97-73ed-4d4e-8979-6052da9ff31f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b5c44616-2d48-452c-86ea-27934491525b"
        },
        "item": {
          "id": "a522ca0c-4055-467d-8714-3a085bb65670",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "344c77c8-f423-4bf2-b195-489a3c56475e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3fcad-218a-4add-8cac-506f91c42dec",
        "cursor": {
          "ref": "ff8522d0-2c4b-40e9-a7f0-e4a418731e95",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "56931318-113f-4c3a-a83f-100280efe175"
        },
        "item": {
          "id": "8eb3fcad-218a-4add-8cac-506f91c42dec",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "197cd29d-4b5f-43ec-9347-8668efab8881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e884b1a7-ec0e-47e4-b6fa-dbce06f528f6",
        "cursor": {
          "ref": "0a7a614b-e893-4b3d-b7f8-458a9d6610e2",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "07360d3b-0572-469d-bc00-276197b92c92"
        },
        "item": {
          "id": "e884b1a7-ec0e-47e4-b6fa-dbce06f528f6",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3417779f-6b72-496d-a917-c5ad3da207b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3152edbf-7e41-4e74-b554-b76b0c73c63b",
        "cursor": {
          "ref": "b405f790-6a35-47fd-b253-92497781e133",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "455c1c0b-c24d-45e8-938d-05e457408e86"
        },
        "item": {
          "id": "3152edbf-7e41-4e74-b554-b76b0c73c63b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a288b3a8-e0d4-49e4-bd63-88fa0c3af718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fdd695-8100-4ddf-b217-6201f31ad0d7",
        "cursor": {
          "ref": "ed662475-13ce-4d25-b713-bcc344e73b85",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "68686751-570d-4395-a413-963cad42320f"
        },
        "item": {
          "id": "98fdd695-8100-4ddf-b217-6201f31ad0d7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "1c236785-d890-4944-b244-8c3bc6042996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcfe217-73db-44ac-ac65-f7baf1e6a5f9",
        "cursor": {
          "ref": "5221dd87-474c-4b28-b462-202c879760e1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c8e28ff2-53f9-47c3-a5c7-3920315ac363"
        },
        "item": {
          "id": "3dcfe217-73db-44ac-ac65-f7baf1e6a5f9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6f4cd58d-04bd-494b-a5a6-609f8113389f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cabf4a-2509-4d03-8873-5b5772aa2cb5",
        "cursor": {
          "ref": "5d15fd6b-c1b8-4e92-9495-0749244af5f6",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "26008e03-4906-45f4-90a5-5edcfefae58c"
        },
        "item": {
          "id": "76cabf4a-2509-4d03-8873-5b5772aa2cb5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e396ed80-c88e-40e4-ac9b-1a636363e709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828beac8-3d60-42b2-a17d-56f95050b54d",
        "cursor": {
          "ref": "d4524d0a-77c1-4f30-927a-934c032f2626",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1362bf84-4661-4382-bec4-c714a1680463"
        },
        "item": {
          "id": "828beac8-3d60-42b2-a17d-56f95050b54d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "59762e1b-e61c-435a-b924-47f3eef03b97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2865c35d-5433-43e5-bb96-149fdb7ea076",
        "cursor": {
          "ref": "7db29a5c-f379-4cfd-8aef-eceed0731c84",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3143f60b-0aa7-45ba-9e0c-ef915eaa011a"
        },
        "item": {
          "id": "2865c35d-5433-43e5-bb96-149fdb7ea076",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9569a100-6058-40f1-b6e1-8a1c8ca49ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4860d2c9-4ef9-40ee-9064-55fb9914d74c",
        "cursor": {
          "ref": "a65a1e71-0000-43a0-a245-bccdedd1f415",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3cf5c9cb-d1b1-4f1f-bd87-39eea404ed99"
        },
        "item": {
          "id": "4860d2c9-4ef9-40ee-9064-55fb9914d74c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e31ae5ba-87da-4410-9be8-c3603d9a1133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceaf3dd6-d6a1-4c63-9ac0-590f673d2fd4",
        "cursor": {
          "ref": "e5651f76-61ab-4747-8d62-2f80b86c3c89",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ced5eaba-c69a-4319-89dc-b806de6fedba"
        },
        "item": {
          "id": "ceaf3dd6-d6a1-4c63-9ac0-590f673d2fd4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "059e98b8-5638-4ba2-bf8d-c6d495f2ede6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3af8635-0b2a-4207-9483-9a28845970ab",
        "cursor": {
          "ref": "c5f92788-09cc-4802-aa60-264b2b6bb6d0",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "71822c99-a2cd-4f31-9a92-20fbd27d3282"
        },
        "item": {
          "id": "b3af8635-0b2a-4207-9483-9a28845970ab",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "45bf9f7c-0ee8-483b-a013-5c62970bab7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6720152-3742-4f62-9ac9-34bd4b33e88b",
        "cursor": {
          "ref": "f8e9fa71-7954-41a0-9b58-0e2b75fbdb91",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a9f46d79-ce24-43bb-af9f-1f496796aa69"
        },
        "item": {
          "id": "c6720152-3742-4f62-9ac9-34bd4b33e88b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f9b7de3b-7f78-4b0a-8de9-a0dc8afc3a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56100a1-174e-4435-8729-f1233721d1d6",
        "cursor": {
          "ref": "16d22525-55c5-430f-be84-7e7c48374c3d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3b8d717f-7d3c-4787-bdfc-ca6a79c8ca07"
        },
        "item": {
          "id": "f56100a1-174e-4435-8729-f1233721d1d6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "51c9c26d-c636-497f-91ac-52562ec4019b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fe075b-0327-4073-aebf-15ef3cc20018",
        "cursor": {
          "ref": "099377bd-6fd6-4d94-b95f-44655b547af0",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "86333705-8b15-49b4-8c23-5dd9de7a74d7"
        },
        "item": {
          "id": "94fe075b-0327-4073-aebf-15ef3cc20018",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "7bf12d85-2509-43bb-9f87-3f6e25ab04bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea3de9c-1504-44a9-a41b-c62d20767778",
        "cursor": {
          "ref": "bc780a58-fbc8-46a9-bcad-902b96c36891",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "80674dab-80d0-4990-aad7-28116a293c97"
        },
        "item": {
          "id": "aea3de9c-1504-44a9-a41b-c62d20767778",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d261fc69-6a1b-463e-ae4c-b257ec97d5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0deb7b-7b34-465c-8e3b-aeb6269194a6",
        "cursor": {
          "ref": "76b4183e-bdd3-447f-a1e8-1ed4632ea3de",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7ef21d2a-1f92-466c-b6c6-89163c773d73"
        },
        "item": {
          "id": "1b0deb7b-7b34-465c-8e3b-aeb6269194a6",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d2722096-5def-4c95-86d3-f4967702c251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468008ee-c700-4252-8b19-68d390349fe0",
        "cursor": {
          "ref": "a016b112-9bb7-4c6b-9a0f-d33253b8d1ae",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e323b9f0-4547-4487-aa5b-ad4310c2d92b"
        },
        "item": {
          "id": "468008ee-c700-4252-8b19-68d390349fe0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e6e1c9d3-47fe-4b4a-99dc-92238a9206e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe2256e-d94f-4e90-9ccf-cd48333aadce",
        "cursor": {
          "ref": "e447aa56-f74b-47e9-8476-a49a3a82b2ca",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "97736b3e-2fde-418e-b1c4-89d15b9615e0"
        },
        "item": {
          "id": "dfe2256e-d94f-4e90-9ccf-cd48333aadce",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e7b58908-f342-4afd-add1-1211aa39e873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aeabf11-02ad-481c-a5b5-9535a8074baa",
        "cursor": {
          "ref": "14a84463-6dc5-40fc-b5e1-f64b1435bc4f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c1572037-75c9-4675-b6dc-bb165972f605"
        },
        "item": {
          "id": "4aeabf11-02ad-481c-a5b5-9535a8074baa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d07c1711-b6aa-42ca-bc8d-dbf627e1c9f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "894280a2-ce5a-4af3-9b63-79c33ce90a1c",
        "cursor": {
          "ref": "9d849b45-9de8-4b21-9479-1e9aa055b3d2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "292a96c9-fd57-438f-81bf-0056c95712c9"
        },
        "item": {
          "id": "894280a2-ce5a-4af3-9b63-79c33ce90a1c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "37c56bd5-d96f-4407-9567-47d96a080d1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182cdc03-3927-4e6d-b6ce-b9bc98dac30e",
        "cursor": {
          "ref": "9cc96569-d069-4da3-82fd-6564cc966ca5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cf36ebf2-bcdc-41c5-9294-314b22f25f95"
        },
        "item": {
          "id": "182cdc03-3927-4e6d-b6ce-b9bc98dac30e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8bbbc51d-4dcd-4010-85cd-78f1fbb03270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24aeae71-d9ef-44c7-a75b-bb8487bf0e17",
        "cursor": {
          "ref": "dc2a3b28-74b4-4ee5-a358-9a0d7775b610",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "044f2a00-5d15-46e8-8daf-e6260336d6eb"
        },
        "item": {
          "id": "24aeae71-d9ef-44c7-a75b-bb8487bf0e17",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6594ed0f-7193-4423-9669-5c791d1be877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1415ea0-32d2-4250-a413-7be435c94d59",
        "cursor": {
          "ref": "bef9335a-3822-48c4-aefe-5b2e23005315",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "cff376e0-6131-4d01-8828-3ef4306bc5d8"
        },
        "item": {
          "id": "f1415ea0-32d2-4250-a413-7be435c94d59",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cc86af45-0d8b-4443-a438-b2564c16f342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6750e23-369c-4cbe-8951-256136c14a0a",
        "cursor": {
          "ref": "7ebd1c5e-983c-4095-8e62-a0470d82bb0b",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d7b0f105-c334-4dd0-9758-33e712465382"
        },
        "item": {
          "id": "f6750e23-369c-4cbe-8951-256136c14a0a",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b13c92bf-e41d-4db4-ae93-751b7fdac641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "19261582-7624-475c-8a02-53586c0ae4c4",
        "cursor": {
          "ref": "19a114b4-35a4-45a4-a810-769da999413b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "95871e4d-95d8-44d0-b094-6850e8b96d97"
        },
        "item": {
          "id": "19261582-7624-475c-8a02-53586c0ae4c4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e0d42a17-8572-4eca-8e6d-a9aa23a896ce",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41bc8da-be42-45d3-8e8d-5cdf5ca38112",
        "cursor": {
          "ref": "b5d085f6-4ec4-4e2c-89dc-ccee771f06a3",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c3a34396-ddd9-4a38-ae3f-2048495c3b8d"
        },
        "item": {
          "id": "c41bc8da-be42-45d3-8e8d-5cdf5ca38112",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2df937ac-608a-4e66-bc0f-57df69fcdd21",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6d4d6b-7b80-420b-b2d9-55c7dfed25b9",
        "cursor": {
          "ref": "a857ad45-06a7-432c-9bae-cac1c53dc5ea",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "af3a30ca-4d3f-41a0-8eee-f5bf69d8acf4"
        },
        "item": {
          "id": "2d6d4d6b-7b80-420b-b2d9-55c7dfed25b9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "62ffc67b-fc36-4926-81c1-8dffae36bb64",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "42f5799b-74d5-41a3-8d31-fb7900ffcbe8",
        "cursor": {
          "ref": "f9459b29-52cb-471e-b28a-fd6cc1e9de11",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fc6c5825-744a-4087-83bf-e0150aec9b36"
        },
        "item": {
          "id": "42f5799b-74d5-41a3-8d31-fb7900ffcbe8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "3a74314f-26f4-4bbf-9b71-91189b79fee3",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e72d9013-ef7e-419a-a139-12e94039e207",
        "cursor": {
          "ref": "8f0bcfa1-103e-47d6-8e07-bec1385d6138",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f1d8362c-97fc-4982-8b9a-c02578a03c07"
        },
        "item": {
          "id": "e72d9013-ef7e-419a-a139-12e94039e207",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "cce9ef98-b367-4c3c-96b9-0f5eeff0a79e",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-09T00:35:15.914Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-09T00:35:15.914Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "3bf80724-f6d8-4663-8825-4c242a6116b4",
        "cursor": {
          "ref": "49e38203-5965-4b7c-be61-c095e60a35f6",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2235105e-28b8-4510-bab9-f551b9bc1cce"
        },
        "item": {
          "id": "3bf80724-f6d8-4663-8825-4c242a6116b4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a7d224f1-7904-4b90-8ff2-76ce1107082b",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85449d2b-e700-4b8d-a430-45c895bab4b5",
        "cursor": {
          "ref": "77b57653-c0e2-4bb9-9aad-33299823e622",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "aebc75db-3d61-437a-97f4-8eb00c58f65d"
        },
        "item": {
          "id": "85449d2b-e700-4b8d-a430-45c895bab4b5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "549cf713-365d-4a2a-a4a1-32f833eaff21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5fac1e-0fbf-4613-be6d-9637a6a68c8d",
        "cursor": {
          "ref": "4d4e56b8-69c8-4048-99b6-59f20fc3999c",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2578817c-76f6-4be5-ba18-b9815ab717ee"
        },
        "item": {
          "id": "4f5fac1e-0fbf-4613-be6d-9637a6a68c8d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d32b901b-40b4-4b2d-8d6e-a7aeee19dff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be26434b-069c-48c1-bd61-238624270ca3",
        "cursor": {
          "ref": "9e1ed2c2-813b-4deb-8af0-5f9d5c156d77",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "826f47a7-3378-4f11-b26c-c9b914c1500a"
        },
        "item": {
          "id": "be26434b-069c-48c1-bd61-238624270ca3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "937a9503-ee5e-4c67-89d5-ff04a9c569fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25ab880e-7e20-4d08-88e5-395d9aca23cd",
        "cursor": {
          "ref": "23e922e5-f4c6-40a8-8f2f-42e27aef7780",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e4eb9ec9-c927-4f1f-8e35-b6c3a404bad3"
        },
        "item": {
          "id": "25ab880e-7e20-4d08-88e5-395d9aca23cd",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a7192038-ed6c-4fa9-a8d0-15dd26fc4c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a564a97d-659e-4392-8cd5-57222391c59f",
        "cursor": {
          "ref": "ccdbc2f0-971f-4152-a6f4-64a715424f06",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e3f9a3d6-02f3-4e54-94b0-0ffe53804e83"
        },
        "item": {
          "id": "a564a97d-659e-4392-8cd5-57222391c59f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e262a19d-e676-477c-92ee-92776ca5b86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3408e088-1515-473d-ae04-607a1c287024",
        "cursor": {
          "ref": "cad4b2e1-d878-42f3-9cff-7d2cf749fca8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "10b1ed1d-3a82-4ca8-8928-4dd7d97420d4"
        },
        "item": {
          "id": "3408e088-1515-473d-ae04-607a1c287024",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9cdb0350-581f-43e1-bd62-52896959da34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5520370-f588-4cbc-84c8-089d95349be7",
        "cursor": {
          "ref": "12d76da1-4f43-4216-9f5c-d83ad868a490",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "1bac228a-32fc-4716-85d0-60a36a6be5b4"
        },
        "item": {
          "id": "b5520370-f588-4cbc-84c8-089d95349be7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6188fe1-a847-4658-be31-6ac7ad4dccbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad10c7b1-a77a-4b47-95cb-4a99e32ef615",
        "cursor": {
          "ref": "d98d99c2-b36f-4bf2-96af-676e8343d1c6",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "001b37ff-5fc6-4ebc-9f40-99e4c66c40b1"
        },
        "item": {
          "id": "ad10c7b1-a77a-4b47-95cb-4a99e32ef615",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e351176f-e6bc-4157-8019-fcccfe1f69b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87af5b29-a17f-4e4a-9529-35dc91da1093",
        "cursor": {
          "ref": "cd6504a2-9834-4101-9196-70dc2db8e643",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b0182378-5887-464e-8863-3297f5bd24a3"
        },
        "item": {
          "id": "87af5b29-a17f-4e4a-9529-35dc91da1093",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e695d760-e484-47de-bd23-db5ba60f4aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3866a3f8-1599-4bee-9c33-a692636968d6",
        "cursor": {
          "ref": "578bf816-6b70-49f9-934c-e5014b7dad5d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "662bda35-d302-49cf-a865-8e00d1546d4d"
        },
        "item": {
          "id": "3866a3f8-1599-4bee-9c33-a692636968d6",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "25b4695c-3832-45eb-9c83-a8c6174dabb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e82fb5-923a-4b9b-b173-706ed6cbe377",
        "cursor": {
          "ref": "9d3097b0-20e7-4495-91ad-28ea7511ef52",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c41c10a8-ade9-4eef-9730-7dcb4652b6e6"
        },
        "item": {
          "id": "e2e82fb5-923a-4b9b-b173-706ed6cbe377",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3b7a059d-bc56-4d90-be27-784e1691613f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f1861d-a7d2-4aa3-ae87-4a72bbaa44ed",
        "cursor": {
          "ref": "8a8c68ab-4417-48ea-a38c-d03eb012bd8c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e37b0d45-64ed-4de6-89c8-d3ce77f7aab4"
        },
        "item": {
          "id": "07f1861d-a7d2-4aa3-ae87-4a72bbaa44ed",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "167c274e-8a8c-4b75-9db1-9d0d58f43054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a3e8df-161e-43db-87e4-7d17d8ee5b0e",
        "cursor": {
          "ref": "eb529296-8c91-46ac-af34-8b6345a4198f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "205b8033-4374-450b-a3dd-722db62c0b00"
        },
        "item": {
          "id": "57a3e8df-161e-43db-87e4-7d17d8ee5b0e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "29459430-fa89-45b5-9ac7-cf251a550f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9821b267-9e49-4dab-9755-364fc7aa48e0",
        "cursor": {
          "ref": "ef1418a6-6902-451c-9a76-a5a4fc103554",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b3d11916-2b73-43af-be2b-479dcbd5fe44"
        },
        "item": {
          "id": "9821b267-9e49-4dab-9755-364fc7aa48e0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "90560e54-0660-40d3-b340-b60e4439ae8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3973664-c11a-4b5f-ba0c-3b91b7086168",
        "cursor": {
          "ref": "5231d389-1348-43bb-83b2-9369c7e1b101",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0d899c41-2d8b-48e0-b617-a94af9dc0843"
        },
        "item": {
          "id": "e3973664-c11a-4b5f-ba0c-3b91b7086168",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3c88cb41-4698-40ef-aa95-38d3677446f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84163e4-0504-4d86-be52-5780ec2b1a34",
        "cursor": {
          "ref": "0755e881-4c03-4366-831a-04dc7355c4a5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "56f02953-a7c9-4db4-ad0f-3f1ffcbf59b9"
        },
        "item": {
          "id": "b84163e4-0504-4d86-be52-5780ec2b1a34",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a92c4b58-5fe9-4f8e-a62e-090d709c2a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f7cef7-9d08-41bf-8d65-43b426295a30",
        "cursor": {
          "ref": "f3935037-ba29-41d8-aabb-b372fe2a66b2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1a7975a9-67eb-46a4-83a9-66701d136425"
        },
        "item": {
          "id": "53f7cef7-9d08-41bf-8d65-43b426295a30",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "40723f24-e1c8-4946-a044-b2cbdb599b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1544e90d-b406-4a4f-9140-59a3509f1e36",
        "cursor": {
          "ref": "8edbee63-2545-4e97-afd3-691de04989c0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2d4200e2-cf54-46f9-bc0a-f115fc8805b9"
        },
        "item": {
          "id": "1544e90d-b406-4a4f-9140-59a3509f1e36",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5ea13fdd-1570-45b3-b057-37b26f965403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbb0883-2bcf-42d9-bd30-d36a1d15fc30",
        "cursor": {
          "ref": "2a4722c4-1b20-40f0-b041-1c62556ef84d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6e4baceb-0d17-4dce-8003-54463c90093f"
        },
        "item": {
          "id": "3dbb0883-2bcf-42d9-bd30-d36a1d15fc30",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4d6fe449-1242-46e5-9254-521d9f1146ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccaedc3-0927-4acc-9344-ae6a2d606edf",
        "cursor": {
          "ref": "dd64f1ef-aadc-4058-836d-d7bc1ad4d7d0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e5f62686-c9bf-4b4f-827b-5a3c4cf0b0b3"
        },
        "item": {
          "id": "8ccaedc3-0927-4acc-9344-ae6a2d606edf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0f82de1a-b189-4634-8b62-bf13c931b606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf5b1d4-b778-4130-a4c9-d2f91eddd606",
        "cursor": {
          "ref": "ac68b05a-b631-460e-b4eb-d2a9ba53b968",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f167b5d0-82f5-4242-87ff-3ff81d72c138"
        },
        "item": {
          "id": "cdf5b1d4-b778-4130-a4c9-d2f91eddd606",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b4c9885a-bbdd-495d-96c6-335638abc37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7880332c-7d4d-4ede-8b89-f8363dcce394",
        "cursor": {
          "ref": "3eb3dd04-7dbe-4d9d-9eca-c003ff081662",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5153eca6-359c-4ca7-843d-846281f15303"
        },
        "item": {
          "id": "7880332c-7d4d-4ede-8b89-f8363dcce394",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a581f5fc-b856-452c-a507-e4034eb47ab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7e89d8-fec3-4d23-a5e7-f1815f3ef9d3",
        "cursor": {
          "ref": "092e9b6c-e1ba-4333-a91a-8a0920e69adb",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a2c4cf59-e089-4b5b-b9bb-9eaa2339cbf9"
        },
        "item": {
          "id": "1d7e89d8-fec3-4d23-a5e7-f1815f3ef9d3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56c17a89-1b0b-45a5-a9ff-9958d36bb265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b889f16d-23fd-4a8f-856b-597fedd2c117",
        "cursor": {
          "ref": "91d320a4-0d28-41c5-91fb-09c3f8bc2eeb",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "50908579-e5eb-4f0b-b9b7-022b32ea0770"
        },
        "item": {
          "id": "b889f16d-23fd-4a8f-856b-597fedd2c117",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "fbea52a5-157a-463e-ae42-80118471bac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65dbf945-d39c-4336-9fb4-2e3e1e1da896",
        "cursor": {
          "ref": "3716a31d-851e-42a5-8bc9-6eb00db51d5b",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b1e18872-85b0-4f4e-aae9-36fef3eae585"
        },
        "item": {
          "id": "65dbf945-d39c-4336-9fb4-2e3e1e1da896",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "860e0353-d869-41f1-9fe7-6ecb769c7429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c328e2f2-dc8d-4f86-bcf9-29ff641b12f8",
        "cursor": {
          "ref": "9abe9549-0cb4-49b1-9055-0b02818f7dcc",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0e55b907-8ecc-4b5d-9379-a88b03700c4c"
        },
        "item": {
          "id": "c328e2f2-dc8d-4f86-bcf9-29ff641b12f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6cfd158b-12a8-4606-a09d-964eec511f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6859a064-48d4-4782-9d42-22640332258e",
        "cursor": {
          "ref": "01652f64-e952-4fbd-a8de-7c9f7961347c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9158c7b8-ae09-40fa-b0a2-274f476cd1db"
        },
        "item": {
          "id": "6859a064-48d4-4782-9d42-22640332258e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3ea26da4-086b-48ea-b44a-f8d62b257a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c91fd44-7807-4fc7-81b3-1dca43dcda22",
        "cursor": {
          "ref": "801062d5-aaa3-4cc7-bd00-c986e890cb2d",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "90637d3d-bff5-49fc-bfdd-39c119a6c437"
        },
        "item": {
          "id": "4c91fd44-7807-4fc7-81b3-1dca43dcda22",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "60caa3cc-0c59-49ef-96df-40acad4ad27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ff10657-7bf5-4ee8-909f-25ec712e9f68",
        "cursor": {
          "ref": "193b508a-3bad-4242-b5be-77cb9c03dd4f",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "55a293e1-1630-43d9-8a6f-10f802654208"
        },
        "item": {
          "id": "7ff10657-7bf5-4ee8-909f-25ec712e9f68",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8c4f27ba-bffa-4cb2-bd77-63d7b87ce682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "589d3179-2413-43d1-8402-9fe03ac76498",
        "cursor": {
          "ref": "da883247-ab64-46fe-9e58-db46495bff75",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ab168cd-63a6-48b8-a9a2-ec4bfd8a6eca"
        },
        "item": {
          "id": "589d3179-2413-43d1-8402-9fe03ac76498",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7082b563-b944-433b-ba6f-d06051a54452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb821c8c-db37-4f71-9fae-644a27eabcef",
        "cursor": {
          "ref": "d0e1e254-8214-49d2-ba17-971c1dc72854",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a1d5141f-346e-4e24-9597-847e4f3930a0"
        },
        "item": {
          "id": "cb821c8c-db37-4f71-9fae-644a27eabcef",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "18a7804b-8e6f-4a84-b814-168c324a616c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f6a2df9-59f8-43bb-8b31-dd70399905a5",
        "cursor": {
          "ref": "9b4130f8-59a2-4cce-9d4a-e84ff778a9c8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e0ad9e15-c877-4e78-a26d-27c59224b736"
        },
        "item": {
          "id": "8f6a2df9-59f8-43bb-8b31-dd70399905a5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "54ce6c1f-f4e0-4e64-9e56-3213e5367443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c21a08b-8e0c-4c93-b971-2a7772869510",
        "cursor": {
          "ref": "92a32759-a654-4ccf-bdd7-a9b6712de19c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f023ed33-456a-4914-84d1-2121dfda378a"
        },
        "item": {
          "id": "5c21a08b-8e0c-4c93-b971-2a7772869510",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8b87221c-4244-4153-8d20-9d4f284122b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e586c69-ed25-4f0a-9747-5a9b3dce0dc1",
        "cursor": {
          "ref": "0e45edc6-c2e8-4108-9005-f51a19fc25d6",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cef8731b-871a-4257-b6c4-a0966dc9352f"
        },
        "item": {
          "id": "7e586c69-ed25-4f0a-9747-5a9b3dce0dc1",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1be6871e-cf7c-4888-bdf0-a09afcf72180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e406640-ca60-488a-8b5b-0dede24b06a7",
        "cursor": {
          "ref": "6aa0cfb6-c368-41a5-9274-1c97a9286c4d",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4f761f85-09f1-4776-8a18-e1ed59a4f12a"
        },
        "item": {
          "id": "7e406640-ca60-488a-8b5b-0dede24b06a7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cd7c5662-3af0-463d-be48-96e0d81036e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c3bd15-8875-453b-8580-ad4a3e73d5af",
        "cursor": {
          "ref": "c4195ff5-f48b-4ba5-8656-b3d9bf7f998a",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d9e2e392-a372-4f54-9a18-3182763523c0"
        },
        "item": {
          "id": "c2c3bd15-8875-453b-8580-ad4a3e73d5af",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "11f8d63f-b557-4acf-9804-eb9003299ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73c824d1-2564-449e-9fb9-440b7a0652e8",
        "cursor": {
          "ref": "1f4a492c-8f11-4472-bcf5-a805c8c85c61",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "43ca0e14-b3e3-47f4-bd85-5d1134d41b88"
        },
        "item": {
          "id": "73c824d1-2564-449e-9fb9-440b7a0652e8",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4cf6acd2-6041-441a-b42b-d8b1faadcb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab84598-7b2f-413d-aae1-d868c011aaf1",
        "cursor": {
          "ref": "297df4ff-3000-47d9-9d87-75953c9a8825",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "61de3a61-0e51-4a18-8619-abf4478ede54"
        },
        "item": {
          "id": "4ab84598-7b2f-413d-aae1-d868c011aaf1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "617649ff-fe7a-4f00-af66-57a49ed46e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb8da57-dada-423b-be2d-6df56b888c95",
        "cursor": {
          "ref": "e6b0abd0-296a-4cbf-b36e-455036c4c19d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f1e91e83-1cae-4587-adab-9879825d56d6"
        },
        "item": {
          "id": "3bb8da57-dada-423b-be2d-6df56b888c95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b992d21d-bd48-45f5-84dc-a3e322aa7b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab6cbc9-1eba-45ec-bac0-5f4c6552ffbf",
        "cursor": {
          "ref": "06672b28-de8e-4055-94d9-5488088897b9",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9157dae2-034f-4841-bb41-d243b0b234f7"
        },
        "item": {
          "id": "dab6cbc9-1eba-45ec-bac0-5f4c6552ffbf",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "43abbaaa-5032-43dd-9e3b-b33a8d06024c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4fd3c6-248f-4916-97ca-e0fa2f55d6be",
        "cursor": {
          "ref": "22dba273-158b-4307-9d1f-dfc22fea3524",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "21fbdf67-45a4-4889-aa4a-039cbefaa481"
        },
        "item": {
          "id": "eb4fd3c6-248f-4916-97ca-e0fa2f55d6be",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1ae15147-daa7-481b-89aa-e09e8dd4577a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35127c61-ea0a-4dc9-b52e-be79ec0790c7",
        "cursor": {
          "ref": "1e45dc56-0c1e-423b-9305-535f35f689ae",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2bb7e889-924c-490e-a4cc-8a4e51f6a34c"
        },
        "item": {
          "id": "35127c61-ea0a-4dc9-b52e-be79ec0790c7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ed9a5c20-7260-41f9-9039-f9058e7c3988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa2210e-4b93-433b-82ff-ed68c184dc3d",
        "cursor": {
          "ref": "15060ea4-a8d4-4b02-9cc2-5d7517f8d34b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ffe3831d-34c0-43e9-8042-b932e21b826f"
        },
        "item": {
          "id": "aaa2210e-4b93-433b-82ff-ed68c184dc3d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b24265fd-2852-45aa-a370-411aa24f2c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cdbed8-73e0-40d2-ae0a-011c8d72e97f",
        "cursor": {
          "ref": "8069f90f-79da-4727-b566-0edb7f9b12de",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6bc68111-7c5e-4d38-a758-e55e1b37345d"
        },
        "item": {
          "id": "72cdbed8-73e0-40d2-ae0a-011c8d72e97f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a2d5250d-e65b-456f-89d2-7a261456c9aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737f0549-7b8d-4f02-92df-c766fa3bf8ee",
        "cursor": {
          "ref": "7ea24ba8-c205-4835-805c-3c0e9fb19946",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cb460f15-f75a-4ed3-86c9-e9cb0f1d1b39"
        },
        "item": {
          "id": "737f0549-7b8d-4f02-92df-c766fa3bf8ee",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3981e05c-0ce9-48ff-9601-c8afcfdda179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7b0dc9-d3e2-4758-b11c-82addb951250",
        "cursor": {
          "ref": "9046d551-fd8c-4fb5-ad18-13c99a01305e",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "cb13a975-36a3-4aee-a0f4-6364a5981c3d"
        },
        "item": {
          "id": "fb7b0dc9-d3e2-4758-b11c-82addb951250",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "adcec41e-6b02-4573-8434-ab7ac1f97475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a07004fd-d04f-4cc2-a7e8-34d38026fdfa",
        "cursor": {
          "ref": "fb5540b3-d06d-40e5-b395-247a7b2f709d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f95e3ca8-2829-4e6d-9e83-609ab18fa839"
        },
        "item": {
          "id": "a07004fd-d04f-4cc2-a7e8-34d38026fdfa",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f967f176-3195-444a-bf25-b0e427843171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2220115-9a62-48ee-83be-268847795e42",
        "cursor": {
          "ref": "f39df8b5-c8cf-438c-9f65-229ebddd14d0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3e8ef581-9fd2-40dd-89be-976f5ecd2362"
        },
        "item": {
          "id": "c2220115-9a62-48ee-83be-268847795e42",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "622425bc-0c5e-4764-9ad6-5c8ad2e4e6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d058dfd-7675-4979-9e9f-910d7958be20",
        "cursor": {
          "ref": "6f7a9a55-5d00-4877-8363-a9783cbcaa94",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7abd0a47-0a74-4c40-b6c4-3b3a60c8588a"
        },
        "item": {
          "id": "3d058dfd-7675-4979-9e9f-910d7958be20",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "689c792a-27a2-4946-bc93-df5d090882bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e9ad0e-44c5-4f27-b05c-b2e997c1e0a5",
        "cursor": {
          "ref": "eb8bd816-ee44-44d0-8aa8-f4dc8e0896aa",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6257bb34-694e-4685-89c1-99d402e4a689"
        },
        "item": {
          "id": "b6e9ad0e-44c5-4f27-b05c-b2e997c1e0a5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9b273302-16eb-4dd7-9c53-e4a58962a8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ab0164-4491-4942-a2f1-d0f5d94b0cbc",
        "cursor": {
          "ref": "746c1484-7041-42ba-901e-ff1a23e413d7",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fc036633-ba27-4af4-a442-d7f679678946"
        },
        "item": {
          "id": "c4ab0164-4491-4942-a2f1-d0f5d94b0cbc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e422a91f-d6a9-4b46-8944-5647bdedc6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95d1d1d-cb77-4e7d-824c-1fcb725e3f99",
        "cursor": {
          "ref": "12a99e3f-8abc-41c5-a6fc-39c882e1cc19",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "78abb77e-4553-4ed9-8bb7-10f6f246d005"
        },
        "item": {
          "id": "f95d1d1d-cb77-4e7d-824c-1fcb725e3f99",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bce270b8-54a0-4f2b-94a0-86d28757edfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a23ff5ff-1236-4b50-bcec-8d8a301628af",
        "cursor": {
          "ref": "ac12b53d-f758-46ab-89cf-c04969388fe9",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "36a30df8-e71b-4798-b114-fe3366c208ab"
        },
        "item": {
          "id": "a23ff5ff-1236-4b50-bcec-8d8a301628af",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7cb36b2d-274c-41e2-8580-aef570e8bc21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda17a8e-a100-4395-8404-54f5b3e01a90",
        "cursor": {
          "ref": "365da144-e208-415a-897f-bc984996ffa8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "378cf23a-616a-4f0e-8c99-1a030c2ec5a6"
        },
        "item": {
          "id": "cda17a8e-a100-4395-8404-54f5b3e01a90",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "948e99de-98c5-4547-ae17-e34701a57574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b69e7e8-d7c5-44ac-8586-8faa3cec5513",
        "cursor": {
          "ref": "53e2b988-5908-4d60-906d-2f117f0980ed",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "40474e4b-6292-41b2-b8d0-e0756851081a"
        },
        "item": {
          "id": "0b69e7e8-d7c5-44ac-8586-8faa3cec5513",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "488fde27-cb59-4061-b2a6-8b09bf97acca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a06b84d-fb10-4853-9fd4-ec39564a15ac",
        "cursor": {
          "ref": "a28416b6-434d-442e-989b-b81da1656221",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "efddf85a-a3e5-49b9-8747-30c370df785e"
        },
        "item": {
          "id": "1a06b84d-fb10-4853-9fd4-ec39564a15ac",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "214d996e-1e83-4f3c-b1a5-b55eb7e2a0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065c6f1f-ca7b-4088-9e89-27485bcb7fa7",
        "cursor": {
          "ref": "7c03a2ed-1031-4951-abad-84437c233689",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "62e70245-23ad-4ebd-becb-e17ead1f2a4a"
        },
        "item": {
          "id": "065c6f1f-ca7b-4088-9e89-27485bcb7fa7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1f59a86b-d96e-4d1e-9894-19da5feeaa9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "240d1e3d-79a7-4b63-9d98-814a0f57e2bb",
        "cursor": {
          "ref": "2f7861ae-b6e2-4500-99fc-bb99c22c483d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4fbd9d16-d13d-4010-9818-dcd44a25b1b2"
        },
        "item": {
          "id": "240d1e3d-79a7-4b63-9d98-814a0f57e2bb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ced88598-20a3-4538-8799-b88339ab0b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817af7b6-96fa-4e89-a6fd-daed7324e63f",
        "cursor": {
          "ref": "21cd92e7-847d-4694-8977-d0bcec5d4dee",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "656ea1bf-9bd2-4692-8e9f-3d28b5adf5ad"
        },
        "item": {
          "id": "817af7b6-96fa-4e89-a6fd-daed7324e63f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5fc5e3c5-8573-418a-99c8-68e42c5c6dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f1344f-2410-4812-aa3b-98bd75567c3a",
        "cursor": {
          "ref": "40f58d57-d196-4dd9-adfd-dc6769cf8359",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a790c281-8176-44b9-ab44-d5cef671f515"
        },
        "item": {
          "id": "f5f1344f-2410-4812-aa3b-98bd75567c3a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3119833c-bdd1-4829-8d59-530a4ca50d99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "820ab67f-85f9-4fdf-a609-25011e490049",
        "cursor": {
          "ref": "6e7a1c49-a0ac-4ed0-bd8f-2eff33a098ee",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e25dd538-7e9d-4a77-aba0-e4c91b593d80"
        },
        "item": {
          "id": "820ab67f-85f9-4fdf-a609-25011e490049",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "322d6a4a-30a0-4d2f-a919-c474d3975880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50827ac-ccdf-4fdb-9c1d-302cb87c2b72",
        "cursor": {
          "ref": "fd6fc6a0-8186-4835-834c-c5f746c1de24",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "54e8c4d3-5f2f-485d-aa54-d101fca740be"
        },
        "item": {
          "id": "f50827ac-ccdf-4fdb-9c1d-302cb87c2b72",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "965bc815-d1df-48a0-a9b8-9356fce30c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f80cf7-94ca-4618-b2e6-705e3146c59a",
        "cursor": {
          "ref": "cec15ce0-414d-4e54-978c-871b799c8239",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7d26b193-d918-402c-b7eb-ec4f79ed89bc"
        },
        "item": {
          "id": "e1f80cf7-94ca-4618-b2e6-705e3146c59a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f3195539-d220-4655-8edf-939eec9cec3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc3797e-b92e-4d32-9869-b1d01e051784",
        "cursor": {
          "ref": "7ed6a330-7852-4bc6-8cf0-51d278e9d037",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "54a5c6f8-6aa3-4918-bb13-7affae670505"
        },
        "item": {
          "id": "dbc3797e-b92e-4d32-9869-b1d01e051784",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3c250ddf-f043-4a92-b993-e099862d302a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76d8bee-e157-4fc2-a98c-6cb2e1faf918",
        "cursor": {
          "ref": "baa634bf-84fd-4e20-bcf0-5aab4b1348e4",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "83a827b8-a771-43db-bdcc-971309eb540c"
        },
        "item": {
          "id": "a76d8bee-e157-4fc2-a98c-6cb2e1faf918",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "09018b06-01b5-40b1-a2f1-b125e0701a66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94feb1bb-58a5-4d14-980c-80e6bf8aad79",
        "cursor": {
          "ref": "ee790520-54cd-47b1-8f9d-d95539289135",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ac6c2932-07e0-43da-9797-37ac20499eb1"
        },
        "item": {
          "id": "94feb1bb-58a5-4d14-980c-80e6bf8aad79",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a1d40819-4d21-4d38-887a-6727c23ea497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5895d2bf-4337-445b-ac7b-b4661bec390f",
        "cursor": {
          "ref": "d577315d-5621-4c41-a1a5-9bbc1c8ff82b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7a2954c4-19ca-4aba-ac8c-074570f870c7"
        },
        "item": {
          "id": "5895d2bf-4337-445b-ac7b-b4661bec390f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9848e0ff-d621-4c7b-acb3-c94125e30bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11282ba1-cc75-476c-9184-cd33008ebc04",
        "cursor": {
          "ref": "9aa2f05c-e8e9-44fc-b006-fbee18a44782",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9eef5572-9a98-4298-8e98-62f75237f3b2"
        },
        "item": {
          "id": "11282ba1-cc75-476c-9184-cd33008ebc04",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "793fb5f1-3cab-4553-b11e-de010c71dac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0c5d3b-3a9f-45e9-8dea-7123f31415bc",
        "cursor": {
          "ref": "b23b1c84-d7da-4277-929e-56a5c4e9e527",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9fd6fb78-040a-49dd-b6a1-c4f74dff5e78"
        },
        "item": {
          "id": "9c0c5d3b-3a9f-45e9-8dea-7123f31415bc",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6e2d7d2f-3876-473a-9be0-54a855119b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61557e90-e6bd-4300-a7f3-5a06d3f1db7f",
        "cursor": {
          "ref": "4d890c7a-f971-47ec-8f65-cc826f667e10",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3e092204-8ae4-4851-a334-13b85e495725"
        },
        "item": {
          "id": "61557e90-e6bd-4300-a7f3-5a06d3f1db7f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b5ce2334-6242-4a6b-a6d7-60716ee7f2fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "400df477-0e5d-4faf-9cb0-ea7ee3c5bac4",
        "cursor": {
          "ref": "4c9b8dd5-8b03-4602-838d-31b9e7d7e9cf",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9a61c1e8-b24b-4384-ae54-c78af1e38a12"
        },
        "item": {
          "id": "400df477-0e5d-4faf-9cb0-ea7ee3c5bac4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4eda9490-fbbc-4242-9035-a2c5a244e533",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8240e79c-fa12-4a58-91f9-9d25b8a8cb4e",
        "cursor": {
          "ref": "9be2b88c-a4e2-40bc-a421-f532aebbebce",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "279363de-de75-4868-9548-defd70c88d50"
        },
        "item": {
          "id": "8240e79c-fa12-4a58-91f9-9d25b8a8cb4e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2d3a58bc-c0e6-4a65-96cd-5882f871d150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1278ce9f-f46d-4dc1-bf4e-adc1e1a7a0ae",
        "cursor": {
          "ref": "dfb4bc51-ad2b-4349-98f3-39eba8b66499",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8124a22e-0925-4505-ad5f-240805fd74d0"
        },
        "item": {
          "id": "1278ce9f-f46d-4dc1-bf4e-adc1e1a7a0ae",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "89b60db1-349b-49da-86e9-596b3474adbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230b4a0b-d388-4a0f-9750-6c075f26a05d",
        "cursor": {
          "ref": "2e5f7ff4-fb55-4382-a8dd-128c56d419f2",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "987ebad2-c787-44a3-8079-3260e8ce7ebf"
        },
        "item": {
          "id": "230b4a0b-d388-4a0f-9750-6c075f26a05d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7abc3cf8-dcf1-4086-85ac-190c9e351876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dc0da2-a949-4514-af56-f590fab87311",
        "cursor": {
          "ref": "11f6b934-bff4-4e06-bef7-aa4f14f00ca8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1a8afe7d-5b3c-469f-8ac8-8dcaca1237e6"
        },
        "item": {
          "id": "57dc0da2-a949-4514-af56-f590fab87311",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6940ba41-19a0-40f8-961d-f5d338ce5b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3524658-3ebe-45e0-a09c-9796f79e4e7a",
        "cursor": {
          "ref": "ca4e2570-e6f9-4cb2-9889-3cd5007d9942",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "16bf7cbd-a682-457d-b749-86d0bbf68430"
        },
        "item": {
          "id": "b3524658-3ebe-45e0-a09c-9796f79e4e7a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e3c9af6d-0175-4ec1-8dfc-37762dffc17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145f14a6-8f8b-4b49-b5a6-5571a549321a",
        "cursor": {
          "ref": "0deaa68c-f78b-4e56-8955-37c74d4cd707",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5cbc76f-0e8d-4ca5-86de-a533a9fd6177"
        },
        "item": {
          "id": "145f14a6-8f8b-4b49-b5a6-5571a549321a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9a82c1b9-788d-4ac4-a7d9-0fc91edb1646",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3c7dfd06-5642-49f1-ba71-60cc13995ab4",
        "cursor": {
          "ref": "440e3a74-49a5-4aee-9158-e37beb93877c",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1418b32c-9341-4664-87a4-b1a8d017301c"
        },
        "item": {
          "id": "3c7dfd06-5642-49f1-ba71-60cc13995ab4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d1da0f4d-6d1b-46ec-9320-9088366a22dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76861bca-7037-4478-9fa4-c516acbe2fbc",
        "cursor": {
          "ref": "11ff40e9-08d5-40b5-a480-5fb9eb24bb86",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a8649d8e-4b4a-4fda-b534-b935482604b8"
        },
        "item": {
          "id": "76861bca-7037-4478-9fa4-c516acbe2fbc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d20ae384-8ce9-4767-b718-f0b0065adedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44fa4d6-2004-4624-b57b-4004a6642fa3",
        "cursor": {
          "ref": "97e1891c-a346-4c8f-808b-bdff61e52f99",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bf3280a5-43d0-4de1-8f8c-f6b29e9edf8f"
        },
        "item": {
          "id": "c44fa4d6-2004-4624-b57b-4004a6642fa3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0fea505a-2811-4e01-97b3-c78bab5b134b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb287fc3-0bb1-4865-984f-31eb5ddd17a8",
        "cursor": {
          "ref": "71c78f2f-c854-4443-8af8-4cd84153cd21",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a44539ff-fa87-46bd-ba43-0fe3029e8f52"
        },
        "item": {
          "id": "eb287fc3-0bb1-4865-984f-31eb5ddd17a8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e6482072-cb1f-4292-b33b-b474c98f378d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697f1be2-2ff7-43a5-9bd6-fd5a94be3165",
        "cursor": {
          "ref": "f34d3eab-3377-4c7d-a125-3fc4a1864afc",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e8f03788-448d-4721-b80d-ffe06862aeee"
        },
        "item": {
          "id": "697f1be2-2ff7-43a5-9bd6-fd5a94be3165",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a2bc1d73-6e9b-4202-9840-d0b7ef3c5624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081f4693-7d87-4276-a911-ed37049f5453",
        "cursor": {
          "ref": "5aac6b65-1eb7-4240-952f-22cd8d2569e0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ccfd1ef0-ab18-4e0f-a103-34e43dbe776a"
        },
        "item": {
          "id": "081f4693-7d87-4276-a911-ed37049f5453",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "db430d15-a4e8-4843-9e6f-35270bddcf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7bba14-e456-47d6-abfd-007e524ae03b",
        "cursor": {
          "ref": "57731594-28f8-415a-b07e-a638c2bceddf",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "480bc389-6277-46dc-8118-f3f7a8407873"
        },
        "item": {
          "id": "ad7bba14-e456-47d6-abfd-007e524ae03b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "090fb414-9c3f-4872-9a14-ebf715160f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4046134c-0a0e-4e1e-8487-fbe9ab2d42a7",
        "cursor": {
          "ref": "9f484484-607a-4b23-89ca-12081680f618",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "42db5531-2242-4cb1-8057-e5e908ebd290"
        },
        "item": {
          "id": "4046134c-0a0e-4e1e-8487-fbe9ab2d42a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f310c674-9536-4f67-b790-e1c0c2139148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f18f90-38e5-4ea7-8dbf-a0bfa19b3b1f",
        "cursor": {
          "ref": "1035eb58-8972-4321-99ed-df3218b28786",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "039c6a6c-9ad9-4c2d-a8d9-6026a08ae4f7"
        },
        "item": {
          "id": "96f18f90-38e5-4ea7-8dbf-a0bfa19b3b1f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a4709d94-926d-459d-8864-aaa2cfa060b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c3989b-84eb-4a45-ac3d-cba6b777f7bf",
        "cursor": {
          "ref": "ee246dfa-49ef-4ef3-88f8-39ab21faa60b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a495bd7b-4d4e-4d30-b58d-fcfdb0128b2f"
        },
        "item": {
          "id": "e6c3989b-84eb-4a45-ac3d-cba6b777f7bf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "46e44e93-ed64-43fd-bfdb-e804810b1edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac799bc2-fb83-49af-a5c1-bafab2ab7143",
        "cursor": {
          "ref": "14b9f633-6d34-46bb-80a0-00cec332f13e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e46f0d90-5c3c-4f0c-ae4e-cfd20abb274c"
        },
        "item": {
          "id": "ac799bc2-fb83-49af-a5c1-bafab2ab7143",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2ada59bc-eb86-45dc-b747-415af6e2e4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e5622a-7b17-4959-992b-eb6503aa1b6f",
        "cursor": {
          "ref": "da141713-926d-4cce-ad9a-090fce455e34",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4808902e-3d1b-4b77-bd34-7884b9c4594a"
        },
        "item": {
          "id": "90e5622a-7b17-4959-992b-eb6503aa1b6f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "37256480-9e5d-428a-910a-3e7b814cb0e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d9a9db-8f6d-439c-8606-05678558c83a",
        "cursor": {
          "ref": "1dcab6f7-1b1c-4a28-9a6f-36eddadb183c",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "257f171a-014d-483e-a042-d4f2d7b04f94"
        },
        "item": {
          "id": "45d9a9db-8f6d-439c-8606-05678558c83a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8378c27a-21e6-418f-95e4-109b891b5736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345ecc09-a270-43d5-a801-599ee483ca48",
        "cursor": {
          "ref": "9e4860ee-4352-4ab6-9563-b430bc92992b",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "81b4fbff-5adb-4513-915e-7ed37441e164"
        },
        "item": {
          "id": "345ecc09-a270-43d5-a801-599ee483ca48",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d7d33efe-908f-416c-84d8-e8aeca645ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5123c8e5-521c-4d6b-b2e4-d56d77ed1f2b",
        "cursor": {
          "ref": "72a62c43-60da-43f0-b448-54726309a78f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "23baa13e-8558-4dfe-80c4-1102b94a0166"
        },
        "item": {
          "id": "5123c8e5-521c-4d6b-b2e4-d56d77ed1f2b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "869e3904-0c21-4932-ab7c-019e1a80c95d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5fe710-f537-4822-9f18-e01e149dadc1",
        "cursor": {
          "ref": "ef00ed81-cbf3-489b-b7c4-46ebf842b339",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f3941388-3e03-4c02-a8f1-d5202105a8e8"
        },
        "item": {
          "id": "8e5fe710-f537-4822-9f18-e01e149dadc1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6ce6a907-8172-4c48-a0ed-2566112dbf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049985f7-c555-4966-89b9-82c1a4d7df4a",
        "cursor": {
          "ref": "7525e2f4-6934-41c1-97fb-11fba41ce4eb",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e3f077f3-1d7e-4d3f-9d20-f20730c8cbb8"
        },
        "item": {
          "id": "049985f7-c555-4966-89b9-82c1a4d7df4a",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e98a4242-696b-4cf1-a810-6f32d0baac16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "093508d5-c785-4b30-b580-9dd499ddb6fb",
        "cursor": {
          "ref": "a289c05c-2b62-4f2e-91b2-1ca0ab3157f4",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6f80a126-3bd6-4e3a-b56c-2db9dd8096b1"
        },
        "item": {
          "id": "093508d5-c785-4b30-b580-9dd499ddb6fb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ede0b178-3297-4830-862e-bf9254857f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6aa5039-3a6d-48f3-b1ac-6eccf771f880",
        "cursor": {
          "ref": "4e736497-44a9-4e67-a503-8fd86506dba3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ff428984-5889-4823-8c7c-793c72f915af"
        },
        "item": {
          "id": "a6aa5039-3a6d-48f3-b1ac-6eccf771f880",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "eb14c607-1868-44ef-bdfd-b219346db603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496197c6-4bff-4c81-979e-274ce99a3ce7",
        "cursor": {
          "ref": "c2f16589-b6b7-4f12-828b-4417a84230dd",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3ba94acf-5331-4b36-8b6c-9253ebe8a357"
        },
        "item": {
          "id": "496197c6-4bff-4c81-979e-274ce99a3ce7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e98c78ea-c06d-4e06-8822-2e77f006dce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7ae820-5641-4283-be66-f1f64d0d792e",
        "cursor": {
          "ref": "1d2cdbbb-4547-4001-80c4-9c72d458bf1f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "941219c7-d59b-4aa8-9068-a386aa59da26"
        },
        "item": {
          "id": "7e7ae820-5641-4283-be66-f1f64d0d792e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f1ec6ecf-84f8-4744-bf1b-7b6c54513b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8c7909-4da9-463e-8354-924adeec79b0",
        "cursor": {
          "ref": "50e7f5be-1b15-4745-8264-a483946dadff",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6883e292-cc4d-4d1e-aa5f-38b05a2bd656"
        },
        "item": {
          "id": "fa8c7909-4da9-463e-8354-924adeec79b0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3f372621-fe19-4e66-a91a-e80874d2991f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad2d40b-c9ee-4777-9671-b0dc84328537",
        "cursor": {
          "ref": "7da3da5d-5453-4b97-9d97-c6417ac59986",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "809b5c5d-bc7b-4253-b7fa-12e386a451ad"
        },
        "item": {
          "id": "0ad2d40b-c9ee-4777-9671-b0dc84328537",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0327ef2f-aafb-418a-82c7-8589e6ffdf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff69224-829e-4b61-bb90-0b2c2e9db593",
        "cursor": {
          "ref": "d9db6b59-9ff3-4f3d-8334-aad8a82cc139",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5dfe5e8c-6343-4532-85af-0b85a9c5eee2"
        },
        "item": {
          "id": "6ff69224-829e-4b61-bb90-0b2c2e9db593",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "1fc2ad39-8d9c-4097-a323-ccbcf0898227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae0d5de-28ad-4512-8530-3edcb7880ec8",
        "cursor": {
          "ref": "7e8967a5-edd9-4677-b941-4178389e9485",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e683d6dd-9e13-4af5-969a-f99c95c9f86e"
        },
        "item": {
          "id": "0ae0d5de-28ad-4512-8530-3edcb7880ec8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bb16f2f7-41d2-431a-b539-4f6a9f1d213f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6a6ca7-1bd7-4917-8cee-1547aa807826",
        "cursor": {
          "ref": "7f18190f-26ba-406e-8196-baad91287c2b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dc06bd29-bdf8-45ed-8bbb-e0267abc950e"
        },
        "item": {
          "id": "9c6a6ca7-1bd7-4917-8cee-1547aa807826",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bbd084e1-00ca-4a8c-8624-1f3cf591ced6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394856ad-0ec3-4ffd-b83d-3327e565f658",
        "cursor": {
          "ref": "a76adc25-46ce-4590-a5f8-73bbdc86886c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "243ae7fe-c5ba-4e88-aa89-a0d03b724aca"
        },
        "item": {
          "id": "394856ad-0ec3-4ffd-b83d-3327e565f658",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8030818a-7f18-4c12-8205-e843334c0843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b87589-57ed-491f-946d-e33c75ebbb83",
        "cursor": {
          "ref": "953819d9-3989-4369-b660-b5fb6447c521",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "72e00670-a19f-4576-bd9f-a14ad555347d"
        },
        "item": {
          "id": "a4b87589-57ed-491f-946d-e33c75ebbb83",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9ed64cfd-cff9-44ef-a57f-8da14a27bbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf2123e-de84-466c-9ffa-195792b38edc",
        "cursor": {
          "ref": "083fd1cc-2b28-4280-83d2-67b317ef6355",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "231c92c4-3649-4bb1-8e99-32f43ae20036"
        },
        "item": {
          "id": "8cf2123e-de84-466c-9ffa-195792b38edc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5a2472fc-238e-4249-a15d-d1ab6969a2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0e30f5-a5f3-4b8b-9701-3b24e2bf5d34",
        "cursor": {
          "ref": "69afc6bf-a33d-4031-9995-cb856804e61a",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2b472c7b-372b-49d0-be62-e6978673c4be"
        },
        "item": {
          "id": "9d0e30f5-a5f3-4b8b-9701-3b24e2bf5d34",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b2cb80f1-382c-4a5e-ab6e-f47ef49402c3",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9ce7480e-96c1-4d2b-86b5-69e8d9c89d97",
        "cursor": {
          "ref": "611547ad-fa02-4943-815f-95853fb3fde4",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bf915c0e-9c40-4d5f-9c47-244c78399e6d"
        },
        "item": {
          "id": "9ce7480e-96c1-4d2b-86b5-69e8d9c89d97",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1278b4f7-8e50-4bdc-a77d-c56ea17c4039",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "18937579-1bd7-4a80-a110-ae53306680f2",
        "cursor": {
          "ref": "639965ee-6a41-471d-ad9b-ab56bcf4e35e",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "fb1efa5d-ff51-422a-9856-0038a9d67e19"
        },
        "item": {
          "id": "18937579-1bd7-4a80-a110-ae53306680f2",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d4d65ded-641e-4664-994e-b7aa47c1acc3",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7abaf89d-216b-49fc-ae43-37ff405ede5c",
        "cursor": {
          "ref": "6e208179-d928-4986-a2c2-fa99e1955720",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cccd0507-d876-4411-9bc4-017227a06092"
        },
        "item": {
          "id": "7abaf89d-216b-49fc-ae43-37ff405ede5c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "045008b4-3658-4fa5-88d9-7a92ec3a5404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c246da8d-4386-4aa7-8bc7-26769b68fb36",
        "cursor": {
          "ref": "49e1d856-8eff-4ad0-b3e7-d8b910d0f5b6",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "36cbc1f2-db28-4bd1-a931-a1b378b5c4f2"
        },
        "item": {
          "id": "c246da8d-4386-4aa7-8bc7-26769b68fb36",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4824d6c0-16a4-465c-96fc-4596474cf23b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0e4580a8-bd3c-4e1d-8a57-a04fe89b5e6c",
        "cursor": {
          "ref": "5a3e0994-3457-447d-be1c-e041012fbae9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "de2ceaf2-9b33-4d13-bee3-997893afa6f3"
        },
        "item": {
          "id": "0e4580a8-bd3c-4e1d-8a57-a04fe89b5e6c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "525ae911-7af1-4a12-a128-223750c2ef03",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7c8cfc56-f96e-4e01-9c01-4211d2e306f4",
        "cursor": {
          "ref": "18c1bbd1-05b4-48ab-b47b-da017050c232",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a8e9d990-1094-41b6-b2d6-1fe4ea8cb4b0"
        },
        "item": {
          "id": "7c8cfc56-f96e-4e01-9c01-4211d2e306f4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f087d434-09a5-4234-b63e-1ba86b513c8f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "293b2452-c7d3-49a9-a68c-9847a1c633b4",
        "cursor": {
          "ref": "62b7a7da-ef04-477b-9163-637360915f3c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "768dbc31-662d-4d76-99eb-b64ea01d368e"
        },
        "item": {
          "id": "293b2452-c7d3-49a9-a68c-9847a1c633b4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0dae4589-53bc-4628-9855-d8d7efdb5371",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f0d38001-60f3-46e4-a4d9-653b58781b2d",
        "cursor": {
          "ref": "9e089ba8-ad32-45b7-bd48-382a5298ba3f",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1415a443-1e44-4647-8614-e4a69954a2a6"
        },
        "item": {
          "id": "f0d38001-60f3-46e4-a4d9-653b58781b2d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "db2ce6c0-539f-4073-a4ca-ebd1cbb35efe",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9fb004d3-3881-48c7-b9c5-b4bdd3426f18",
        "cursor": {
          "ref": "00fdd6a2-3910-4237-a762-f38189e2e8c5",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "101f5685-9982-4efe-a13a-78e35ab8ff82"
        },
        "item": {
          "id": "9fb004d3-3881-48c7-b9c5-b4bdd3426f18",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8d1d0e4d-6816-40e0-920c-43719d2a34c9",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9f9d61a3-da76-4527-8b7b-5d8cb428c5df",
        "cursor": {
          "ref": "95923fbb-760a-4f75-b36b-7c9e4e7d90d9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0971d105-1e40-4db2-9741-d7e1b8e4e821"
        },
        "item": {
          "id": "9f9d61a3-da76-4527-8b7b-5d8cb428c5df",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "83237022-74ff-4a37-bd57-291a0edeab9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8beb89-b531-444b-993b-69622e706ae7",
        "cursor": {
          "ref": "284b02b3-cc39-4844-8466-817f8fb90f11",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "26811611-ad3a-4a03-8668-33a5c2d93d25"
        },
        "item": {
          "id": "ed8beb89-b531-444b-993b-69622e706ae7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cacfb6d2-f403-4822-8ad5-8b4382a4167a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531da670-3025-4a2c-8573-713e455908b4",
        "cursor": {
          "ref": "09ea3893-6bb9-4c60-a3f0-5eacbf7a0021",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "49224435-99d2-47d2-843a-aa13401d61a3"
        },
        "item": {
          "id": "531da670-3025-4a2c-8573-713e455908b4",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "aee1e6ce-2eb6-457e-aaae-7a009e0596da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "118e0617-f850-4033-a24d-433fecc546b4",
        "cursor": {
          "ref": "341565b2-fb06-4d3c-a02a-e381be617b6b",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "65ea3475-10b8-4db7-85e3-87778502b45f"
        },
        "item": {
          "id": "118e0617-f850-4033-a24d-433fecc546b4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "33d99b13-9144-450c-8267-0c9f8e4903a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b83c8c-af7f-4a72-b0c0-e67271b38959",
        "cursor": {
          "ref": "a40437cb-e8e0-4803-a316-c4a5d155a4c8",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6894ec4d-7583-4607-992e-5d1b8ec8ecf7"
        },
        "item": {
          "id": "12b83c8c-af7f-4a72-b0c0-e67271b38959",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a5c4350a-aed9-45d2-8ccc-b43daab88ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99565f8-2a73-46b4-9020-53803f886b2b",
        "cursor": {
          "ref": "bee3e455-a724-4808-bc50-7aa44fce6175",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9a73801e-113c-4019-9586-2d70e77b50d6"
        },
        "item": {
          "id": "b99565f8-2a73-46b4-9020-53803f886b2b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dc2ab0d9-ef22-4494-b5a6-03dee712ccb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1278a07d-0d7a-4654-b019-c96bb4c646b4",
        "cursor": {
          "ref": "3dec5e52-080d-424e-b0ce-02e7fb813d9a",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f3ebcbad-d15f-4289-951b-26e41dd8bd92"
        },
        "item": {
          "id": "1278a07d-0d7a-4654-b019-c96bb4c646b4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "d71a676c-5cd4-4da4-afdf-fe7374f59b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebedfd0-f736-4ebe-aead-f9a29363408a",
        "cursor": {
          "ref": "0e49b20e-3c1a-4fe1-8939-d4082985dbef",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "01d4b0cc-513a-4d69-be1d-7fefe8055802"
        },
        "item": {
          "id": "4ebedfd0-f736-4ebe-aead-f9a29363408a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a5d277b4-bcdb-4ee1-83f6-fbc508f1067e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89daf6b-07a7-491f-ae3e-766408098ca1",
        "cursor": {
          "ref": "e6d3b563-e7a4-47b3-b5b0-6f3ca7fe3cfe",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "baa409ed-e615-49a4-899a-f153ede7537e"
        },
        "item": {
          "id": "a89daf6b-07a7-491f-ae3e-766408098ca1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f7877d21-3aaa-42d6-99f2-431de93c6eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4957bf7-a860-42e5-9944-f6c627fa4d0e",
        "cursor": {
          "ref": "de799621-c20a-4d54-9a76-21f5e16a222e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b2b028e0-c76e-4be2-8164-0644bb10a969"
        },
        "item": {
          "id": "d4957bf7-a860-42e5-9944-f6c627fa4d0e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "84c19d88-d901-4f15-b7f2-24ee5e51371c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28468b1e-bad9-41d3-b903-53b3b2986c3b",
        "cursor": {
          "ref": "5ad7b72b-86d4-4547-92fa-6b00b3de7233",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "20654d6c-59e6-477a-99ef-e2daf985e778"
        },
        "item": {
          "id": "28468b1e-bad9-41d3-b903-53b3b2986c3b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "26cb7885-e649-4b5b-b5d3-8d76107f5ae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6968b675-ca3a-4f9d-9c31-bc475189300a",
        "cursor": {
          "ref": "afdcf87d-9936-4b07-b665-20efa64a3816",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e126a66a-ebe5-4cc3-8212-2900c9eb0053"
        },
        "item": {
          "id": "6968b675-ca3a-4f9d-9c31-bc475189300a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "dd9fa919-4982-43ef-b765-56c073ad966b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb9bdc2-bb82-4892-9ba7-95a516f1ddcf",
        "cursor": {
          "ref": "70cd42b4-ddda-4b93-b0cf-bda4245edbda",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "33f4768a-79c8-4096-b1a4-f5dbac916828"
        },
        "item": {
          "id": "aeb9bdc2-bb82-4892-9ba7-95a516f1ddcf",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6d29e2a6-5808-4893-8fb8-d4382d64b5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fda466-c268-4c17-a14a-2aaf6af10712",
        "cursor": {
          "ref": "b8a3d28c-7579-4934-9df3-e1ba8e227b97",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2c0b883c-2ed8-4094-863b-90f64ad39c8c"
        },
        "item": {
          "id": "84fda466-c268-4c17-a14a-2aaf6af10712",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c5810160-62f6-4707-9271-120f5f888194",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "2e5329bb-832f-473c-8bdb-09493c48c005",
        "cursor": {
          "ref": "e8f4df1d-af2d-4c5c-8f56-c377de22da02",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c9a71dec-56b5-402a-bb79-5d469c4bf359"
        },
        "item": {
          "id": "2e5329bb-832f-473c-8bdb-09493c48c005",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b4936b0e-75ca-4838-a35d-c96b004cb7eb",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a4514ac3-f0e7-4dbd-9c85-915274509941",
        "cursor": {
          "ref": "634f65ab-ab69-44b2-90f7-fe97ea640a23",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e09eb39b-9fe4-4284-91e9-917cc2b46000"
        },
        "item": {
          "id": "a4514ac3-f0e7-4dbd-9c85-915274509941",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4f8113f3-8918-4523-a7a5-502724792dd5",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b7c326dd-bd89-474a-9540-72c74f8a33ca",
        "cursor": {
          "ref": "48cb75b1-62c0-4a81-a9d2-c7ec383b81bb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d5ba1e10-7650-4143-baaa-e374ee203720"
        },
        "item": {
          "id": "b7c326dd-bd89-474a-9540-72c74f8a33ca",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "6f2d83aa-7e46-4a5c-ab91-67519f5ad287",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "5c48b4a5-b233-4d4d-b6b6-d663d2a8b2fc",
        "cursor": {
          "ref": "0199413c-129e-495d-9b89-dce4a0bc35f7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2380130b-4e0c-465a-bd81-2ef16c7f49ba"
        },
        "item": {
          "id": "5c48b4a5-b233-4d4d-b6b6-d663d2a8b2fc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c86b3a53-ba27-4e61-9476-53e7af6e67fd",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6018ebb2-3936-46cc-a433-b640b831270e",
        "cursor": {
          "ref": "a2c7adc9-e9ce-4d03-9bc6-f5305f3b78bc",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9a529bee-69b9-4b8e-819c-14b393ac5a81"
        },
        "item": {
          "id": "6018ebb2-3936-46cc-a433-b640b831270e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e41c6b7c-1074-41e4-ad27-03916ab0eb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b91602-d2a8-4737-8e2e-2f39d21396a4",
        "cursor": {
          "ref": "4fbcf7d3-af73-4b5c-9285-6e5563ab8f59",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "65a8f1f6-db40-4794-b582-ce42d8020099"
        },
        "item": {
          "id": "83b91602-d2a8-4737-8e2e-2f39d21396a4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3c8fec4e-48fd-4c11-b046-bb63b4bfe684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e5aef0-6b66-4831-a07c-e2bd6a8fb8a2",
        "cursor": {
          "ref": "96e4786b-8009-4fa5-8e77-b3fe4d3eb114",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f2e1d1e6-9bf5-4637-9150-d7ef7d5586f6"
        },
        "item": {
          "id": "44e5aef0-6b66-4831-a07c-e2bd6a8fb8a2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7a0b8ead-d825-4e48-92fe-41411a42103b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7aa6ee8-2a48-464d-a2fc-0922c4b48190",
        "cursor": {
          "ref": "2f479d60-b215-4d0b-a33b-0b896bf0b350",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6f40e5e5-7f5f-424f-9800-223dd13b6114"
        },
        "item": {
          "id": "f7aa6ee8-2a48-464d-a2fc-0922c4b48190",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "8a1c9bbd-9ec0-4136-b51b-ddcd96bc37aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdf281d-69d9-479d-aaf8-eedbf573513e",
        "cursor": {
          "ref": "78b05382-71d1-48fa-991e-d180c12256f5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "308d8ac3-4bc9-4a61-886f-078ae0178f6e"
        },
        "item": {
          "id": "ecdf281d-69d9-479d-aaf8-eedbf573513e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "87724e92-eceb-4055-a571-3c5f66552b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90c2257-4e69-4d2e-a936-b117415cad6c",
        "cursor": {
          "ref": "79ef6280-8391-4797-9881-a92baa100431",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "61533870-8942-4053-97ae-21b772aaf3b6"
        },
        "item": {
          "id": "b90c2257-4e69-4d2e-a936-b117415cad6c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1094b32a-58a7-4eb9-9786-7f0d61223c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5adf69-2c36-4ae2-9622-1f52edd9e4cb",
        "cursor": {
          "ref": "dc0bc15b-b8e4-45d8-9e21-12ecb96ecbb8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9135d109-7c7d-4332-a2f7-807fcaef7152"
        },
        "item": {
          "id": "7d5adf69-2c36-4ae2-9622-1f52edd9e4cb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "48de6e72-7f13-443e-96bf-99715f2649c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89771664-59fa-4e04-bee4-e1ea0c0c73f3",
        "cursor": {
          "ref": "bd3d5657-b365-46a5-bae7-b18f7325f77c",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d5367262-07e8-421b-b172-b72c6ad0ef10"
        },
        "item": {
          "id": "89771664-59fa-4e04-bee4-e1ea0c0c73f3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "59f07d50-4964-4342-9318-e5b530e7473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14a0a15-55c1-4f00-9362-a03157489413",
        "cursor": {
          "ref": "db9ea856-11dd-49af-bdf1-047c37a84279",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d8d9a46e-863f-4d15-a1b3-992d53efb610"
        },
        "item": {
          "id": "c14a0a15-55c1-4f00-9362-a03157489413",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ae8a55d8-85ae-4ebd-8751-59b2964d3eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5b5706-1d10-4a3d-a9c8-d86d24f318a9",
        "cursor": {
          "ref": "cfffbf20-4283-4db9-9b80-bef1c50f9b0b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ec454107-d26f-419c-b125-01526c2ec822"
        },
        "item": {
          "id": "bc5b5706-1d10-4a3d-a9c8-d86d24f318a9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c669e642-6be1-49b4-a8fc-ba7d2a4f4c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af4675d6-7cb5-414a-9615-b5fbd9e846e7",
        "cursor": {
          "ref": "8a97c786-3789-4b67-b33d-3d21353bf63c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "d61018e8-8b94-4aa4-a56c-fa14f1f65093"
        },
        "item": {
          "id": "af4675d6-7cb5-414a-9615-b5fbd9e846e7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b4588e6e-21c9-4690-b342-e1fd8a143823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d9a58b-3770-424e-bf54-79bce8d8c955",
        "cursor": {
          "ref": "acfccaef-c981-4bb1-8ce1-1110ef0bb447",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "caed2853-bca1-4122-89c0-a083a69d0f84"
        },
        "item": {
          "id": "26d9a58b-3770-424e-bf54-79bce8d8c955",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b44f2fb6-e3d9-49c4-bb80-c88ed71137cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3938e7a3-e19f-4f5e-a652-784ac49d1d5e",
        "cursor": {
          "ref": "61dd5fc4-2cbb-4280-9f64-97a4a20bc47f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "03b19ad9-39ff-4e13-a215-fd7fcedd6dcd"
        },
        "item": {
          "id": "3938e7a3-e19f-4f5e-a652-784ac49d1d5e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b0e634f-d1a9-4900-9ea5-e23a8220150a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c9e0f9-1276-46a7-acb9-3fe63fea402e",
        "cursor": {
          "ref": "84ac1931-6aaf-4e9b-95d1-4b5b4d739c42",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "74132665-66da-4567-b100-c795dcc863a4"
        },
        "item": {
          "id": "08c9e0f9-1276-46a7-acb9-3fe63fea402e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fc25ef0b-0575-4fa6-8812-a40da19c40d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190e4290-4bd5-442f-bd7d-acad2982a854",
        "cursor": {
          "ref": "134bd3cf-1573-4365-8f17-2c9c1c47ae83",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b8e079ab-8fdb-4963-97be-841481d5114f"
        },
        "item": {
          "id": "190e4290-4bd5-442f-bd7d-acad2982a854",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a8138f25-63aa-4fc8-8832-13697c4b1a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fd8bbf-87b8-4416-8521-dce66f151a60",
        "cursor": {
          "ref": "a989d6f6-0da7-4349-9230-22fa16370dcb",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "df3b4e1b-d963-4f58-8683-50c92644cd66"
        },
        "item": {
          "id": "66fd8bbf-87b8-4416-8521-dce66f151a60",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c95ecece-5a36-49cd-a875-f815d378c884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb42477b-32e5-4eec-ac50-23d40ffa8b88",
        "cursor": {
          "ref": "1345741d-b297-4efd-be5b-5419aa9a21fc",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bab790ec-c976-4bea-8ba7-bc538386f16b"
        },
        "item": {
          "id": "fb42477b-32e5-4eec-ac50-23d40ffa8b88",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "dbbbe6e2-52bc-4e31-831e-5a126b36f416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e967bb-8aa9-4f09-90f9-cfc820095536",
        "cursor": {
          "ref": "dcdf1676-f1ae-45d4-83ab-fa9b67988b95",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "00033131-95a7-4c40-a855-8614e704f68a"
        },
        "item": {
          "id": "21e967bb-8aa9-4f09-90f9-cfc820095536",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c70ed684-e180-48ca-a07f-36bab431a610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667ad269-da2c-4234-ac80-158418f41ece",
        "cursor": {
          "ref": "767f9485-e613-429c-9249-0bbd8e64dcd4",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7eebfe5a-d7a0-45c7-9f6b-f5abb4efa3f1"
        },
        "item": {
          "id": "667ad269-da2c-4234-ac80-158418f41ece",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "aeebafab-0996-43ac-926c-b6700e2af697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5555a2b1-0e20-4689-8bcf-84735a67262d",
        "cursor": {
          "ref": "dcd5bac8-57dc-4ff7-a293-77f45b4cb292",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "62d589dd-01f2-426e-9de1-b4c522f4ce51"
        },
        "item": {
          "id": "5555a2b1-0e20-4689-8bcf-84735a67262d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0686bad6-6328-4563-93ac-124eca3d233e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb2793a-8644-4db6-b72a-162c2cc1d70a",
        "cursor": {
          "ref": "5922e875-969b-468f-ab93-aab4249d1040",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "2bcab032-4cd4-4b78-bd2b-870638ab8259"
        },
        "item": {
          "id": "afb2793a-8644-4db6-b72a-162c2cc1d70a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9bac3763-7817-4911-94a4-8d23bd707e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727c166b-f807-4895-b119-b8e1fdc181ce",
        "cursor": {
          "ref": "8ae8cbf1-7444-4bb9-bca4-26c8933b5e64",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "0f340e12-f585-4652-8ed5-d12925c6ead4"
        },
        "item": {
          "id": "727c166b-f807-4895-b119-b8e1fdc181ce",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "3c49fd1a-0b4d-4b3b-a49b-b42db6c2fa8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a70a96-2902-4195-a96b-92487ff8fdf7",
        "cursor": {
          "ref": "3cd7ca99-2016-4748-b24f-6e3ff598731c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "49487c6e-0b9c-4ba1-bc57-00fb106c7eba"
        },
        "item": {
          "id": "34a70a96-2902-4195-a96b-92487ff8fdf7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "321b5877-316a-4199-81e5-d6a87540bbd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba941981-55fb-4640-873d-1ffdc561f902",
        "cursor": {
          "ref": "7bb233b5-c7f3-43cd-9be6-e06fc172419c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "19609b7e-d49f-428a-9dbe-903eac20195b"
        },
        "item": {
          "id": "ba941981-55fb-4640-873d-1ffdc561f902",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "45dd5b2d-d791-4418-bfec-3cd57634b848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9c18f5-6c5f-4f6e-88a3-eaa9adf3ecdb",
        "cursor": {
          "ref": "bb5e7796-bb0e-4f9d-93a8-14d9b75b4ff2",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3bb17a4c-2cd3-4864-a612-10e6a1eec0c6"
        },
        "item": {
          "id": "5f9c18f5-6c5f-4f6e-88a3-eaa9adf3ecdb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3b4ac8f7-a362-437c-82c8-85ce85c387d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ff82733-d3bb-45aa-9226-4d22d6f2f2ad",
        "cursor": {
          "ref": "d8121e93-218f-418f-8eb6-701093f3bd66",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "e4c1e822-e5b3-4cb6-8624-72d4d06c9170"
        },
        "item": {
          "id": "6ff82733-d3bb-45aa-9226-4d22d6f2f2ad",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7de6b8a5-02f1-4280-8b33-ee53bd22e547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7932d1-80d7-4cb4-8ae3-8a90324ede61",
        "cursor": {
          "ref": "73431c90-d6d4-4d03-9228-0027a9bf198b",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a36ce75d-5c65-4be5-81f6-8d407a1acf06"
        },
        "item": {
          "id": "ee7932d1-80d7-4cb4-8ae3-8a90324ede61",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9b539bbb-7eaa-4a6c-8fe8-9c769b50f684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0ded96-bd7e-4bad-ae63-eaf5ed2e2129",
        "cursor": {
          "ref": "f85962d0-780e-4321-9cf9-8f4e051a2d27",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "dfaba0af-83da-4f4e-82df-4e36059e5451"
        },
        "item": {
          "id": "7d0ded96-bd7e-4bad-ae63-eaf5ed2e2129",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "41e15f34-7520-4c7e-a939-a7be1d48548a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feac941a-21d6-4e54-82fd-d235fea19035",
        "cursor": {
          "ref": "d00b53e7-0e11-4671-bb84-651269fdca34",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "f50725f4-a46d-49cd-87b7-b0aaeb918ecc"
        },
        "item": {
          "id": "feac941a-21d6-4e54-82fd-d235fea19035",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8ace4d5a-c8ce-4771-b24c-9977b3e1fdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8112a7-88ac-4392-86e5-c8c4ffb265fd",
        "cursor": {
          "ref": "9e4c58e6-df1c-4551-94d2-cb60d760136e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "72d09aa7-c2d1-4416-8b49-024bbbeceac3"
        },
        "item": {
          "id": "2f8112a7-88ac-4392-86e5-c8c4ffb265fd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "386621b0-6d99-40dd-b66c-28c7e55821ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c39196e-a7c6-4aea-b091-7f83d54055b3",
        "cursor": {
          "ref": "3b9cbab1-7e2a-47ba-8bc1-bf01876ea827",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "81e26bfb-b04b-4149-85c5-a86fd693e7d0"
        },
        "item": {
          "id": "5c39196e-a7c6-4aea-b091-7f83d54055b3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "640ba8c6-4557-4198-97e0-6b8778d09094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8737259-327a-4aa0-992c-6b4a8c0a22a2",
        "cursor": {
          "ref": "1e7dadbb-601d-437c-98ff-252267493c07",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6f0ce952-12c2-4fcc-97bc-4b215617d42a"
        },
        "item": {
          "id": "d8737259-327a-4aa0-992c-6b4a8c0a22a2",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8176e5e7-5d2a-4298-a849-d6e14bbbe516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bf7833-b05f-4825-846f-dfe0dd52298d",
        "cursor": {
          "ref": "1e627856-756d-4eef-b6d3-4e3664e62fd8",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c1309919-8d87-4473-9163-dc00f8653aee"
        },
        "item": {
          "id": "85bf7833-b05f-4825-846f-dfe0dd52298d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c68e6d37-0571-4b53-be2f-47b10a44aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fcf1d9-c472-46c9-ab2f-55350c087a6e",
        "cursor": {
          "ref": "9cf125a3-4e5e-4bb8-aeab-1aeba1bccf1b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "feaeae0f-bab9-4ac0-b161-0e8fac747702"
        },
        "item": {
          "id": "18fcf1d9-c472-46c9-ab2f-55350c087a6e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "bfab4bf2-e33b-47fb-844a-25d6a0ec941f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd04c1a1-39a6-442a-aed3-fca3e55ce78a",
        "cursor": {
          "ref": "8d4f6da1-6de7-43b4-8784-1d71e5768fe0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "d15f5bf2-e519-4fe3-bbcf-3ccec32cfc96"
        },
        "item": {
          "id": "fd04c1a1-39a6-442a-aed3-fca3e55ce78a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5a721984-f6b5-496d-b9eb-be9b7886183e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594f4208-14c7-4ae1-b0ed-548e585207c0",
        "cursor": {
          "ref": "a94c46ca-3249-4af8-a74f-c49b298f85eb",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7eb52395-324d-4854-abab-862ad2b468b0"
        },
        "item": {
          "id": "594f4208-14c7-4ae1-b0ed-548e585207c0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a003e3c1-f641-4b6f-be97-3e1a0973a6a4",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "764a83e7-e042-4287-a170-437ffc797940",
        "cursor": {
          "ref": "6f7aca0d-e187-481e-9a64-093c1c02a7a7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1ffd8793-e88c-40e8-bc39-ab883386c77d"
        },
        "item": {
          "id": "764a83e7-e042-4287-a170-437ffc797940",
          "name": "credentials_verify"
        },
        "response": {
          "id": "93da1002-d222-44aa-8562-5e49106b2354",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c762d9d-254b-484e-ae3d-7a66a381352b",
        "cursor": {
          "ref": "299d4c1f-57b9-4262-9980-6214bfa08a45",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "5c4cf39b-3e3d-4673-a1d4-eb3326493ee5"
        },
        "item": {
          "id": "6c762d9d-254b-484e-ae3d-7a66a381352b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7e19752d-6d33-4841-bf84-4db33e08a8d2",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee441aae-d941-4b92-8b74-00e619d3540c",
        "cursor": {
          "ref": "90fc1b01-a03f-412a-bdf9-9b0ee365f144",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "127e5a28-ceff-4efe-b14a-5cf7aee23a0e"
        },
        "item": {
          "id": "ee441aae-d941-4b92-8b74-00e619d3540c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6223836b-b0ec-4a5f-a22b-0eebf6c3bc96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee441aae-d941-4b92-8b74-00e619d3540c",
        "cursor": {
          "ref": "90fc1b01-a03f-412a-bdf9-9b0ee365f144",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "127e5a28-ceff-4efe-b14a-5cf7aee23a0e"
        },
        "item": {
          "id": "ee441aae-d941-4b92-8b74-00e619d3540c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6223836b-b0ec-4a5f-a22b-0eebf6c3bc96",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86af9527-2750-4ad0-b8bd-ac40ee08998c",
        "cursor": {
          "ref": "47e9b061-796a-4ed9-bd7a-20b712cf1744",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "633e965c-ff82-4c3a-82fb-cfdc281deb51"
        },
        "item": {
          "id": "86af9527-2750-4ad0-b8bd-ac40ee08998c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e658e794-f837-4921-aacc-6ff16eb6c55f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c41b7c-1122-41e7-aef4-30fdd6f6ab29",
        "cursor": {
          "ref": "2449d460-4097-4d88-a2a4-136bc65d9628",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3910b0ea-e2e7-46b6-b43e-42c6ff64b2e1"
        },
        "item": {
          "id": "34c41b7c-1122-41e7-aef4-30fdd6f6ab29",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4aa9e72b-8b98-4e20-b78b-212e5fc4665d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}