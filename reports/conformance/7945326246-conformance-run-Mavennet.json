{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7be7f74f-1cb5-43db-9806-a0350dec8d3a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "56272c23-6dc5-4765-b359-9e28451a25b0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "014a1c58-05a9-4853-a5f6-1fb7d65b8228",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7a322290-8464-45d5-a445-3e51629a8559"
                }
              }
            ]
          },
          {
            "id": "2959f49a-1f4d-453c-bcdf-3f3a3c148ce4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f8fff562-eda8-4b4a-8cf0-8cbb09f841bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98672054-5451-48b7-9a91-4f68f553012c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e98a7c98-a06a-4297-ab76-c1003d7bdae8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "92bf2a32-31b4-4ec7-8169-61d2959fbe58",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e9ab37c-6a36-4d03-ab03-57ce69e19fd8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cd5cb7c-0ea1-44c8-91ba-28bc28745830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b158a14b-3504-4d45-8df0-9be25663a097"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ad47e7e-ae7c-415b-b4fe-88bc1f47d50e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9acf0926-3551-4546-a5d1-25c6e30a11bb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e361697-8f09-4d05-958d-25a52ac07d92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a9bca88-9c79-4aff-919d-3cbc107a5b2c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5995285f-2dae-49e9-bda9-4caad854428c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6f95a242-bf9f-4736-a558-9a46dbc1deac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2069631e-406d-44ee-ab2c-c2e52dc3af1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4bde839f-f209-42db-84bc-55c487e0b068"
            }
          }
        ]
      },
      {
        "id": "21c048aa-907e-4c99-978b-8c33271f1218",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f239d463-b40a-41e3-ba1f-ca4ecdeb2a7d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cdcc3d0e-9da2-4137-8ffe-8f7e7510e0b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d9bbe150-98b5-4361-b2d5-649d9d98dbfd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc037405-8700-43bf-b956-1f1091b1c314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfd94e38-82b3-4867-86e0-cda584ec8966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69dd4c29-af32-4806-8940-0ad45b91f92e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72204c7c-83bc-451f-9180-036678e27f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30828653-afea-4a73-8b6e-49a08e24e2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d057826-346a-4dde-a9fb-bf3f784a7b25",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a9ab03-0837-4e41-ad2b-241baf3a558b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1be41fb6-044a-4603-a5de-aa7215d581d6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4300a2f3-7102-413b-ba60-79b4b20abbfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "49322c77-c1a0-4a47-b387-80f7e01152b8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60abf07e-2be7-42e5-a18c-51c34818666e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "156da90e-1058-4e53-bc83-93555a41b6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fda1e61-701d-4966-a263-92216b74d271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1718b471-c6f0-4e2a-8bfd-0487c0ab4b0a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "292981cf-1288-40a1-9ecc-991376647a16",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fcfda892-759f-4361-83fe-5e63770091d6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed0d1511-7852-40ec-8911-89c6ec85b9f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "29fe4de0-d9c8-400d-80fe-01f78c84c2cc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06fb96d1-e9b5-4e52-bc2d-afc1fbdb0e23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b482560a-8901-47da-98db-e31bd4a76269"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d554194-9077-4d6d-8eb3-9cec66de53cc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7526501-f6ac-4e02-a330-0d867473fef5"
            }
          }
        ]
      },
      {
        "id": "21c7a657-7725-45f0-8a7e-b86ca7eb19a2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a6e05ec3-52e0-45cb-81b3-33f925415544",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6efdea36-47ff-4d02-a461-a71740afd721",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b5298931-fe01-4819-a695-6190967494e0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e332edd-0a5e-4d65-bbb2-6223e4f085f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487a029a-8452-4d3b-84cb-9ab103c80705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdeaf638-8f9c-4297-ac0e-e481e59538da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e87381e7-776b-4122-8cc1-aa1e1024c4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d944a1a-2840-4c52-be5d-7b9af7cc1ed6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8501c887-da65-47fe-84e0-fc9311b10c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102fa7ce-8656-4744-b43c-22492d0a485a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd33daf4-5f99-4dc0-bb64-f596edda831d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d49eb600-559f-4255-8989-24b83d6b9a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1b0ad8-2161-4a5e-adf4-b0269c35de84",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bf2716-a75a-4945-9105-9d9b9333d2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fd4986-a38a-473c-80f6-18b07f0a95ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be096d39-2c17-4751-a702-6d22862c1f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc4e699d-1557-47d6-8144-63d94152c8a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3edc308-081d-4d6b-be21-fe7f00f3011e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91cfe01-dfb2-4df6-967d-70ce828ecc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efe9d90-8698-4f88-81b3-a63f88bf4d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34aed4b-071b-4987-8ddf-fb7edcd40e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c441575-62b0-4ea2-b5bf-60a072be1c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee0b548-8e02-4fe8-b6bc-a3a0d458ea38",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fd62ed-9e50-43b4-b6af-7f5b27e72bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5b810c-5785-4db0-aabb-60e70c379632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3833a78e-5fde-43aa-8bd4-b9f4725b9243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d262ef62-fcff-449a-86cf-0131a07317a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd31d2e-505d-4846-8200-09f6b90e1dec",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a12a82-77da-4ea2-b948-369e0d05c13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947c3476-9a11-44ee-b8b9-2ed2bf574866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ee7c9d-4ad1-4b4e-8ecf-db55907e75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c766e8e8-f017-4bab-9620-6064f46bd379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b80b486-318b-4e72-9b78-07ca67c35d1d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8593def8-da50-4b0f-9d75-44d1c7f06f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c61743-e1ad-4210-bd3d-8975557bd737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0302ec1f-aa75-41f4-ab5c-5f85cfbbfd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "397f0edd-6ce7-4690-865f-ca1d6e37bc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c057a2f-09cd-437f-8f83-8eba5a2185c6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d5b37b-c34c-4e24-a09e-9c2a5ea0aa12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89754cc8-1415-4c50-850d-5bc4df273439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eca699-dc3a-414b-a2d2-539260035c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9f357af-fd03-4c3a-b70a-433468b6ec70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94db3ecf-0341-4375-859b-a2d055e14eb6",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f772ca-a1d4-4ac7-aa5b-3433a8fc8172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23beacbc-15a9-416a-94d6-69a91516ebd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856c69a5-9da7-428a-bfc9-f999cfa0b303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35300dc2-4bfd-4b59-9e4c-b01edd3c320c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2338dfa5-102d-4b6b-87fd-8d9207aedf5b",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2ee7c6-7bdc-4165-a83a-b2590fe74b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd8b8aa-358d-4356-ba12-55163326a697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc0cc21-67ad-45e7-86d0-8b0bcb872c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85344f0f-599c-43d0-a36d-3dda1417e4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbddca86-82a7-4e1c-a377-df4b0f3bbb4d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c2d8b9-a86c-4170-8131-b73416355609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "843c5b45-a244-4837-8515-317e924d5d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f1aa49-a259-4ef3-95e5-1d200f6694cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f9530a90-4d52-403c-8c9d-9330307c561b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff158721-aef1-45b8-90d3-7e7d57df47a0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9eb612-0f35-4cc2-93e7-0c295b47b225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b672a1a4-1b97-4b73-b0ed-c2fc9bfc4bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33892c00-42c5-4dd7-ab4e-8d14d0b02064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebc575cc-0af8-41ea-8363-88c139451b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85a1c09-7060-4282-812a-0a03e660ab36",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e0b4d4-89b4-4011-a887-f1913aa60cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9db114-50f4-48fc-8cfd-6a5481997c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "693f913e-8f1f-4f5c-8cdf-13702147a62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5181ce3d-ba21-42b2-97d4-b92b48b06694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7fbda31-5e57-4077-a7e3-21ce0ab9654e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60e639b-05c1-4202-a17c-af7419228028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da954a4f-129b-4243-90cd-9351da816dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3abc31e-ac8a-4b6a-be71-88a11ae160ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bca56215-717a-4577-83e4-5b174032f1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01215942-1555-4498-979a-964295f3b420",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f84183-d09b-4eeb-aadf-97558495abc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a83d488-e736-47e2-bd3f-e9c9ff1551ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425548c9-5230-4177-b195-010843748f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfa31158-fd62-414f-8fb9-7b8d755698ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249ee8da-1929-4a58-824e-a5bde511f095",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494fe8f1-67b9-4fd9-ae01-04a9713be62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dcb1ff-e289-4fd6-8a87-4e6d7ffee296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bbcf2c-9827-4882-ac54-3e1faddd4a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b62479f-5486-4475-9d9f-45d3640c0802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff2fcdb-86dd-4409-a674-f6a88d003975",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07df46c-a37b-48cb-914c-7cec83383acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64b1681-e0aa-4573-a3a2-272d69393b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce0738d-4d9c-4ef9-b708-f0f95bc0fca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b092bbe2-39dc-438b-b2a7-7fcfcfc6d54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e53af6-fa61-49d0-b6ff-56aabe6ec37b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "770a98b7-c645-4ca7-b95c-f28d6dc147ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be730aea-e322-4565-b6db-68582f492ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959fb73a-7c84-4c0a-a67b-ec990dae3c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c92f44b0-75f0-474d-9638-b7b4a59b7c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d61fede-195c-4cab-8455-5852475db790",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbab9e2f-d243-48f6-8478-c309111c4698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15adb200-4163-4cb4-a46a-66652553826d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a53f36d2-150c-4889-a28b-6fc5b1ffec0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "39fc449b-96e4-4292-9b7d-26df2f005149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03ed4cc-4a99-454b-8bf0-49f3776bd59c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83806d1e-fe13-4413-bec0-92fdc4196531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5993fe-bef3-4841-992d-4d2dd98bc3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ec6fbc-ad50-45a4-ad1b-65520d7681d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a79c7885-6ce8-4c98-abf7-829e15b53dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b14e58c-c373-4dc0-8397-197652410eff",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5492974-4b86-423a-af96-711fa5fe2e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50bbc886-024d-451f-a130-efbffdd64877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8baacc-9681-444a-9e5b-dafd0bd685f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78170cd7-0440-4dc8-8b32-cc428e256b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2da4a9e-a17d-45b2-915b-4122aa73dd9a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbf1907-7c79-454b-bd45-83a5d9e5e8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164c58ed-c2e9-4405-aad7-4f88500867c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61903fb5-0d5b-497b-85ca-4d1758760e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9708eca6-7627-4615-a94c-66e57aebcb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4f4b0a-f971-4395-82e9-84aa5c93d143",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527ed4c0-50ad-4f0a-8b2b-20575d8e115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a5aafc-c90b-4754-a7ea-a4c20c68d9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1603ab5a-f193-4dd8-a28d-fe5aa9d5be24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "173b3e07-307f-4863-b106-3707baa37a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939a3903-8d2c-4ee6-a5d7-848365e9d364",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df67281-4620-43a4-b6e5-1c743ee76181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf65a67-c908-4e22-b9fd-6159add170a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb90a21-52e1-43fb-8299-6eab45c0174d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "52968a93-f685-4953-b682-ef9b94d7a968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204136ab-a6f9-419b-91b4-16d186983d16",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4b93f6-fb4e-45ab-90e5-33a6ea2a5b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27d31fa-b83f-4a99-9487-00608a5d0693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca8f495-76ba-4d40-b202-7b749a7e5665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc02da50-e856-4983-bd1a-09a31f86ca29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6f8018-6dcf-42be-b98d-440b739abbc9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8567ff-024e-4b49-8ab9-99cbd09ba855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24749ae6-45f5-434c-8257-80e6655ee950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be0ab9d-14b5-448d-98c5-13fbf65ce713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51cb8c20-b794-481e-b7c7-5417148fcb3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b730f360-b207-4880-8043-060566be284c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc2bbbd-5a97-4a93-824f-9ab5122fb221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "027d22ac-4fdb-48ab-bc09-38a0a39d9068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf86bae8-4f1c-4d44-b335-9a9d2b20d6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fecadde3-e754-4acc-b8ea-a4b6d2c27108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cdd592-9b29-42a1-bf87-494702320b50",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50330d6-b1a1-419f-92a4-1cb53c5f1782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46474cc7-9b40-4dfc-bb9b-ba2ad060d1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4881a3c-12e9-4b19-a9dd-970687347726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b015392-85e0-4d45-9ece-c31d772e6913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b0c3d9-18ea-4f23-bb8a-772ba4783ddc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c23230-cd4e-4651-97c9-004d8d614d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8694e5-d3d1-4cfd-80ee-427dc8bf274d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db6c6e5-3159-4f8e-8279-99a7bd17f102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d3e8a9-e257-48fc-b1d4-242874d871e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ae2031-3a76-41d9-a178-6abd205104d2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8937f8-8e63-456e-b1e6-85a4fabcbd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f4dc7b-a198-4789-b036-e0a8b29097ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf998f89-2d8a-4a12-b221-0aec096d320a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a81b77a-375c-4ee8-b0e3-f8b95af14a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "391df179-9834-4379-a8aa-2bf91df30cb1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb614bc4-71a2-4c0d-92aa-91e4839a06a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "510c1e27-0093-4bef-955e-815159967f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1636748c-f5c1-4e4d-bf0a-e797c34aa72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae02f93b-56c8-47be-a31a-2c35491c2bd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0d565ce-b596-47bd-ad04-89ac22fcc41f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283bc54e-7d75-4e1a-8e10-7bd4bdebf729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1fbf7e-876b-46a0-b78b-2418cb9dfbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dad8935-695c-4257-8952-a8d404c4c8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95c5ae84-15ff-4de5-9e0f-b6fda67d4d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b56b091-4816-4299-86ae-913eec19bc15",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d019ba-92b4-474d-aec7-5d2c48c47854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6103d080-aa34-45d9-9b53-86118ce95ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e274e108-1d5c-4ddf-9c79-8e0cadb67da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae4df737-39a2-45d7-b3f4-b8a4c36f7a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78073fa2-dc4c-43ba-b6de-d86c4852c4e3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75990fed-745f-4b21-8f44-3c05e6d88468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7438a96-f0d1-4ebc-8115-b3dbea419815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08476689-f747-4e73-b714-b99c1568670f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81de6de7-0a7c-4401-b9f4-b3e0ecfeef22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bc62c5-a808-4fcf-b6b1-95565301e0c2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc1a44d-2678-43ec-9447-c2c409c611b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe00f45-4823-49ee-bced-eaf968491bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d2db6e-f857-419c-a3e5-a3de46d6b055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "616b2664-4bf9-4a52-9941-350fed693c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48982d35-c9a3-4c03-811f-74a92800847d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb4f881-7c20-48b8-802e-73db3e316d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1f8094a-149e-4322-bab9-4cd53e5bf39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "932832df-e127-4a80-a6dd-b17731318cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5030ce2b-3a84-41f3-bc0c-b7bb78e36b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b515ac-f792-4223-9d16-e01b4cec14eb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1252de-17ea-4839-b672-52e141489dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e84e1e6-06fd-41e2-b768-e257bd88a01e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e51aa88-27a1-42e1-8495-5235e362ab06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0eb60f2-adfd-42bf-b6a7-0ef06e9dfb57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff7725b-fa3d-4b90-9efa-d5ff3bfb0a8c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d037d5d-fa7d-4e5f-889d-51d19fe97150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b0e74c7-702b-4f08-b140-76483d5a9765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4c4756-c36a-4945-abb4-3810c10fc1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0cdda5e-8fd2-449f-8b1a-381af1d921f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c76b92-edf5-4098-b336-e23a689b84cc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96dd9111-5497-442b-9193-0c70cacec9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d987d8-8996-4913-8620-ed69b202b081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc97f229-950f-45a4-9bc4-04516397c3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "026b7ebe-eb61-4cf1-9807-734e7b839ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc79eb9-c4e5-4ca0-a03b-4fb0b40899c4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa0ad96-d647-439d-85d7-f97a88ec8b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d053e92-ab89-4bac-bcd4-d3c761ac92b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d031352-b4f4-4bb8-9d54-4af94d7a7312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64d6948e-4b19-4dd1-8e8e-41920c71d169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edfa8274-6622-4415-9c5c-4ccde356e3b7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337e4789-30eb-4e08-91a7-5192a8bfa5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b56f3eb-c938-48f6-9a07-98ffdc9f5bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e2a835-bc90-471c-8c0d-02fd52116077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a955efaa-4617-4147-87af-7c28617f3548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3035b3c2-304d-497f-ad51-463c19cbb0e8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "681c5b7f-c779-458d-82ae-449750e6f575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9280a1-726a-4b55-bdd7-7c0765049be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd31494-f455-4f77-8a26-c369337a39e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "200c5d99-973a-4cf4-b9d1-1aa6bebc42dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e20df2-195f-4bb9-97f6-7a3a25119248",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aef50d61-0069-4331-8b07-5fb2d13fc1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e07b833-b1be-4931-b57e-c393bb5ed9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5010e2-dbe1-408e-bf43-80cbe4e23747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4dc49d-9b68-414c-a93d-5ddad17cf38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ab10f29-f5be-4fba-a852-f8aea585254b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f0679c-e30c-49c2-8c8c-2fa6e189dfa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57a876a-90d9-4706-b1fd-3602eba32d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a189ec3f-b73d-415c-af9c-fb8138240461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1e5ede-d18f-4ad9-ba38-fab2293e1ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2af35e7-aefa-4283-b795-92e21ee32c9c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56100a9e-c15d-46a3-8d68-d5e48977c2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe83162-a62f-4201-ab51-a4a3a71e8c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77df301a-8684-4739-bd5f-da5656700e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1934dc03-e2cd-4200-8981-ada9448b235d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5048db19-e595-474b-8de1-e95e154b738c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f25779-e01d-4745-ba39-a43276c7d2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26f7432-161b-4906-9075-e4670f2c2850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e6e172-6087-44e2-8412-da1e90f6e876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a29c13-5717-422b-ac05-a1d4a1bf9781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ed0691-a501-4af8-8ebf-3efbaaa37ca9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50fda8c-fe7f-4be1-98e0-96cd56126f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6523f31-072b-45d1-9477-863871ebffba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8dfbdd-11ec-43b2-8906-19ed0dd69f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ac6c5d-02e7-48c6-bc6d-d73bf531d7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc230b4e-9672-4fd4-84b5-32626d9c87d8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "156c0b14-11de-4b6b-94f5-ad2bdffef788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3918e3f-6cff-4ea2-9cc0-ea936cb60a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74267851-2e65-448e-a5ac-eedd6a8830c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fee59da-9328-400b-b1fd-f2642c85a9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec0fab5-56a9-4f9f-8107-2e15199cf58d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3603e344-3807-4e9d-a85f-798ad21cf082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b849c0ae-a426-4fbc-a739-6de0d1ce718a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9566de-2fb9-4de0-9834-1e4d1e83b0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8068ecd3-757f-4b07-9359-f8bf513e25ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86344583-f384-4944-b4c3-53df5085d1ba",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e10077-f02c-4fe8-8117-db2580682a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a61599-d477-4a25-8e3d-2a45c23057bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fcb2fa6-de5d-4089-82c6-e96f4a7ebddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9286ff1d-3231-4274-a29d-067a64def2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefa7bdc-207c-4981-b93b-f4a781e26f72",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192fdce8-70c0-473c-bc28-dfedc8a9f9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4ad3c50-a73f-46ba-824b-a2d975cce407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfba1f7-c912-41a8-b7aa-1daad285aa52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "19c2ffff-a751-4a67-a284-43e78889db6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331f6eef-657a-4db1-b049-21164aa41645",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bc5c66-2d63-48f3-9604-bda53cd7dc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e172963-3e0a-4431-b9b1-3921fdabc9be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9726ed6-aa4f-42fe-9828-0b9348214a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab735e73-d654-4fab-af4d-b7843f877c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a0a9f0-d677-4e16-ace6-c6f67d7987e5",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3410f9e8-c777-4237-8eb6-5cde849f104f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a1eaa5-c3fb-467c-98e0-8e40f02ffe0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993a0b0f-b6da-4d35-95eb-0ed6df184d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e815cf32-d6bb-4c1f-839b-4a814c5b0219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15ab052-657b-474c-bde5-1bf30525ace4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f784807-8b4e-4476-aa3e-f773897acb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d10bfff1-e586-47de-8d6f-3d125c2f83ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b3c21a-fbaf-4c81-b741-a42e2cc2461c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea6891f1-8b26-4981-a9a8-e99194b54266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec78035-4627-4015-afcd-d9a13ff251d0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11cbeaf1-c23b-438c-831e-ef38326c015e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c0e419-686d-49cc-b345-0701723e13bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3344c5ef-548d-456d-9819-c842940df325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d289cb4-afc1-43f4-8d52-6e8910099992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2db02a-232e-41bf-9427-54d4efee4953",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecddd1e-9cd6-4dff-9039-fb9a18d7fc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddea6e5c-cc90-4c55-a17c-f721f7ffaeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53cf9a7-3ea0-4c63-b82d-dbea111cd8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e3503ff8-f4fb-49d5-b8a1-bba3b206e635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05c610e-40e2-4c76-b615-8394b828bbc0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7e0d3f-aee7-4cb7-a799-cef9ddc1ad5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "135358a7-fbb2-4b76-b9b6-fde67f44e3a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d07d80-6d3c-4fbb-b691-81d547b807a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "27aa6e10-3954-4d50-a6a8-e6db0333d875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165e87ee-f0d0-4fae-b82a-e0cd0e166b4e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e9741f-36d2-4f18-b337-a59c90c8a15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e77ccd-4ef9-472f-9813-6fc4aae12c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b07f9ae-8f08-4095-914e-d8bd4c93985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8761647f-a417-4d73-b1f8-c97845dd3b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefed7b7-d5b0-444f-87a1-b599fa58e53f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db96869-2237-4825-a10e-978851df5aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed98b9a-de2d-4ccf-a21d-35e653ece5a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97d1fc3-8fcf-4e86-a886-e7e624ee1783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb0fa75-85c5-49f1-a0a0-6fc13f4eacaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f33ec8-8eb9-49ce-8079-16efd6abbb07",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78492f46-e742-4460-8a82-890b1808f881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8e6f16-d0b7-4ed4-840d-5377574be485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f6e918-e21d-4e61-85e7-6335a6cdfdb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "841b7429-1931-48d6-b5fd-34b02162bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd96802-730f-413a-bc64-adebab165936",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a2afb7-4bcc-49c9-8a11-00c5139f2671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fe2756-08eb-4d61-bb4d-e95692a5da1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd64b76-90cd-4991-9a54-ef2532c779df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3deeb785-3875-4675-a30b-0601a3a9cc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9300420-da80-4623-ad5e-81c9f7461a35",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ea0d6c-0a27-49c4-9d39-5e70ea6a115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ccd33f0-21bc-4098-88cc-a250c4c967ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876eeef1-6125-4bef-8df4-464b9e80c763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff7bb88-396a-4b13-8e65-d0aed3ada2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a3ebbd-d190-4142-be0c-c61bd8c11ad5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42132f4-f1cf-4deb-91f4-75a2a32c9b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43405f5f-5efa-443a-8f16-012da664c310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9b19ed-2fac-4064-a9c6-327c35bcd8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5def29-6c55-45a2-9142-0f7a1d3714eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7651c5-08c5-4a05-a338-8722175615c6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b090c9-1319-4abd-a303-f7708fb11e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b99dc1-8a59-453d-b53a-8a32805988c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7487ee03-c16f-40ae-82cc-3efba6d6858a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67cb7c02-9737-4413-9c3f-0607c337e0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4e7521-60cb-44f3-bce0-ad3faa724f12",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9879e0a-35a8-45b1-8f69-e9ddf1e99d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f2775d-81e8-46a9-831c-035fb8270081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b655e296-c46b-40d9-8be1-50f03eaa6242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4ee506-cf06-44ee-8b48-5e5e8f0b4d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45fd5777-698f-4cc4-bfe4-da9798b9f3aa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff92e4a-7908-4a60-9f67-f4b0cc556795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c0bacf-40d7-4b06-b5f5-025aa73d9cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ace430e-c05f-4d6e-8ea7-25a67f75377e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75707fb3-58ee-4420-90a5-c9ea58038ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd559e1f-4108-43b4-bf2b-ee9b6bfb2f84",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884c612e-164f-4966-90a3-52d37c044139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc5acea-6aa5-40cc-8ef8-10961ae1a518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27375bf3-f001-49fd-bff1-6528d0a05b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2649f5fc-f41a-4ad1-87a5-3d42d444ad63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5914bb25-5bd7-41e2-8c6b-5876cbb9f43d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69573d81-825d-4ad7-a71c-0074c790f5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81956bd6-845b-4938-9943-53ecb178ba07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10bb90c-77aa-4177-b23c-026f989af65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e41c144-58a0-4ec6-ab63-10d9acc952cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2b94a2-e81c-4f7f-952f-868492b6fed6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0409a00-ddb1-4433-9fa2-2d781885f885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ae0ce8-6c43-4ad5-940a-95d87abda09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d000c6-6d6e-41ed-bc6c-214c14e3ea5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea2bd8e-3999-43e1-a19b-7d4db94c68d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299d933f-0227-46e2-816e-8d65e2550d76",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42756d15-7fa3-498c-884f-23aa8a626855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34a6216-5c4f-4638-90d7-df46799013b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ba690e-7ea5-4f8e-a49b-c4b2bef4ae1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "906ed6ec-48c7-490c-b769-51f9eb9ef4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3314ce-ebdd-483e-8d04-8f84365d8bc6",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edab1acd-c8b7-4e5e-948f-ab0665c16aeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e65e09e-4ec5-45ab-baf6-8cfba2a3cbd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efdfc8f-4a0b-4950-8c46-5eb84bb35c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c44b3508-e45e-4f3b-9e06-89071d212e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c9f9e6-458a-4dfe-834c-cbad65aa5f0d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe98c5af-14e9-48f8-88e8-e3a60600394d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f93362-4784-42a6-bd8d-6fb48f365a8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299f8ae9-d0bf-41a4-9734-966ba68d3bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33556d38-55ce-48b7-bd02-0eddc773179e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f86d314-32a7-4cc0-985a-ba78e54c5bad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c21888-888d-40a4-91f0-30451683670d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5186dd-c7f5-4939-8e80-762d2d27161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1ccafd1-57e6-47f0-a41b-50a20d36e837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbc816f-ee2f-4a39-85cc-c2f2ccad2cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c250aea-eeda-404f-9c39-64aadc4773d4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fa226e-adfd-44e4-9df2-92e873955323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abdbb78-817d-4a17-9842-8d4ec0d950e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b52e461-f3d5-424a-89b7-2a47f9756974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea6e67f-d4d7-4335-96d7-9deb8b73d9e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10130a0b-3f6b-4ca8-8e60-38694b8561a2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ad3c02-debe-47b4-98cb-506d6d0bc693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f44e8b-8de3-46ff-b597-ff4554c7fc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c242c71-7886-4ef9-bfe4-b1cdf2e48346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d5606f-3bc5-4c4f-998b-7a50ce4b6350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f192935b-6a59-40fd-af7c-529c5749e6fa",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b44b739-eab4-4641-9a7b-f70ad40cead2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed338fe-051e-415c-b9f9-a9602890a762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcb8b13-d162-406e-bd8f-516680bea2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ab903f-17f7-4b5b-b015-dc440a1da030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d822d6c5-dec8-46eb-b1eb-54c78423fec5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4217b3-8928-4477-a807-b0018782ce01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4456c5-c161-4948-a1b6-a9c9c7f6b94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550bbf1b-4d61-43a6-a581-ec4f1bee7858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d7f14e-aa87-4245-b0a3-245e8b4f7bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe577b6-9096-4e56-9c58-bd59cf37977a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c89f8afd-2da1-4e0a-85a0-5c3d31f164a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abeec3d-8464-4ff7-b995-06f5dd976542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a30e9f-3247-4fe4-9f8e-e37a66b23941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c10fc13-b020-47f5-bb39-e6001f693356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7eeee6-9691-4ee9-b5d4-9826d3c2f161",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c5f8f5-bc77-4c3b-a3be-8e60cde3d5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983dff2b-47a4-45d8-9e07-55e14c3b4eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658f0dcd-d608-451a-b25a-85e1c6f55739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77b77aba-5ebc-4322-9b2c-584136f802f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b46b48a-b99f-47c9-b09c-f44309a68c69",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b995a4c3-b404-4fee-816a-7de074fbecd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3b57cff-a65d-4b4f-b0eb-f3eeaeed0da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1830f0fa-8124-4225-918f-f79c4c8c530c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "793b2654-ea34-4a4f-990d-5dc8d71efcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547509d6-7a87-4a72-b6d7-abdad22065fc",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b76b7c3-53af-4f32-b24f-5753ce33ce11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8ec5d9-f6d7-47bf-b5e5-624a45a044a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537c1265-007b-4523-a7f4-051b960c4619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cdefac1-d5d7-4178-9228-f76f7716d644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b492334-b8a4-4a14-87c2-34570ed4665e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab4b723-06b6-4f20-a109-795ff3a45cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555fe243-12cd-45fc-8bd8-7d1e420eb128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9e923ef-49c3-4052-bbc8-53beae7055be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a01b7ad-c506-4c9e-aa83-f78bc49dda4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b05b6c4-35ad-47a2-8fcd-39cfdcb4cfba",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25aa6639-b0da-4186-a96a-86d6bf13f30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a57b30f-1dd1-4b7a-a461-7f7c2223da47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5573dc42-20dc-4d65-ab24-7609bfbf068a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "224dacc7-b503-4afe-9c24-bcce5f7063ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10257067-c1ac-41dd-95b7-140bd2dd8a68",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665a6a31-5ca9-4fff-bd70-cc4d16aaa180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7895d693-c74e-4fcd-b5c7-65fa58aa0fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a299428-ba2c-44e1-99d7-848394d4ad85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde88536-26ec-4869-95b5-5472fde54641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd612bd-1656-4a11-a71a-290dc0cad068",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c55646-9e24-4627-b0bb-edbbc0782ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a59b2a-6fb7-466b-a842-f43233eb0ca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f83cae3-e1fc-4fc5-99e4-08ecf34baa6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae9503f-97f9-4476-a10d-25bfb1eba9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1c473ab-423d-4136-8c41-0bf819aa69b5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e81ce5-6946-4a62-a548-3733cb8b6b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99a1c2cb-6f20-448b-8d2c-0cfa6ed90e8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62cb50f-3c27-4ced-91ae-7cf83812b3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b057a3-59a7-4aa1-950c-2e1a5098914e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d96350-e7e7-44fc-a219-22c550254230",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573c7286-2957-4e49-b172-31513210e8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53430ac-6303-4984-aafe-f7d0ce612b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bcab8b-48df-432f-a518-5fa6e1568a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e92d58a2-100e-40ee-aa92-68adaf57fcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af29b94b-330c-4bf2-94ed-a38b9f577a46",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06372562-4bb9-4d47-a5f9-6a07b1a1d2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f71d26-6c99-4e13-9b95-64c50877c997"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113ad06a-64cc-4e53-90d0-7e935079786b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "195c7bfb-ed7e-4ec8-93f3-b66ac475f343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb180030-d74f-4e5a-938a-f59b50e1869f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66dabbb9-723b-40ba-8e41-054f7960a2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4054f32-7688-4a08-a64e-53fa4356184a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39497a80-ff3a-4764-8a2b-d49ae1aa0e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72eb0adc-a4e2-42e2-958c-937558b1a6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3fe999-2301-4524-b450-7097ddff4a60",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd01fa8-d712-409c-8649-81c0752b3829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc58d71c-1a7d-4e6c-9772-9dba5b087e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e0ee1c-b078-454f-86a7-853127eb1115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d85342-9d26-441c-830a-729921f8e6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6738cc-0bd8-47cf-a47d-7821139e9739",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3055a731-ee7d-4f3a-b851-9d788120d3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eb984e8-497a-40b0-bfdd-a6e5d130c808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b1607e-b725-4609-befb-2412861dee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8c00094-f71a-45db-a41e-bee608bb80de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7315bc15-ad65-427c-9e48-fd18d034525a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddabc90f-4f4d-4470-9575-d79e82a57baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b6b3e1fd-07bb-4cb9-bd5d-2b0374e02acc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf92820d-37ab-441e-b5fc-7952eff75db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c94de914-ef1a-43e4-a1b6-8accf3ceef11"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "301d6a28-748b-46e6-87a3-53ef5024e220",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "03397afa-5d09-44cd-8463-7ac109355ada",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce27c2fd-f543-4e9b-873f-ab6637b04ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86eb822a-e80d-4f10-8a7d-1cce269838d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f8e1c5-5f7f-44d7-a331-c9b18340884c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c46a6b84-bc5b-48e4-a09c-90fa9802c90c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc8a672c-c213-4c22-8f7b-37583fd83d8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40cc6d29-e4df-4cad-a119-907adcc3f966"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0af97922-9d5a-40cd-80c2-b35ccd03704f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0cc89c6-85a0-4c5e-9efc-1f80547de1f6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b892c04f-3afe-427d-801b-f47962442510",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "922bed26-0ce6-45e2-9f58-7d4e2930b91a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d84e1028-aeb4-4d12-97c0-a689e20851b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e6eb460b-97f1-48fc-b4a2-bd476d8336e4"
                }
              }
            ]
          },
          {
            "id": "77c991ec-40f5-414f-85da-1bc8b5abef8f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "79487a4f-7e03-4374-802f-2709a1746493",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "97c1c6cb-7adf-48de-979a-25cb9b5c6191",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7404ea6-682d-48c5-afa7-2c348f1503a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b6440dd0-4795-49e9-9591-4d522491d352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c2f79a-024a-4e0d-8922-d4ade4c78943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6420de5-990a-45c1-8bb7-8dabeb3d0636"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1b97d57d-07a1-4bcc-9a12-8bcfb315d03c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "222d76f4-4141-4b24-9a58-a7fa31b5ad35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce002597-f831-4e99-9741-3f5729c92057"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d643b51d-9e38-4c1a-b7a9-c4e1584c74db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a347d435-6443-429f-8fd6-61c23508e18d"
                    }
                  }
                ]
              },
              {
                "id": "e70e0f75-0896-4869-b477-fb32631d891d",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9984c4d5-7ba4-45fb-b0c5-f223aeedd465",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0dfbc03b-3a61-49b5-bcf3-5c70d87036f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08945e9d-16c2-411b-bbda-7eba1ed28b76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "27790320-b4f5-4308-ac26-202162fddb36"
                    }
                  }
                ]
              },
              {
                "id": "c31478a5-389c-40e0-9f5f-00a5ffc712a7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3a4de63-c9c9-44cf-85cf-75e700f261d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da6b16d7-1aa2-4a99-a826-02acbc35b514"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45e6be83-d018-46ac-b09e-ed6f74ee5764",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4cd27b01-d7ae-4ded-80d4-db18a97502d8"
                    }
                  }
                ]
              },
              {
                "id": "c119ee96-45f5-4a87-a6d9-8525942d5996",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48b9e229-94c1-40ec-bb79-35469b85dd24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ef0ca05d-1745-483c-9cd0-f75484bef863"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "458bc23a-5af6-4827-a899-b5a1297d0a7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1539a20b-31bf-407c-bbdc-376bae5b9225"
                    }
                  }
                ]
              },
              {
                "id": "f3a107d3-b78e-4205-a1f6-8f1c79e4259e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49637db3-d618-4f65-a095-e8cfe594fa00",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f7a9c5c-303c-44be-b7af-0577c3f3c83d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4912de9e-5d2b-4cf6-a540-2e6e7dc1d320",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1fcbc4e9-4675-481c-bfd4-aa4826fe4649"
                    }
                  }
                ]
              },
              {
                "id": "d9710c3e-cf6e-40ed-a77a-900bc1090541",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f29f577d-f540-4357-bd5a-2e1224ce23cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "328bc5af-cc72-4414-9c9a-705521fe081e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0defb24-9116-48b4-82b9-4d9e32f4fe47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2648b7b0-2555-4283-a92a-ed76866519f1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9d38dde8-d826-489e-a80c-e2d0fe741337",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a932aa40-719e-4b04-8f1c-98f968e21269"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "41953239-06da-4f02-84d3-168b9ba36d7c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73c50abc-f1e0-4bb9-b38b-3c3ed348141a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72015203-1d0e-4c70-85d1-46afcb022a11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9c176183-e666-4479-bd7b-ef5cf9282904"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbdaa1e6-90a1-464b-9c39-9d9ba9cd20b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "113374be-8743-4f87-9e62-9af2c328a7ef"
            }
          }
        ]
      },
      {
        "id": "438ed830-57bd-42ea-8ade-c419028714d2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "db4fe8c4-dcf1-4d34-be8e-d53915b6ab96",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee864256-4742-4c44-bb63-e665e72791ad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a680bab4-d31a-494a-b72d-747c86bbd5b8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b23244a-bd55-4507-9e9d-d3d81ce54996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86949f39-ff16-423a-97f5-587c873a8ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc715a1-6bb2-4cec-9b94-4b242bb74751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c87c7e-375c-4fc8-aa61-018390d668b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4a77ac-30ef-4daf-9a29-dc216e4beffd",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9d4819-d5a7-4e07-bc93-748bbabc3281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4267e18-ae57-4d91-bfc8-3be4656c2940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc6de26-4ef6-4b12-aaf4-6e6832b25c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36557342-964c-4a56-a028-bd05cd2d8afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0985908a-0e9b-4dfd-8668-93ebe789b540",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9fc7fc-8b97-4f82-8920-4bf266ddb721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87dc8fa-8aef-453f-bb3d-0e4c45aa20fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c07a93-e128-497c-bdbf-808ed3c16fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e528f1b-b4dd-466d-b6c7-a9958f19b583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e7752a-a86e-44c9-98dc-61fe918a338b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f246d89-c8d2-4d7e-aff9-b44d0c13678e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "718aa9ae-5a16-45e8-bd83-cfd53fb5b77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78871e5b-3a4d-4da1-bec0-1202057659f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa186765-952d-4eea-a6af-a33e9bf9a226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194dac37-7a6a-4f88-89f5-d8b52d5522c1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f5324d-073d-44ed-8acf-cc8cfc1e6e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdf483b5-4e1d-4f30-b8d8-57e93a0b8385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7de28b-b7f0-4aa7-a1f6-b19fe770941d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f60af157-1621-405a-ad93-3124f8dbe8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b257bd-04ce-4dcd-bd38-ab5da800226c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d4db773-af6e-47db-bcfc-77d7a1c64d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eb88f7d-667a-413d-86de-f5d9427fd5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185ea6bc-ec6b-43cc-82be-d00298387e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f36505c3-64a5-47c8-9562-641378849205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5437c6c-1765-404e-9171-a72e1bfba9ea",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22be4bbd-1c89-4f5f-8f98-b2b5f1a9d98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0834c997-7b36-4d39-a1c0-8aecc7612e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b6c6a-1fe7-4fd0-a209-946847603149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d766a54-4346-4209-ae88-53cfed84eac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e35132c-1e50-4c8c-8def-e8eb82ebb1c1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2801624d-7820-47c2-817f-68985e5e388b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac2e156-905e-42b0-ac3c-fb0c5f5ba53f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab2a480-bbc1-4201-bcf1-de18e72cd8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43068f60-dc43-4b36-92c1-1d2e67a809d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c30d136-6690-4e0e-9c89-7cbbd99922db",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4bdabe-1567-47bd-a413-99c3871947a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8adfdf2a-b619-404a-a8f7-e200f622863e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd40b7ae-8c4a-4185-8484-dca90d86973d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1576bea-ae53-4f2f-b447-0c6fe6adc4aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49d128c-605d-41a6-873a-7ec0f80c5787",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870e5eac-80b7-4405-8495-33dfcc59b257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82f1cec-96c5-4b82-bf8c-6d7df6a07dce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38cd1a3-869e-4375-a6be-709ff0c27a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d95652c9-3b96-4c61-be96-13201157e505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45334434-c599-4175-99f4-cc1a9dc4e5ae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c59628-a128-41e3-84b2-5a41b059dcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2366cbe1-b013-4f91-8a83-3ff4649235d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c37758-a63f-47df-b292-6c81bebc09b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba3fcca-5550-4b80-8967-dc6b10758404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c928e30-f309-4f10-a309-2600d0c23196",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c874164e-b1fb-4f3c-b174-eafc50660b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5dc8ea1-97f7-4339-82f1-a840a290edef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d371953-2ac5-4585-b22c-ad530e4b5d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d241262b-1446-41fd-aa4f-ffcfbbea6e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f0ce271-1293-4f3b-91cb-b7f77d7f0fc1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498be97b-6111-4be6-9f0b-8c3b2f392a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b2dd2e-6e03-41fb-a6b2-22d0daac91b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03b60ca-b750-4bcc-a499-0702ef09205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa3d66d-6854-49b0-afad-970ef14acb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8317087-1a80-4bb5-a723-f98d28f3a9c9",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8afb8a-cbbb-4dc1-bc1a-94e896da5128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "991d3817-dc80-4b64-962f-1cd1ab63ef0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a268c0-cbc7-4033-8b5a-dad217a9dbe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d1e29b-dcc0-4439-b574-c4d9028535a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed923b7c-a5b6-4e77-a00a-55f96bc466b2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899281f6-108e-4b2e-96bc-a68dd907a261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcbfcb87-1caa-4d0d-941d-3e445dbb9097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42987319-58d9-4733-b2ac-1f2ea627f7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27c2dda-b5d4-404a-a471-557c78e8453f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82aa0ea7-5358-48de-b92e-faf1affaedb6",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53cb7ea7-325c-406d-82fb-38e561bd93c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52b3bb0-e558-4669-8a70-c095e5b0061d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29baac4-3c13-4b6f-86de-0a6859fde759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "aab2fab5-9eeb-4d50-beb9-9633966ed5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538c460-6f0b-43de-a555-c2ed00f12c72",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c5676d-6db3-4095-a50a-d3be7478f8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133cb47d-d8c4-4cc7-8a64-8597efc7a9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b41b893-9a8d-4e26-b9e4-ddac145a3509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf05093-fdf7-4783-baf5-e0a371e6221f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4e18cb-c008-4a40-9bfe-422419ca30b8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fee66f8-44ad-415a-9237-7d372dd8347e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c0852f-ead6-4afd-aa4d-2b129125c1eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf9bbf4-e0d1-4bf4-8254-3b0ff115fa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "687bf373-d429-4252-ba26-0b2efd270390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab7b182-0fae-4509-9c13-e483d1e24297",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc66f060-f9bb-4d0c-956d-1bec6d5cf8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4adbb35e-1326-45b6-8b8d-239870b2ccfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54316263-41e0-4ce5-998a-65283d860aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1d38e9-7c26-43ff-9b22-71ba55ff5bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1824147b-4939-4073-9bc6-3a9ae822e619",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "723c2999-f789-421b-bca5-057469b614fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4259e49a-83e1-484d-bef5-fd0a1f4bd140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1eb08c4-3a0d-4635-93ba-5580355fc44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "462f5756-81da-4be6-8bf8-0215254ae996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8b4b4f-ed6c-4cbc-b9c2-f4a77a23ac85",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b096a1-1e4f-482c-857f-587b2303465c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582d3407-05d6-442d-8d80-b462c6c6a120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a791e8-9173-4fa0-9850-504ec7852544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da9276c2-f37a-45ad-aa0b-dbe591d80b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2efbc155-a66b-410f-b25a-f12f58203e67",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c7b9f1-ea02-463f-aa31-fafa7f3a06ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6679d8-8830-4871-a809-d9c2667a57a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ecd314-9761-457b-acd2-c7b7757429ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52aaa4e0-b45b-4b24-81aa-f78873fd8df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2959df9-0f06-425a-8ee0-b5eba200266b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a13df9c-bd3d-4d32-8f80-e1a7ee61cfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88de9d92-8d46-49e4-8eb7-d98e9526fa91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d53b628-8f8c-4fbc-8b36-84235a54172e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a37fcea6-915f-4aee-8afd-e8795a86b019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff12de66-3325-468f-af0d-27fed3912ec9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acb543e4-5c2a-47e2-8ccd-f087d960e0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d87c508-75b6-428e-84e0-477eef0a1759"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0842e496-32e6-4e0d-8880-2963126e83e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8a40ba-3291-4b1b-b1e7-9b9044ffe5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1499dd91-d6ea-497b-8895-8ff7a43258fc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a8f663b-9d19-4f13-9eb1-6da726f373cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f851b3a-a2c8-4b24-926f-1a6c0de5437c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb7bd57-e176-4f3a-90d0-c1300d887d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aafa94ff-dfe2-4c62-95bd-99db0c2d3f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555f25cd-7582-4ae3-9c79-2e6bfe4113bb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f568ab84-5794-410b-851e-cbfd606fd703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2585231-a9a6-4822-9ff7-2aad77f5da3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36f493e-8ab8-495c-99e1-ceb213ff1aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa93967-7dd6-4e90-9d3f-819ac9212d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbabd8c-5797-4143-b4ad-1c787f04de88",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9240f2aa-d820-4fa6-9fb5-e6862b6b637a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c129a3ee-20e0-454b-a409-8f77ad59b206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d4ec49-a1b7-441e-82cf-970f6d47afb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55a3fdc2-1452-4886-a21c-6d36a34ee6ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c973fb6-5ade-465f-81d7-79c9e9d80c3b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5e3605-00a1-4afd-b6b2-8ac906f0f998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6578e0b8-6fd1-4e4c-b041-ae17ecd1a598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fb3134-6b27-4181-850c-c94551534f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31488974-7089-48c5-854a-a3671038c623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1a5918-2616-4535-bdec-70c6b7f2e9d6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3922bc-bf97-45cb-831f-b2802fe51d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff39687-379d-48e9-8ed3-4d35edd80e61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ef52ab-9283-419a-976c-824c17755218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e566ea4-4e8b-45cc-add2-d21bdbdd533a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccec246-23f1-49c4-aaa8-41ab8e0ab8b2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15dddf80-a81e-4ad0-b21e-35bb306d1e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c65c22c-74cd-4565-b3cc-9577074ef147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc17927-fd79-4a0e-8e8f-5a4150ce8257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d668f2-e9a6-4f9a-8db0-77c4ccafa433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cf3eaf-6a86-4282-8b75-b1c8b4751bfc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659df239-609a-43bf-aade-511a54812b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df5f159-458d-43f4-9a89-b394b27d1481"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2e1e9a-48ba-41bc-adff-ad1a39d7541c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4de812a4-8f1e-4b82-9506-dc58704d8ab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f502f-28f5-44c2-a0a9-015ff7670269",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d1d9de-f8c9-43d9-9b0e-83bd1f6e02d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22345d9a-3dcd-487f-819e-d224f0210e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56ca9de-4472-459a-8474-4618db0041ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "950a3de4-ddd8-4ed5-b1f8-3f0930cbf6b7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7c4000da-e49f-417d-b91d-845ce49b451b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a873907-70a9-43f7-9a11-9ec7542b8957",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dc6ed9-4c31-478d-92e5-657c701c03b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c3464cc9-24e5-451c-8daa-a97fb093e5b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6d22169-aeab-4e29-9a5a-2853ffad77c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32f155a6-b2d2-436d-98ef-57ca7e2274bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5e7a581-20dd-4cbd-a724-d9ac1a0ad135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cb9bf5c-686e-4c8f-bae7-81d9e729c6c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "134208d8-eb0d-4ee5-889a-4440f93240e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a721fd6-a839-4146-8774-b33ac195ac3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02054a60-9c47-4a96-9a47-246ef5645ee6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "830cb5ba-3fa9-4662-9e92-2d3d972d1a9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63e669e6-6ef2-4f9b-bcdd-72221e78b18a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5739d5d-5a28-458b-9369-7a06f6911068"
            }
          }
        ]
      },
      {
        "id": "a8bda381-36b5-43c8-9062-4e53808de787",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3c7a6f31-63ca-4c37-aa1d-870f763916a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "403a96a0-661d-479c-ba1f-ffd78bfd7d69",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad76a8dc-3282-4515-943d-a70d06d4df68",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e6751aa-face-430a-a059-e2a0e42e6403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1e4d2c-32f2-46e2-b9f6-2e3022785ecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401ba2c8-19f8-4000-9892-2f182a7c0899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "67699b51-79d6-4681-ab1a-57d9d6a6c099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9378ae39-8a68-40fd-ac34-eeb30b744604",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd53339-e1a9-461b-87e6-f940d0a59c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39378193-efd3-4b67-bd9a-891f91677b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7a780f-16ef-4b76-b1b7-c14f29f07382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc74a197-b4bd-418f-b38c-50e092880c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5316fd36-24c0-4ca5-a347-7fde3d74968e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8afe0f9-c528-4712-83b4-e634cd258633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f9a0de-6e83-495e-9ca3-8c8fbaa32329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0222e0-10f8-4108-9fd1-567a18b6dcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81b7d4f3-957e-494d-a299-37b8a1f8d4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45064467-0fe7-49d0-bff5-94ec2f716f8b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdefc13-1439-40de-b5a6-904834ed0222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e2090a-0324-486d-b057-08578a0769f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21aed90-bb7b-49a4-91ed-12bb4fc98a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7350a84a-de44-4542-bbb4-2cf0a24be33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf57ed86-15b7-4e63-8d15-6c0039f73db5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5edcfb-0e8a-43ee-b992-60d08241a329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4bbdf67-f7f0-4dbd-8aca-672749276e17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01e8e1f-2c5b-4f04-aa9d-4d412a892f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a29a6df3-5033-4c66-82a8-122b81b65108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ccecf1-eeac-43c8-bd8e-dde9a23b679a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a922414-8f22-4baa-8d21-9929ccc6f41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7875e719-16c3-4f83-a3f2-8227a21e6dfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1b5861-4b5f-482d-be73-79248fc1c780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cb50bc-3bbd-4905-b44e-bdfdbd313f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "096622e4-4a3e-43b1-a214-64b6e0aeca92",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f37ca4-25cd-4ba3-b2c8-234a3bb67bca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57f95a6-b925-4cd7-985d-a90d577ffdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c2deca-0bd1-4ffa-831e-447e6eb2d4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8412b555-ff96-4cc1-b381-b01e454a5810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b25d877-dbfd-4df7-831c-f4b5f51bd7c7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08a9692-9ff1-4cea-acd7-bdfb534a25bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b815e734-e545-4246-83a5-7a4e7c107172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94568a8-3693-48b8-9499-8d4157b68a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7360fc5-7765-44d4-9250-43c62976d50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061d8586-8443-4196-9ed4-310dd3edce05",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f1ec65-0e18-43a8-a8f4-aa384425579e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffd5258-22af-4c26-b104-851cc600908a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72295870-bfff-448a-a6f3-95583a82f32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a0918f-8325-4683-a8d0-e15ea1e04a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e66a2cf-4285-4c3e-b24a-39d9c600b3ef",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a79d1c4-4d57-4b86-b2a9-a218fa601686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c529e5-68ed-44d6-9dae-66e29f508a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8940b17a-4f2a-4c8a-92c8-cfa361299b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0fb988-c165-4bb9-ab68-e1e2f37fffbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d31fda-42c7-4fbf-b506-50654226e777",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8ca77b-c367-47a5-a6b4-5bfd4c16ed7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba357b0-3f54-435d-b494-1d7ac16b24b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92329d7-4091-426e-92f1-d839d4c887d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c079308a-e574-481d-9500-ff603d9a6a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddb2aec-8cd7-4732-b040-5929a7c27ab7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e368eeab-758c-478d-8841-8ea4f63a8c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b2d80f-080d-47c2-9013-3e6c7d16dddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b4de71-8c1a-47aa-83b3-be9374a34fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c10ba9b2-1d38-4491-af53-aaf8dd7ea4c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58596e4-fd42-4c35-acba-65de99913a18",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03247abe-48cb-4a14-9cf7-a9e667fa3ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "021fe4de-6eef-4d3c-a7a5-d50bc5f675f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d32c0e4-93ea-44ca-80a5-19669d1eebbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1db0f81-fd73-4bc6-af5b-a17f159faafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196e7d6d-0860-4ea7-90b0-ce8ed31e7f68",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623534fb-e6c6-44a3-93d9-bd058747fd2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d7b2a7-6bf7-4845-835c-662be722d3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d169ae-a2c9-4fc2-997c-d44e9d483388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc5653c-12e2-4983-98dd-37cc7c186735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5873a11-dc0a-412e-8f76-97da8e4a7d94",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "919903cd-c11f-445c-b2de-3a46ac0b926c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbffab16-9225-4871-bf65-28a440ac7d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26432902-9de5-462f-a4b8-60982940ec34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "51871419-c032-41c5-a097-b855bb350f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343c1341-91f3-47c6-b198-cd9dd1e69c7f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb30c6e-da38-4e58-808d-f6f9fc2e44fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d801957-0e71-4efd-b973-a7ca8af1ed2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ac96e7e-aad8-49f9-907d-b161dfef38b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c01e6ffa-8409-4ae0-ac71-e51de30974e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18ea8dd-a5f2-4ebf-a3a6-0fab8b65e80b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fec3f96-578b-4b18-a3f5-032b0b57fead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6283767d-47cd-4111-81f4-fab5c36eeec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4addc8-0c5f-4357-97aa-16c90a349b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bd03523-f4cd-481b-acf4-e236504c62eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86852c7-56c2-41cf-9f30-840083d48a85",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f0b570-780e-4f26-bd56-1058e4a9f026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c8832e-2b78-4d76-80e9-d313b06ef2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0d5626-b581-41b0-975a-53340b7ff1a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f7ddec1-de1c-4be0-b67b-1390bac37499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6104fc-76a4-47ea-862c-993d6a853006",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dac0da-e1cc-40c8-877d-4a7bf422727b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6f4ab2-fe26-4cb2-85cb-88766082b64c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2415137-e0cc-4042-99ac-b84572c9a00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f1eff8-6dbf-48b3-9f74-c0ce7567b0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94d132e-4530-4546-aec9-2fe124226caa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0b7f42-bb71-4447-9b58-0b71b9041ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95a8984-86ee-412a-9f83-6f59ea9cc02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1997cbf-ea4a-4f05-9ba4-f161deb54abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa01b8bb-1844-44cd-b6e6-dafd8a852392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "154e6cbd-d497-4690-8595-c7726fa0e8a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2658f2d2-f7c5-4dae-9bfd-104a28d5600b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95801a3-086f-44f4-94f7-1e98e43a5717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130b902e-54ef-41bc-b720-f47221e66547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75db8087-4fe8-4106-bbdf-9c815e1910eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec6a7d9-8902-4376-81af-46cefe563256",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80538500-6349-446e-be65-acedd1b0293a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2485d317-e784-4e7b-a84e-fcf8dcfd8ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409c53bc-4aa6-4acf-a779-8cd1fc03a39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "880e1eb1-5358-4d4e-ac60-254d2176fe5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe6ea32-48dd-456b-b8f3-a894bd19dade",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc9f7a5-2d8a-41f2-92fa-fc74ccb8d24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4cad861-ae7a-4e7e-86e8-b31c5d74c4af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc773ed-1c45-44f3-96e7-e526094c2fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "008bf380-c3df-40d2-9149-4497be269f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7653a46a-3a4c-43c2-adde-c022a1f2432c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f6a31d-e339-438b-8b02-64ee60e1ec14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf61080-7b61-4e53-874e-d52f0c28ba17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e9e40e-e2f7-40cd-b7d0-31b2b825f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "866c78d3-fb30-48bd-a87d-d43631eab7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fd9ad6-bc1e-485f-aa9b-8714fcfe03fd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0769dcb9-e5ba-4747-ae40-954a878e8e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e625813-75ad-4d45-9ce7-2c94f6365f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e63dd2-b693-41f1-a705-f866b457fe2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "160903b6-2a51-4d3c-8b3b-c2f76c82f8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe39cc00-3b48-4b76-a4b3-d8896ea93dc1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b1ea9b-6acd-4ad1-9a56-e392a6571eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ee1606-cb93-43ca-8133-082f7b2ddc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbdad29-b59d-4cbb-afb3-49b04b326d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b122dd-8d46-4fbf-b4b9-91c5f550b3bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687d3be9-86b9-4d02-8331-cac51b94ceaf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d042e81d-4151-4f31-9df4-5e39834b9fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48c5e23-c43f-48e2-9904-51b1b99cd732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892171d1-1b20-4003-8af8-80b1906b7c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98fe96ac-bfaa-4c51-adc4-c8d0e4a17496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fefde4a-6f5e-4bfd-aae7-4925ea4ac938",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f798e23-5f7c-4b8d-8447-6053d7a4fa06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe4c0ffc-b4b4-43e4-b4aa-0a853fe923c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec8515e-6f07-40e7-93de-a573e46aee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d34ff503-f834-4014-9479-b68eb6db0da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d8964c-d528-4e5a-a18f-8dcfd9b47e73",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b14642e-e149-4d37-8efd-a9c2fddf883f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bd87a60-1d07-4768-b707-594411c61fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35da2c0-ea8b-4923-aca0-471aa69a2a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27cb324e-e0f8-4123-b508-ac395f25e674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748142fd-fb50-44cb-aa75-f690d89ce427",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ba73e47-f634-4bc2-823c-cc8fa7a61b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2871f151-4282-44a4-95cf-223b1e02b739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5200bb-35c4-492c-a419-7554600caf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b2f378-6b76-4ae7-9782-57b239827766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8e356f-14c1-4d5b-8858-015f94ea55ea",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cb76cb-83e2-4a9a-9506-86a702da698d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11abe19-99ad-454c-951a-2f5c14d0efa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85cb5eec-761c-4a22-9215-bb0404fde232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd361444-426f-48a0-9436-983015578c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf1ef81-c70f-4119-a00d-fc187d0daaa2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aebae32-2d36-4e61-ab24-3cade4be6b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb323e63-ca58-473b-9e7e-c64318c7eb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b09e0c-6d97-4bb2-85b5-6815a9c15100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3d3a11-3f25-4684-874d-e6316b98416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b366552d-1449-4d38-92b4-cfc0f7766199",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea2ef22-4f28-4cbd-81e4-2d314c4fb169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8058c531-4f95-460f-bf85-31d6aa9cd69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a50051f-e3c2-4b80-9fbe-91aff75c8a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "118ac941-7a5e-4dfa-8234-9379278079ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4854a927-3883-432a-9556-6cead7d6fbeb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d554d7d0-c3ea-4bb1-9bc5-091fa0adc7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa2e2608-7f29-4340-b395-b1534bad908c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114a0edf-5e32-4efb-a9db-181d893d8485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1256df1-f1a6-47a1-bd29-46f1031bcc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c33f06-ca5f-4725-aca5-6d0fa181582e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3018406-f8f5-48de-ae2e-76f660232522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b823341-578c-4911-a1ae-2f8fe54d6e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b02d3d1-d0b9-4341-90c5-778ccddc4c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9658694-9c71-4d7b-851e-90c882b1fe33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee8702d-038b-4055-907c-2f0535fd512f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da522028-d354-479f-ab9c-cd2af04734bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da90363-fe95-499b-8226-841d183782c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7946cee-7c00-40ca-bcc6-1d329e39b30d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "588d767d-dbe1-4f9b-8b7c-4e1fc9af3c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d549f1-652b-463a-887d-96fc1346600e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e9b6a5-251e-4b9e-bfe8-e0a075fac8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df7c835-9b64-4ced-b512-9c87717d84de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca7a7b3-5a99-48ab-a08a-335bb426384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84fd37cb-2cd6-49bc-9dfa-1a81b96531a5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "745c2cd6-c539-4a58-a962-b08f5071d913",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee4e3818-6ebe-4ff5-8741-ad6c4653b6b4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a960262-9974-45ed-bda4-3211ac824ddf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2263bd6e-a84b-4262-8621-c86d8eb42bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d06d2be-a73b-41ab-9a1b-b5306325c8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae8abbce-081f-47f1-b2b6-f2c075ffe4b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1c652c7-ac8d-4d0e-b1fa-eae76c0f8a0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7908f4b6-84bc-4622-9993-955c26c456f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "125106f8-d3c3-4fc3-b1fa-3f1b1ce3e6b5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c50e8a07-0158-43eb-960a-d4a88be33868"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6076b5c2-cc81-41f4-8a0a-bc050d618fde",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1110f9d8-d708-4de6-a495-4b8713f7d8fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47a8cd93-b8ee-48cd-8774-a618cf6e2cde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3d6725ad-9f41-4224-93fd-bacb1f568f9d"
            }
          }
        ]
      },
      {
        "id": "4ff2a7cc-17b4-4149-8880-9ed3d69f3099",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f96cb8fb-0c20-4db3-b1a9-03ac4195762a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab759a79-9884-480e-bb12-975311620f41",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0be881d0-958b-4bb7-a392-54f1ad7633a1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de8e52a-b223-4434-9759-88ab67cac032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeca8685-4d86-4ab3-855a-b33d6cc2314e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415241b7-82d5-4c51-b01d-0c0ce90c7602",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c48d2a-dbbc-4677-8a30-696efc1e24f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ac98fe-61ef-4ffe-bc2d-8c602d43d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e59c62-b937-4ca2-9150-50a95e12ac76",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100ed226-dedc-47de-9677-41b493b91ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04f82e8-dfa8-4dcc-86e5-71fb6c0eb2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c561098f-66b0-46b1-8e5e-96e982add5f9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5442072-fa91-4de9-a2bc-3ebd070e5d69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ec1117-ac60-4865-b1e6-5500fc72c8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821ac9d5-008d-49fe-b639-d9b52136b20c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dfa508-1b0e-4ed7-86cb-ae24131638da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca74227-2c35-42c0-881f-1ef4dd615c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d680c6a2-3dc0-42e7-b826-d8e440eca54b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cf0f42-1b53-44f2-98ef-950fa2f5713b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669a9a2e-0496-4024-844d-ee28d9577a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a101bea6-0945-4a05-aff1-dd8071258a42",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a79f3c-3b1e-4cba-af2a-c2309f68fc7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95f761d-d3d4-4fae-8926-b675a1dafbd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f84c85-e4ac-42a7-8aa9-21be15b255da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cbf4599-f3db-4435-a805-8c5c8444bdb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c1b132-82cd-451e-ae56-62e4859d002c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee5977-bd55-45f9-8be9-ea02cc9e607a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58f98f3-254b-466a-9c1d-906f45faa218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a98cf0-466f-4d5b-ad56-c02de1d10579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de80b20f-fb5b-4c8b-b554-c503d2bc1d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e37e8ec-3f56-4e72-8aa5-4058c39d3a1c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1a1842e-3358-4ec5-ad16-4c8c19e2e602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65c6a056-c0c1-4414-8a13-36356995358e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddabfc08-8452-4634-a8e4-48ed5c0ead07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7cbbb0-52ce-47ba-9df7-cd694b712499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01c8c49-8fc4-4f15-b018-11616824c7da",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811605e7-11fb-48f6-805c-9805c4ef0a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e739a7bf-cbd8-4513-a4f5-0b38e7c3070a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ab535f-6c70-466f-8cb0-c1bbafc138cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f12edfe9-b857-432c-9742-ba2c0573ea88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2766537f-5ef4-436c-85ab-4b6b7897343d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38c3ef5-d48b-4ade-9b6e-cf9a9a8c0d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d2f898-16c7-4413-829a-ff67d4c38f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0247348b-859d-4377-ae55-0af97767fb83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd2e4168-0e60-46db-8191-e7d97c750091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5d912c-6bb7-4ac3-99f3-501c38a459ae",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992f46d3-58ae-4c8f-a3e3-351a231a3fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95e0ff8-35d9-4b9a-a119-87675989b435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6df5e88-348d-41ef-a0a8-e8f05ee1c757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd0860f4-5525-4c49-8066-89623bc1787e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ac0ac8-813d-43c0-9072-d08674534fbf",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80133116-ae69-4fdd-bd7f-526ec2951bf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef9bb82-0143-42f1-875a-f8da86bae93c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba98e384-235c-469b-94e4-43604414fb96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5833c102-c402-41c9-8322-f29ca206a76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4b96df-e874-4722-84e3-fd545cbd3c67",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49604ce3-30b4-404f-af5e-881bcf6a762f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a510b7d-57a5-42e5-acee-bcc3fa794e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfd902b-c70f-4637-818f-eb3e8c684d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19be71b-9328-404c-a46f-17bb53ea8bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3692ce53-ecb7-45ff-9e1c-2b238ed7bcf7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941e4c17-5875-4687-8dd4-de1ed3db6f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a76414-1c31-4dde-808f-b2816c9564ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcdebf8-e294-4159-bf49-169cea23f0d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805a832d-bd93-4afc-bacd-a229fa53503d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da89c3c-921e-44ff-9c36-99e04b15ad92",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715ec1a5-dcf8-459c-b329-05992ca99fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aff2b927-d350-43a2-8589-6fcbd3cc451d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e47239d-04a0-4e3a-81d8-ea2687a48273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c4b8d7-3cb5-4805-ace0-50abf798f1b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5726b55-9ab1-4d82-8eb6-cee3851f9053",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99517268-b30d-4a79-abec-cc3360977693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37e741d-9924-48e0-99b4-5817dd9c3f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65802bc6-51dc-48f0-9d87-5882a955ff31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475c3d9e-941e-40a6-a109-f9d8b2778374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76cf7419-c272-44da-82b0-78b60566333c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf9ff34-8f6f-4d51-a50d-0e9cf74ae44e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31eb409d-c04f-4680-8537-86ea98155b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64625bca-8b23-42d2-9a29-8977eb3e0a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62af9979-0db4-48ea-a581-01928785b375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641034aa-1c0e-42f9-ab62-73b6b85283e4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d457e092-ed42-4506-8c2a-0a69c48895a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcbc514-8945-44ac-a00e-73af2d93dd63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5012f862-9b64-41c9-9eb3-e88d087ba3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c52bed-bc96-41ca-9c2d-8f132263ad21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e848462b-3fe3-4af8-a162-db2efbdeedc8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ddf0909-9056-4d72-9130-de84b878b3e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e817bb-ceb4-4537-9418-355ce2ef119a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad8d285-c297-4087-b35e-5d93d00419c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8be280a-f4e5-47fb-8da0-03d1f9e6eb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4582175a-eac4-4b40-9c84-7523b550ccab",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cb4ae3-c7a7-46e7-b4dc-ff8f911bdfe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01e08b5-60e3-4046-af5c-1b0c3e39e42c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70a25f2-fa3a-477b-a457-3627a7d4294b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f137bdd-9563-4bca-a274-52d3058d2213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069f9df7-f715-4fd8-9fa9-a5ff8ad611f9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2274e0b8-156f-43dc-b2a4-cd8004b0cb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6a01b4-1e9e-477c-8122-11f43cd59324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0319e4-9f77-4be3-b30b-89f7e8c18c99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a799bfd-e588-400f-908f-3a8b1ba8f413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc8f9e2-72cc-449e-9319-5edfc20ab6fa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a550ac6b-05da-415a-843a-78c7d6fd1d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709c5b71-884e-40a9-a934-05e2f27a2c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6a1f4e2-db9e-4009-bdfc-17bb6a6b5390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28cfdcc9-265e-4ef2-b83a-35443741f883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726789b3-4ca1-4f31-bf8c-cabc698788ed",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92de8af0-a626-4f18-9c3f-bdc24ffae89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5867a6de-1173-462f-9443-e4d325b0d38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e74f13-2dd6-4628-a404-c199a346e305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18022661-4e7e-45ec-b138-c2378a6b5a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f200e354-108d-420f-95a0-e841dd17d41a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ee51e9-c48c-4e4e-b2b7-1dc20df1a49a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "016a3558-95ed-4bda-8c37-53920724c2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04b5cb9-fc3d-4abc-a510-dddd360b8e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2288ffda-ba7f-4f7e-b48d-7abd606e4d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5be1975-2798-4968-8aa4-23db02c48b5e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0436bc-efcb-46bb-8cae-d429d27e69a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1174b4b1-aed6-441b-8831-9c62b170b9f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "284b3fcc-6a23-4fd6-b5c0-23e24321ec4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364c8a6d-70a2-465e-abb2-614c4965577f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3701ca-2372-44eb-a8b4-c81bb16fca67",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ee7cb6-94f4-44c3-a2df-49c4fc491f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce494c70-8efa-4706-995c-f03425c78db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc81676-f117-427c-95ac-6c472d90db9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc0f16f7-4965-4acd-a13e-21d38ebc0015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce597536-eee6-4f39-887c-93cf4be5ba00",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91cee14-60cb-491c-a472-0d1cbb43235f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb276585-8a82-435a-98c0-e827b1c1c895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efb637c-ac8b-4384-94c3-9e857d1cc154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45944d33-80b8-4cf5-be50-5478367d7157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275c9aa6-ad8d-417f-b6d5-ea4673671147",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce1a1ea-8fd2-4130-ab6b-c77ff2f9571f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993f2e1a-d14c-4ea9-b226-a17463c3cf62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362cbc3d-6b31-4942-8a1f-4026b7a49b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2895c0c6-17cf-4f49-9320-97aca23d1cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4685136a-7ab2-47eb-a9fb-949e168b12f0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367d80b4-6655-4030-8e5e-6856f33f27c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eec2afb-b6b4-49cb-ba01-90020067e7a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c900a868-0354-4431-87ae-5f47c847e4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bad17d9-8419-4ae7-8a61-6279c41225ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe72ec64-d5bf-423d-99f7-a6acad5ed4ec",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fefef41-aa7b-4a6f-bd76-fca3eb175134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ec9f82-1377-4a17-ac5a-20cdeca48dae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968edfc4-8d9e-41d2-af95-593f51a413fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df743d2-7538-4562-8243-5a8623a43341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8170f7-c8e9-4ad5-acfa-3159baaac893",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed2c63c-abc8-4ad5-beea-10a1282a1024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d53c1b1-23d2-40f3-8451-46b27814e5ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5375fa-7739-4fef-942d-7f5e0416f04e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889b8983-2c93-452a-93d9-0d289cc474c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a228ae07-9acb-4c36-bd64-74060d61c3c3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260f9d44-ddb2-49bc-ae9d-9edde0321f37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df5d2b64-123b-4979-932f-ace926feabb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4067ee-4588-4619-a05a-28565912e30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee212d07-0f2d-4593-980d-6f84f2d5f8da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4762aa-8559-49c8-b850-5f578f7df768",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05c92f0-59df-4530-b583-f8dc261c9247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1df1d30-ba76-4c7e-8cda-2a72d89a85b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1389005e-1c95-4521-a199-4d8ec3ed3d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c75c2f-d6ce-4525-91c6-e5c530060be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b0a627-13da-4d41-98cc-4487208958e5",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb7fb489-5dc9-4eac-a90e-7969db58880a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "661b0ce8-f424-4f4a-8665-bca085712ec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bcfc342-e276-44ff-961d-df9875a8ab04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98dcc344-851a-4f0b-93ea-918cfebd5454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de045e80-c90f-4461-98f5-b0bc981c77d5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f50367-7122-4a64-a29b-93dafb15ae7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f990e0-7697-4d9b-a914-1960164ea08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d4abfb-f331-4923-a427-e6eedd402a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "092ab2ca-1090-435c-9913-a73ccd6cea33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3cd80cd-3457-4ccd-90cb-0d3721647135",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e092941-61bc-4f7c-8eb8-a211564831b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f74df35f-e780-4b2e-bcdb-30c25930d2a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fff06e-8164-49c9-9a95-4e8012fed889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3cdc6d-4409-4598-ada6-ca48ee8bdb17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6da959b-0fd5-458b-9c25-0285b6b9f136",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00060d72-66a3-4954-b972-75f2a534a6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b811d204-56af-4298-bbd5-e1a89a6cb99b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a30f639-49b7-4a14-8692-a3070ab38874",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2665afd9-b9ae-4c12-997a-a9855e655992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a907094-460b-4dec-b183-3b7c9b47fc15",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6318e6f2-8ce9-4c68-9f0c-dd09c61c9b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94eacfc7-4d8b-42a4-9eec-d73ed8810510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c59ab1-9c86-4483-8951-b9cdbde19f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9800b4ab-da67-4e0e-8956-7ef9efb2ce28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59c5c87-26b4-4406-b6e0-657de7a0119d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d020bc0a-384e-4e5a-9772-866f2069d4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebdd0eb9-0ad8-4ff9-9a09-88858359d0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56393b5-cd85-4873-a93b-be5651dcb4e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a4ce2b-e7d7-4b45-a7b0-456301481caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eda5a0c-2889-43f9-b96f-54b6d3781f80",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca08ec4c-15ef-47bf-8d26-fd904877b9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9266d4-ea21-4d96-ad7f-5cb72ee1d20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51c3b4f-4e64-48de-a69f-77bbe38f1ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f88f74b-7fcc-403c-8696-a9218b99ccb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db80e761-cf78-4d50-b145-574f43309600",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e833987a-e4c2-4722-86ea-10405ceaf0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59419c30-861e-4ad6-b2e5-59c0cb26a9e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a70adf8-3f49-4264-89a9-3a32466d061a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "662f9911-ff62-4903-bcec-be9014548662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40956166-c188-4e72-87e0-7cd7c52ba2da",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b056fecf-b154-4560-aecc-80d28996649d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "142d8bfa-2466-4eed-8ba9-0c2828842404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f360979e-b9ad-4536-a8f3-e76120597271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000d2c92-8522-404e-bc28-9ac13c74774d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3d9e7e-35ba-4230-b493-116fc27cdce2",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59f90e4-414a-4be0-bea0-f8666096e21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8408f4ae-8749-43f8-879b-51398c822638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6130181f-9076-4fb3-957e-265ab0bbd97e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6d5a40-ebcd-40f7-bce8-140848058e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcad71f9-cb47-4218-bf5f-6752f959eb4c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daaccfa-4b05-4527-845f-f3e6ad0db30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "695417a4-7fd6-48d6-a1a2-faa57ca5f4f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24072e2b-82b4-41d1-ba2f-e0f99a8cfabf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11100ff8-54ac-4054-bf48-adf5b37656af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc0f39b-a219-40a8-874d-421cc51534bb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804a77ca-c840-43d6-971e-abf413fb0b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66f84fa-4ab2-4f81-807d-61f3851bc096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e910dcb7-353b-4c22-aef5-a8e009fff917",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e663a8-5e8e-4066-a545-699ab60474c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba62ffa-8626-4d95-af44-9b8c0a73a2ee",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9231c3bf-4d70-48b0-9c57-99d075bff8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd152e5a-27f9-4f2a-8bce-e782a4f8c988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d7d8ea-639d-4d7c-bf54-2124d38945ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7d2a9a4-a835-4360-9af4-af7173df71dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076b8b89-947d-4cf2-9384-54e513ae2cb6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078193d9-2b1f-46f9-9899-3e3a627731d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5873365-c685-488e-b4fa-7d562432a980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f9c9b3-95da-46f3-aa8d-61028a1bac40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44113521-e40f-472f-bb8c-fac19272845d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f64537d-3eed-474e-8d55-398e886643e6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6ef286-957a-4458-9702-43cda155bf53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130630e9-9ce8-4304-81f7-f75a286c9125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47988948-2330-4b88-87aa-1d41ad6b4049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba321e7-d073-49a0-876f-39fad8cea338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7930921-163f-4e84-b6b2-f16758fb36cc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5d5585-1055-4c46-93d6-1fee1bdc29f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4761c085-6ca5-4179-9a91-2698013d693c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e188df-8b51-43eb-ab22-74212b8901c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fedefab-8187-4089-9d56-d8e0aff057c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7615ed-5c66-4a02-a19b-bc18d48b7574",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b795d5-c8c6-4ac5-baa9-a388a97fe22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41df9f71-e6f6-4755-abf4-754a3c1df0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38aa0a3-602c-4438-827d-8edc38e6207a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59fa4558-668f-49b7-8119-6df417c03726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15dbdfe5-28d8-473a-b01d-959d91856571",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "121b875b-b28b-45f1-ac86-056768d0f468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "823b6f4e-2975-4ab2-a847-2dbf9e005b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7b5be8-b14d-4d99-ba16-8451568276df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f996ae6f-d437-44bd-9fb8-66cc1b4adc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a515d71-db4e-402c-a94a-731914a9068e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48783b22-5e9e-4ff6-ba82-4231f86e22cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af2d8ba4-1e60-475a-904d-7145532f4579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ac6c1e-9f68-41a7-be25-f61574574658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9041fcc-9ecb-4f93-a3df-9676390a6133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bccd4a-bd2c-49e7-8db6-358fccb35bfb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21288e55-e44e-48bc-a3b1-6194e4269e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52744722-b9ba-4f34-90c9-6721146a6581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e17762-c22a-499a-8b2b-d4a531288d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed571bd1-ae89-4f24-b42f-5bf48f2f165b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dd5d49f-aa74-4ff2-a761-de10c4bb03db",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0ede3c-7ae8-4f0d-9728-996b3f8e5ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ffe10b5-151b-4fcc-9881-17af3ac8af4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644d08e0-399b-447b-babf-c82a1bf7bcc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01e8c834-6da1-4d78-acff-11fd01403826"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea886ddf-53b9-4583-bd02-b5c673bf4d2f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83e7f7b-94c5-4573-a37a-8e296c99b168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b7f17e-a430-459c-8c5e-85513da46c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb0fd33-77d9-4688-a212-684bceab137d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cecb9ef-f03e-4788-8e17-58bf70c41d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538f82be-327d-47e1-8dbf-164ec7f44b21",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceba93f-28f3-4c60-a86d-6cab082f77f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff78a214-54f0-40f7-949c-629b0ba14022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8310b8-ecd4-4403-a971-cf8daa5a9116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "942615a0-6f2b-4061-9cd7-b103b49e33ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f033a3-4e32-401a-b4ca-b66518146bec",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789e259c-f35c-4bd7-bac3-ac5b1d89a1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c030de-1588-4ea4-8ead-705e7294f168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba0fe5b-1e4d-470a-9325-a3bdd32726b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ac1c220-c93f-4bdb-80fe-884d1d40bc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80bc1a4d-3d21-4ee4-b0b4-40bf28f8fa00",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2ca8e4-3274-461b-983e-00941709d6fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d575094-e929-4c8e-9996-36f697beb407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d25506f-99d6-42e3-9b8a-f02e398688b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ceae2c-123f-4af7-ae0b-91920ee74a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5991dcd-91df-4f12-948d-58ae4efff150",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0679bfc7-2785-4951-a233-54266657c02a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357301fa-f976-4db2-a7ad-a07bab896d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caae99c2-949a-40e2-b636-8d31d95cef4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afc0975a-8fa2-47d2-840f-55d66403e832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1e31f1-8e76-4636-8df8-e5cdb0e8fee8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e229c813-eb4b-4442-b8d7-2128e10ba362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20b9619c-265d-404d-b321-97d8052ca393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59cd80b-a18d-4bc0-887c-6e48b65e6016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc4fb1a-ef53-41de-9940-b0d864640e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d92aaad-f04a-409c-8f2d-3915c59b3d44",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d645f55-c871-45c9-b5ea-387545723f0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c59f82-5870-4e9b-bf01-7525eebd60af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49219ef4-36ab-4c40-ba98-6ef066e39121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e2b043-8c63-4f43-ba6e-b297f136f6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828eda44-bc7d-4a3d-9daa-73e87fdc8337",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7877d8b-70c7-4944-868c-b77a14590875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1b5aa4-db3d-4448-bbfe-a4cb25a74f7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b1bd30-72eb-42bc-8e56-6b8dabbddec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de506f31-2ae5-42f0-8da4-f06d83ecb98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b419951-1501-4f32-9e22-def0b5793069",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffa0ed4-88f3-4223-8cb2-6bd6fa67e5e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41be36a6-89c6-4139-a73d-0eb8f4040046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a486d9-b775-4a73-aa15-2b6caf0b894c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95791bbc-c611-4ea2-a297-d51a21e4e4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34670bd7-4c69-4226-b690-43dd80845bff",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34f5393-0876-4b95-954a-ecc937aab942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45012c50-29e7-4af2-a385-e91c99c5b3c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b07348-cebf-46f4-a745-dff52c83d2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd48b24-5a5b-4ba9-abd8-51bfa8ef980e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdddf349-18cc-4d8d-9a90-0970d16fc153",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0db3a9-e78e-4671-a62f-c7e63481a875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55d4edb5-7a76-431d-9d02-06481c410dbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "461607d7-a37e-4602-893c-5ce45afcacce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605530f1-5f5d-4661-ac98-903ec99b87ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbffb937-582a-4260-8ea7-cd628e88f562",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600f95b0-ee33-4649-86e2-3a6f69501712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c034005-3f76-495b-b473-7ef954b7aca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db34efe7-6dfe-40d8-9382-29e40e807b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a246d1-c666-4579-9daf-2d268b577b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8d5853-c5fd-46df-b4f9-fd85047891ec",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b614bdf0-58e4-4e84-a559-ca643789acf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208c391c-0d58-4a7d-91fa-8de50d3d8276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c6cfde-d20d-4017-9ea3-a4f3bf43587c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94f86b4d-8177-4454-99d8-e810080f020b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435b8275-c2c2-418f-8aa3-02459150dc34",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a181f233-36a6-4765-be5f-938e9af1a65d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6058636d-c524-425b-badd-7c43034ee90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f35e926-9142-488b-831f-c8dbe741d47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af27a009-2e0e-4ff7-a318-d95310007f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d46cf6a-3fd5-4232-ac13-32dd922aaea9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a69a5e3-cf8f-4377-9a58-b0b04fa990d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cda863a-efd8-4733-bb3c-07025cef1bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff4741b-6399-4025-a1c8-4a07de943ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66c6f9ec-b7d8-4324-8f53-832751bdabc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169e8ee7-5656-4773-bcd3-1c217996bd45",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b62e753-1fbe-4424-ae26-c17d1567498d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f113cd2-b28c-40e5-b80b-a326a928e82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "882f9df8-9fa1-49eb-9fb2-638a40ba7451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42067701-4977-4dc3-93f1-b1e387bfbf30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f7e99c5-50dc-4c59-81de-514253c1496d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0945f5d2-f344-48d6-9636-4eb80f778817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfc68352-883c-4bdf-919d-4a8d3e25b9b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8bbdb9-817d-4fb8-a61b-83e2efe0cc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d78d85-1d5b-4254-94c9-fea8399d55ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a82b6ea-7e31-4a98-a808-cec63f9a7efe",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f55c6c-9bfe-4fc3-8480-bc531e9ae4a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c0d6832-e6b9-4831-a99f-42afa0300896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a581a5-e381-4925-886b-408945991b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cdfffc-6e30-495e-ab4c-9cecbd0c600f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2ddd08-0df3-4635-980a-698a4df46b41",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8771bce2-eac0-47da-88f7-eab9df4e3a98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf9d399-6a40-4d16-9540-8b2650b16079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb011fb-032b-4696-aa9c-89cfc2b5803c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85eee769-edc5-458d-af2f-b6cf6c03ec1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6fd5bd7-91f4-4cbf-9506-444a4753cf16",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dc0c71-fc7e-413d-bc18-e91edf7e4b0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ba7d703-cd82-44ec-bd74-9d2477125445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5fdb59-888e-47e9-bd72-68477d1bdd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9073122a-5c59-4aa2-b699-3a22fc100f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9031cd1-3819-4623-840f-bf208fea22a0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c09c4ae-603c-4527-94f9-e19275b71d42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c56cb3ac-e033-4c17-98de-310e0d3885fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cab1f6-6aa6-44d9-9d7a-3a3ac36e9336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d965e2-0e6c-4a89-b62c-4f644edae492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f704a60-3c0b-4808-a3b3-5943b584d4d0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3886754-494c-4547-8f62-84f4367a778a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5309df57-9c66-4ae8-bf1d-4b10a1cec0b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad8cdc3-8175-41f1-8cc8-32f7d57e11cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a71cca43-29f0-44cc-ba2b-91df690e2bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b022597b-bf5a-4028-bf4b-405790cb7fd9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c25e7417-1f9a-45c9-9ec7-5eeb66d3969e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a7798e9-1f05-422d-b96b-3ce69b9a8140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d9ae07-9747-470b-8866-8d63ab146921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cbd8280-cc51-4b90-bfb3-774a939ce845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d14d20-9f66-4fce-9bb5-59b8ba8db7a5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959be563-a78d-4c3b-8009-b4b9db21b28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7415becb-6cfe-42b9-8da5-34d48538f7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b99b2a0-7a86-4d27-b2c8-75404c80c7d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1eb1c9-a939-4687-a042-3d6207dac8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe1ac92-5344-4fb0-8bd5-0987170673a7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0c0703-89b7-4096-8fb7-bc2ef397017c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c51e5f-b853-4e18-9f55-6587b07fc6b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b388f8c-fa2a-410e-8089-9821e28e8562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc3c05d-af94-42c7-a27d-68b223ece3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579d37be-62a6-470e-9ed2-79c1fdec0f74",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6791511-cac0-4d49-ac9a-4628b11ab18c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f02a2f8b-db64-429a-83a6-bb7247f82239"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81ade24-a98a-482e-9e9a-7a61388a0b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "819e0cd7-22c6-4757-971c-288e1fe52144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eceee4d-6dd6-4e6c-b10d-2d0a9c3280b8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a893d7c-32bf-40f6-9e0c-87d633f3bd68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b62cb1e-17af-4f29-920b-99092617350a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020ccb2c-edb2-41f1-b0c1-0a8fa9147ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd17a29-08ba-4609-b975-63bb116efcf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75109b4-2723-4cca-86a3-a7afb11b3db3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4926ae2b-cb69-48ed-ada0-9f89af0d4bce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12c81e4c-9b9b-4728-ba10-8fbc24e6d6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae98f232-4cb1-496a-a5d7-9c2d221cae03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e9f072-6893-4ec4-8486-aab02c0666a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b2dafd-a691-4775-88ec-d1afe1fe69b2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a317ecb5-3c3a-42df-8f2d-b08eee167c0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "379dc8cd-1d32-4ed1-b1f5-96ae61153c7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fc3000-5e59-4d76-9e1e-c16a17eeb29e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8cc1b0-d4ee-4364-9e8f-b6facc1bedc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb320691-4e72-46ca-9eef-1e5ffe044273",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a385c-50da-4772-ac50-b1e52cc67f1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65b1678f-af34-4864-a72b-29f505216ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e3cd577-6bf2-4790-9ab7-98cd0e9630ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34acfb2a-1262-473e-a56e-ae0aad559839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2578a8-1f7b-4f0e-98c3-671f9fd3c958",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc7a5f5-ddca-491b-86af-36d661e93e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf942356-a69a-4720-8a3e-74369168d86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "471aa270-7e56-4513-a2bd-f740aa7dd90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a94017-5fbb-457a-9065-88e3cfbbcf68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ddae3d-24dc-41b4-a8c4-7ada2db7b248",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb29e99-3d2e-4be9-9797-531f61efffea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a28fbcd-21ba-429c-a841-3a983413dd6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dc8e90f-c4aa-45c2-9f4d-e9ec611b4352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e357e7-d3b7-4c0f-a4ba-e2a89fe8a3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca78f21-befa-4bdf-babc-14d93ba8ffab",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76408204-1e37-441b-927f-61077911f9c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b09caf3f-99fd-4e46-8363-741d2d3e9c07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b994149f-0aef-40a2-a541-1ba735535929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb506096-fe64-4be3-a162-4c02758fe2ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1422b89-6ffb-4d3c-8387-ca618b9d7b7a",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fc7f53-371b-496d-a81b-33055f0c27ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9918f970-b623-4133-af95-3e9f338543db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1afc28-72e1-4e5c-91a3-60814c1be2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb009202-caa9-405a-a303-c8a7bfc8ea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43a51b6-0b9f-4c88-9b17-e5420b9ad878",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3331ab86-ee9b-423f-afd4-a62519f12312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb528830-5c0e-4d19-b8c3-73c8393e2097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64da58f-0d7b-4515-898d-a1b6fd5798a2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3528882-5ac5-4e52-a147-451c6452a3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a44b569-cbed-45df-9751-55b022df4afc",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0c81ab-6049-4054-bc2e-45a4937259c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8111949-161d-4acc-aec6-cc7eca36e7c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edefb280-e9ef-4217-8b97-4d8155e1d0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43cf443c-ac71-4bae-ab9f-ef14fe513dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca42847-791a-4eb2-b70b-89dd2f495886",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69489705-8065-48bf-902b-a4119e7519f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3604e7b-e39c-44a0-a59e-e7d7eef2b728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1efe5ed3-4fb0-4b13-9ece-558facca826c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f920cee5-5afb-4397-b800-fe4ea6f68f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5e5e43-f051-441a-acbf-aef849587eea",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e92bbd7-e3d5-4865-bed6-8b8fb253687d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "106b1aeb-7731-476b-9043-4fcc31a39a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84608e42-545d-49ec-9260-21a45cc8eaf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6971ad3e-7062-442f-85c5-2a7a590a4c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0862b9f1-ee47-4b05-a14b-3b7c20db2e73",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1fb7d4-50ab-4048-bcf7-0a5bd99775e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de3ad890-9717-42c7-b459-0ae6f18b0aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6126e07f-7451-4b9a-a027-f22b426d5a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf85df3-9509-40e5-be74-2e28e9cad810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3103ce74-853c-4782-9998-735cc8640156",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec55bae-7fdf-4a89-ab0a-45d7b01c464f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77d0ddce-a66f-4e54-b0ed-41389ece214f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f551d16-0d4d-4b8e-b176-fe4097736b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55195ab-a35e-4a85-a9af-51beffe862ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e1e4fc6-a957-4b8c-bc5b-90b425a960d1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdaea1f-99ec-4e3c-8299-f2149ed11a70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad0135dd-b44c-4977-a570-0e10b3915252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ddb225-a070-4e80-b080-e434db3ece4c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fda15db-968f-4fac-b618-c65da9ca4f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3828d01-84cd-4509-b4e5-8b57ee49ade2",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8112cd8c-2d5e-4fc4-8835-73851949b712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df6fb330-03ee-4b82-bef6-8d04d999b20e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cd9527-8e23-412a-9089-a3ef43dc60a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54b3efa-a978-4973-8019-aab65d0d9abc"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22790361-9a3f-478c-bcca-4c29f28cfe85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f72cb557-4b76-46a2-85e0-397832455df0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e925c592-f8a8-4943-a5bb-47d9159f5ced",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1480964-c966-4333-a85b-95ec60dbaf9a"
                    }
                  }
                ]
              },
              {
                "id": "e1fc0d98-3eae-4a20-ba1a-ed51dfd98c74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ed0c776-7357-4ae1-9753-1c65f551a54a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd29bbc8-7f18-4b3e-9ddf-5d6f8171c4f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e446759b-bf87-4426-a8a3-57d371ceca3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3300c7e-4f45-4e10-923c-e8d489912994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb95d768-4c3e-4ad6-9e7b-e8ae7f6e56fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb006384-5a7b-4a15-ac81-c361d57ca613",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c0c2d96-0f69-4068-9b2b-4723020d1b38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98810684-cd25-45b7-a2d9-212923917fe5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "315c652c-e353-424c-a356-2ad315de98b4"
                    }
                  }
                ]
              },
              {
                "id": "e92c97e3-2741-4e9d-8fdc-dcdda17f38c3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3bc3b2a2-0302-4db5-adf1-2e56a5a54da6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cf90104-7d24-4017-8bb9-ad7b6cbc8d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3ee56493-7e40-4b8f-8344-a69821b665b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16db2618-a218-43da-bfc8-618319375e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8c98a3-bf0f-4cc8-9563-0694b0c77189"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "781ef0a9-98ae-4326-b76c-de85578b4d50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "19f571b1-2781-4558-bf8d-737d1a1ac23b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60aaa395-a48c-4ed8-9cce-93111a100669",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a33f1e33-40c1-4023-925c-d826a9c4b143"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6eba36b-3a49-4a65-b23b-12ae08c08395",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb71f21e-6531-4fcb-90a1-904d2e3ec9ba"
                    }
                  }
                ]
              },
              {
                "id": "009ab981-de87-491d-a070-45b8fdf2b08c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "58e506e1-fa82-4a3b-9b1b-e669586bcd52",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "907177e5-509f-476c-80be-2969ecf505e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d12b1515-a064-49ab-b9c7-d28faf5319a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc318e11-ba0f-4648-b7d1-3fbf01f2ad42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b7ee91d-1a36-415e-9a74-73b7b0deed36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9f168856-2a3c-42a7-b574-8cc5fc603042"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5665869d-30ad-44c5-8729-5d241dd6f0ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd6c5911-bb5c-4239-94d3-18a6d8ba42ce"
            }
          }
        ]
      },
      {
        "id": "edf24e08-29c2-437e-976e-3b2d65358600",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ea818ef9-e89c-4366-930b-c56056002aa8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a66d6eda-104c-4fae-8039-3d49f44a979d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ce742d5-16ff-4d0c-ae6d-8760bd3574a3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9559b92-4bbe-47ac-b921-6ee4e9c09017",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f5c2daa4-b6f7-4aa4-b245-419ba179b0f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7e457e-4f0c-492d-8b53-cc8216e5e0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc50d09d-797a-4d60-983e-66456ef4a151"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6146400-fcd0-4a2d-abe0-b37bdf2ddd21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4bfe06f0-c9af-4a07-97d0-4c9e81c07e01"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "548ea866-0516-4ee7-86ac-b93cbc7ce494",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5847670d-9907-4ebb-9a45-e5f9b45a33a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5735723-75dc-42ff-a77a-1bedaf1bf498",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ddeaf9a9-bd91-4c64-a381-da42f0b1bf2a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44bc9ca2-6b69-4875-afa9-98932d22fd37",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0ac6d3d-b886-4186-96b0-2b1306deb651"
            }
          }
        ]
      },
      {
        "id": "a25cfa3f-b3a0-494b-a0df-6c3a6f1c5a55",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5bf32acc-fae9-44e1-8469-a7b7a8b65444",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1247692-b704-4473-b430-267da11d9fd7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5411fe96-3591-4779-8c41-41887711dcfd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498902e1-87f2-4664-837b-989719eb2a86",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9fa3f907-be4b-4a34-84bd-795850a4dad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5fa7a3-82f9-4cc0-9356-0cdba50fc058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "867f03ef-121f-4cd0-a557-365d18716535"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed911ec9-805e-48fc-98da-5eb782f226fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be7efaf2-0b4c-42cf-9d20-60d483f93089"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "393e8303-9705-41f7-b3b6-66ee7aca7f98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d08c76e-4284-4255-9469-ef6d34a2f71d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb30b46d-d184-458b-b03d-3354000cecf7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "30f81bf7-a2c1-44a6-acf4-4abce02eab63"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f32de1fe-661d-4dea-a690-d103cf1a2a3f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "26d8b7e8-02f1-437e-9593-db94cd553b01"
            }
          }
        ]
      },
      {
        "id": "7660fb5c-b41e-48ff-98e1-acb4f3a73aed",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3c5fc5e9-ffab-49ac-82c4-4c6bb88a4efa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6410fcc3-2db2-48c9-9eac-71d3bba20920",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31b7fdf9-e406-4888-93d4-aa19b73750d4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1371d8e2-b0f8-435d-9fd0-392493ffe3d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2be2dfc8-227e-4edf-a4da-225a9b4eac7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282d9228-8350-43f4-a09b-d77547228982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da0e085a-5442-42fd-997b-a1660540fc8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc19b9f4-fc8c-4d2a-8dd8-01fc747e1d62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1817369-9b03-4304-b37c-77fb36dc2917"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8599112c-c75a-4d9b-aa4a-28fd573366fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3185f548-0d1f-43e1-a279-b43db5ae9319"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1192ac3b-febb-443a-b7b6-98c78f37eb27",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "82ce3b71-93e0-4faf-a4a7-26f4aa8b0c5d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e79548bd-1352-423a-8a89-797b0d486430",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc976808-829e-4286-ba47-eda2f31c47f1"
            }
          }
        ]
      },
      {
        "id": "c1cdcb0b-cb77-4b85-a365-0cd52d7aa93b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "714e430a-87f4-43e9-b41c-9b72703ad43f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "915b7b1d-c202-41ad-93bb-ab50bd5c3770",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5e53bfe4-8431-4ed4-b738-3f302db7941a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3100e6be-266f-4d0a-ab43-385c8ac329b9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f35ae264-28b9-4f58-82f3-6594ed610c39",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 80.81403508771932,
      "responseMin": 6,
      "responseMax": 5296,
      "responseSd": 322.0460637415676,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708216591224,
      "completed": 1708216623529
    },
    "executions": [
      {
        "id": "56272c23-6dc5-4765-b359-9e28451a25b0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6548751a-6036-4c16-b05f-e4730233930a",
          "httpRequestId": "d855c405-1de0-4237-ac43-dba41f72b47a"
        },
        "item": {
          "id": "56272c23-6dc5-4765-b359-9e28451a25b0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ebd1d17b-109c-421f-be1a-6bbd653c78e3",
          "status": "OK",
          "code": 200,
          "responseTime": 38,
          "responseSize": 0
        }
      },
      {
        "id": "2959f49a-1f4d-453c-bcdf-3f3a3c148ce4",
        "cursor": {
          "ref": "4ea3c916-d76b-4569-b31d-d32595d60df5",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a1c15677-22ef-4135-842b-1b7a80f0249c"
        },
        "item": {
          "id": "2959f49a-1f4d-453c-bcdf-3f3a3c148ce4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "51e36a52-941a-42b9-a4e5-9020c0d6604a",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "6e9ab37c-6a36-4d03-ab03-57ce69e19fd8",
        "cursor": {
          "ref": "865cb0cc-10c4-40f1-b009-6666c131d655",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "06176b88-1034-4b37-bf07-678861219210"
        },
        "item": {
          "id": "6e9ab37c-6a36-4d03-ab03-57ce69e19fd8",
          "name": "did_json"
        },
        "response": {
          "id": "900715ae-9c89-41eb-8d21-1ad0df2199f2",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bbe150-98b5-4361-b2d5-649d9d98dbfd",
        "cursor": {
          "ref": "268c7379-64fa-4f74-bc94-90a329216bf5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f2f3b01-9470-4222-b867-842bd1df5621"
        },
        "item": {
          "id": "d9bbe150-98b5-4361-b2d5-649d9d98dbfd",
          "name": "did:invalid"
        },
        "response": {
          "id": "5a6be9b7-e58e-42ed-9f58-04374e75e17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9bbe150-98b5-4361-b2d5-649d9d98dbfd",
        "cursor": {
          "ref": "268c7379-64fa-4f74-bc94-90a329216bf5",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7f2f3b01-9470-4222-b867-842bd1df5621"
        },
        "item": {
          "id": "d9bbe150-98b5-4361-b2d5-649d9d98dbfd",
          "name": "did:invalid"
        },
        "response": {
          "id": "5a6be9b7-e58e-42ed-9f58-04374e75e17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69dd4c29-af32-4806-8940-0ad45b91f92e",
        "cursor": {
          "ref": "6d23beac-7b27-4898-8e60-abab9b6d1d1d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c1ff5d65-f303-43b5-bc3e-586904019319"
        },
        "item": {
          "id": "69dd4c29-af32-4806-8940-0ad45b91f92e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6a9227ee-f82a-4774-bf07-399bd659e98e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 5296,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d057826-346a-4dde-a9fb-bf3f784a7b25",
        "cursor": {
          "ref": "f5988bc2-6e1b-4c44-9d9d-b61562649a18",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3691ce8c-0c40-474f-9f5e-6ca890a2e3ad"
        },
        "item": {
          "id": "9d057826-346a-4dde-a9fb-bf3f784a7b25",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5bdbb2f9-b983-48d0-ba7a-01cfd970181d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49322c77-c1a0-4a47-b387-80f7e01152b8",
        "cursor": {
          "ref": "ddfc5a8f-04e9-43fe-b22c-528c2dc2571c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2d24b1d5-5201-47c0-9dbf-fd8a44ff5968"
        },
        "item": {
          "id": "49322c77-c1a0-4a47-b387-80f7e01152b8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "25cc248e-a4b2-4043-b000-f7426ead1e1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfda892-759f-4361-83fe-5e63770091d6",
        "cursor": {
          "ref": "2bd22e6d-81f7-4bf3-b881-dbec5bcf0045",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cb13e150-0607-4a51-b30b-080044c7e34e"
        },
        "item": {
          "id": "fcfda892-759f-4361-83fe-5e63770091d6",
          "name": "identifiers"
        },
        "response": {
          "id": "892a10fc-304c-4cdb-ae68-fea860a1e542",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5298931-fe01-4819-a695-6190967494e0",
        "cursor": {
          "ref": "8aadfbe8-1a3b-4a2b-b494-bc7c4449186c",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "44689289-10d1-4d07-b456-d88e485d0cd2"
        },
        "item": {
          "id": "b5298931-fe01-4819-a695-6190967494e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee4a1d3a-a8a4-4d42-9157-ec792d23dacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d944a1a-2840-4c52-be5d-7b9af7cc1ed6",
        "cursor": {
          "ref": "fde5617e-7b65-4e19-ab2f-0878d844c272",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fb6eb30a-5f2d-47f6-8899-25bad30d243d"
        },
        "item": {
          "id": "6d944a1a-2840-4c52-be5d-7b9af7cc1ed6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "34bb0297-872e-4b3b-8e60-0d3910e499ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1b0ad8-2161-4a5e-adf4-b0269c35de84",
        "cursor": {
          "ref": "ad884080-1cad-4418-b7d8-65994c319172",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "470d087e-64d7-4bd2-a4f6-69892dd70d93"
        },
        "item": {
          "id": "ec1b0ad8-2161-4a5e-adf4-b0269c35de84",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "99e8cf64-10eb-457a-8d2f-cdaa91ea0c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3edc308-081d-4d6b-be21-fe7f00f3011e",
        "cursor": {
          "ref": "5481b41d-545f-410e-b0b7-aab118ab6918",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f2793560-6140-4222-abcc-bf0dce46b476"
        },
        "item": {
          "id": "b3edc308-081d-4d6b-be21-fe7f00f3011e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "73d77298-d018-4d62-b0c4-d5df17352bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee0b548-8e02-4fe8-b6bc-a3a0d458ea38",
        "cursor": {
          "ref": "a3383416-74da-4806-b1a8-22a57748fb06",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "259cbce1-1f76-4375-bfa4-8e9f461c30ed"
        },
        "item": {
          "id": "dee0b548-8e02-4fe8-b6bc-a3a0d458ea38",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "996ce8a2-97cb-4f8d-b993-dd69de6763db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd31d2e-505d-4846-8200-09f6b90e1dec",
        "cursor": {
          "ref": "a765e276-ae59-4a69-91d6-5568cac2fa95",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7de7215a-5655-4918-bdf6-faf08af95c87"
        },
        "item": {
          "id": "cbd31d2e-505d-4846-8200-09f6b90e1dec",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ee356df0-80c1-44c2-90a1-cd4325cfd4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b80b486-318b-4e72-9b78-07ca67c35d1d",
        "cursor": {
          "ref": "6e6eb361-d04d-4dc2-922c-9f42fde5f4bd",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f31c7743-5bef-49f1-91ab-7a5fad21309d"
        },
        "item": {
          "id": "0b80b486-318b-4e72-9b78-07ca67c35d1d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3da7168b-a5e1-4459-85d1-bd2e46109255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c057a2f-09cd-437f-8f83-8eba5a2185c6",
        "cursor": {
          "ref": "c2134630-d4f2-45c9-a8c3-d8eae5340bee",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "47239b41-1e1c-45ef-998f-7ac49b32ab21"
        },
        "item": {
          "id": "8c057a2f-09cd-437f-8f83-8eba5a2185c6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9ac87feb-d5a0-4ea6-b60b-65cfb292378c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94db3ecf-0341-4375-859b-a2d055e14eb6",
        "cursor": {
          "ref": "329455f3-dc91-4eae-a7dc-1fa22a6322c7",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8c3611e2-2903-4449-9c51-7e5f7d544919"
        },
        "item": {
          "id": "94db3ecf-0341-4375-859b-a2d055e14eb6",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fa5f2649-5c22-4704-9408-0bfbef9c3189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2338dfa5-102d-4b6b-87fd-8d9207aedf5b",
        "cursor": {
          "ref": "0a1f6d43-3562-4a76-9757-ec85956ffcf5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "65025c75-ea14-45e3-9744-9ebd2ce3e1eb"
        },
        "item": {
          "id": "2338dfa5-102d-4b6b-87fd-8d9207aedf5b",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6f018919-69c5-4d75-ba7a-ed199ab96e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbddca86-82a7-4e1c-a377-df4b0f3bbb4d",
        "cursor": {
          "ref": "65772cc9-3788-431d-b98f-a4af89f3998d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "873e1473-2498-4f3a-89c3-05518fddb21b"
        },
        "item": {
          "id": "cbddca86-82a7-4e1c-a377-df4b0f3bbb4d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "47ec88bc-1f49-42e3-ac61-55ab5bc19a00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff158721-aef1-45b8-90d3-7e7d57df47a0",
        "cursor": {
          "ref": "2c208049-56da-4883-9658-8bbf1f1d0e06",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2cd7b71d-747d-4fed-baa0-fd14ed90d0e5"
        },
        "item": {
          "id": "ff158721-aef1-45b8-90d3-7e7d57df47a0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "591f31ec-289d-483b-ac8e-460e7a546252",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85a1c09-7060-4282-812a-0a03e660ab36",
        "cursor": {
          "ref": "ac4470a3-cbdf-4b45-9ef0-8815a729503b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5f15a71e-0d05-4611-a5ab-1a696f8b0d5d"
        },
        "item": {
          "id": "a85a1c09-7060-4282-812a-0a03e660ab36",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "340a77a5-e7ee-4014-aa8a-b9f990a59ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7fbda31-5e57-4077-a7e3-21ce0ab9654e",
        "cursor": {
          "ref": "78226549-01f1-419b-a120-2145fb183b05",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2e972d62-4365-4087-b3b1-4b8530a70975"
        },
        "item": {
          "id": "e7fbda31-5e57-4077-a7e3-21ce0ab9654e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b41bd930-4d52-410c-9714-9d7384f5acf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01215942-1555-4498-979a-964295f3b420",
        "cursor": {
          "ref": "b2f286b0-c385-4784-8d36-f0fff004408e",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1b391054-6bed-4754-9b52-d53c68f738b6"
        },
        "item": {
          "id": "01215942-1555-4498-979a-964295f3b420",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "91928785-7004-4de6-b1a6-d8fe090a98bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249ee8da-1929-4a58-824e-a5bde511f095",
        "cursor": {
          "ref": "3ed49f59-0bfd-4051-99c0-08c9c2b438e3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3a6cecb7-5250-428a-991c-e9112cabfa0a"
        },
        "item": {
          "id": "249ee8da-1929-4a58-824e-a5bde511f095",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3d7c057c-5871-422c-9ece-2d2cd30c96fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff2fcdb-86dd-4409-a674-f6a88d003975",
        "cursor": {
          "ref": "f3a27eba-3b2d-4503-a552-12cc84afacb1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "03c712c6-75dc-4c46-88ad-ae0c239e0b46"
        },
        "item": {
          "id": "aff2fcdb-86dd-4409-a674-f6a88d003975",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3cc03633-04df-42ca-9446-7963f3765652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e53af6-fa61-49d0-b6ff-56aabe6ec37b",
        "cursor": {
          "ref": "b31cdc52-5721-436b-b4fa-a4ad3f5f594c",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "85f5c1bd-97f0-4bbd-8353-b467fa683519"
        },
        "item": {
          "id": "31e53af6-fa61-49d0-b6ff-56aabe6ec37b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "dc45127d-4c63-4683-8e4c-b38a62545d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d61fede-195c-4cab-8455-5852475db790",
        "cursor": {
          "ref": "f66ee09f-19d9-43eb-90c0-1850eac2b3fd",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9d4a51b1-d760-47c7-aaef-ec86d3bbae8e"
        },
        "item": {
          "id": "8d61fede-195c-4cab-8455-5852475db790",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bf1cd053-789d-4ab9-90b8-6dd0010a334b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03ed4cc-4a99-454b-8bf0-49f3776bd59c",
        "cursor": {
          "ref": "a34deec6-adc8-4574-a028-d640b59fa820",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "016c883f-7bc8-487b-856d-f3b82a3295df"
        },
        "item": {
          "id": "c03ed4cc-4a99-454b-8bf0-49f3776bd59c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3e7409d9-d37d-4444-bf4b-ca2246a656e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b14e58c-c373-4dc0-8397-197652410eff",
        "cursor": {
          "ref": "5b481faa-41a7-4ec9-838b-6488dd27269f",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5282b030-e864-4a0a-ae01-bec6faeb1c40"
        },
        "item": {
          "id": "4b14e58c-c373-4dc0-8397-197652410eff",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "cb5be787-c1d8-44ef-90a1-6d7884ecb73b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2da4a9e-a17d-45b2-915b-4122aa73dd9a",
        "cursor": {
          "ref": "009e3dc7-a6a5-493a-aa2f-8f7e93ca8f6d",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9a4b4338-a799-4c3c-bd6b-dc536d53c0ed"
        },
        "item": {
          "id": "a2da4a9e-a17d-45b2-915b-4122aa73dd9a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "95a3d7fa-153b-48f8-b46c-e8818e66bb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4f4b0a-f971-4395-82e9-84aa5c93d143",
        "cursor": {
          "ref": "a0c70343-aae5-44d5-ac0b-43c1d9757bd4",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1853f0de-0248-493d-9c69-f629a63775a4"
        },
        "item": {
          "id": "6f4f4b0a-f971-4395-82e9-84aa5c93d143",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2251a4c6-0ffc-4bd2-a45b-0e9d3cc29538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939a3903-8d2c-4ee6-a5d7-848365e9d364",
        "cursor": {
          "ref": "a266c6c8-9ea1-4398-a68c-252fc3d811de",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4a950aec-9ea9-4017-a740-63c3256a620e"
        },
        "item": {
          "id": "939a3903-8d2c-4ee6-a5d7-848365e9d364",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "7a83cb8d-ec9d-4caa-b392-d577d248c7c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204136ab-a6f9-419b-91b4-16d186983d16",
        "cursor": {
          "ref": "a9f5f498-f35e-4566-bd9b-e95c46bcc9bd",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "615f0b38-d194-4c8c-9006-b400cb74fb3e"
        },
        "item": {
          "id": "204136ab-a6f9-419b-91b4-16d186983d16",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bf0a2687-77b7-411f-9225-53fc226fa4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6f8018-6dcf-42be-b98d-440b739abbc9",
        "cursor": {
          "ref": "913ca2f3-c07b-46a1-af76-31e0112f6081",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ece011c4-7d33-4727-b1d5-d05bc87a5e84"
        },
        "item": {
          "id": "fb6f8018-6dcf-42be-b98d-440b739abbc9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b768deb5-ab76-43c8-9ef0-ffa615a718d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b730f360-b207-4880-8043-060566be284c",
        "cursor": {
          "ref": "b0133bec-7aa7-452c-91e7-36e9548162f8",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2844afb3-18f2-459b-a8ac-c5f2896eb700"
        },
        "item": {
          "id": "b730f360-b207-4880-8043-060566be284c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a25d0b7e-a23b-4321-9bd8-7ce838ef629b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cdd592-9b29-42a1-bf87-494702320b50",
        "cursor": {
          "ref": "187b6aa8-a0d1-4379-b023-b4763088776c",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "35fbbfad-e6f2-4a7f-b43a-4d5b302d55a8"
        },
        "item": {
          "id": "a6cdd592-9b29-42a1-bf87-494702320b50",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "751a238b-9bb6-4c49-abd0-12cfb8e91094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b0c3d9-18ea-4f23-bb8a-772ba4783ddc",
        "cursor": {
          "ref": "ba73087a-1517-42b8-a02e-5dbdcd1532a9",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "bbe1baf8-9663-4675-b8ec-9cd36fed27d7"
        },
        "item": {
          "id": "f0b0c3d9-18ea-4f23-bb8a-772ba4783ddc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aa252ac2-cc6d-4259-82a5-84e8c5f4e2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ae2031-3a76-41d9-a178-6abd205104d2",
        "cursor": {
          "ref": "4df3ec4d-bf1a-4545-b149-846613dea540",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a9101775-6ed0-4f1d-95bb-5707b6eedc46"
        },
        "item": {
          "id": "79ae2031-3a76-41d9-a178-6abd205104d2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a851bc66-2bbc-45b1-b20e-c28214b32125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "391df179-9834-4379-a8aa-2bf91df30cb1",
        "cursor": {
          "ref": "2c64a597-23f2-4261-952e-36868ba667ef",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5fa6829a-4b4e-4aa2-97fb-448fa89d7c05"
        },
        "item": {
          "id": "391df179-9834-4379-a8aa-2bf91df30cb1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4cf88837-83c3-4ba6-b061-a2f52c6e3e58",
          "status": "Created",
          "code": 201,
          "responseTime": 747,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e0d565ce-b596-47bd-ad04-89ac22fcc41f",
        "cursor": {
          "ref": "ab320b4a-d30f-4743-a243-ac36e7a91325",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed7583ab-0ff5-49be-b66a-761b96de203c"
        },
        "item": {
          "id": "e0d565ce-b596-47bd-ad04-89ac22fcc41f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cd1e32d1-9820-4793-81f6-284e32797396",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2b56b091-4816-4299-86ae-913eec19bc15",
        "cursor": {
          "ref": "9e843ac2-d063-44e0-af9b-fb4c2436630b",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b5c62ceb-b085-4dd4-980c-67b993877653"
        },
        "item": {
          "id": "2b56b091-4816-4299-86ae-913eec19bc15",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "75b0a41b-7ef6-4692-b704-8cb26c895b65",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "78073fa2-dc4c-43ba-b6de-d86c4852c4e3",
        "cursor": {
          "ref": "01511d9c-3fde-45d4-a528-56543faac14d",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "11ce413d-973b-4232-9de2-20c568448b16"
        },
        "item": {
          "id": "78073fa2-dc4c-43ba-b6de-d86c4852c4e3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fd9efd95-1166-4ec0-b8a7-0c3d693d2b33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bc62c5-a808-4fcf-b6b1-95565301e0c2",
        "cursor": {
          "ref": "e7e2feb4-6783-4a93-8638-f91eaa8c510d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f80af8a6-3bee-49dd-8985-c44072cfe0cf"
        },
        "item": {
          "id": "68bc62c5-a808-4fcf-b6b1-95565301e0c2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "51fa01ce-3f00-4b5d-8984-78e50048d578",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "48982d35-c9a3-4c03-811f-74a92800847d",
        "cursor": {
          "ref": "7d468d88-87df-4b45-a583-0ad3600ffdcb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1221a2db-3168-43bc-9aa4-68117290e04f"
        },
        "item": {
          "id": "48982d35-c9a3-4c03-811f-74a92800847d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "eddd3436-6a17-46a9-b702-b1a60f83cc46",
          "status": "Created",
          "code": 201,
          "responseTime": 562,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "11b515ac-f792-4223-9d16-e01b4cec14eb",
        "cursor": {
          "ref": "460c2d75-65c8-4dd1-9422-be8faa78993a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "025ac21e-4865-4ba6-ac8f-407ffec38239"
        },
        "item": {
          "id": "11b515ac-f792-4223-9d16-e01b4cec14eb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f8a61601-07b8-4da2-8c85-d0a36b059236",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "cff7725b-fa3d-4b90-9efa-d5ff3bfb0a8c",
        "cursor": {
          "ref": "ca3551b9-4f89-4db8-abf8-6499a56d19a2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9fe5e291-5faa-420c-8a7b-d55781b2f2e8"
        },
        "item": {
          "id": "cff7725b-fa3d-4b90-9efa-d5ff3bfb0a8c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ee237b00-46ed-4ca3-8e7b-2e7c52440a79",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f2c76b92-edf5-4098-b336-e23a689b84cc",
        "cursor": {
          "ref": "a6734bdc-02a7-4fad-8bc3-3ec1f4b28354",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1e150f45-d863-4ab1-9724-9e2c9a001343"
        },
        "item": {
          "id": "f2c76b92-edf5-4098-b336-e23a689b84cc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f5c62d4d-e690-4d42-8ab0-0bcaad513d04",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fcc79eb9-c4e5-4ca0-a03b-4fb0b40899c4",
        "cursor": {
          "ref": "8f774f60-52b5-43fd-ae94-13bede7ee921",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d834276e-a8d2-467a-a2fe-ecec21f4c5e9"
        },
        "item": {
          "id": "fcc79eb9-c4e5-4ca0-a03b-4fb0b40899c4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d9be7282-d696-4650-bc6e-0f7a3c4d79a7",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "edfa8274-6622-4415-9c5c-4ccde356e3b7",
        "cursor": {
          "ref": "21302fcf-4b3c-4e89-9d01-20e16d45edd3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "27b5974c-0542-46f8-95c3-08cf718538a4"
        },
        "item": {
          "id": "edfa8274-6622-4415-9c5c-4ccde356e3b7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a1e07859-d714-4cf3-813a-731fe022df44",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3035b3c2-304d-497f-ad51-463c19cbb0e8",
        "cursor": {
          "ref": "9d964145-02ee-4704-86c1-8fcaddcd4186",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "53fcf6d2-451d-4a4d-a58d-832f60682db3"
        },
        "item": {
          "id": "3035b3c2-304d-497f-ad51-463c19cbb0e8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "eb6b79e6-8de4-4f3e-bfff-93317a3eea14",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c1e20df2-195f-4bb9-97f6-7a3a25119248",
        "cursor": {
          "ref": "bc153be8-f4f9-494a-8970-d26e47e56eb6",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "6f0d8337-a212-45f1-9827-9e73868f4d3f"
        },
        "item": {
          "id": "c1e20df2-195f-4bb9-97f6-7a3a25119248",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "008ad154-1162-49e2-8e54-06d56043e083",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9ab10f29-f5be-4fba-a852-f8aea585254b",
        "cursor": {
          "ref": "68358a3e-f20f-439f-84d9-50f7d6240a65",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "aee64cec-1634-48cb-ab99-e70391b28030"
        },
        "item": {
          "id": "9ab10f29-f5be-4fba-a852-f8aea585254b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0e5c25e4-3386-4d2a-8fc8-2a71c7492737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2af35e7-aefa-4283-b795-92e21ee32c9c",
        "cursor": {
          "ref": "bcffc75a-6d63-4cec-8661-3ffd5284ac2b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "15ba118e-02d7-400a-945f-0ded506a1031"
        },
        "item": {
          "id": "c2af35e7-aefa-4283-b795-92e21ee32c9c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8c01d3e5-9b19-440c-ad50-0364b7b03cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5048db19-e595-474b-8de1-e95e154b738c",
        "cursor": {
          "ref": "33836c02-7258-4531-a095-e746f99494c0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "06dfaa8a-ade7-4a80-9c93-041897969a61"
        },
        "item": {
          "id": "5048db19-e595-474b-8de1-e95e154b738c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6feca9cc-48a7-4700-8788-af8a995930f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ed0691-a501-4af8-8ebf-3efbaaa37ca9",
        "cursor": {
          "ref": "8f838689-dbad-4ecc-8228-517bbfcacf02",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d1060e8a-4d96-4617-893c-8bb8baeaa560"
        },
        "item": {
          "id": "d1ed0691-a501-4af8-8ebf-3efbaaa37ca9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b7236d8d-42ad-46fd-b9e3-274d8ce84147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc230b4e-9672-4fd4-84b5-32626d9c87d8",
        "cursor": {
          "ref": "b1f0c250-e481-41ac-ba41-2ce1fbb92382",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3c5d8ba0-7cb2-4b24-b39c-dfd8145d6892"
        },
        "item": {
          "id": "dc230b4e-9672-4fd4-84b5-32626d9c87d8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7459eddf-08cf-4ba5-8971-fd2b18ef879b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec0fab5-56a9-4f9f-8107-2e15199cf58d",
        "cursor": {
          "ref": "f790f300-9baa-4e22-870e-7250c219f5b0",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "4e0413fd-8119-4f7e-a288-068592c7947d"
        },
        "item": {
          "id": "6ec0fab5-56a9-4f9f-8107-2e15199cf58d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a7b5e257-125e-43d7-842c-3b5cd7b3db36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86344583-f384-4944-b4c3-53df5085d1ba",
        "cursor": {
          "ref": "13223fbc-b8b9-4705-be58-4f9830714759",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "95af3578-44fc-463a-9a5b-d4fdb2405529"
        },
        "item": {
          "id": "86344583-f384-4944-b4c3-53df5085d1ba",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cfee63b6-1a70-493d-9347-d80d0979ef4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefa7bdc-207c-4981-b93b-f4a781e26f72",
        "cursor": {
          "ref": "2160fae7-353d-4da0-bef7-2212d843cde8",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fb5407d3-4f88-4825-b600-6c3fd444d1cd"
        },
        "item": {
          "id": "eefa7bdc-207c-4981-b93b-f4a781e26f72",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3272291f-43d8-4ac5-82cb-38942a440cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331f6eef-657a-4db1-b049-21164aa41645",
        "cursor": {
          "ref": "5d012b2b-0265-4d50-bb37-0c82e2405203",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ed2c7475-6278-489a-9dab-daf84fb0413d"
        },
        "item": {
          "id": "331f6eef-657a-4db1-b049-21164aa41645",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "06a3c082-6758-4fc9-a483-fd84344f1c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a0a9f0-d677-4e16-ace6-c6f67d7987e5",
        "cursor": {
          "ref": "32bb1e34-379f-432b-8d74-6706cb9ca50e",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c725d76e-d403-4b65-87db-178b3fb359dd"
        },
        "item": {
          "id": "95a0a9f0-d677-4e16-ace6-c6f67d7987e5",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "75db07df-0431-471d-bece-38d6da98d46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15ab052-657b-474c-bde5-1bf30525ace4",
        "cursor": {
          "ref": "2b0913fc-2382-461b-bb3e-f0b38c4af045",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5939617f-da45-4bf3-a5da-d2a3e8e8ebc0"
        },
        "item": {
          "id": "e15ab052-657b-474c-bde5-1bf30525ace4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ca645ba7-7fd5-4508-9ef6-ea5e91adbbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec78035-4627-4015-afcd-d9a13ff251d0",
        "cursor": {
          "ref": "cc452a30-5d74-4dfe-aab9-ae8e66224040",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ec0faef2-2e02-437d-9f1d-816e5b4f3299"
        },
        "item": {
          "id": "2ec78035-4627-4015-afcd-d9a13ff251d0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "65cee546-7432-41c7-94ba-fc1aa3981fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2db02a-232e-41bf-9427-54d4efee4953",
        "cursor": {
          "ref": "f22ce2f4-0f52-44c4-a142-e2c68a2fb99d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "73e323d9-af7e-4078-acfc-f01b02b5ca04"
        },
        "item": {
          "id": "5d2db02a-232e-41bf-9427-54d4efee4953",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c615f9e7-6ed1-486e-a4c9-f65d46952272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05c610e-40e2-4c76-b615-8394b828bbc0",
        "cursor": {
          "ref": "1c8df3f0-f10d-4122-ac5f-09b5f4b1b13c",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "448fed34-1842-48b3-818c-bb281e1e02be"
        },
        "item": {
          "id": "a05c610e-40e2-4c76-b615-8394b828bbc0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "55decf98-e7a1-43bb-83ff-e73f054bf5b7",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "165e87ee-f0d0-4fae-b82a-e0cd0e166b4e",
        "cursor": {
          "ref": "64d8e8c3-6c2e-4d6b-b3d8-ac7bbf343684",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "86b0d1e3-c748-44d1-89dc-880dba894d21"
        },
        "item": {
          "id": "165e87ee-f0d0-4fae-b82a-e0cd0e166b4e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b4af9a7e-97b4-47db-972a-66b5ebe6d2ad",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "eefed7b7-d5b0-444f-87a1-b599fa58e53f",
        "cursor": {
          "ref": "8da42099-ab66-4702-9183-858ae4b09114",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "17805d72-e06d-4579-9d03-77695710f373"
        },
        "item": {
          "id": "eefed7b7-d5b0-444f-87a1-b599fa58e53f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d982af52-08b0-40d4-82fc-ef4c404d29e4",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "f4f33ec8-8eb9-49ce-8079-16efd6abbb07",
        "cursor": {
          "ref": "cb207f46-fcfd-4c97-b05e-9675682e4a79",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2a76d2a3-1af8-4879-bf9f-8e8d95e4f0d7"
        },
        "item": {
          "id": "f4f33ec8-8eb9-49ce-8079-16efd6abbb07",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3e547ee3-417b-4bd6-93e7-1c425eaecc63",
          "status": "Created",
          "code": 201,
          "responseTime": 427,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5dd96802-730f-413a-bc64-adebab165936",
        "cursor": {
          "ref": "ff0891c0-99d4-4293-8fff-788954f25e74",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "127ddd2d-8f5b-4f43-9018-cd4953f6c6c8"
        },
        "item": {
          "id": "5dd96802-730f-413a-bc64-adebab165936",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "979540d6-923a-4c3d-8a3a-0785cd636f65",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "d9300420-da80-4623-ad5e-81c9f7461a35",
        "cursor": {
          "ref": "6cff7b83-0f31-4b92-835a-b56a15fc7393",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "34b29d84-1cbe-4c87-8b19-1a215ba22711"
        },
        "item": {
          "id": "d9300420-da80-4623-ad5e-81c9f7461a35",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b6de71fd-81ad-41c0-b1cb-71785c6b9210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a3ebbd-d190-4142-be0c-c61bd8c11ad5",
        "cursor": {
          "ref": "12b17000-901b-4d4f-8361-42db4cd68152",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "12347c8b-986f-4d27-b821-44b88e5e43cb"
        },
        "item": {
          "id": "f4a3ebbd-d190-4142-be0c-c61bd8c11ad5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c96f0429-4f28-403e-a580-5a5ba44c7a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7651c5-08c5-4a05-a338-8722175615c6",
        "cursor": {
          "ref": "92c70442-6d0e-4247-abdd-60c8ae45a6b8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d8906763-50f3-4d32-8c18-a07e990bd160"
        },
        "item": {
          "id": "aa7651c5-08c5-4a05-a338-8722175615c6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "63fb6a4b-95a9-4c2b-9995-82f1540ac19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4e7521-60cb-44f3-bce0-ad3faa724f12",
        "cursor": {
          "ref": "05a57de9-87ce-4f5b-b758-97360fb1024b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "86cccb96-6a20-4fac-be5e-a0c16f996120"
        },
        "item": {
          "id": "bc4e7521-60cb-44f3-bce0-ad3faa724f12",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2fa4c401-3a75-482d-803b-8f992035647e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45fd5777-698f-4cc4-bfe4-da9798b9f3aa",
        "cursor": {
          "ref": "a59f702e-9589-4a88-85d2-ff3d32673133",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e1960492-180b-4a6a-a676-d205165b705f"
        },
        "item": {
          "id": "45fd5777-698f-4cc4-bfe4-da9798b9f3aa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "88173e72-2e44-405d-a60f-2e4f49e309d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd559e1f-4108-43b4-bf2b-ee9b6bfb2f84",
        "cursor": {
          "ref": "3f9e317e-98a4-43cd-bb35-3ef53aecf5be",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3011c937-5016-4d3e-8263-83ae742afd82"
        },
        "item": {
          "id": "cd559e1f-4108-43b4-bf2b-ee9b6bfb2f84",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "30573e81-f211-42b0-b719-8bbdd31a29fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5914bb25-5bd7-41e2-8c6b-5876cbb9f43d",
        "cursor": {
          "ref": "f853f8a0-1c61-4652-ad71-276bae4a4c7e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a6ce80c3-19ee-4784-ba41-a45045ad183f"
        },
        "item": {
          "id": "5914bb25-5bd7-41e2-8c6b-5876cbb9f43d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2f7bf329-403c-4100-b770-b4912cff789f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2b94a2-e81c-4f7f-952f-868492b6fed6",
        "cursor": {
          "ref": "35b3f493-d3a0-4b18-a03a-259758c27acf",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "e2c4d77c-c0c7-4af9-a553-b4bd16f30e9d"
        },
        "item": {
          "id": "bb2b94a2-e81c-4f7f-952f-868492b6fed6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2cc98313-8252-40ad-b52e-39a0f4406786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299d933f-0227-46e2-816e-8d65e2550d76",
        "cursor": {
          "ref": "643db3d6-118c-4fa3-b465-937c28fedd3a",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "09a42f79-a1e1-443e-b4d8-b0ac476a7c59"
        },
        "item": {
          "id": "299d933f-0227-46e2-816e-8d65e2550d76",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f9f16d06-8e17-453e-9b77-07aa02bd693c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3314ce-ebdd-483e-8d04-8f84365d8bc6",
        "cursor": {
          "ref": "4b50cefb-25b3-4a9c-8fce-e222912cb412",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "dd66c76c-dcc4-48e2-8c51-b49979a93c44"
        },
        "item": {
          "id": "fc3314ce-ebdd-483e-8d04-8f84365d8bc6",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "93f87e18-dd29-4367-8377-6abde266a8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c9f9e6-458a-4dfe-834c-cbad65aa5f0d",
        "cursor": {
          "ref": "9546007f-76ed-41e5-9256-57889a48a170",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f04a0d8d-0282-4685-9da6-f2c6345e84a0"
        },
        "item": {
          "id": "a7c9f9e6-458a-4dfe-834c-cbad65aa5f0d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "760d6438-928a-46fa-b7f2-ee2b2b20268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f86d314-32a7-4cc0-985a-ba78e54c5bad",
        "cursor": {
          "ref": "a39dbb49-63e5-4eb2-b784-292272b22d00",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "41d27edd-b4e0-4c09-8ccb-d41ca84e1738"
        },
        "item": {
          "id": "9f86d314-32a7-4cc0-985a-ba78e54c5bad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "109f760b-9b32-423a-a0a9-37a0383918c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c250aea-eeda-404f-9c39-64aadc4773d4",
        "cursor": {
          "ref": "647f176d-6ee2-41a9-b156-6d4e12a20401",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "33ca05cf-7d2f-4284-b0d7-abb2f5d2b963"
        },
        "item": {
          "id": "8c250aea-eeda-404f-9c39-64aadc4773d4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "46df8d69-1c0f-4122-acaf-b202091abbca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10130a0b-3f6b-4ca8-8e60-38694b8561a2",
        "cursor": {
          "ref": "cf63ad86-9430-4475-9c20-2e6c6c0658b1",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a5794a87-a903-482e-8195-9fcd484bf36f"
        },
        "item": {
          "id": "10130a0b-3f6b-4ca8-8e60-38694b8561a2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0d955a7c-37a8-42c0-9ccb-66bee5e79219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f192935b-6a59-40fd-af7c-529c5749e6fa",
        "cursor": {
          "ref": "b70ef843-41d6-4971-9997-ad4aa6bebd50",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "39229fc8-ad5e-4f37-a93b-dc6b07153267"
        },
        "item": {
          "id": "f192935b-6a59-40fd-af7c-529c5749e6fa",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e71ec05a-f00f-4b71-9f92-5bdd1e646a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d822d6c5-dec8-46eb-b1eb-54c78423fec5",
        "cursor": {
          "ref": "74b2414d-4201-4465-8830-48de3150e5b2",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e0666c7e-c2e0-4125-bbf8-d42e54607273"
        },
        "item": {
          "id": "d822d6c5-dec8-46eb-b1eb-54c78423fec5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "240c46de-cbf4-4052-b11f-f915bc210766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe577b6-9096-4e56-9c58-bd59cf37977a",
        "cursor": {
          "ref": "fb8cf619-0f9a-4052-b8ff-0b280961396a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3fc388be-ced1-42f2-858e-762ecd49abaf"
        },
        "item": {
          "id": "8fe577b6-9096-4e56-9c58-bd59cf37977a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "63b91d74-6f94-4493-8245-d76ea36a7a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7eeee6-9691-4ee9-b5d4-9826d3c2f161",
        "cursor": {
          "ref": "820518a2-38eb-4bf5-847c-f20a911f3e8d",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "00c76137-6f04-4acd-b72b-f042d564d915"
        },
        "item": {
          "id": "7e7eeee6-9691-4ee9-b5d4-9826d3c2f161",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "be169878-97a4-41c5-bac2-137e6e20f229",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b46b48a-b99f-47c9-b09c-f44309a68c69",
        "cursor": {
          "ref": "7f9f31f1-4e9a-44f9-b8d1-40ddd230fd31",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f260b443-5137-4e18-8cb4-1d5d2612f2fa"
        },
        "item": {
          "id": "1b46b48a-b99f-47c9-b09c-f44309a68c69",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7a54f24d-2b5d-4658-b7f7-d0252d1449d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547509d6-7a87-4a72-b6d7-abdad22065fc",
        "cursor": {
          "ref": "d9188d1f-d4f3-4735-850f-34dea9b74399",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "23b01b43-3ef5-430b-8292-efaeb273f76a"
        },
        "item": {
          "id": "547509d6-7a87-4a72-b6d7-abdad22065fc",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ae7ce54d-5e71-4983-8fc8-7bf83d1b39f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b492334-b8a4-4a14-87c2-34570ed4665e",
        "cursor": {
          "ref": "c4328017-2938-4d34-9bdf-8c18782f0ee5",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "dcd0de7c-6fc7-4c8d-858f-242a2b5063e7"
        },
        "item": {
          "id": "4b492334-b8a4-4a14-87c2-34570ed4665e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1ee327bf-56f4-4697-8b62-34c457b1474f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b05b6c4-35ad-47a2-8fcd-39cfdcb4cfba",
        "cursor": {
          "ref": "0af2e400-0322-43be-b3f6-d5a56e447634",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8faeccdc-0edf-4e58-ba0f-0b8bffcbaae1"
        },
        "item": {
          "id": "0b05b6c4-35ad-47a2-8fcd-39cfdcb4cfba",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6cae2029-ecf0-4a80-9e1b-45ff93fc7690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10257067-c1ac-41dd-95b7-140bd2dd8a68",
        "cursor": {
          "ref": "d22fe543-727c-4a6f-aedd-7f85572914be",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f079463a-96c8-4393-b669-373f67fcd5fe"
        },
        "item": {
          "id": "10257067-c1ac-41dd-95b7-140bd2dd8a68",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "76a3b4b9-5ce2-4175-9fcf-36dd6e36d8a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd612bd-1656-4a11-a71a-290dc0cad068",
        "cursor": {
          "ref": "477512a0-844a-4bd2-961d-23e03bc0317c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3b8b6169-c9cd-4007-ba87-09b2fb3ceafb"
        },
        "item": {
          "id": "5dd612bd-1656-4a11-a71a-290dc0cad068",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f914985c-e0a4-4983-9524-0411cd45e0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1c473ab-423d-4136-8c41-0bf819aa69b5",
        "cursor": {
          "ref": "f5e45430-4c0c-4a9f-a672-e6cdef68380e",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "e0705a46-fa04-40ad-a5f1-8a75183c16a3"
        },
        "item": {
          "id": "b1c473ab-423d-4136-8c41-0bf819aa69b5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7f83606f-b157-4723-a80b-01b26265e27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d96350-e7e7-44fc-a219-22c550254230",
        "cursor": {
          "ref": "0d7ad966-db7c-417e-ab96-54d765ee752e",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "40a7b091-bc0e-44a1-8875-840999db8971"
        },
        "item": {
          "id": "22d96350-e7e7-44fc-a219-22c550254230",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b777a842-37b5-4f3f-92ca-59d142389801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af29b94b-330c-4bf2-94ed-a38b9f577a46",
        "cursor": {
          "ref": "5f4765f3-0fc1-45e2-bccd-134ef16666e4",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b4728918-9292-4622-a682-a9d78ab51c69"
        },
        "item": {
          "id": "af29b94b-330c-4bf2-94ed-a38b9f577a46",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "36fd1595-c0f0-4357-bf97-193fa24c11f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb180030-d74f-4e5a-938a-f59b50e1869f",
        "cursor": {
          "ref": "0fbb7163-5cb6-4b05-b3f9-618b9069878d",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "27e63089-902b-472f-85fe-0c6bd985a5bd"
        },
        "item": {
          "id": "bb180030-d74f-4e5a-938a-f59b50e1869f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4ddd45d2-daf3-407f-8511-c85a8101c55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3fe999-2301-4524-b450-7097ddff4a60",
        "cursor": {
          "ref": "972182ec-c855-41c0-b033-f5fd2691f4af",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9e986c47-3796-4a21-bed6-09fbe153cd5b"
        },
        "item": {
          "id": "fd3fe999-2301-4524-b450-7097ddff4a60",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5a3e2fe0-6e00-4284-be50-1e6767bce0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6738cc-0bd8-47cf-a47d-7821139e9739",
        "cursor": {
          "ref": "125cf73a-fead-4a70-be25-46e3e39f6cfc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b2a1aa1f-0b0f-4fbd-afb8-049503585465"
        },
        "item": {
          "id": "5b6738cc-0bd8-47cf-a47d-7821139e9739",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "887fb00b-12fa-4af6-b449-8cb0e00a5b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7315bc15-ad65-427c-9e48-fd18d034525a",
        "cursor": {
          "ref": "23f7a005-7fa5-4a6f-87eb-6b9c227f1aca",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7858234f-807e-4757-81aa-2114678eb18c"
        },
        "item": {
          "id": "7315bc15-ad65-427c-9e48-fd18d034525a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "95ddf1fa-12d7-42e8-ac7b-2aee006f92a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03397afa-5d09-44cd-8463-7ac109355ada",
        "cursor": {
          "ref": "bf2370bf-f015-4f5d-bbf3-84082950b13b",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2cd80a09-54ee-43c9-b507-a8b446597a7f"
        },
        "item": {
          "id": "03397afa-5d09-44cd-8463-7ac109355ada",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "addea25b-5d6f-4a92-8f95-459c056c3ac9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c1c6cb-7adf-48de-979a-25cb9b5c6191",
        "cursor": {
          "ref": "1d857b92-d3ff-471a-9792-4c2dc916bc63",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "23cd03e7-7838-4481-a210-04a0c5451c12"
        },
        "item": {
          "id": "97c1c6cb-7adf-48de-979a-25cb9b5c6191",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "58bff3a3-9bba-4635-a4d0-e90f7aaadbc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1b97d57d-07a1-4bcc-9a12-8bcfb315d03c",
        "cursor": {
          "ref": "ed4b25b9-1aa0-483e-ab0b-429e43162ab0",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "555fc40f-a204-4e8c-8855-26fc144e89e2"
        },
        "item": {
          "id": "1b97d57d-07a1-4bcc-9a12-8bcfb315d03c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3fdaedd1-4b3f-43d5-ba3e-f538c062fed5",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70e0f75-0896-4869-b477-fb32631d891d",
        "cursor": {
          "ref": "0d3849bb-905a-409b-925e-3e77077622e9",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b1a52fd3-c9be-4171-8a15-f42e7b757188"
        },
        "item": {
          "id": "e70e0f75-0896-4869-b477-fb32631d891d",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7fcd5995-72f4-4e61-bbb3-d82b7e2fc1f1",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31478a5-389c-40e0-9f5f-00a5ffc712a7",
        "cursor": {
          "ref": "25228aab-695b-4199-9ad9-d970fa70b36d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "52c8fa55-919e-459d-858d-8d8ce395eb70"
        },
        "item": {
          "id": "c31478a5-389c-40e0-9f5f-00a5ffc712a7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "092cc6b7-1662-4251-90d4-e45095cffc52",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c119ee96-45f5-4a87-a6d9-8525942d5996",
        "cursor": {
          "ref": "a3f0b005-5106-420c-8891-3988d0acba74",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1ee8569c-d6aa-42fd-8f19-759a222046d5"
        },
        "item": {
          "id": "c119ee96-45f5-4a87-a6d9-8525942d5996",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b242770d-d7cd-4af9-87e0-4f2e6edd4f6f",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a107d3-b78e-4205-a1f6-8f1c79e4259e",
        "cursor": {
          "ref": "dccfa32b-3248-4b09-a2a3-b8b304ba8d50",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "db06f7af-cdab-4200-aa39-9a1f54afd793"
        },
        "item": {
          "id": "f3a107d3-b78e-4205-a1f6-8f1c79e4259e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ac4ff3a0-ac99-4195-9496-fccd044250fe",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-18T00:36:50.259Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-18T00:36:50.259Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d9710c3e-cf6e-40ed-a77a-900bc1090541",
        "cursor": {
          "ref": "e7294c5d-a436-4c0a-89a3-393b0ad0d32d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1428fe0f-92d3-402c-b097-70d8d400bdd1"
        },
        "item": {
          "id": "d9710c3e-cf6e-40ed-a77a-900bc1090541",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "94bc1a61-46d1-4e6c-9bdd-9b35226215a0",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a680bab4-d31a-494a-b72d-747c86bbd5b8",
        "cursor": {
          "ref": "bb3bb94e-8869-4311-af78-a5b16dffc5c4",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "caf499fe-0142-41e7-a78e-d57d376865d6"
        },
        "item": {
          "id": "a680bab4-d31a-494a-b72d-747c86bbd5b8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6d85fcb5-7951-4203-8fa2-974645a91f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4a77ac-30ef-4daf-9a29-dc216e4beffd",
        "cursor": {
          "ref": "755ace4d-934e-4995-aa92-b075ed00f683",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bfae9e75-d7c5-42fd-8420-e8c4858dc2b5"
        },
        "item": {
          "id": "5a4a77ac-30ef-4daf-9a29-dc216e4beffd",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a3ac9cb2-4b13-49c1-8419-b60a4aab3b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0985908a-0e9b-4dfd-8668-93ebe789b540",
        "cursor": {
          "ref": "fb50a45f-2569-4571-a842-a28718d0bcc9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "fa85dbbe-255f-48a3-8560-60f487f36272"
        },
        "item": {
          "id": "0985908a-0e9b-4dfd-8668-93ebe789b540",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9603ca1d-0543-4ed0-ab2a-c03fca2b3fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e7752a-a86e-44c9-98dc-61fe918a338b",
        "cursor": {
          "ref": "a9bfb252-48a4-4be6-9708-63f3f443adf8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9c4d7630-00f5-49ae-923e-ddb76f0a717e"
        },
        "item": {
          "id": "65e7752a-a86e-44c9-98dc-61fe918a338b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "51bd97af-2e9a-4c06-85ed-4441afbf9693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194dac37-7a6a-4f88-89f5-d8b52d5522c1",
        "cursor": {
          "ref": "6d2745af-ce4c-4cf5-9ab1-373bcf7238d6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "64597ecf-1605-4920-9b25-c94ff57b4861"
        },
        "item": {
          "id": "194dac37-7a6a-4f88-89f5-d8b52d5522c1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "73e36f4a-35dd-433e-9764-634b3f1292d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b257bd-04ce-4dcd-bd38-ab5da800226c",
        "cursor": {
          "ref": "956ebd69-345d-44a9-9d80-ca25b8370ef6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "33aa749f-5748-48db-aa7c-6798fe6eb261"
        },
        "item": {
          "id": "23b257bd-04ce-4dcd-bd38-ab5da800226c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ae8ae84c-a999-4393-8541-45bf99c380cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5437c6c-1765-404e-9171-a72e1bfba9ea",
        "cursor": {
          "ref": "501478a6-a93f-4e0f-bffa-4c629ba48f4b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "39ac7ef9-b89d-4c46-b76a-1779069efd56"
        },
        "item": {
          "id": "e5437c6c-1765-404e-9171-a72e1bfba9ea",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2484ac0b-aae1-4163-8cbf-e2d4727a751f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e35132c-1e50-4c8c-8def-e8eb82ebb1c1",
        "cursor": {
          "ref": "8bcd6e9b-7739-4b4d-aaed-c3ee824e1445",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "47409e6c-d4b2-4879-a25f-7d17799a8de9"
        },
        "item": {
          "id": "4e35132c-1e50-4c8c-8def-e8eb82ebb1c1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f80d2fb4-3662-40bb-8a51-8679788f3776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c30d136-6690-4e0e-9c89-7cbbd99922db",
        "cursor": {
          "ref": "ac68b44f-49d9-44f5-b8b1-553f128c2f50",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ce07897a-147d-4bb6-9143-7db0466ed3f2"
        },
        "item": {
          "id": "2c30d136-6690-4e0e-9c89-7cbbd99922db",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7ca99543-65c2-43f6-9601-20ae76d4bfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49d128c-605d-41a6-873a-7ec0f80c5787",
        "cursor": {
          "ref": "fc25f0e6-e8ce-417d-b4c5-4f926c54afd9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "cfc8d7fa-436c-4e6e-a014-1327e34c81d8"
        },
        "item": {
          "id": "b49d128c-605d-41a6-873a-7ec0f80c5787",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4c161b3e-6703-4dd3-9ac2-77cb6fd5dba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45334434-c599-4175-99f4-cc1a9dc4e5ae",
        "cursor": {
          "ref": "7ccbb05b-59a2-40c4-8833-94543e03a72a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7bd2763a-11e5-45bc-8180-9c7052213d4a"
        },
        "item": {
          "id": "45334434-c599-4175-99f4-cc1a9dc4e5ae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad90abe4-578d-4608-b724-b6244ec9582a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c928e30-f309-4f10-a309-2600d0c23196",
        "cursor": {
          "ref": "09bf02c5-d4c0-4761-861b-12561e7198af",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "32b3a866-62d4-4b4b-9eb8-be40c114608e"
        },
        "item": {
          "id": "4c928e30-f309-4f10-a309-2600d0c23196",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bb9e4985-4d77-4803-8acf-84c58c020b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f0ce271-1293-4f3b-91cb-b7f77d7f0fc1",
        "cursor": {
          "ref": "5b76c98b-bc3c-4726-879d-313f04f35733",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "508b14b4-d12c-4d88-9a04-296a6c6612ff"
        },
        "item": {
          "id": "1f0ce271-1293-4f3b-91cb-b7f77d7f0fc1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b7011bd-1898-4a05-ad4e-e9537b0bebb2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "b8317087-1a80-4bb5-a723-f98d28f3a9c9",
        "cursor": {
          "ref": "b9d3a849-90a6-4a43-8a4b-d1b4f3b9fa27",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "40257d8b-49ba-43e3-9013-ed158f0f226c"
        },
        "item": {
          "id": "b8317087-1a80-4bb5-a723-f98d28f3a9c9",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "09fc98ea-0202-4dc1-baf6-8a41bbcc748f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "ed923b7c-a5b6-4e77-a00a-55f96bc466b2",
        "cursor": {
          "ref": "544c0982-f967-4c2f-96af-e7acc7632bd7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f152ef9b-1e03-4c1c-8b2c-a963e41ca404"
        },
        "item": {
          "id": "ed923b7c-a5b6-4e77-a00a-55f96bc466b2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6d15dd17-7a0c-4755-98f7-8c91ada7bb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82aa0ea7-5358-48de-b92e-faf1affaedb6",
        "cursor": {
          "ref": "32eef875-af2e-494e-a98f-8fd5d87d07e9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "32e103f0-f56f-45f0-8a86-26d74149fc28"
        },
        "item": {
          "id": "82aa0ea7-5358-48de-b92e-faf1affaedb6",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fdbd38c5-8c12-48a2-8e70-c809c998bfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538c460-6f0b-43de-a555-c2ed00f12c72",
        "cursor": {
          "ref": "828d54cb-d578-4e28-bda9-0021500d2936",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "44355c63-90c4-4192-b46d-e79d5b71daf0"
        },
        "item": {
          "id": "9538c460-6f0b-43de-a555-c2ed00f12c72",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a031c221-da8a-4399-9b14-0f6fe37b28ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4e18cb-c008-4a40-9bfe-422419ca30b8",
        "cursor": {
          "ref": "9e45f900-f697-42a8-b907-a147e1f6597d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4978e412-d62d-43f6-917a-4d32e5cdf2f5"
        },
        "item": {
          "id": "cc4e18cb-c008-4a40-9bfe-422419ca30b8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7cf9fa3f-3f1f-4d78-bd73-c6381c72515d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab7b182-0fae-4509-9c13-e483d1e24297",
        "cursor": {
          "ref": "4c024131-32be-4b39-907e-871f97213755",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ea45f245-e494-4336-a62d-a8b6165d2eef"
        },
        "item": {
          "id": "0ab7b182-0fae-4509-9c13-e483d1e24297",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "069a65e4-a249-446b-9dc2-840a2712feaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1824147b-4939-4073-9bc6-3a9ae822e619",
        "cursor": {
          "ref": "8d1134b4-bacc-41b1-aa62-ff047f05181e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4cf23fc2-1e46-4647-b873-f265aacaf3e4"
        },
        "item": {
          "id": "1824147b-4939-4073-9bc6-3a9ae822e619",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "57e3f0df-6977-4ff8-be27-a94335470fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e8b4b4f-ed6c-4cbc-b9c2-f4a77a23ac85",
        "cursor": {
          "ref": "f6656d9d-3b60-43fc-8511-d17f2836e52e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "da4261cd-e6e9-4405-8ae7-050b36ac6a5d"
        },
        "item": {
          "id": "6e8b4b4f-ed6c-4cbc-b9c2-f4a77a23ac85",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8f1ddd55-7bab-4942-aff3-9817f1621c2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2efbc155-a66b-410f-b25a-f12f58203e67",
        "cursor": {
          "ref": "420f0fd5-baac-48be-ab0c-1ea3fe58e146",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3be603d8-05c1-459f-abd0-7f9d82b84ef4"
        },
        "item": {
          "id": "2efbc155-a66b-410f-b25a-f12f58203e67",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1677b931-de82-4238-9cb7-dbe31f74de44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2959df9-0f06-425a-8ee0-b5eba200266b",
        "cursor": {
          "ref": "c38ddbb5-0907-4c8c-8369-24f155378184",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8f9e53a6-6aa3-4ee3-90d4-08f658635641"
        },
        "item": {
          "id": "d2959df9-0f06-425a-8ee0-b5eba200266b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "160a8ded-b68a-4d9e-97c7-8f899daafdad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff12de66-3325-468f-af0d-27fed3912ec9",
        "cursor": {
          "ref": "45fda605-03b5-49d1-97d0-e8c9946b4781",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "98effee2-b66e-452b-a056-5023b005982e"
        },
        "item": {
          "id": "ff12de66-3325-468f-af0d-27fed3912ec9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b5923ae0-0b61-4d31-b517-b2269ec138a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1499dd91-d6ea-497b-8895-8ff7a43258fc",
        "cursor": {
          "ref": "774e8c52-9bd1-414a-8b63-09d02fef814c",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0935b0e3-f755-47b3-90a0-6e3721896099"
        },
        "item": {
          "id": "1499dd91-d6ea-497b-8895-8ff7a43258fc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fc7cf9de-3487-4d50-84ca-851084733713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555f25cd-7582-4ae3-9c79-2e6bfe4113bb",
        "cursor": {
          "ref": "366807e6-9b57-4ff7-8c8d-fe967a0f4cd4",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e19b45be-d8ef-4348-9a24-94ea42d2866e"
        },
        "item": {
          "id": "555f25cd-7582-4ae3-9c79-2e6bfe4113bb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "10e4fe7b-29a3-4b85-842f-e2e7cab5edda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbabd8c-5797-4143-b4ad-1c787f04de88",
        "cursor": {
          "ref": "1fdbc861-36e2-459d-9177-9e2ed607a9e5",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e48e3256-2bd1-4d11-8438-900c9443fe56"
        },
        "item": {
          "id": "7bbabd8c-5797-4143-b4ad-1c787f04de88",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d25971d7-d736-481c-b93a-057b1432ad23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c973fb6-5ade-465f-81d7-79c9e9d80c3b",
        "cursor": {
          "ref": "70aa9192-4f28-4914-8523-be13f0c8a504",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2c2384e7-b234-4517-9cc9-81a6b8be0685"
        },
        "item": {
          "id": "6c973fb6-5ade-465f-81d7-79c9e9d80c3b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8a4f4e2c-298d-4f01-a646-3396dd5d0cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1a5918-2616-4535-bdec-70c6b7f2e9d6",
        "cursor": {
          "ref": "60ec99a0-a054-4905-84a3-a7f79f15cf28",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e3b94829-6af5-40b1-a600-0b42808f399d"
        },
        "item": {
          "id": "7f1a5918-2616-4535-bdec-70c6b7f2e9d6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7793fe12-228f-4418-b7aa-060d609d6795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccec246-23f1-49c4-aaa8-41ab8e0ab8b2",
        "cursor": {
          "ref": "ae3fadbb-2cba-4f1a-8e7a-0ac1989cb423",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ee42311f-f5c9-48bf-b8f9-30d4f236acea"
        },
        "item": {
          "id": "cccec246-23f1-49c4-aaa8-41ab8e0ab8b2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0b11698e-4c1c-4ac5-aacb-29a361b46130",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55cf3eaf-6a86-4282-8b75-b1c8b4751bfc",
        "cursor": {
          "ref": "50c01128-7d46-4361-b647-b696848f60e0",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7e2c489d-8e26-4887-bd59-f02ebc8c8a2f"
        },
        "item": {
          "id": "55cf3eaf-6a86-4282-8b75-b1c8b4751bfc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9deb8e39-cebf-448e-8fdf-9bd66ebc303a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42f502f-28f5-44c2-a0a9-015ff7670269",
        "cursor": {
          "ref": "17acc1a8-7590-4e60-bbb6-29bfbb1499f8",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f99e989d-9645-4d61-b268-0e0775804f3d"
        },
        "item": {
          "id": "c42f502f-28f5-44c2-a0a9-015ff7670269",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9796f722-c3ff-4527-ae8d-709e9a1029c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 76,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "9a873907-70a9-43f7-9a11-9ec7542b8957",
        "cursor": {
          "ref": "a10e5226-f3be-495e-a77b-41b509dda1cf",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c0eb904d-07e4-4fe5-9c15-c324eea7ee56"
        },
        "item": {
          "id": "9a873907-70a9-43f7-9a11-9ec7542b8957",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "179f746b-1fa3-4f73-abf0-31278442893d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad76a8dc-3282-4515-943d-a70d06d4df68",
        "cursor": {
          "ref": "8fb0da62-11a1-4387-a656-87ceba852020",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b679afb6-478c-4dc7-a196-590bbb9b2061"
        },
        "item": {
          "id": "ad76a8dc-3282-4515-943d-a70d06d4df68",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "123317f3-01f6-4919-8d7e-27d973c2bf7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9378ae39-8a68-40fd-ac34-eeb30b744604",
        "cursor": {
          "ref": "8e0ce74a-5c1f-4608-a56a-06a485e34ec9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ffe55ba7-03a4-409f-ab9b-217569a4ea81"
        },
        "item": {
          "id": "9378ae39-8a68-40fd-ac34-eeb30b744604",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "31d0b8f6-8f50-476e-9503-3f5c2751bde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5316fd36-24c0-4ca5-a347-7fde3d74968e",
        "cursor": {
          "ref": "1f0ef508-eda6-4551-85bd-eb6a03fa68a1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "aa4a5af3-f07f-494d-895b-a412f49bf58a"
        },
        "item": {
          "id": "5316fd36-24c0-4ca5-a347-7fde3d74968e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "86b30f6a-2bf7-419b-828d-0de9b17d03b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45064467-0fe7-49d0-bff5-94ec2f716f8b",
        "cursor": {
          "ref": "aa553756-e784-4584-bd3a-74b1fa12f4a5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "786ddd3a-62e3-4564-aded-1c983b464ca1"
        },
        "item": {
          "id": "45064467-0fe7-49d0-bff5-94ec2f716f8b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "329547a7-85d8-43cc-ae24-de5ba86bb9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf57ed86-15b7-4e63-8d15-6c0039f73db5",
        "cursor": {
          "ref": "9b491e57-45f6-4893-8518-a7eef0efa536",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "62a9a25c-43d8-4c38-8a0a-7623ebfaee62"
        },
        "item": {
          "id": "cf57ed86-15b7-4e63-8d15-6c0039f73db5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "bdb2024d-a1cb-467d-81dd-eca93ca81868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ccecf1-eeac-43c8-bd8e-dde9a23b679a",
        "cursor": {
          "ref": "e0950739-be84-486b-80c5-c669442e4a66",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4708cec0-ac79-4f83-9e5c-7bb0417ee921"
        },
        "item": {
          "id": "d5ccecf1-eeac-43c8-bd8e-dde9a23b679a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5f80eb9c-86c1-4e08-82dd-b1301b1e15e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096622e4-4a3e-43b1-a214-64b6e0aeca92",
        "cursor": {
          "ref": "2223439c-04ea-4d32-8200-c62cac647426",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "532755c4-37e6-41a7-9440-caaf16d51178"
        },
        "item": {
          "id": "096622e4-4a3e-43b1-a214-64b6e0aeca92",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "58c2fa4d-b8eb-4dee-b73f-b9eae4b06b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b25d877-dbfd-4df7-831c-f4b5f51bd7c7",
        "cursor": {
          "ref": "5a86a645-90ea-47f0-84a3-399e1aaaa8d7",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1ebb661b-55b4-4b4c-95d9-f8661d4fc9db"
        },
        "item": {
          "id": "9b25d877-dbfd-4df7-831c-f4b5f51bd7c7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cc53f3c1-5cf5-4195-a9db-b0449bb1fe8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061d8586-8443-4196-9ed4-310dd3edce05",
        "cursor": {
          "ref": "94283dc8-5cf2-495b-a17d-4476f26ec388",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "30a081fa-1006-403b-beed-c145e4a419e3"
        },
        "item": {
          "id": "061d8586-8443-4196-9ed4-310dd3edce05",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4bfc7012-1918-4b58-9416-322c09740a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e66a2cf-4285-4c3e-b24a-39d9c600b3ef",
        "cursor": {
          "ref": "611c12d7-0252-4f84-a6b6-2844069d37fe",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "87e33c82-b905-4c2e-889b-dd0144f2c5f1"
        },
        "item": {
          "id": "2e66a2cf-4285-4c3e-b24a-39d9c600b3ef",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "77f8f12b-2514-4be0-aead-d08776d836cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d31fda-42c7-4fbf-b506-50654226e777",
        "cursor": {
          "ref": "73dc96d7-45b5-4ca7-9c6c-8edab926a52c",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dc3d1a7e-4a69-4e93-856b-b490ebb34a2d"
        },
        "item": {
          "id": "62d31fda-42c7-4fbf-b506-50654226e777",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "66956ce2-88cb-4c0d-af83-c10ced28139e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddb2aec-8cd7-4732-b040-5929a7c27ab7",
        "cursor": {
          "ref": "f906578f-a2d5-4cd6-807f-2fcc327a432f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5d979d81-df48-4c20-8b44-6d866ac0116d"
        },
        "item": {
          "id": "6ddb2aec-8cd7-4732-b040-5929a7c27ab7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9695075b-05de-46b1-b30e-605dd4d91d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58596e4-fd42-4c35-acba-65de99913a18",
        "cursor": {
          "ref": "b564f5e9-7f70-43b2-b4ff-9ce9d3b5ec3b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "87295883-f2eb-40d6-aa17-9b1d560fe649"
        },
        "item": {
          "id": "f58596e4-fd42-4c35-acba-65de99913a18",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9bceadb5-e65b-4c97-9a94-01cc872c5ef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196e7d6d-0860-4ea7-90b0-ce8ed31e7f68",
        "cursor": {
          "ref": "b0bccc7d-a8e6-4500-a9b8-d4e0d41081f9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "827389c9-75df-4c2d-8902-ad2831d777ea"
        },
        "item": {
          "id": "196e7d6d-0860-4ea7-90b0-ce8ed31e7f68",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e470a306-4751-418c-b48e-daf52f74cc40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "b5873a11-dc0a-412e-8f76-97da8e4a7d94",
        "cursor": {
          "ref": "76d8c388-68fa-4d0c-9051-b52e50f41c44",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e6f81bfe-4687-4508-8394-e46bd22cfb36"
        },
        "item": {
          "id": "b5873a11-dc0a-412e-8f76-97da8e4a7d94",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "72e38360-3b97-4b23-9fa6-ab8c88b32fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343c1341-91f3-47c6-b198-cd9dd1e69c7f",
        "cursor": {
          "ref": "05c1445e-1f24-43e9-84a0-d7b6e0b5bb65",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "2e1c6c1b-bc00-41ba-8d4d-9e0c6a581036"
        },
        "item": {
          "id": "343c1341-91f3-47c6-b198-cd9dd1e69c7f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ebe8d52a-6407-44aa-b574-25435b97e975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18ea8dd-a5f2-4ebf-a3a6-0fab8b65e80b",
        "cursor": {
          "ref": "e84e54e7-18cb-4eb6-9e72-402227d1f2c6",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "aa9db8fb-5d40-47a7-9b2f-cd6dcc156780"
        },
        "item": {
          "id": "f18ea8dd-a5f2-4ebf-a3a6-0fab8b65e80b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5ab30419-6595-4dc3-a01e-bbf6b0fbb2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86852c7-56c2-41cf-9f30-840083d48a85",
        "cursor": {
          "ref": "ac53ad3a-bc14-4e08-a63f-232b0f2c8588",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8d62875e-be96-405a-9ce7-13e9b2217442"
        },
        "item": {
          "id": "b86852c7-56c2-41cf-9f30-840083d48a85",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2f79a924-85d1-4446-9182-75732028655d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6104fc-76a4-47ea-862c-993d6a853006",
        "cursor": {
          "ref": "298a6f4a-82dc-4551-bf95-af757c6e716a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2b1e9d3a-b28b-4664-a4ec-422b7e956e95"
        },
        "item": {
          "id": "0e6104fc-76a4-47ea-862c-993d6a853006",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2b63e842-72c8-468b-8032-86c884bef92b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94d132e-4530-4546-aec9-2fe124226caa",
        "cursor": {
          "ref": "a6bf0376-0291-4620-8ca2-2396b854608b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b0aa3ab0-22b7-41a7-ac89-f3180570b9f8"
        },
        "item": {
          "id": "e94d132e-4530-4546-aec9-2fe124226caa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4c03c3d5-3028-4ce3-8dec-a9d171778faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "154e6cbd-d497-4690-8595-c7726fa0e8a8",
        "cursor": {
          "ref": "db45eca8-8268-4db3-be2c-d2e96a7d8f98",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d99ce470-2651-4117-8542-1588fc04f4f2"
        },
        "item": {
          "id": "154e6cbd-d497-4690-8595-c7726fa0e8a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7ce0b71a-b092-476f-8ad5-890fba9356ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec6a7d9-8902-4376-81af-46cefe563256",
        "cursor": {
          "ref": "df9a50db-0a65-478c-aa8a-f28c4cd87a4a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4abc1025-f8eb-45e8-a40a-7d7b31fa9e61"
        },
        "item": {
          "id": "2ec6a7d9-8902-4376-81af-46cefe563256",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1e04fd5c-f27d-42aa-8901-62cb37f78c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe6ea32-48dd-456b-b8f3-a894bd19dade",
        "cursor": {
          "ref": "5be3b1c5-beb9-4d9f-915d-7e58b7fb00fc",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "55efc37b-49a4-4c52-9149-8939167f8fa9"
        },
        "item": {
          "id": "dfe6ea32-48dd-456b-b8f3-a894bd19dade",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d32e0d76-8345-4856-ad4c-f2d104f2eb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7653a46a-3a4c-43c2-adde-c022a1f2432c",
        "cursor": {
          "ref": "5f30fe74-fdad-4355-8dcb-b2b8067fd81d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "73556644-4de3-48d5-833a-3502a413c26a"
        },
        "item": {
          "id": "7653a46a-3a4c-43c2-adde-c022a1f2432c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "43f03882-1510-44d7-b313-2376e1b1ef30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fd9ad6-bc1e-485f-aa9b-8714fcfe03fd",
        "cursor": {
          "ref": "d80fd0e4-f9c3-4fa8-975a-47445b7ec913",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0c5b3b40-be77-4500-b627-0b9a5e767a24"
        },
        "item": {
          "id": "22fd9ad6-bc1e-485f-aa9b-8714fcfe03fd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb4863c9-1c81-4d48-8bdd-cc040fbc2984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe39cc00-3b48-4b76-a4b3-d8896ea93dc1",
        "cursor": {
          "ref": "2e4103f4-980c-4bd8-8da8-0d63a781d70a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b3612c86-ce7d-49a0-9295-c9edd2908712"
        },
        "item": {
          "id": "fe39cc00-3b48-4b76-a4b3-d8896ea93dc1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bb198318-25ea-42fb-9657-06fb6d090b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687d3be9-86b9-4d02-8331-cac51b94ceaf",
        "cursor": {
          "ref": "7b2a3dd3-7fee-4521-82db-ffdbe3664430",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "482e6058-66d1-4695-8244-3e511380f847"
        },
        "item": {
          "id": "687d3be9-86b9-4d02-8331-cac51b94ceaf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8e5cd9e6-80a1-4af7-b75e-160c13f9d9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fefde4a-6f5e-4bfd-aae7-4925ea4ac938",
        "cursor": {
          "ref": "f4f365dc-1f0c-4734-9494-5ff0448ac99f",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6b5d63da-a876-4779-80fa-9f71c2be52ca"
        },
        "item": {
          "id": "5fefde4a-6f5e-4bfd-aae7-4925ea4ac938",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7ea81b54-69bf-4903-ae36-0c08f3f75114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d8964c-d528-4e5a-a18f-8dcfd9b47e73",
        "cursor": {
          "ref": "60fd2706-f50c-4310-845b-b2f5a3bfeaa7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c38e82b5-ba30-4f4a-877c-f97756c1daf7"
        },
        "item": {
          "id": "e5d8964c-d528-4e5a-a18f-8dcfd9b47e73",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6360b538-5e6f-4991-80e1-49a8f9d4cfb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748142fd-fb50-44cb-aa75-f690d89ce427",
        "cursor": {
          "ref": "85013c29-6968-41d1-b857-0a7c294471ad",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "79bdb118-3b57-4609-939e-97cb002b3aa9"
        },
        "item": {
          "id": "748142fd-fb50-44cb-aa75-f690d89ce427",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a4fc0346-f8dc-4697-984f-342d89217c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8e356f-14c1-4d5b-8858-015f94ea55ea",
        "cursor": {
          "ref": "5425391f-a379-49e5-9106-94b0d75077ad",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a2692bdf-bd69-4619-9fa5-e4e4dba9ef46"
        },
        "item": {
          "id": "2f8e356f-14c1-4d5b-8858-015f94ea55ea",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ea7f131d-b71c-41b0-bbca-4bf667bc6b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf1ef81-c70f-4119-a00d-fc187d0daaa2",
        "cursor": {
          "ref": "4c9b7c20-ec48-41f3-949a-ce728d1a7ce8",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ea8738b1-923b-4341-832e-d423665c4b31"
        },
        "item": {
          "id": "8bf1ef81-c70f-4119-a00d-fc187d0daaa2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4fd6a051-70c0-4dab-ae7a-260cf0df6383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b366552d-1449-4d38-92b4-cfc0f7766199",
        "cursor": {
          "ref": "23df5a33-ad3d-4543-a748-2bce673a0c9b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "96070c51-7a34-415a-ad78-2caa74c4de64"
        },
        "item": {
          "id": "b366552d-1449-4d38-92b4-cfc0f7766199",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f459a6ae-6fef-44b4-b19f-7a9b132799bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4854a927-3883-432a-9556-6cead7d6fbeb",
        "cursor": {
          "ref": "f0d63baf-1ca9-486f-bbbd-c0fe3b541beb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "75e3bc37-befd-4130-8e6b-b1039ae7151b"
        },
        "item": {
          "id": "4854a927-3883-432a-9556-6cead7d6fbeb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1998d873-8617-48a3-84b9-2a7b5fcd64f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c33f06-ca5f-4725-aca5-6d0fa181582e",
        "cursor": {
          "ref": "639026fe-0e2c-4e74-98f9-e54b2983e5a4",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "89f61c8d-992b-4025-9f79-c0d53bf1efba"
        },
        "item": {
          "id": "53c33f06-ca5f-4725-aca5-6d0fa181582e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0c6b40e1-f7f3-4119-8597-e9a219dbb446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee8702d-038b-4055-907c-2f0535fd512f",
        "cursor": {
          "ref": "ad1928d8-eab8-41ff-9682-4158fcce4e50",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "51836199-4e0f-4c8d-8f5f-8e6cd90181a3"
        },
        "item": {
          "id": "1ee8702d-038b-4055-907c-2f0535fd512f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "70ddeaf6-c3b1-44e6-8ea7-7f58ea7c3e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d549f1-652b-463a-887d-96fc1346600e",
        "cursor": {
          "ref": "42506fd3-8dd3-4baa-af1e-6bfd45fdb332",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "209f1046-702e-4a4c-a990-8c4f1bdf8b4b"
        },
        "item": {
          "id": "d6d549f1-652b-463a-887d-96fc1346600e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "95e7ae60-69c9-4b6b-8f0c-f7fe6ff65c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee4e3818-6ebe-4ff5-8741-ad6c4653b6b4",
        "cursor": {
          "ref": "28f1da3a-e4a4-4330-a701-34c2e3c06f7f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0f462f9d-1ebc-44d6-b8a3-5f5bad7cb36f"
        },
        "item": {
          "id": "ee4e3818-6ebe-4ff5-8741-ad6c4653b6b4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56e818cb-fc54-4af2-96bb-2c20933eb4a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be881d0-958b-4bb7-a392-54f1ad7633a1",
        "cursor": {
          "ref": "7be47988-2dd7-4c3a-9255-b53e02d8a79f",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "298332f9-f774-4141-97d9-d409c5cf56f8"
        },
        "item": {
          "id": "0be881d0-958b-4bb7-a392-54f1ad7633a1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b7970469-c2fd-4d75-a1ae-38a326d5bb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415241b7-82d5-4c51-b01d-0c0ce90c7602",
        "cursor": {
          "ref": "78b58fd6-36a2-4487-bd4e-5fa731df31cd",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0d120687-8a26-4938-a296-46c947449dba"
        },
        "item": {
          "id": "415241b7-82d5-4c51-b01d-0c0ce90c7602",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "182c74c5-c45e-47f6-8089-a8b26a0713d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e59c62-b937-4ca2-9150-50a95e12ac76",
        "cursor": {
          "ref": "08d45b95-6ea4-4491-8466-de19c61e2b1b",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "609c967a-70ad-4ae5-9a18-8255e295f963"
        },
        "item": {
          "id": "a7e59c62-b937-4ca2-9150-50a95e12ac76",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a7504b8a-fa8c-47d7-878d-7460a3a5d21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c561098f-66b0-46b1-8e5e-96e982add5f9",
        "cursor": {
          "ref": "44809788-9c55-46ff-b4d1-e2e62695fdfb",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "43798c48-594b-4f49-aea4-9494ca3afdd2"
        },
        "item": {
          "id": "c561098f-66b0-46b1-8e5e-96e982add5f9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6b1ea1bb-6632-46d4-8eb5-7b4aae6b8a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821ac9d5-008d-49fe-b639-d9b52136b20c",
        "cursor": {
          "ref": "52b996e9-20dc-407d-84e7-96ed56bacb0b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "68715618-e317-477b-afbf-312a0f878f49"
        },
        "item": {
          "id": "821ac9d5-008d-49fe-b639-d9b52136b20c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ed1c38fc-491e-4187-a75f-ce3ddcdac903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d680c6a2-3dc0-42e7-b826-d8e440eca54b",
        "cursor": {
          "ref": "892db2c9-f889-4d7b-8094-d46c4195aef6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "49b97308-1db5-4d41-be49-a5767028407a"
        },
        "item": {
          "id": "d680c6a2-3dc0-42e7-b826-d8e440eca54b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "acf2caeb-9d27-4702-b398-0eb41aa7367d",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a101bea6-0945-4a05-aff1-dd8071258a42",
        "cursor": {
          "ref": "bf46d6f7-9e6e-4277-802e-eed8c342601d",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d93608a0-19f1-47b7-ab25-da415d86d9c0"
        },
        "item": {
          "id": "a101bea6-0945-4a05-aff1-dd8071258a42",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b24c6a1e-608b-430f-9538-420ad9201a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c1b132-82cd-451e-ae56-62e4859d002c",
        "cursor": {
          "ref": "937d9c37-5283-459b-989b-300612bf7c4b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "70138db2-739d-49ac-bc82-172097802386"
        },
        "item": {
          "id": "b4c1b132-82cd-451e-ae56-62e4859d002c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "41f64655-4f24-4f22-b5c2-ed282f389504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e37e8ec-3f56-4e72-8aa5-4058c39d3a1c",
        "cursor": {
          "ref": "c490424e-03f0-4d9d-a4ce-71a821cd1706",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2428b649-647c-4ce8-81b3-e65341689176"
        },
        "item": {
          "id": "6e37e8ec-3f56-4e72-8aa5-4058c39d3a1c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "02dead00-2c8d-4fdb-be74-776319a1c47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01c8c49-8fc4-4f15-b018-11616824c7da",
        "cursor": {
          "ref": "ff179a2e-90a7-4e35-bcd8-a86565850f06",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6c7c7193-399e-4954-8c12-b7b4f709bbc0"
        },
        "item": {
          "id": "f01c8c49-8fc4-4f15-b018-11616824c7da",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7d9db8bd-f1ad-4df9-8c1d-5fecf0fda485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2766537f-5ef4-436c-85ab-4b6b7897343d",
        "cursor": {
          "ref": "ec258c74-26a1-4a49-84db-af0f831ebb68",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fc48e3fd-09ba-4b8a-8525-df29ca165289"
        },
        "item": {
          "id": "2766537f-5ef4-436c-85ab-4b6b7897343d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "7b4392aa-f1e5-420a-a28c-f13ba03f572d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5d912c-6bb7-4ac3-99f3-501c38a459ae",
        "cursor": {
          "ref": "23c214ee-6a77-4a8a-8158-3dd1e9580554",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9de3bfb4-4ac4-4167-9826-2f99ee56539e"
        },
        "item": {
          "id": "fd5d912c-6bb7-4ac3-99f3-501c38a459ae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4fb47c19-fdab-4fc9-ae31-0897915d1521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8ac0ac8-813d-43c0-9072-d08674534fbf",
        "cursor": {
          "ref": "a81347d4-ebce-4c8a-9095-070d912a4791",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "adad81bd-d22b-4f52-acf5-17e4502b269d"
        },
        "item": {
          "id": "c8ac0ac8-813d-43c0-9072-d08674534fbf",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c3f07b88-360b-4bd8-83d1-b891fd3a9eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4b96df-e874-4722-84e3-fd545cbd3c67",
        "cursor": {
          "ref": "86ba7c47-4662-44f5-a1ca-8dc2984dc535",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "04fb0560-04a5-4822-b05f-848982450323"
        },
        "item": {
          "id": "1a4b96df-e874-4722-84e3-fd545cbd3c67",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "0bdcc99c-a760-499c-9733-8810baac57eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3692ce53-ecb7-45ff-9e1c-2b238ed7bcf7",
        "cursor": {
          "ref": "1165aa2d-f4ac-412f-9b35-c0ffb94e4b79",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ea8468d0-b9d4-4cbe-9758-bf531b2df5e9"
        },
        "item": {
          "id": "3692ce53-ecb7-45ff-9e1c-2b238ed7bcf7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "262842c3-8634-4028-8a09-022138d55e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da89c3c-921e-44ff-9c36-99e04b15ad92",
        "cursor": {
          "ref": "e82beba4-1efe-45d5-a03f-2a1110dac2cd",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4ce8c0fb-6705-4972-a200-19544ecd9b6c"
        },
        "item": {
          "id": "0da89c3c-921e-44ff-9c36-99e04b15ad92",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3ed59b14-af0d-4098-aee1-b3558109917c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5726b55-9ab1-4d82-8eb6-cee3851f9053",
        "cursor": {
          "ref": "35161d8e-7ece-4ae7-8c40-bcf976630f77",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b8bb91cb-ef02-4ed5-b731-42db3fcf5606"
        },
        "item": {
          "id": "a5726b55-9ab1-4d82-8eb6-cee3851f9053",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b11f93f4-2b2e-4734-bef9-0a8937773d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76cf7419-c272-44da-82b0-78b60566333c",
        "cursor": {
          "ref": "f297215b-a3d6-435d-b062-c4e2ca5bf486",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "22891168-022a-41f7-8460-e3f7c9846fbb"
        },
        "item": {
          "id": "76cf7419-c272-44da-82b0-78b60566333c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f69fb914-032f-46a6-b474-c64d4d46173d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641034aa-1c0e-42f9-ab62-73b6b85283e4",
        "cursor": {
          "ref": "c018d3e3-8364-4600-aacc-a292e875ecfb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c116da14-da0f-4cd9-8f35-21b272fface0"
        },
        "item": {
          "id": "641034aa-1c0e-42f9-ab62-73b6b85283e4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "881a46ce-b145-4211-a8c7-eee05cb0ebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e848462b-3fe3-4af8-a162-db2efbdeedc8",
        "cursor": {
          "ref": "287d437f-9030-4677-bd4b-998163e8682a",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c7963fba-ab68-43b4-99cf-d1d58b860a18"
        },
        "item": {
          "id": "e848462b-3fe3-4af8-a162-db2efbdeedc8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1d89c266-33ce-476b-acce-e1067921f117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4582175a-eac4-4b40-9c84-7523b550ccab",
        "cursor": {
          "ref": "98d0fee4-86c8-4fa6-b0ee-b70fb93d35e8",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "69418952-3f70-4481-b0f3-6869a44b98ad"
        },
        "item": {
          "id": "4582175a-eac4-4b40-9c84-7523b550ccab",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a22a3694-31fe-47ea-ab60-47f6d976f4d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069f9df7-f715-4fd8-9fa9-a5ff8ad611f9",
        "cursor": {
          "ref": "de358c2b-13f4-4148-beb7-c4dc16b50e30",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2748057f-7da0-4c21-b704-1fabd1768f65"
        },
        "item": {
          "id": "069f9df7-f715-4fd8-9fa9-a5ff8ad611f9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1cda5c40-a372-4803-bfed-44ec5cd490d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc8f9e2-72cc-449e-9319-5edfc20ab6fa",
        "cursor": {
          "ref": "ed2d7c39-fa30-492d-901e-a2c069ab3f9e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "29f9be73-486b-4938-adf9-80a2d2f48fcf"
        },
        "item": {
          "id": "efc8f9e2-72cc-449e-9319-5edfc20ab6fa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d9174394-73b2-4abc-92a1-29dec28662f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726789b3-4ca1-4f31-bf8c-cabc698788ed",
        "cursor": {
          "ref": "b9a085d7-0121-4233-a4bc-1ca72bd2b78f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cf971bbb-fe6c-4651-b976-c144c81a43d8"
        },
        "item": {
          "id": "726789b3-4ca1-4f31-bf8c-cabc698788ed",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fea5baa9-4d3c-4b4d-9239-0efda3c1d20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f200e354-108d-420f-95a0-e841dd17d41a",
        "cursor": {
          "ref": "9786341c-2163-42a2-93c5-ab920d304537",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8b5b9ae5-2c1d-4c2a-ab47-a2897b78fc58"
        },
        "item": {
          "id": "f200e354-108d-420f-95a0-e841dd17d41a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c85e309b-a969-44b7-9843-dfa5f34bdd18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5be1975-2798-4968-8aa4-23db02c48b5e",
        "cursor": {
          "ref": "a8b531fb-e026-467f-acbb-cb2f4013bea9",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "54fa01c5-8a7b-4eb1-a4f2-0a286d1739c5"
        },
        "item": {
          "id": "e5be1975-2798-4968-8aa4-23db02c48b5e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3db62bac-325c-4a9f-a059-3244a4f5ef7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a3701ca-2372-44eb-a8b4-c81bb16fca67",
        "cursor": {
          "ref": "25627afb-5f65-4340-bcdf-fe5f1cb1e47a",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5e7e169a-f943-4b3f-abcd-b2dc79011709"
        },
        "item": {
          "id": "5a3701ca-2372-44eb-a8b4-c81bb16fca67",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ba79f9b2-4fb0-42fc-a15d-a1a8a824710e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce597536-eee6-4f39-887c-93cf4be5ba00",
        "cursor": {
          "ref": "801629a7-289c-4522-a66c-9fee34ed05be",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "344eefd0-5bf4-4be8-ad78-4fe63f5a6aa4"
        },
        "item": {
          "id": "ce597536-eee6-4f39-887c-93cf4be5ba00",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "984ffcd0-7c91-41c4-8294-927dec5991db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275c9aa6-ad8d-417f-b6d5-ea4673671147",
        "cursor": {
          "ref": "1ae96b43-eb3b-4e39-beee-911becd3beab",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e3fb8f71-837d-471e-9ff7-e5a51db62050"
        },
        "item": {
          "id": "275c9aa6-ad8d-417f-b6d5-ea4673671147",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8f8854da-5bf0-4c3e-9b38-502c9633f4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4685136a-7ab2-47eb-a9fb-949e168b12f0",
        "cursor": {
          "ref": "5cef3d34-a884-4e94-a5fe-180ff5121474",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d2560645-3870-41e7-98f8-1398cad3842d"
        },
        "item": {
          "id": "4685136a-7ab2-47eb-a9fb-949e168b12f0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a85c8510-b2ef-41b7-9581-d7b159940bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe72ec64-d5bf-423d-99f7-a6acad5ed4ec",
        "cursor": {
          "ref": "3871aed6-d8ef-4153-8bee-b823e384a92d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2af5fd8d-a9a1-4162-a626-52625f230a2f"
        },
        "item": {
          "id": "fe72ec64-d5bf-423d-99f7-a6acad5ed4ec",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "da309ce8-8e35-4ebf-9d7c-d4c4582af688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8170f7-c8e9-4ad5-acfa-3159baaac893",
        "cursor": {
          "ref": "13b89114-5c15-4667-931c-268937ec1dd1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d7f24a07-cd97-4b34-9607-e035c576e002"
        },
        "item": {
          "id": "4f8170f7-c8e9-4ad5-acfa-3159baaac893",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "09616992-cb3a-4d53-8500-40345420a125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a228ae07-9acb-4c36-bd64-74060d61c3c3",
        "cursor": {
          "ref": "4b5ce481-c21a-41b2-9f71-5e121c3da6f6",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f2c3cdf9-6c26-4c5e-8a15-b326e9d41b01"
        },
        "item": {
          "id": "a228ae07-9acb-4c36-bd64-74060d61c3c3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a8be785a-30cd-41ba-8cd3-2b2614dbec66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4762aa-8559-49c8-b850-5f578f7df768",
        "cursor": {
          "ref": "fb1a8fcc-0344-419e-9382-f354e5d28cd6",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "cfacf169-0df2-4bea-929d-4b5370e104fe"
        },
        "item": {
          "id": "fc4762aa-8559-49c8-b850-5f578f7df768",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e9394025-d155-472e-92ad-8ca647abef62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b0a627-13da-4d41-98cc-4487208958e5",
        "cursor": {
          "ref": "cf606415-8f7a-4a22-90df-fd7ee7b8790d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "46ea42dc-8939-44ef-b83f-5ce8987b75a4"
        },
        "item": {
          "id": "96b0a627-13da-4d41-98cc-4487208958e5",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a1cde519-e2a0-4843-942a-817878673f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de045e80-c90f-4461-98f5-b0bc981c77d5",
        "cursor": {
          "ref": "3fb2e504-6fcc-48a2-81b3-a0822c5e1e8c",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "32f8dc76-ef12-4b02-a6c5-6271995dec47"
        },
        "item": {
          "id": "de045e80-c90f-4461-98f5-b0bc981c77d5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e575f109-ed48-4217-b676-48239f4dcac9",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c3cd80cd-3457-4ccd-90cb-0d3721647135",
        "cursor": {
          "ref": "3b424db8-41aa-4c63-be3f-aabe935ce803",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8330d405-c708-42d2-a8ec-53121248aa67"
        },
        "item": {
          "id": "c3cd80cd-3457-4ccd-90cb-0d3721647135",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6ea9eb1a-60eb-4528-9851-f36ca60e209c",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c6da959b-0fd5-458b-9c25-0285b6b9f136",
        "cursor": {
          "ref": "eb1cba45-91de-4d7c-a7b2-65acd9f8743a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5a137841-ca51-4500-9eec-63e6805d935f"
        },
        "item": {
          "id": "c6da959b-0fd5-458b-9c25-0285b6b9f136",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "478192cd-b5d1-43ec-92b9-00038cf190a0",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8a907094-460b-4dec-b183-3b7c9b47fc15",
        "cursor": {
          "ref": "04105e5e-e545-4cf9-b40e-86298e4595c6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a62fda30-6cc7-40eb-8232-c488f834d74d"
        },
        "item": {
          "id": "8a907094-460b-4dec-b183-3b7c9b47fc15",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "02be7d73-b8f8-4860-92a7-696b66ba0cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59c5c87-26b4-4406-b6e0-657de7a0119d",
        "cursor": {
          "ref": "9b0cbb1a-21d7-4d9b-94ca-b1a111b3feb5",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "195560f3-b29c-4b2a-9788-0e50ad62460a"
        },
        "item": {
          "id": "a59c5c87-26b4-4406-b6e0-657de7a0119d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6689ca22-8e0b-4e0f-b864-539c8cbf2cad",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3eda5a0c-2889-43f9-b96f-54b6d3781f80",
        "cursor": {
          "ref": "acf4c5a2-94c9-498d-b38d-1c4f1cea43ca",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ef448246-f115-40e3-93ad-451020d41675"
        },
        "item": {
          "id": "3eda5a0c-2889-43f9-b96f-54b6d3781f80",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eb3bf611-8531-420f-b09b-f405b819e6d5",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "db80e761-cf78-4d50-b145-574f43309600",
        "cursor": {
          "ref": "a2f958d4-900f-4b38-b8d2-5fcc4d6f1416",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ff5b8fe0-88c7-4d8e-bc24-be4184b1572a"
        },
        "item": {
          "id": "db80e761-cf78-4d50-b145-574f43309600",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4912a273-613d-4b2a-aa5b-d101f1d91577",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "40956166-c188-4e72-87e0-7cd7c52ba2da",
        "cursor": {
          "ref": "41299ed3-3379-4311-8ae0-cce1072040e8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "01edb7e6-c79a-4c52-90df-888fa3baaba8"
        },
        "item": {
          "id": "40956166-c188-4e72-87e0-7cd7c52ba2da",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7f377c3b-1220-4c57-a42d-dd8e9198db1c",
          "status": "OK",
          "code": 200,
          "responseTime": 217,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cd3d9e7e-35ba-4230-b493-116fc27cdce2",
        "cursor": {
          "ref": "f683f7bf-74fc-4500-aaba-84eb283fec08",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "da46fd43-78c2-41b4-89eb-a99e6161f573"
        },
        "item": {
          "id": "cd3d9e7e-35ba-4230-b493-116fc27cdce2",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a8284a6a-e6f4-4758-a337-425b55938ca1",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "fcad71f9-cb47-4218-bf5f-6752f959eb4c",
        "cursor": {
          "ref": "575fb075-f8d1-43dc-8e23-d9675d04283c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "532a33b6-993e-413b-b349-89b02c2661bc"
        },
        "item": {
          "id": "fcad71f9-cb47-4218-bf5f-6752f959eb4c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fae5daab-195d-4fad-9e3b-32643bdf209f",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2dc0f39b-a219-40a8-874d-421cc51534bb",
        "cursor": {
          "ref": "12f33713-2d2f-4a28-9be7-ca240a3901f9",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cc15c33c-a4c2-41e1-ab1b-c3c5be53464e"
        },
        "item": {
          "id": "2dc0f39b-a219-40a8-874d-421cc51534bb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3d199c1c-3338-4668-98d5-d2cec698f00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba62ffa-8626-4d95-af44-9b8c0a73a2ee",
        "cursor": {
          "ref": "7c703a9d-b5c9-4754-bdab-b620b7f0f134",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "afb06048-9b9e-4906-a8d2-c051e8863d02"
        },
        "item": {
          "id": "6ba62ffa-8626-4d95-af44-9b8c0a73a2ee",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cd2a41f6-7170-48fb-a06e-8bc802aac03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076b8b89-947d-4cf2-9384-54e513ae2cb6",
        "cursor": {
          "ref": "b92dd5de-6e0c-4cef-a6a3-81f4bbee9f09",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d4e99a77-bb23-46d7-a2ed-1b7ecc5167aa"
        },
        "item": {
          "id": "076b8b89-947d-4cf2-9384-54e513ae2cb6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1fe87307-44e0-411f-b43b-f3e722b96755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f64537d-3eed-474e-8d55-398e886643e6",
        "cursor": {
          "ref": "3d6c6854-30cc-4f9a-8bde-1a983cc91e64",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0f3294c3-8c9b-4e58-a4ac-2b660f4c088d"
        },
        "item": {
          "id": "8f64537d-3eed-474e-8d55-398e886643e6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f7c2ee1f-d73e-4e0f-b9c1-4e8b5417fedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7930921-163f-4e84-b6b2-f16758fb36cc",
        "cursor": {
          "ref": "5ae3420d-32aa-454f-b240-89ee20cd66c8",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "64db6e12-746e-4ff4-a424-a85b602a5dc1"
        },
        "item": {
          "id": "b7930921-163f-4e84-b6b2-f16758fb36cc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "79155819-0ed5-4e98-8cb9-a370fb5f4e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7615ed-5c66-4a02-a19b-bc18d48b7574",
        "cursor": {
          "ref": "f984946f-b057-425a-9857-18a01c559284",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0ece70ff-d47a-4c02-9dc4-67b8c50b2e99"
        },
        "item": {
          "id": "9c7615ed-5c66-4a02-a19b-bc18d48b7574",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "d463f46c-f683-4fa2-b09d-75a75b3749e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15dbdfe5-28d8-473a-b01d-959d91856571",
        "cursor": {
          "ref": "3ab62090-fa15-4808-a460-cedbaa0cba63",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6d80f88a-f347-417f-9f7f-bd4f005ee4db"
        },
        "item": {
          "id": "15dbdfe5-28d8-473a-b01d-959d91856571",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c8bd1a77-cda5-41c0-afc8-7c893214c74b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a515d71-db4e-402c-a94a-731914a9068e",
        "cursor": {
          "ref": "6ae57c05-0ffd-46d0-b7eb-50511100c3a3",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e2b2978b-e656-4214-886b-3c8a715faf94"
        },
        "item": {
          "id": "5a515d71-db4e-402c-a94a-731914a9068e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "462b3907-085b-4473-97a9-7722f4afd012",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7bccd4a-bd2c-49e7-8db6-358fccb35bfb",
        "cursor": {
          "ref": "a4326a3b-0152-48a7-8f38-07a765121a5f",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "699f0b3c-e4dd-4f6f-a64f-c057364b126e"
        },
        "item": {
          "id": "d7bccd4a-bd2c-49e7-8db6-358fccb35bfb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a7adf455-2c03-4c8a-9d58-22f921ac3a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dd5d49f-aa74-4ff2-a761-de10c4bb03db",
        "cursor": {
          "ref": "1f82b514-9948-42bf-85a2-407816a8bf6e",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a9524749-eeec-45fb-8012-ea5178cd395a"
        },
        "item": {
          "id": "1dd5d49f-aa74-4ff2-a761-de10c4bb03db",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c4f3a90a-cd7b-4e9b-b374-b93b3c93e7ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea886ddf-53b9-4583-bd02-b5c673bf4d2f",
        "cursor": {
          "ref": "9a4ba9ec-4e55-4aaa-ad1d-dfbea0f18f06",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f5749cc5-30a1-4a6d-ba32-064edfde3580"
        },
        "item": {
          "id": "ea886ddf-53b9-4583-bd02-b5c673bf4d2f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b831ecc8-f2fd-4947-91e3-aa1b7cb2bec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538f82be-327d-47e1-8dbf-164ec7f44b21",
        "cursor": {
          "ref": "d61ee850-20db-4a21-8277-91247ec9d264",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "94b5838f-8f23-4148-ac70-73b808f8e32f"
        },
        "item": {
          "id": "538f82be-327d-47e1-8dbf-164ec7f44b21",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d666d982-70f6-4f1e-a6e0-455f683c9ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f033a3-4e32-401a-b4ca-b66518146bec",
        "cursor": {
          "ref": "9e80221c-c960-4071-a5a6-d2844b39882d",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1d28eb23-ecfc-476c-8613-63ed6821e52c"
        },
        "item": {
          "id": "d5f033a3-4e32-401a-b4ca-b66518146bec",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ea569003-fd8a-4b92-8d4b-c064db060825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80bc1a4d-3d21-4ee4-b0b4-40bf28f8fa00",
        "cursor": {
          "ref": "42d2b702-c9c8-4b8a-971a-94bcfc3b2ce2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "455a8d05-a670-43ac-a8e5-58ba571765f9"
        },
        "item": {
          "id": "80bc1a4d-3d21-4ee4-b0b4-40bf28f8fa00",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d4613d59-5d17-45c4-b81b-1e3bdb5645c3",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d5991dcd-91df-4f12-948d-58ae4efff150",
        "cursor": {
          "ref": "d2c55d1e-ce52-419c-b4f5-727ec332b34c",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ffec0e23-a903-4013-944b-c371b494a760"
        },
        "item": {
          "id": "d5991dcd-91df-4f12-948d-58ae4efff150",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "27b6a10b-82c6-4fb6-ba5e-1c5eba3817c8",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2d1e31f1-8e76-4636-8df8-e5cdb0e8fee8",
        "cursor": {
          "ref": "932f5d7d-439e-4e8f-a7a3-6d715018ee1c",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2f020206-97ec-4552-9fa9-8132cfacc61e"
        },
        "item": {
          "id": "2d1e31f1-8e76-4636-8df8-e5cdb0e8fee8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c3ef3efe-9acf-48b0-834c-f2493eab7c74",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7d92aaad-f04a-409c-8f2d-3915c59b3d44",
        "cursor": {
          "ref": "e3070072-504f-4fbe-80d6-41264d368e4b",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cb4460e4-2c28-4e9b-9713-934e1beccc36"
        },
        "item": {
          "id": "7d92aaad-f04a-409c-8f2d-3915c59b3d44",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "11153cff-4ee5-4c05-95e3-5ccd87d17a09",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "828eda44-bc7d-4a3d-9daa-73e87fdc8337",
        "cursor": {
          "ref": "7d10f1f1-c85d-473d-923c-108e43a513c2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b0af663c-83f8-4fe8-a084-d564e527b337"
        },
        "item": {
          "id": "828eda44-bc7d-4a3d-9daa-73e87fdc8337",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6a8f06da-79c0-4df1-a2cc-43fafe866ad2",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "6b419951-1501-4f32-9e22-def0b5793069",
        "cursor": {
          "ref": "5430afc9-a4da-4b32-80df-57c6cbe93861",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c6ef2fbc-8a75-4d01-ba2f-493bd0390725"
        },
        "item": {
          "id": "6b419951-1501-4f32-9e22-def0b5793069",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "597749a4-96d9-4f1f-b542-6532fa2c9d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34670bd7-4c69-4226-b690-43dd80845bff",
        "cursor": {
          "ref": "2ea2a842-e020-4308-a206-50fc4fc61ff7",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d72fe839-7094-4095-a621-c7a715d2b3c9"
        },
        "item": {
          "id": "34670bd7-4c69-4226-b690-43dd80845bff",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bf1f3b26-9158-4164-a695-a32628246fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdddf349-18cc-4d8d-9a90-0970d16fc153",
        "cursor": {
          "ref": "518a1be1-8453-4263-a375-9e19e0f44776",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "19a0190a-626f-4d97-8150-e7ca91aaee64"
        },
        "item": {
          "id": "bdddf349-18cc-4d8d-9a90-0970d16fc153",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "684d9609-9fca-4836-825d-57bc34f19fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbffb937-582a-4260-8ea7-cd628e88f562",
        "cursor": {
          "ref": "fb35f5dd-7324-4aba-994c-9ac61f3f87c8",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "04c89f6d-b191-49d1-8340-9ce9e52ccb8b"
        },
        "item": {
          "id": "dbffb937-582a-4260-8ea7-cd628e88f562",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c4c796fb-8b0c-4d69-afc3-62b392b8cd15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8d5853-c5fd-46df-b4f9-fd85047891ec",
        "cursor": {
          "ref": "cae91d9e-c4c8-4446-ae42-1eb109cec0dd",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3eba339d-61fe-4ca6-9069-06521c99058b"
        },
        "item": {
          "id": "3c8d5853-c5fd-46df-b4f9-fd85047891ec",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ada1d126-0f5d-40d0-9488-e560c153cf66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435b8275-c2c2-418f-8aa3-02459150dc34",
        "cursor": {
          "ref": "a9e4d453-df52-4cf6-ae9b-53af4d9ca019",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d8fc91ae-c0cc-4f91-a5cc-1633f5f517e5"
        },
        "item": {
          "id": "435b8275-c2c2-418f-8aa3-02459150dc34",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4470a80d-8971-4776-b718-7978b450cc9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d46cf6a-3fd5-4232-ac13-32dd922aaea9",
        "cursor": {
          "ref": "bfc4fdd3-c3bf-4201-a180-0b6fc5c33507",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "d1be8998-f395-4ba7-aaf3-7e5fc515eabb"
        },
        "item": {
          "id": "1d46cf6a-3fd5-4232-ac13-32dd922aaea9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "fa321e7a-bc98-491c-966a-b2c6a964a697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169e8ee7-5656-4773-bcd3-1c217996bd45",
        "cursor": {
          "ref": "31c55b7c-f95e-4475-b534-c0eac34c88f2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d3f009b8-df00-4c7c-9243-4e8810437c4d"
        },
        "item": {
          "id": "169e8ee7-5656-4773-bcd3-1c217996bd45",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "01e586c1-5dd3-4761-9acc-4395057a147b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f7e99c5-50dc-4c59-81de-514253c1496d",
        "cursor": {
          "ref": "b9aca564-d1f7-4bd0-8432-58c3a66b37e1",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "59b408e6-1e59-4a20-84ce-54eb18fa1928"
        },
        "item": {
          "id": "0f7e99c5-50dc-4c59-81de-514253c1496d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "22c67822-20a7-48ca-a6f9-58f6755449a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a82b6ea-7e31-4a98-a808-cec63f9a7efe",
        "cursor": {
          "ref": "f51783df-62b3-4cfd-a31b-38d155e087a3",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "85f5119c-594e-48a1-9dd8-159c8e5e5415"
        },
        "item": {
          "id": "7a82b6ea-7e31-4a98-a808-cec63f9a7efe",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6d79916e-3212-4745-81aa-8b366b20182a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2ddd08-0df3-4635-980a-698a4df46b41",
        "cursor": {
          "ref": "16ca8ba8-1c99-4388-b306-c60361df53f9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b9a110c1-b604-4bd0-a922-934a7ed3a92f"
        },
        "item": {
          "id": "2d2ddd08-0df3-4635-980a-698a4df46b41",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d86cb235-f9ad-450d-a7dc-c4ff824ca08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6fd5bd7-91f4-4cbf-9506-444a4753cf16",
        "cursor": {
          "ref": "1452abc9-c613-4504-adff-e22574236791",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "de25ac80-f3fb-4f2e-985f-034ff453e5cb"
        },
        "item": {
          "id": "b6fd5bd7-91f4-4cbf-9506-444a4753cf16",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "99587880-c0e7-46c1-bbb9-3ef65ddf9be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9031cd1-3819-4623-840f-bf208fea22a0",
        "cursor": {
          "ref": "01839cc8-419c-41ad-86fb-3fc3fda35596",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "d2574c70-d49f-41e4-920a-f0793a20379d"
        },
        "item": {
          "id": "c9031cd1-3819-4623-840f-bf208fea22a0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "89f8db53-b54d-48f1-8ee4-7b8d7368b182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f704a60-3c0b-4808-a3b3-5943b584d4d0",
        "cursor": {
          "ref": "cbe88de3-6087-47ba-8d7a-d554249114e6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "5a00adae-a5f3-4634-aa94-e42dc848c858"
        },
        "item": {
          "id": "6f704a60-3c0b-4808-a3b3-5943b584d4d0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e0a20cbc-86b6-4eb8-9d44-5b7812b08a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b022597b-bf5a-4028-bf4b-405790cb7fd9",
        "cursor": {
          "ref": "d64eda9e-431e-4cf0-b833-7bc2c626884f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "cf054dc0-c3ac-4d92-a73b-34dd500e44f5"
        },
        "item": {
          "id": "b022597b-bf5a-4028-bf4b-405790cb7fd9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d821144c-1de1-446f-9725-6a6bc0499643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d14d20-9f66-4fce-9bb5-59b8ba8db7a5",
        "cursor": {
          "ref": "090a637a-f8e3-4669-a098-ad135bfd0dff",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "94b55308-6900-4dad-ba73-2c3ceb0e2642"
        },
        "item": {
          "id": "00d14d20-9f66-4fce-9bb5-59b8ba8db7a5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7c2bc6d3-1970-4a01-98a6-a5e0725a6b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe1ac92-5344-4fb0-8bd5-0987170673a7",
        "cursor": {
          "ref": "5c9aba17-f537-405f-a773-60d052e16a11",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b492ab4e-5599-4bfa-9163-4c6ca38f7439"
        },
        "item": {
          "id": "4fe1ac92-5344-4fb0-8bd5-0987170673a7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "803b3c84-cd4f-4698-bcad-0faad2cd8875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579d37be-62a6-470e-9ed2-79c1fdec0f74",
        "cursor": {
          "ref": "5dc37e63-1829-45df-b3b0-b013b4a5e31d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "230aae84-6fdf-4e57-ae6d-7ca7e9f176c7"
        },
        "item": {
          "id": "579d37be-62a6-470e-9ed2-79c1fdec0f74",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ccc38f94-7910-4245-98db-eb1aed6b7e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eceee4d-6dd6-4e6c-b10d-2d0a9c3280b8",
        "cursor": {
          "ref": "badc5310-e559-46e8-89e9-a9c29e8b9dd0",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "451a0429-8730-403b-86d4-50d6bd1c2421"
        },
        "item": {
          "id": "3eceee4d-6dd6-4e6c-b10d-2d0a9c3280b8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d0e6cc6d-d807-4518-a58d-d082d9f2a018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75109b4-2723-4cca-86a3-a7afb11b3db3",
        "cursor": {
          "ref": "93b36be4-3dc1-48ce-b141-32c674fa87c2",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "d7883b6e-8882-4aaa-ba6e-869911e2c538"
        },
        "item": {
          "id": "a75109b4-2723-4cca-86a3-a7afb11b3db3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e84d7251-b503-431c-98e2-ffa944057344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b2dafd-a691-4775-88ec-d1afe1fe69b2",
        "cursor": {
          "ref": "75a50b72-cdfb-4bc6-b8f0-8e1cd0d8712f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1e713fad-05a2-486f-afe6-4a74fa8bc5a7"
        },
        "item": {
          "id": "05b2dafd-a691-4775-88ec-d1afe1fe69b2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "020ef33a-fc0f-4f2a-8c64-fc49786849d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb320691-4e72-46ca-9eef-1e5ffe044273",
        "cursor": {
          "ref": "6e3b3b6d-c14b-40f5-96f7-b74758e7d1ea",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a93d43c2-04f1-44d0-be81-82588e004c9b"
        },
        "item": {
          "id": "eb320691-4e72-46ca-9eef-1e5ffe044273",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "61145ed5-c5ec-48ff-a015-9ced99cb59ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2578a8-1f7b-4f0e-98c3-671f9fd3c958",
        "cursor": {
          "ref": "7b150fac-b9f6-4d77-88c6-565d54c0fd8a",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "febc6d50-3d9f-4fca-b7ac-1f99b1700eba"
        },
        "item": {
          "id": "8b2578a8-1f7b-4f0e-98c3-671f9fd3c958",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "80486a51-896e-4468-ab7e-187def5cacd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ddae3d-24dc-41b4-a8c4-7ada2db7b248",
        "cursor": {
          "ref": "3a0eb7f1-ba89-4888-9a52-4b1ffe6be4db",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "d985336b-db6f-4cdc-a4c4-efe62e71e4e8"
        },
        "item": {
          "id": "77ddae3d-24dc-41b4-a8c4-7ada2db7b248",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8caf68c2-647b-4a0f-a481-49b17594f398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca78f21-befa-4bdf-babc-14d93ba8ffab",
        "cursor": {
          "ref": "71c09f8a-3027-4055-863e-4f9e318a0715",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "790ca42a-1a8c-4087-bc24-06d2b47a35f7"
        },
        "item": {
          "id": "9ca78f21-befa-4bdf-babc-14d93ba8ffab",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "84c7a596-1c3b-45a6-ae54-3c8975d5d9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1422b89-6ffb-4d3c-8387-ca618b9d7b7a",
        "cursor": {
          "ref": "d816ea6f-688f-4733-8bcb-37a1eb4d0d1c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8a1a9611-e7d7-45d2-babf-d058a4056c41"
        },
        "item": {
          "id": "a1422b89-6ffb-4d3c-8387-ca618b9d7b7a",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "10a13706-b651-4af9-afea-06cee6267d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43a51b6-0b9f-4c88-9b17-e5420b9ad878",
        "cursor": {
          "ref": "ab616d4b-a37a-4567-a9e5-742e972f0579",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fd8627fc-22bd-44ea-8d45-a1e784ae1e85"
        },
        "item": {
          "id": "c43a51b6-0b9f-4c88-9b17-e5420b9ad878",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d868a3fa-10b5-49ee-9495-ad4b77821588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a44b569-cbed-45df-9751-55b022df4afc",
        "cursor": {
          "ref": "ebbc434b-c457-4256-a45e-c47a62e24593",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c2c97950-5e92-4cd4-bc74-4a4cffba5216"
        },
        "item": {
          "id": "2a44b569-cbed-45df-9751-55b022df4afc",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a2a80e76-124f-49f5-87a3-e9f7267e398b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca42847-791a-4eb2-b70b-89dd2f495886",
        "cursor": {
          "ref": "e373aad9-0792-4908-8841-3f764f3620eb",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "42b524a6-56d3-42d0-aee6-ae57b2fed1b0"
        },
        "item": {
          "id": "aca42847-791a-4eb2-b70b-89dd2f495886",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1440639b-5ee3-450b-9677-b5dfaf09181c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5e5e43-f051-441a-acbf-aef849587eea",
        "cursor": {
          "ref": "1dee412a-c1ae-4665-b459-8f5d6976a267",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "65797d9f-fefa-41b3-bf65-c21a5ddc4aa5"
        },
        "item": {
          "id": "5d5e5e43-f051-441a-acbf-aef849587eea",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5b79c75f-369b-4cf6-b0e8-a2f1793ae8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0862b9f1-ee47-4b05-a14b-3b7c20db2e73",
        "cursor": {
          "ref": "7023659d-832c-41ba-8100-ff097307ef48",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "64af3aa7-efd0-4957-8293-94e189f9bdb8"
        },
        "item": {
          "id": "0862b9f1-ee47-4b05-a14b-3b7c20db2e73",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2690ae58-c68b-4a30-90fc-8747daf78226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3103ce74-853c-4782-9998-735cc8640156",
        "cursor": {
          "ref": "ce460fd4-a22f-4350-861e-a8f95a49511e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "31161e94-6c9f-4af9-9e38-0ee135266840"
        },
        "item": {
          "id": "3103ce74-853c-4782-9998-735cc8640156",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fa8859af-f86d-4196-917d-10046a7dcc7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1e4fc6-a957-4b8c-bc5b-90b425a960d1",
        "cursor": {
          "ref": "744c48a1-b080-4602-a9e1-4a857654a398",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8a642f0e-df38-4f5c-ac71-2e44fa9341ab"
        },
        "item": {
          "id": "0e1e4fc6-a957-4b8c-bc5b-90b425a960d1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3c58eb93-5790-446c-91f9-bb1c5d67d4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3828d01-84cd-4509-b4e5-8b57ee49ade2",
        "cursor": {
          "ref": "4b243a97-ed37-4f48-8a52-9f3feba83629",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "90650f5c-b4ed-4c11-b562-4b7ba2167cd5"
        },
        "item": {
          "id": "a3828d01-84cd-4509-b4e5-8b57ee49ade2",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d42c7d66-dcae-42b0-93b0-cda06e37ff30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed0c776-7357-4ae1-9753-1c65f551a54a",
        "cursor": {
          "ref": "4083709c-036c-4f7b-b7a6-9770d5ba39f8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "333f66c0-1859-4ae5-8d1f-4846aae0b3cb"
        },
        "item": {
          "id": "7ed0c776-7357-4ae1-9753-1c65f551a54a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b60facbb-9639-4ef2-9b7c-4384ee567187",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc3b2a2-0302-4db5-adf1-2e56a5a54da6",
        "cursor": {
          "ref": "6e105700-4915-471a-8a1f-fe41b90d709d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "afc33fc6-b49a-48c2-b1a8-66bc2098aebc"
        },
        "item": {
          "id": "3bc3b2a2-0302-4db5-adf1-2e56a5a54da6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d46999e0-ee5b-4a6d-b116-4a707f5b8f6b",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "19f571b1-2781-4558-bf8d-737d1a1ac23b",
        "cursor": {
          "ref": "5e85be7d-76e0-4a3a-a8df-d7e947de8f17",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a8d4336b-b521-4501-910c-7765b41b0f4c"
        },
        "item": {
          "id": "19f571b1-2781-4558-bf8d-737d1a1ac23b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "71275e8f-8d8d-4d61-823f-af3fd0d148fc",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "009ab981-de87-491d-a070-45b8fdf2b08c",
        "cursor": {
          "ref": "5aeb95e9-1d6e-4925-94da-702479055ff4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "cc19ec51-cd5b-4e6f-b612-92cdb4a5cbce"
        },
        "item": {
          "id": "009ab981-de87-491d-a070-45b8fdf2b08c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "df25ffcb-20be-4acb-989e-240f777cd066",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce742d5-16ff-4d0c-ae6d-8760bd3574a3",
        "cursor": {
          "ref": "ab765f09-2446-499c-8e3f-322a8e57e0ec",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b9834f93-4974-4f23-9aba-e6bc777907ca"
        },
        "item": {
          "id": "3ce742d5-16ff-4d0c-ae6d-8760bd3574a3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e0ef9e9e-2f50-4f7b-ab9c-3dc9f1ae9a53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce742d5-16ff-4d0c-ae6d-8760bd3574a3",
        "cursor": {
          "ref": "ab765f09-2446-499c-8e3f-322a8e57e0ec",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b9834f93-4974-4f23-9aba-e6bc777907ca"
        },
        "item": {
          "id": "3ce742d5-16ff-4d0c-ae6d-8760bd3574a3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e0ef9e9e-2f50-4f7b-ab9c-3dc9f1ae9a53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5411fe96-3591-4779-8c41-41887711dcfd",
        "cursor": {
          "ref": "c87e65d4-ffc6-4914-b218-30f9b5a193e5",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f70d6200-c76f-4a23-8e6e-2ba1fd02aac4"
        },
        "item": {
          "id": "5411fe96-3591-4779-8c41-41887711dcfd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "caa0eca5-1740-49cb-8a0d-4602b63af8dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b7fdf9-e406-4888-93d4-aa19b73750d4",
        "cursor": {
          "ref": "cd029139-142f-4535-bf18-d6e0b397988b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e0acf862-1f5d-47c5-905c-f428e152157a"
        },
        "item": {
          "id": "31b7fdf9-e406-4888-93d4-aa19b73750d4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d5c1abe3-8c81-4d96-af7c-7c4dd575a602",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}