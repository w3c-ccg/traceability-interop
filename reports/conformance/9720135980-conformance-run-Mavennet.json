{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b3b14423-9736-47bf-8598-344939c58319",
        "name": "Clear Cache",
        "item": [
          {
            "id": "310b4d66-9ee9-4d79-ae6a-90dc6cce9af4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "664e1609-266b-4bdf-8898-490ae7958f1f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ffbbe9f-a3e8-40b7-a334-c1e3386d2762"
                }
              }
            ]
          },
          {
            "id": "cc747674-329d-469b-b05b-9e31aefa03bd",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7dc36917-1320-444a-8622-e987b6e1e167",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d0e08d5c-3ee0-432d-926a-8a85caa51e04"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2d74b34c-a926-48ba-8f2e-20970d135d82",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3132b95d-2e71-47e3-aa3d-6c188c0e8e89",
            "name": "Positive Testing",
            "item": [
              {
                "id": "38019977-8f1e-4f2a-8ad7-cd9e6364875c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "480ece16-97bd-421d-9a6e-943f8710f19b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b7c7496-b5d3-413f-8096-90eea892d5f8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0171b398-9e35-4e23-a843-668d1a257ea5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2034e92-af49-4d63-9149-4becc85eba8d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f2fcfb2c-2a41-4e09-a328-8f844a73c461",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "329e5c7e-dce3-4aba-9702-364d7dfd0431"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d0773d2-c633-4180-a81c-8499bd32285b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "df5cffdd-d2b5-4f88-819a-d106381cadf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f2f883e-fee8-4086-9735-6250ff1e56ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "130b9a50-0635-4128-b23b-3294f5360914"
            }
          }
        ]
      },
      {
        "id": "4210d181-827b-42ed-afcf-18242636e8ed",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "846661df-9b46-45cb-a63a-9548b5ab65f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4a404c0f-088b-4019-bb56-d2a5d5af868f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0fef7511-6177-421e-b774-ecab74279126",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1f18f6-0b3e-429e-bcb5-f87d610eb69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b3cd745-e70c-49fc-8ce4-71ad8540cfa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3aaa7ec-bff7-40f9-8fe3-a28b654124f1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe7a8f6-1905-4c70-9a4c-91aebcddfa09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c8d2e54-28b8-4fe6-bc61-64e9dad90550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45e1c0b8-4176-4a9f-939e-7329d5452fbe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e640c6a-2049-4276-b843-0be9899ef2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dc5e3ae-88f6-4978-a530-124d1336cb7d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a27df5a0-27a0-42df-9dac-470e00c8facf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4d3a40f-60a2-4b07-8600-86a1330194af",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35800ad8-41b3-4151-b068-301e9583be6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9a08bb00-83c1-4511-b3da-12b06e65d1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df81e08-b025-425c-a1e3-13636a411f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da3c9f70-53bc-4464-a633-ed8a3d579585"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eec2dd70-d2a2-414a-a6b7-7c807071b005",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a3167a8-9aad-4b05-9678-3259f1f33a6e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "148a9bec-0cc9-4cac-b1da-eb644a857888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6efd338e-96a1-4114-a140-bcc4adeacafc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2314e134-98e7-48e3-8b37-e0f03dceb2b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "1eccd7e7-7dfa-4b56-9b31-d7673fb22c46"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a34957d-169e-4da5-ba48-2b2d7f7c1572",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8aa30a0-317c-4c1e-b0b5-17f577ebf96c"
            }
          }
        ]
      },
      {
        "id": "096fbc6d-d9c7-4be5-a312-b4bca0e612b2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a847f750-786a-4198-ade7-69a802e10081",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8f3a7932-694e-4570-a422-2c79d9eacd1c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d6e1d1dd-3767-46a1-9c7b-660651ca92f7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99697392-24ad-403f-b883-ac7fc3334e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f1acaf-b42a-4e50-a6df-6f06d9216cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fac0913-a322-4d50-81d5-6c320dbc76c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0512067-02ef-41b9-882c-5441eae1a7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b300104-8d55-42fb-95bf-d7ff130e0e07",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11af87dd-60f8-4a82-8b55-4e24e165aa41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7f4547-747f-43ad-86e1-2754764a146a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40552af2-54ad-451e-8d1c-49cec9e22b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63b4b598-c8df-4e12-a96d-76507e28de19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ba607e-5448-4fb1-be4b-07dbb671f89e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7590084-594a-4f66-ba6c-fe74bce31cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684e5071-57ab-48b3-8342-0e07469be150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edf4106-400f-46c7-a0a0-1bed44603a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d48a91c9-5a63-48ee-ac39-e772cbffce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9277a32f-0d18-4d50-a066-8fe1cfdae6de",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78537bf1-5d00-4b7d-bbd7-9061d7ef2146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbcfad3-8f2a-4df7-9868-e0ea4b3bab44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd307e7a-0017-4cc0-8613-f372653fa2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "602b2141-63da-469a-a2d9-2d5573609042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea8bec9-ac10-4665-9900-45019047b8cb",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3beb8c-3020-4404-9c96-15acbc848c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "773bb288-8808-40d3-b7ac-d977a40af21c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c3cb1-9864-4dbd-b503-2fae2af555a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aaa45bcb-4566-4022-95ee-040bf9421a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e2a314-47d5-464f-85da-1f43bd81c13c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48bfacb-75b5-43eb-9dca-f26dccf5db1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad606f45-44b2-40f6-b946-e848a4dfd3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef94e6d-30c6-435d-acdc-462031655bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f5532a0-6483-4762-85c2-b34a5ff1faa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13031ae-356c-4df7-9e37-42cc1678e8c9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb135e94-8611-4f0a-b5e1-41dfc70dab53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e6c627-3d6e-484e-bc6d-b82846e3a7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876e0a5a-678c-4ea2-a385-f5641e35d0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c17b16b-8bf5-40ac-9190-aee9a1aac06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042dd5c7-b735-47fb-a94b-c1e099231510",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8f1f93-0b33-45eb-bc34-415302c4c047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce349cab-df90-4d8b-9556-76d1a244042f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69711cd2-1efe-46f0-b834-f9c599176b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d017042f-c9b7-489d-acaf-e9009600f47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be578f7a-fdad-4d47-a29e-cf69ba7400aa",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443100e2-5f3c-41be-b2f1-b1a86d5c1b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab243550-84e5-4089-a9a0-71ba3754a479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a04eb4-b188-4e06-ba8a-53187473c5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77b7167e-8b4c-4adb-9862-1645faf69690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48e3c48-653a-4a24-ad6c-9806a37f22a2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d2b1c9-4cf7-4533-baca-c7081416d63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756c30f1-3d26-4d87-bd9e-ac4c38f9f631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac77ad95-afd5-416d-912d-0e117d216db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c508a20-f878-4004-8e1a-dddb44bba1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8253e5-d1de-4be3-8c68-11aa056f312a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5110bfa9-8247-4e7c-abd9-8f0e763accc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d8a1b8-ffe9-4113-aebd-866440e4388b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd767e27-164b-4c94-b4c8-b879d9656e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8c22a9c-2d34-4094-a31a-43d924581f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a3805f-8730-47fa-8286-568349ebd512",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf27494c-4740-4944-996e-d873456f8574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fede9685-71af-4cfe-81b8-8b5ba9b900d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7069a034-37ca-4d5a-bab5-2460a49b49ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3dd0f7e-6251-4180-a55f-b6e2cf3b3fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316056af-a0e8-4e31-8bfa-fc933ccb834d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913bb321-4e3a-4ff4-9fbd-25ffcf24836b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1165bb14-254d-4d63-a831-280043a12e02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d927a4a-13e7-4f4f-b20f-715ba3901351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ae3b944-a53c-4a06-b977-9602421b79b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbfef56-39e0-42c5-b64a-7c25f3cc5368",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23479996-bde9-4451-9f9e-d742692ac2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a927c2-604d-454d-9fa3-64934574e242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb02b1d0-529c-4475-a907-3a4716f97c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "751ea43e-8c8c-47cc-be2d-ed37198f63d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7ea3ff-2264-49c6-8cf8-eb4552efef0c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76897450-90c4-4f50-9f95-a3dbefb7480b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c95370e-10c6-4112-b888-36e9f0aea27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83de2f95-8686-4834-ae09-540099637ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "802f6e48-c979-4c9a-a934-2b1c47a6eb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9826e20e-3f5c-49df-bbc1-a4f6437fb3c2",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3367d836-1c8b-47c2-a4a9-f747c3d4c11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf3c9c4-f73c-48a4-bc7b-d4a942859102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be83d70-ce19-42cf-a2d6-ab627f160cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bdadec6-8852-45e0-ab35-30ea87226367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5285d057-dd56-4c76-ae5a-2ee4a0522ed2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec7c01c-4155-4a39-9eec-df876541daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b33e30c-eb9c-4c86-a970-294105839e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba5a510-04aa-4da5-a97a-55a95cc6622f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0bc0dca-9f9b-4d80-ab3d-f6c9974604ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f660789-07e7-4553-a9e4-4ecf331db0f0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4fa3a8-5244-4c88-8547-83448cbc3a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "759f7208-c0bb-499c-a564-1254ed963b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9af022-eaa9-4695-b7f0-bab7cdd5a3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba28538e-c3f4-49fa-9433-1058d7576516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cf880d-a70f-4f4b-bf32-a9d5c7d31a3e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c01b81e-4a7f-4aa8-947b-2458f2784fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b3f8e5-2b5c-44b2-97b7-1ffa63758b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98afed5-a68c-497d-b215-45958fc68921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9d9baf-6943-42b5-868a-4f5fa2348a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823d80a3-7edf-49d3-b31f-bd324d45198a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9331f604-88bb-4a13-a78a-975e8ce709e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b8a649-4ecb-4226-a92f-1635e264a052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c3cec9-40c3-408e-baae-576c14d7dd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3296429e-f377-40c1-923b-19a8094359a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45403c0c-b4aa-4ae1-9f33-0bd8a775a364",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748ca559-1ffe-45f7-8732-1172992699b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3b097e-181d-4ef0-9e7f-e838a26ac944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69373a1c-d54d-4a83-ae1c-e3ccfc97075d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "22a4ce94-974a-42e5-869f-d195ad88eedb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22bc7c6-55e5-4ea7-86c9-a476fa6f0aca",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1833a05e-78db-4be4-b612-42e9f13bdf60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55281ef0-6faa-486e-a560-3372ee24e461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be21b414-a82e-4784-9f01-79da4cb8c971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d61ebcb0-6152-4b10-93bf-e9d7670b3a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ef41d3-337a-4bb4-a755-acb3a7be0a4d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89651e1a-dc4b-4cba-b6b6-1fc2e87a641f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "045e0ec8-a891-4de6-b19c-29ffe0d9e839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d1bc74-2b85-4212-a7cb-495fb2b147af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb193da2-63ac-4789-882e-e164ca2482e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babce9b7-a132-4e9c-b811-04aa610c92f6",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321d3f49-7960-4e20-82e2-05144d4fb7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2f4ea5-8aa8-4afb-8119-899a7c07342e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367bab05-c470-4483-9f4f-057328a30f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a4ff865-de70-49a6-ba57-436229d7ded3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21557baf-ee63-4dfe-bf7d-44fd9cf89098",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c246ec46-e32c-4c3e-99dd-dc9ccdd161b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3741352-484b-4503-8129-682560766d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf003f6-74d4-4a7d-8401-d07921b184d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce303a67-1f43-4f7b-a5c3-1a5d6e578e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6b1afb-1e61-4e8c-9a9f-0277e6069d48",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0d51e2-8a77-401e-a9b1-7bbfaf5fd427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e0f61a-eab9-4c08-b00f-f78d9614d406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ae7f65-d76a-4e06-bc93-60525248c9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d925968-ce47-4e1b-b2af-a6fb77308370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f468d890-4725-4089-a77b-0c98403d3ee5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ffc26b-512a-4b0e-b4b1-9b11be3633d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef64a1e-83c6-44f5-b562-e32e7a27c3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aaff83-6af4-40a5-9d09-5cdf62a911da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ae4301-26a2-47e9-b706-e355372860b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88afe0b3-7ba5-4209-85bc-0c5126c52805",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa608642-7206-4162-9b31-a9d7d18e3eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947f5c9e-35cd-4298-902d-58962ababe33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f725e93a-7a3b-462e-a73d-a8344f012498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed0acde-3fda-43f5-ab0e-aa3ccbef3110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba847e64-9b7c-4960-9c3b-e366a9f87daa",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8d207b-6fc5-4847-b75f-fb644b695fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1486f0-5f9d-4452-8fde-0d4eb9f4ab31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a82ce1-9272-4145-92b9-3daeece5bb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d25814fd-02df-4dbb-b1eb-75a8e5cadee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf5b28e-5148-40d0-a208-52e4f67771a2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409820da-0f68-41ad-a594-afd1eeeb479e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dff5fa0-bd3a-45cb-b215-c312ac009ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378d9986-ce84-4e07-bf29-f7f7a8cd23c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "829c971e-c4d0-4e6f-80c7-246e6bc2e8e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4722b5d-f3d4-4daf-a3f3-0af1b329e0e1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae416e70-0e85-4154-831e-e86267a0e71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e92eca-dee6-457b-8a02-4cf4ecef2c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e093052d-c9c8-480a-9665-34d0b62e1ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6f0f7a1-96fe-482b-bea4-611c9fc7c844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a03f06-f884-41ba-b550-a147b5c7436f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f19b255-9371-4f85-81d3-1661d08f8e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5001ad90-bdd7-4dd4-b61c-64b57711ba74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921aa1ac-e4d5-4b1f-9f59-a9c9b377a803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "171872d3-7c2c-4b0f-8506-a0d1da5014f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385e7b35-2994-4dcd-9ddf-edc31fb42269",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8c4db1-6e30-4872-ab95-7f10855c426a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acb8b37-d0bb-4584-bba3-4e42fa7baa3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b928cc-f5dd-42c1-8c65-6917823f33fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1d0bea-967f-4752-a18e-3b678a5de25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fad272f-795c-4928-a419-a01718c781cc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c479b3ff-fbd7-46d5-9c48-ba22f248d579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9503295e-fc47-4e67-9320-62bb794fb77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4aba9c9-355d-471c-babd-d89ab6082279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d57ed7-1ed6-4b7f-b2d2-523ed4bf9354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9798b64b-e2d7-4581-8e7e-dbd8fac5e285",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ffd9fd6-cba4-4813-a6aa-569c583994c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee126695-19ae-48a5-822c-c6db42f6d028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6ad4b1-8579-42f2-8338-2721856e99ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a5792977-9826-455c-a310-f76d641fee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dafd735b-400d-4f86-a966-e3dbfb41ac85",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa40967c-ee70-4c21-b2e7-4bd4c1145357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc451dcb-75b8-42b1-959a-4f44340fbcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f365493f-3825-4d5b-911a-c700f02748e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b9d5ca-6058-4282-a36e-cfa6cddfdbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbf1560-fec9-46a6-a42f-e709c44d0dce",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4808bc-cc3b-4690-83f4-1c2cbde164e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00c0578-2197-4e15-bcf7-83567895731e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e88fa0-24e8-4ca0-921f-a747a2104af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2edf43-eb4c-4873-82c3-af00b33a55cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd172294-451d-4928-95c0-732a5fd8a9b7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43835723-e04d-4b16-b128-ef1f89ebbe0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd6d646-eeb0-4de8-b64b-df968023660a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3196fa-0d80-46d1-8b6c-72c0c0efae10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44303c14-ec4a-4a69-9c26-a1d37fb5e46f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c9716-a037-4447-938b-13073c6bdaa7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ef64c5-7640-4188-915c-bda6385dca13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe5297b-1d3a-4ea6-9f7b-ee67bb129012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5653e73e-3a00-4e03-87fd-c81df88310e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "df45768d-720b-41bc-b847-2dbbc02c6f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d34cf85a-c4f0-4441-9dad-9da84e6122c3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641b7cbb-3c01-478e-9a3f-f247656c3100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "170deb41-9a75-4b93-85b2-8c4820f97710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44ba71f-2454-48f8-a145-c76dd788cc34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "488908bd-2ed8-402e-9b22-dad5e21eb3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792e2fad-73e1-47d1-9509-fb5ed20caad0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e507615-5839-4007-a5be-001b3148540c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c70ffe-6928-4774-a969-25a2928d6291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e30208-a7ef-4538-8b13-e6f38cbe490b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dcb439-7948-4500-92e7-e49adf7dd228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966827be-1877-4b36-ae0a-4c1e67afac9a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5022b557-2e65-44ae-a80b-63e36a927b03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ff85fb-3d39-4ead-a3ff-95696ae27171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c01c871-9f01-4365-8514-ee4df3237581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "481a5872-6d84-4ae7-b26a-b65db5fc4d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7e5008-342f-4304-875c-1703175f09a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32483218-b0bb-4790-b399-4676da203224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59fd9904-1e42-464b-8e7a-a3fb97f6ecbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cce535-a43c-4e4c-afb6-63ab0e7d1130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ab3315-5fb1-41ca-8c50-16b9812a83ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12930d2-3d4c-46b9-b05f-2e8dfa69486c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaad8de0-5401-4e89-93bb-dc1de365427a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e5d262-ae34-407c-950e-3ea61b8d1a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e33e60f-f107-426e-97c5-9e8a1b53a02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad2f06f-6e73-43ae-a8d3-0cf96ccc95a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880c3918-417b-4355-89ff-d2ff7e4f23af",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ebb6d26-e029-4552-8244-93f65fe4ecfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f513c3e9-d786-43db-8be2-f4fa0255a396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2580c59e-b214-46b9-8961-29fa2c575c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0752be9f-d231-40f8-949c-ca8b269a7b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a849c44-62d8-4e7e-a319-01b151167f89",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f253f9-a554-4d28-97f5-25f1e89a1d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0c84508-323e-4c3d-aeb6-b2e2c62325d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efce93ae-49ae-48b7-abf8-66943b8b0634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c10284-da71-45a5-bf6f-f884cf4532ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433d3097-704d-457b-91c5-f464e1b57781",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb67827f-8f29-400f-bb0e-247f69494549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27e8e589-4122-41a4-ae55-7243cfe6d661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afd6419-7a8b-4910-b4b8-4043dd10ce9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ab473b-4dbb-441d-939a-d1a61809a4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c23f431-2723-4e95-af21-2d1cfdf57b5e",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8054ff-59dc-4fd6-8e85-a9900442cc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a9289c-666f-4ac1-ae7b-eed2310a9622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8049b50a-3768-4bfd-b4b1-1f0c5363b52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "334f7da1-f061-4450-99aa-977e98668573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f824da8-1aed-4e88-b968-74d80c9c93df",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96cb634-61ff-4c4f-8710-a2283ffe85ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7678d4-df80-4ec2-b657-3943c783ddb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c626c-f925-4b47-905a-5bded7b97377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8766ca0f-235f-4d93-8f05-f221fc77c7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e46b1c3-fe92-4a48-91fd-719c906412e8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2212e4-b69e-4fff-b25f-8ac576bc30ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb2eebf-f3ff-4d71-9c15-20c1c87df86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb5c8e7-1d25-44a0-be0e-a04723499ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46d8aaed-0788-4191-b446-bbe3459b68df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a0e739-85f1-4945-8bd8-2027385affa4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0725ba6-ab62-48f8-9538-4f29a2310c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e3a9f72-2c06-4016-a503-5375e18bb0be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f048b78d-40c8-4696-b087-04679f621dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5301564-13f7-4494-aa4e-d4eca0d8e358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8641f290-c322-40c0-8c6b-d74e56d75404",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e2ad9a2-8c09-4f7a-97ed-371cb3d11a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ada44e3-f5cd-4673-b38d-7e509fea791d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c329a185-53a2-4d2a-ac34-771b6210a352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7c852f-8a4b-40ed-b6bf-f23a08b0ba5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2dfeec-0e42-49e3-ac8c-9ade75903409",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b95e939-256b-44d3-a696-09275bb5f9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71e3b6e-9148-4bc4-9c82-46212d2bf710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd593eb-8152-42b9-8510-87379fa7cb08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e96ad41-0065-4861-8ca3-817d905cb43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fb0844-5515-41a6-a87b-547cc2014f89",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36483ca-3afe-4dc0-8b10-05f734406a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb8d679-6fd9-4f0a-89e6-b0ffadb93537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc92ae93-2c9b-49e6-9cb1-6979edc094f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b5bc4b-7775-41b4-8dd7-32d36eb94e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ade63d9-0257-408c-a323-a9dc223805a6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "542a9a54-f1c2-4776-ae58-13f5fde8b7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf3660a-20e2-4df3-a0df-05c2d4865d23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f435d8-3597-4f4a-ad18-254f95f2f08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7900d099-e630-4d72-939f-a377d010c528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71adaa4-0254-489a-b9fd-54e5f3ec283b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b97a381-e323-4226-97aa-fb163b913fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1372f787-9ec2-45f5-ad4d-942820b27027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6766de11-cbba-428c-acc9-5c668f922cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5be7d4a1-ea41-4809-bad5-e82c97a809f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea575eee-703f-4bd5-bb61-5aa4edaebb95",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6f3ca2-31c5-48a9-9d5e-3505b9902dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e56399-53f0-4cf8-bda1-95de90bc9287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ee7ca0-d1fc-4e2e-90ec-47d43686e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "82bcae01-892a-41cb-8a18-b2cd5126f9b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea46960-03db-48a3-8963-3a97bd2e0952",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd798e6c-8be7-44ac-9a16-d5669b73939a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a94c83a6-2c88-4e77-8e8c-e09901f95a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a7683a-29eb-420a-8f70-cc4e0b42e9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4457cee0-0411-41dd-bca7-80224fe022f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc21a4a-0060-422c-876d-4d36298b28d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ffe8ae-cc86-493f-9ce0-56ed1c13e4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b27f468-a564-49ad-83ac-9eeccfb7819f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e48802-22bb-4116-bfc6-b3f5fd39e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "87191cd5-dd0b-4376-bf49-2ddfa4bd9b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ef44f4-6838-4023-b593-f81113da2e99",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc58ce4-5310-43d9-885d-ca79c54b19b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b192ca98-633e-4a22-b249-51223a59b0b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7069af11-d67c-406e-a7fc-0d8dad8ebf05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "430e4f6a-b566-4c83-82ab-bde1dea61177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a5b279-47c6-42e5-ba5e-963ad34d087d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a2e12a-e234-4c5e-a249-f7a26bdde011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29fe47fb-df59-499e-902f-6797966b14d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367caf9c-0c98-407e-9ea9-c61a4b1da31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "455d88c5-1201-45b7-b44a-9bec5f1eecfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3803be-1238-483a-bbc1-19571ddaa70d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70734ee1-ea10-4cda-b6b2-ba6bdeea0181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ee9054-b39a-44b8-bd2f-4d2e302cf69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3477b754-f791-498e-a4fb-f9801dd21cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "156b0135-7624-407e-b1d7-0f719c432fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b3634c-a0cb-4036-9269-0b98dee92199",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5e6b3a-8bbf-4ec9-b7d7-43ee85da79a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7897e7-4a22-403f-a09d-81bbc08cb58e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b1c33e-4e3b-470a-b7d7-bbe866f3a1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9ac39c4-6b56-434f-b7b0-e832ba990071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4973b78f-9d67-4d3d-9c4b-5a20b164fa46",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c80116-4d17-46a4-b9a0-92a641857cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a568e501-4cde-4fcc-9b3e-3198735b3c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d534455b-a534-4116-88cf-c38f7c6a6f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "221d4371-6a5f-4625-a5c5-c6167e1fe825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c5e893-c273-426f-b76d-1150631e55d9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba832c8-6b20-4761-a36f-44b682f7880f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0545291-4f35-49ad-85b1-9f8d1ada7fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3614e10-2773-4a13-abf9-6aa21f5cbadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f05826f7-d9e2-4de9-a785-0c6dff61c688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93c5263-d237-4eb8-b3e9-9c9771759a9d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512040a2-7821-4385-ac85-f119a31201e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da5ec95-6b27-4741-8add-ac9fa357914a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313b4e55-902d-4650-a96a-972476125683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d914ccef-106d-4684-b0bf-99fc1bfcaa94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252568e6-b0b0-4dd9-83f3-20d6ca5fd6cb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d785e4-704e-419f-9262-2bdffbd845d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a3a5de-3998-42ee-a0db-e4270d926a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320d8674-d2b2-4a69-8984-503f368dcd4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7e5e81-2665-4134-81e6-9c9524ab2bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80804be-0df7-419a-b288-f44e4cbf9286",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b295100-9c06-484d-8ef5-5df8256d639e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69bc1584-d602-4d38-8330-f084537481f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7612f4-751a-4b29-9666-840904bf1608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0ce3c1-18a7-4d88-a080-63de099841a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eba654c6-7490-422f-9adb-bdf2fc3b2024",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e244e9-f8b0-418c-a5bf-cd6e8664b689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4bc539-b7bf-4e53-81d2-d6cae3ac8000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a946d996-8131-42ba-b6e0-3d54c44054d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "629619d7-471d-4871-bdfd-5747940704dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9382969-785c-4278-9be9-29e76192a568",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cadfb30-3552-4130-9839-8aad4a843b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af32d871-ca66-471e-9a96-42ec2f65dfbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2fdced-5dc7-4c5f-a03b-09ac76b91b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "637abfba-9439-4fa3-93ba-5e3c3331692e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668a4ba5-947b-4e03-b7f0-1dba7ed87d8a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebbf783-711f-455c-a8d8-ff11004d903e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f332befd-4193-481c-9ebc-8edf0f10e03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f19006-ee6f-4102-ada7-5e17f53f9940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a30d759-d591-47da-adee-f9ac307acd3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22103bcd-0617-4390-8fce-2820212ba2ef",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d45d1e-33e9-4017-9d86-42a2d55ab056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8ec73b-3278-4cfa-97ce-e07423b77c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a218d9b-7d6d-4381-85cc-81ee97f6f6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d3648d-c18a-4349-a480-373f89f6dd0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931b2a75-dfbf-4884-88af-124b568e47e1",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51be6db-9bbb-4cdf-9492-ec9dcbdf2202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5ce6ea-9797-45da-a74f-8e7b6a1984c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45eb7e51-33ea-450e-a01a-bdecf60d7a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7d24bb60-d150-4c60-a4ad-ed4bed78c8a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92556afe-0187-4b54-8bab-93937d871970",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e562c192-a986-4945-8464-5c56d10291b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3eb7a17-809b-4ca4-94b9-d521cb6b7b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0050de7e-a934-42d3-96dd-eea7da6ab70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "04f2a123-5768-49f9-9705-090bb2858373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730c1fd8-21b3-4b66-8e58-ea8f8deb912f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cd437b-f1ab-4f4f-836b-04323208037a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dd36f7-a85a-49a9-ae1b-a40b18bb7a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacdeb1c-a81b-42e1-abcb-719f653ad1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d13f3bb-4f83-4f2a-aa95-94ae0f455ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5bea19-9776-4c47-8513-eb84c2029a2e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b40479-8b6d-4e72-b61e-2362bc2a78dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9f3530e-68c0-4ac0-bc12-697095082848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd95ae7-8a73-4cd9-a60d-5624610aec17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ff64c35-6b62-443f-a06a-c6506196d5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb101a0-c41b-4926-8a74-706691d02765",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c802bf25-88fd-4c2c-a13c-76cbc11872b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178d26c8-9f77-4bc6-822d-2f39a7ce5f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526b4273-dc4b-4b98-8a28-67395204f0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f56c0256-91c5-47ac-b0fa-2268bb997262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa889f50-17eb-4bb8-8765-e1740fdc7755",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adcdf91-5414-4fe3-8915-a5bbb023f5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37eee429-3fa0-4a0b-a36e-d43175d680ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd0d89e-e99f-41cc-a9de-53078b526191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "95ce6690-bcc3-4c7a-a74b-bdb2ac9733b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58099d53-d213-4418-a26e-0b3ed8d62795",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3470db0-4948-48b2-a362-c16f8fcfa997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a49306dd-a370-4573-8b80-87fd11c6fbaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec85d80b-07da-4049-8805-f747681f494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6637e714-40a5-4642-9b0c-44fd852b51fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36848a5-f654-4b30-b032-16ceddc69238",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e8e56-b617-433d-a2b3-f5f4c067c9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f989ed7-362c-4652-a4bd-08e96746869d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025dd41d-6500-4b08-9f5a-450f34471bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe2acdb-2ad7-436b-943a-4282d7d35fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829f9bff-c33c-420d-b7e3-165d6a3ed557",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ba5794-86d8-46c9-8699-838b022bf727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c09831-0f3e-4344-9f24-ab88f900e92a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ee1149-4dbf-4c2b-bf78-117c4be7a80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5931e8-4330-472d-ba75-91ca821d50a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed25aac9-76c9-4305-871b-a60c11b21014",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b333c1ec-acee-4670-9347-6ed7864e2358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56f146a-216a-4bab-bbbd-8ad3c282f715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c97ee6-2fdd-4b81-9873-7cf8dc648d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98cef07c-6ced-4f46-825e-6d6b2283b00e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f5987f-49b8-4443-9ac2-4d29a74cdd29",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18866965-e9df-4df7-b607-d57d8e5c33c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf5c004-9596-4c7e-800d-cfc0825277e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484a2730-449d-4fa8-8563-544c0bb6cc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "737055cb-e381-4743-b3b7-f6ae7b9d2c9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c0c4e0-06ff-4f66-b270-9d400be93fa1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a363fa-33e8-4659-af81-b4a8e7addee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c66636-7429-4eba-af6c-f465eb3be67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59221591-1836-4c7c-bbaf-c64c6305d1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c42304-d885-41c5-9c6e-cb3fab0cfa7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee39b178-95d9-41f8-8cf7-f4a5d30082de",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9eeb0f-79da-4012-8fc8-cab86dc0db4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff565bc4-7e21-4239-908e-4c8edd67700b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f774f7e-0cbe-4b26-9679-c51b0981cd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4dbfd090-5c4f-4adb-ba96-d46e43456b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fedb9ab-c6dd-4e5f-9398-2a5458681d43",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8db49a9-2c7b-4123-bcd3-5524e9b8e2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8689fb4-ed13-4110-a2f4-a3907e56240c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2450f3ac-8bdc-4b51-96b4-628fd5e7cd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb98c5fd-0de8-412a-b44a-081afa2f156d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb87822-6bfc-4626-9242-139e5c50c7e7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b7cbce-8de9-4869-ac63-8c5ca9a20b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124a5a7f-fca6-41d0-a933-66cf4925e3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44a32be-0a26-4522-87ce-77eb81fb23a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc89a25b-b57e-4715-8ab8-cee03e1eb46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827519cf-1885-4d70-a42d-7556bed11291",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aae5d2-1092-46e1-a2eb-ae7deeb1d93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ea7a13-a583-4310-a383-5f9f63c3af00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24d5290-5c26-42f3-b264-33cedc14842b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cecd9a01-86f2-4da8-8abe-6868cc63ad6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d64270e-cf69-46fa-8270-b3fbb3aa060b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4140fd72-69bb-48a7-bdcf-8c20425dee57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8929fce7-9331-466b-b718-871431417d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e745a6-8175-4e91-86ca-21d07a54752d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1698ffa-20b2-4f50-90d5-4490c0b99a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4b3d5a-994b-4367-a556-0ab207bc74cb",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b16d79-56b9-425f-882c-2bbbbe346ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c015532-336e-43e3-81b2-07648f5aca87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7faed2db-2b33-4ee7-bc6d-38b5cff5c090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "63130166-22ae-4e19-a1bf-903c1bd22778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e79e4b6-54b0-4222-9a99-11979541d252",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8677a5-e1a1-4d0e-9df3-918ca47ee45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29368984-fa84-4b60-a3fd-aaee76249097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02bc21d-6da8-4fd8-a244-b5074484a0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c58963b0-4cf2-4b35-b632-ba4d966ad4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d54ed6-15c4-432b-b7b0-55754a39a987",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83ec841-bac0-4d0a-b28e-b5a6448e91c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4dd35ca7-3467-4abd-9494-93572369dff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda48d75-b846-437c-9e1e-a6d6fbc1303c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8abf5cc7-4698-4241-9ba2-014d1163ad67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21ae0c17-ba17-47f9-b8f0-87e1a2ae79d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6a3f99d3-b92b-4578-abc7-1b19f15116f7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08228f37-bd3e-44d9-8d7b-71e12970acd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3527571c-af7e-4f8b-a3ac-43511c2f1284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95973b57-014a-4949-9ddf-819425432cd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2323e60f-ea67-4cbe-8990-6c32b253e3d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "488efe38-e10a-47b1-aee1-8f2ce501e716",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10926581-f88f-4dea-bed0-ceea866460e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae468fcd-921f-4b7b-808d-af2a876005fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9663e138-2b9c-41b5-8301-92618ec9237c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1264f58-9d34-48f9-b249-f60aa2e88272",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c804ab9-db9c-4d85-aa47-6c83887315bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1bd4e0c5-d467-47c4-88b3-a792c91ebcb6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec863efa-3bde-48a6-9800-56fd44318ff1"
                }
              }
            ]
          },
          {
            "id": "3a551054-eaa4-49dc-b0f4-eb8f338f47ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a7e83232-ce04-46fa-9a1d-0e883b1efd2f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "20dd4e49-9ffd-4059-8e5c-f55cf5ca5335",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aefab135-ac4c-4a82-b101-9b85dafd98df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3e856968-031b-46f3-a486-35070c803afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91a1cd4-e2a2-4f84-a88f-ace724925523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45246726-2b37-4ee3-ae82-a711818ad8a1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "770278e2-4685-4edd-90c8-fcd33226dec3",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f40c08e1-6566-4380-afcc-b6b30ef52019",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2548bbb2-167e-4b8d-bcd3-674fcf1dc966"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5b995a4-3d08-4c08-8b6e-9556b89e0f40",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4a5fb01c-b1d4-40f2-b706-5e3705848fb8"
                    }
                  }
                ]
              },
              {
                "id": "b52a19d8-2b30-42fa-b742-3d5bc2e509fd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5fcb1c7-df93-4b1a-9a26-c41b842a536e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5370d64-7767-4881-9d68-fcfb2ee39905"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab6c3f8b-0e48-468e-a864-f37896789ee3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "842a8ecd-d35c-4252-936c-43ce97f59459"
                    }
                  }
                ]
              },
              {
                "id": "aeb3db6c-5016-48d9-b922-e13e34f268e9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19b06ddf-ad07-4517-862f-767133c43514",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb3afa77-6072-4b57-8295-fcffd035ee86"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ab447b80-39f9-4f27-a5a8-f3d0c9bcebcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cdc30710-31d7-4255-b309-00902125c427"
                    }
                  }
                ]
              },
              {
                "id": "d118b078-f064-4ab5-984e-37284e141db6",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "21512c32-bc33-464e-a360-9231ec909499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5cf9a69-3145-454a-9289-8089708ac9fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d90d345-752f-4aa0-a29b-0c7f8ef69470",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "bd6ba7bb-48b6-4491-b22f-db4403e56cea"
                    }
                  }
                ]
              },
              {
                "id": "6cea60d7-29e5-4711-867c-3182c9aeb192",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a81f884-4c10-4952-bb11-b017d252d507",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e487906-c6b8-4630-a020-4d750a303344"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "baf9011c-ed25-4c00-a307-1d00bed3b251",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2d365ef1-c8d0-40b9-a54e-61bd62364146"
                    }
                  }
                ]
              },
              {
                "id": "40349365-eaa8-4ee8-aa1e-5a4db2f8a4f8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00659948-0a46-4fbe-aabf-39e180e04816",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c97da116-c071-4300-9141-0043197b2849"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b9f51a-b3b1-4e4e-9937-aa4d2ec134ca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1de7d0e5-08eb-4179-9f76-32623842561c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "671f28ff-6f63-4b14-90ad-24b2a021a5b8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b3e2a2f-bb5a-4cfd-adb0-715ea56565f7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "56c5155e-0754-47e1-b29c-c1b6130a0f71",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43fb1f9b-43bb-46aa-a8a6-01243ddc3451"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83d1e37a-af08-4938-8e22-3e7e692c1075",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "69697645-fefb-4e5c-a937-2af660ca4b9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d79845e4-2e26-4ec6-b9c8-692b257ca3f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0bc7396f-14a2-43c2-bc60-eed9cd8b7a11"
            }
          }
        ]
      },
      {
        "id": "f20678f6-955a-44a4-93ef-78aa1f8a48fa",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8c143f68-9929-4d0a-b77f-3b7ab22d6e23",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bff6d473-5acf-4c24-a858-3428ede007e8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78361833-74ca-47cc-ad8b-a8863f12ea59",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ec2e45-72de-457f-b992-a234ac906748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc44a5c-7b73-4d97-8aef-36c61d848040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb04daf-fca7-440c-8800-5eeb624207f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8da3f26e-30f9-4835-bdb7-e479457d635e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536a484d-f7d6-41e8-993e-808cd33aa91e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ba4df5-b6d9-4aaf-88ae-d1ad464ecdb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe68a4f-a729-4aea-9a00-3423fa5435f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f7efda-a23e-472d-b0b4-1b0959958c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21760c89-0945-4f78-845a-71e7ff70fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378a54ba-f352-4ed9-871b-1d9a03f49945",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5beac832-1ebb-42a9-9f36-270638ceb023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ea378c-762e-4d46-8ca1-e8065da1f5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c1e59d-cabd-46d3-94aa-46ded67140d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "87763c9b-9a3b-4112-b9ac-9d269ada830b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03719d54-c96c-4d9e-a0dc-f03af991cc3e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3b2b83-0548-44c0-80e7-92362e73df57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19061a5f-8b73-4a86-9aed-fbb1b09f8e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469a6f31-af6b-4285-be09-6ef040ae8c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1845ef1-6399-491b-800e-511d97d12473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f1a099-edea-42a8-a685-1c52f405b23b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4370ae2-e34c-4163-997b-b89003e480e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fca5d08-1216-474a-8aae-d14087be87f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbbcb56-2285-4477-b6de-a3300128bdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4373ccac-cb62-47a7-b67e-5782d890354b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b657f5c5-ef0c-4f09-b04b-fbf576e1869d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3805caf-f8b7-4aab-b15f-5d4a9591c461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0804c71d-1eb5-420a-95dc-31f015976df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc7db10-18e8-4cf9-b98a-114d5c2a2f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7efbab-dc23-4631-a47d-8b43840228be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30719f4a-9254-487f-a90e-874e3110d4e5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f410bb-b916-495f-8cab-2c49a02565ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7429a095-cd6f-4224-8a28-987fbeed825b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672006bd-7efe-495e-84c3-89928e667dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad784e9d-0483-48e9-99e2-5e733a6b7f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74a0353-b63b-460c-a0bf-2de2e9ee209d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93e2170-cffb-4ffe-8f0d-537882837d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "503678ca-b1d8-41b3-a3fc-3004f5ff56cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2dd2f78-2b7a-4e7d-a095-b4117c1e5ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4957cd65-ba95-4e5b-88ea-c77082e1d910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d14a77-4098-4279-a6c6-67f2fec4e855",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4e9172b-1b47-4826-87c5-df473de674f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49dc500-2e28-433d-a7b8-902cff876c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49cb2991-7f7a-44ef-b7a8-74ae8578fcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bac775e7-0349-41c0-baa2-73b22d339c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b33ae4d-2d3e-45ad-824c-7af1afce4208",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1092c335-bf4b-4258-b88e-4ef8e0f510ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0d133b-045a-442a-9689-acfceb5ae312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dad2934-ccb2-4299-90b5-8c6e3990293e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3401c358-ea75-4705-bfe4-07a231e3c659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e0621a-0eb3-42fd-8c77-d0e7902d663b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c08788c-bbcd-44d9-a6e9-149b6175e4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ab9c01-d518-4cc5-b468-489c013a0c78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44aab32-0bf6-4350-87a3-7fa87abfcbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "78a7e6ac-cb9d-4ee8-bbc9-416ad2e36309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd736fe-a29b-480a-9c31-361a59c9adb8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28355bfa-3699-4ba3-805e-81388f395a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc82536-e3a5-40ed-ab2e-db770183f8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101becfe-3b4e-4459-ac51-3b8a1896ba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba727d6-7b72-468e-8cbf-fefed40ea5ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef4f88b-c330-46b9-9af6-c9cd1e5076c6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd632e4-76ea-409f-b05b-b41071f82d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8870602a-7d84-4cb3-98f0-24e0056a1684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bbbd03-b467-43ce-b05d-a27ed5ad3e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c7e285-b6f7-49a6-9bfa-3e7fe4ee95fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a36a52-0dd8-4170-b584-a79924c9ad8c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44e8071-3c97-4c9b-98d4-e4926847e5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02061fbc-2ae5-44a2-b424-2fcd543fbdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c00effb-6dbc-4393-a1ac-75ea8747924f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9fd77e-2252-4259-90d1-fcf705f4aacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54fe992e-7be7-4535-aea8-da9a7ffaf9a3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f91fcb-c388-4f82-8afa-065e69c52031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106be92a-ebb0-4c0b-aa78-5033801d70a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa6f5e4-967c-47e0-990f-2b13f8588eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fad5587-9b7c-4813-8f93-4c296af038b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce341c2-dda1-46cc-8643-6418b5b376a9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e50b86b-0a76-4ca4-90aa-8982cf6790f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc9ea2b-a526-4c69-923b-a7946bdadb54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5ab848-fba0-4b75-8e88-18227798e4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac1496c-c57b-419d-8ac7-f4efdf2478ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb61099-d124-4309-bcf2-d67a11efcd08",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cd4e35-f333-4857-9f76-cbc41eb8c345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96630c63-0beb-4b43-9b98-82acebd7b599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb34302-a5e5-4f9b-9f76-8e69b0572e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6eafa35-5efb-42ef-bb0d-d3975eabbcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3218e83-f230-4510-b104-2e91357837ef",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680de242-895b-42ef-b8e2-5aba59ea2967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d15831-7033-450e-9c3c-fc9a9e0bd533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f928a81-5950-4263-b0bb-cba0b2393b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd541ea5-5e36-40ab-92b2-3bf5ab0e7d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1278ac-8f27-4994-a327-bf33ee18bdb7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcb6e2d-cdcd-434f-a89a-0200aed7499d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591b87a4-b6b6-4a78-9cda-6e7ee63743b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c45c6e-5cef-4755-b8d4-ae4cc2da1800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34424dad-d71f-4a02-aa78-e918e78f236e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169281c0-4b11-40f0-bdaf-21035fd7acb7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc345392-d0de-4f5f-a3ba-f312af2ba34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819e982d-a99a-4a42-bf6f-1445ca9be923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3587c0b-56ca-4489-8f27-5c9dbf14fbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d4942a1-65d9-455c-81e3-7f5d5ae77dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8ff1cf-ef96-4e12-a94c-c5441da5b4e6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae865834-628b-4ff7-aee9-986216dac716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34b28f23-7b3c-457b-80c5-049f0544cfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb24f870-cda0-4567-8473-7626ecf9c18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03197adb-fdf2-4da2-9aa0-84d536707e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c2ac72-bceb-479f-84cb-8a0c84b97901",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c4c161-06ef-4c04-9b02-7244cdb2450f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9d8190-7ffb-4957-82ef-04f5d5697134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aaf539c-37a9-4f77-984e-bf9ebc7b7f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "631681e2-957d-4a9f-b279-2319df9cc178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53141b1d-95da-4456-8402-ddc58fa2c6a2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "016ba9ba-3a5f-4f2a-8943-ac36e8754c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc9d45d-617e-4344-ae58-e701a1ef8167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9296174-56ab-43a4-acad-9aca25efb1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a237aafb-25a8-43a5-87df-a0a69b68df31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a02ffd-194a-455a-a3e7-ccc9f10c2937",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f85dd4-8137-4dc2-a0c4-78041b4f0ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36cb904b-37a8-4a08-8fae-058a94a3e182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42010fad-003c-45d9-94e9-896e5751f608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6161a5-8862-42ca-97af-e7b28f1075d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb69a78-00c8-469a-bd28-1137f758ccd8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186cdbe8-8d8a-494e-8b50-925438671ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b00658-4335-4110-b39e-7f7c7f42c026"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4517f479-29c2-4294-b7be-fc646eb7f52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fe3bfd8-e1b8-4a46-ab11-125099743320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b3a291-92fa-4a93-955b-2fa02f12b67a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "764c9231-9a86-4baf-a8f4-de259c0c4bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02aa9087-b7b0-4b8d-95a7-934b6238f882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334f4bc4-295d-4d0e-9165-209dcb6ccddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52718427-b1bf-4b52-989e-ea846a2618c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eb10ac-c88a-4472-a8dd-01d5b4b0bae2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c55e3f-3a3a-4956-b4fc-8594ba369b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7e84d99-9a39-4e7e-be04-4831bd71af7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e79d164-98bd-44ae-bf79-bb4632bbea9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21c49b1-4bdb-4bd3-abc7-74e576408bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e31b240-d818-47e2-ba65-d6a2f088ca18",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3be8ce-3f45-4cfb-8606-07355055580e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e73b4bd-fde7-4da0-b752-33bf0e836f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b95863-4ed5-40be-8fd3-405b25b9ab42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2883e44-744f-4114-bf74-f8cf9744cdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80596325-16b8-4625-882d-cab52cc6613c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce56ae2b-38e2-4925-a74f-d397bfe06e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd493874-6a3c-4265-ad65-bbe0d263485e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01087edb-ae79-4c09-95a9-cfe201b9eb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fecacea-9ab1-48c5-96fc-694133b0b14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc452776-4445-4b17-adea-fd7177e27827",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b96435-6d17-4f03-8cc0-c5a4134dc732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "028e0b35-7ed1-430a-86c0-07a89090bad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c086552c-f588-4022-8c91-3425954213d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3649a744-2819-4c54-acf2-50b6db5d68de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b431fd-160a-4bf7-9c05-6ff4e98ad5b3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adffe3e6-2358-4d43-8dce-ab4358a5c16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6b8309-f860-4588-9ae4-83c461d3320c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f554ad08-0c17-4ab7-b293-03c778cc3846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9459531-b278-4a57-a212-b7bb74098c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69ec14d-2d83-4b0a-8e1a-cce9bff3062f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4422edba-1686-4e9a-8532-94a08be4bd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c16a919-69b3-4c8b-a439-d6ca238bc675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4726499-07d5-47f1-8799-0e49f1058720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4993fa76-aaaf-45a6-bf8e-dd584e275f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeea0cc7-00d7-49b9-9e05-5c7ad996e1dc",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96e8fda-a4de-4c0f-a983-72867ee9734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86ac5f9-511e-4eef-9bb4-ea64115f2a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81911c2-d014-4c0b-9971-e5985568f3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "337c52ef-9459-4439-a2e8-d40bf4973159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a555ffc5-e705-46b8-8d1d-d697a9f57045",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd36c2f5-5d15-47d3-8606-f49c5c1b8eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13be20f-9dae-4035-95ea-28507bac52ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b684f3c0-f493-42c5-b92a-b284ed592232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89b0520a-8969-433b-a4f4-700b41f4649b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "654722ef-94be-494c-ab8c-bc8ba026d342",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d57f82-7835-4c83-8c5b-8745d08ccdca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe16877c-0018-4736-a911-82f53536b1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fb33775-693d-48ef-9cdb-725e2bb1d87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03cba415-0d37-4884-be3d-3c1de861f288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2050c5-1233-4101-9a20-9d244546c1d4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1c8222-bda1-41a2-b9d3-003647d82d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c31331d-210e-4a2a-b9ac-6d7b9e665f93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c027fb-824e-46f4-a616-4a0cab53762b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "508ae055-dda5-424b-a73b-e084bc7d4dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051d9919-d2f9-40a6-87c6-662b9c61d2bf",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fccda0-e646-48ee-8699-4a50439c2a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023c5bf2-2d72-42ea-8647-ed5e0a26217b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a9a3dc-de65-4296-9506-38fe06fb83cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60e5dc4e-1b20-41b5-907c-b097a1d87751"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3321550d-5d08-46c9-bad6-cb8fa3699779",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c76416a1-917e-4848-b77b-0caf63367d20",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179f52f4-6e3d-4310-b530-75452c737016",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b86570ea-aeca-4cec-9d2e-bb1d69a4560f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01be50ce-771e-405c-a2a7-6aa3de3ce764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e5446ba-498d-4846-af5a-b0b1f111417b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98b5cbba-047a-4465-841b-3f8defabbf39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bacae6ef-b32e-4c5e-afd0-78b4ff109051"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fda53446-7e5d-463a-b70a-0318e2d4da21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a03c6b96-b8b5-4f52-882f-78e1c039bc43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c8e9623-6148-4dc6-977e-04acc3a065d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa3f9717-1f5a-4c35-b417-93c26a703bc5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "548f31ee-9cb2-4fbc-ada8-434a3313f475",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a16225f5-52e0-42f0-953b-ad9250dce594"
            }
          }
        ]
      },
      {
        "id": "1542a5b3-c8d0-4ca7-a787-7ceae73fdc23",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "07d6f97c-9de1-4156-8887-40fb96538650",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cfc2a02b-a390-4b65-9133-f23a41859895",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cb1debd0-931e-4a52-a3fe-ddc1ab4582f8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3fa800-6331-4bd0-a0b0-da18fa3d9afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b24402-8891-4640-adaf-415290409335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90df2e4b-7620-426d-9dfe-bdbd01a64eb2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3edf62-d413-4d17-8a5d-fc623ed33ea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c156b87-8488-45f1-905a-9c1c9fbc0729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273fec93-5ccc-4872-8017-2dd58a201093",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c512341e-f9c6-4381-b004-dd34bccc5907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3566dc-8c24-4cf4-be48-48d85e84e8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "738aa71e-68d8-4441-866f-9f6cba0d4f7c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93664cda-d9c2-4064-b0de-a43a6259d9be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25132f15-a696-4cf3-b8c6-88f88e28cbb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70171fd-aa84-435c-a3f1-73e744b13bf9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09142980-302e-4d1d-aeec-ed01596773fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aa8377-7f72-45ec-b127-c92a4abb1ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0085d2d-a58f-40e8-b9b3-8db69a5e90f9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797c5a1e-7eef-4abf-9bd9-9c478b4aca38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "684b8b2a-f57a-4dc0-9b81-e3bb92098b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff82fcc-09f1-45a8-a0de-da03718e0fb8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5954e72d-520c-4712-9212-2d0554a108c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c241026-16a5-4729-9196-9fc9c70a41b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248f9e16-d10c-4e1f-b781-2ac34986b0da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "812109be-23f4-42c0-a771-44f991a5f6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae22618d-465d-4402-8a86-821c86efc9f5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4570cfda-0bde-4e38-a846-8e438dddd7cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca15d683-2a4e-4cf3-92cb-aaaa2b3b4708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "320f1d8f-07ff-44a9-9cd9-5dd8451b1f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3530a6ac-1ad7-47f1-8b52-b27af2cb6a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1bd7bb-887a-47e3-9d0c-ffdf714489e1",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d414f1-a644-4fab-a1cc-c5a7d5803597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82f47579-78db-4010-a180-34f19df7a7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1826156-42d8-4af4-a2a6-01925c64cef3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75b29983-af13-477c-af92-3b40ab5a58b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18839b44-c63d-4ccb-84d5-055554acf79d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d20d31c-d307-4ab6-a224-844f2af52c3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29fdbd68-2b48-4e18-8370-06cd51659d2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f80a13-bbc7-41dd-96c2-59c674dde5bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edc5ab44-c358-4422-b1e7-45dde2bbbac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40654b54-4abf-4969-be17-125186201bd6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52c9f16-4f7e-435f-920e-b7f5749ceb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8553b256-b610-4f04-b0f3-1518c136b52e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31d007c-1f17-4735-b0b9-ede5dcaa301e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fba11d6-e012-4ae1-a075-717dd7380711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23327998-bf7b-4d55-9c2e-788b3c8dbc28",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4f3067-9ed9-45cc-a1c0-6cfd0d5711c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32887b1-5894-4e18-bb19-3ae019e8f5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a9cc8a-b8e1-45e6-9a3f-a82c257a505b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1534b7c3-72b6-4dbe-9cef-2dc8b5a8d7f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08642a3c-ec3d-491a-bdb5-f3577c4c0fe5",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5259a9-20bb-4137-9e02-79c28791129d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693d48f9-ab23-40a0-a1ff-cd8c60902a33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0e6f12-e271-4cd6-95e8-00b3927b1064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927aef3f-c54f-4ad8-a3ec-aa8a4e42b38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a747ff9-80c8-4c4d-a307-6a95b0275857",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14ccd23-1a0b-4faf-bacf-53376c5bf0ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42ad0e14-b1f7-47d0-8ee1-df4b66c3a28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1678262-6360-47c8-b7ad-be0146067f1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd5a030-75fc-456d-b368-a00390485e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea861e6-04d7-43fe-a4a0-01d3cc7b0781",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43e8cf7-ff71-46b6-8d75-79e6a02ded1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ac570b7-dab1-45fb-bd81-a6f8a1563aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d764f16c-21bc-4960-a74e-ae48c5de6ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dfb3e66-4f15-401d-90df-2ea38cde6417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27e92a9-6e77-4d92-a452-7b0916c2b30b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d947b3-2ac3-400f-b713-d3223b5538c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9022322b-9500-48b4-8116-8e2bac434e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4b707c-fd0c-4e4e-a468-f6edf1447c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bfd8f0f-199b-4d02-9fef-a8610fc90be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "407666eb-6194-47d0-9e37-af75d044cdbd",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b1a601-46e1-430c-8670-1abe786ba34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95bca95a-623e-4f6b-9c1a-00bddf1121e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef9ff38-6840-4879-b57f-290efca7ac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9be30a58-461d-46e8-aeed-c567d349d33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc8cfb1-81c2-4d29-b385-84d1a3c88ac7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c102e6c9-4b48-4b3c-bed5-6222a9022dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f658db78-ecfa-4151-9fe4-83e9a94d66bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6c400e-ecbd-499d-9617-c9bf9ea27214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d588b318-7f87-4561-b1a5-dd21690509c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c78bd02-ece1-4baf-8c9f-1fbe03df08e5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df04ddad-9790-4d1a-a851-e3b01d6c3865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c465c3b1-b5e4-4d55-bd1e-8ec59fef3a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edfbccc-02d5-412c-8163-2ca7d4d8cb74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d8d53b-7bb2-47c0-8e4c-88bd1e397e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2500d2a4-d424-4adb-8b92-0bb2a041c9d6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282af35a-1155-4c85-8bd2-3da4efbae859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a449f4-0fd3-4024-b595-8a34fe9126d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5666fd4b-8123-4cd1-ba11-4d8901581083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51524eeb-0d82-4da7-bf50-82360e78777a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1803bb74-8677-44d6-87a7-789ef1b862aa",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e3993c-e9e2-4011-bf5d-375d15746226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d62c7d42-7072-4d0c-98e8-47d19b09512a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4849a9-4859-405c-953e-af40d79433c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c2a12f-e461-47b2-a94e-1a05f5a62e84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0723c1f7-54d9-4a36-9205-b0ce19b9551d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3508bc5-75cd-485b-8a27-84c42a960dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c913098-1640-4678-8ce3-d87999b8579c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f323ef-91e0-452c-96c0-3dd6baf38bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc17b5b-4079-4964-a808-8922b21d8bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42ee6c8-e617-46f7-8b20-4cb3c6cf2159",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732be7bb-28c6-4911-b40a-108495ebbc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3897f91d-a4d8-41b3-948c-3f767057f9df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00bc61f9-c9ad-4a9a-a98b-681a7f8e6c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53c41fb-2a4f-4018-8a93-2de0c58b7e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f6ff39-2bbb-4641-92af-62353522576c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d30a0ce-badc-4b41-8960-346654a0577e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1298f5bc-271b-41a8-95d6-54007e56ab57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ede9800-f49f-44f3-8113-7e46490fc0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d165d5a-234a-46b9-a84e-b0c7df705fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e29731-a6a4-41e9-8a2b-db6da8a4d0c2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9142d0ce-1071-42e0-b36a-2c60a989657f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84456e24-51de-4e94-b565-9222f230b049"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0edc314-e89d-44d3-8e80-a557bd01ce5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69fd222b-9017-4506-837f-569468839120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3dbb71-78d8-4ff7-a4c9-bb2802d536e0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8655f2d0-5331-401e-9a56-0442dcdea664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e96c4b-cf76-49f6-98ab-89e0fa7000e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf01e90-1cda-43ab-8ced-e564cbc41e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55bd9737-b4fe-42cc-bcec-2f44f3789db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7ed19c-38e9-4ec3-97c4-24cf8dec7d86",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e34275-fcce-4d5b-8f12-9d9912a3522f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db7995d9-39e4-494d-ac30-381a847b2d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5f6244-9351-442a-9135-d288c8adc318",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd7c089-b684-46d0-827f-566d52961295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac325d6e-4b67-46a6-9e23-23accc6be287",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f27e7a1-a70d-4eeb-8311-f95696573098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c84d3ce-2dcb-40de-87af-e1f85285eba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c1a98b-2657-41e1-85b0-f92cb8ce3496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2523f09-c7bf-442c-bdcd-a0dae8fb30c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4223d121-0026-4d56-afc0-92df1e1875ca",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5d5a9c-ae0c-4abe-8d1e-35bfa5412f0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f298a969-b72f-4679-98ba-7da1aed836d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3312cd05-0375-4fe3-95b3-fe565fa6d2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3edd24fb-7e5d-4e86-b1df-1c5eac491b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6cccb5-9e6d-4d36-9583-c87275ac59fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a11b99ae-a47c-4aff-ba1c-51060b11d06b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce20cf07-fac7-443b-a9d8-88e7a619b6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "593dd22f-81ea-4b5b-bf26-abcd26214145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96dab443-759e-442e-8579-d39c0a09c3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1808c69-fe8d-477d-9198-34c2bd8f221a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296e4eb0-5400-4f0e-bb4d-21a33b678858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37d97792-6f02-41cb-bb85-25fbc31ea5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a849ef-f8a2-4a61-859f-b43f2d5622ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e9d994-7bbc-4d49-a54d-ae96fc831a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eae57e7-3612-44d0-af5f-ec2976779b74",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86701a97-9c80-433b-9bc5-2ecfa02cc94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebbd7471-e2fd-41dc-b83c-f6123e894a44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1c5de1-4a5c-4eb3-9341-2153ba80598d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aea87da-262c-4824-9ccf-f5a9fc54e66c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d99c63-7d00-46b0-9e66-442c068105e8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feaada49-ccd8-4ae8-92bf-763d80e29ab7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "400e0f52-3a67-4532-9ea8-30f17ec9ceca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00281c20-a31e-4419-b69a-d1e19e8b7884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad48795-6de4-4bbe-ad21-addd4c075d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d1add8-2d93-40d8-bb5c-19145cf92ad0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f49b7ee-dc55-493d-ba16-d93107730737",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadec11c-1512-4a12-83dc-6eae2d75bea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87311d7d-994c-4212-bd1a-7d22b5d40325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b7e4cc3-154f-445c-bd4c-cb5700d24ac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164451a9-8d39-4d38-a0f1-0095cbe291d6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcb5f32-3972-4175-996e-e306f2574325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20159ae6-6e47-4a57-87ac-2ce07f057bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3014e2-a335-43f8-b702-d8082f4ab121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f079366-26e0-4b0e-afcb-6b89c986638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4dc30be-3b80-4f42-8751-7c11ffa83818",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f00b1ff-9d39-46c0-985f-8a67191f9317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c4b921-333f-45e4-9517-bc3117b0152f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a47171-d6ed-4e1d-ae8c-b82b2100dbb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59212bb-caba-4105-8fd4-de6246e06f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ff1d50-1294-4aef-98d7-2578a129e3da",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00d1e8f-7c1f-4127-80b5-9a95a437354c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc4969e-a09a-4580-8767-758f7c29a4eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50fe929-1745-44f8-a8a4-d3b563bccc9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f888096e-08a5-4b8f-9b96-520b653bcd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0d1f32-4f88-409a-bcde-12d329b86b6b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6482afb-e7a8-4fa3-a53e-3e1ad26602bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcf59eb-b2c8-455a-a331-34138e44ccfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ae75e9-73fc-4ad3-bb05-14966b638939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb28ee2-ef0e-47a2-a20f-145319c4d584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd90ff4e-6d54-43d5-85a6-7a2ebab8ea75",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ba42c6-49c7-4e78-b69b-163f1fa6a022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea284a08-99fe-4831-b1db-aad6c658c428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f66d13-430f-4163-9070-fa184536a845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f2fd86-c8fb-40d0-bef6-68371c58e365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5767603a-fbee-4cfb-aa20-874feb2bf503",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820e51d1-9fd8-4894-bd9f-1a9b5a7ec582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c47da28-0569-4941-96cb-4ba3c331aa6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b4b5c6-744a-4c79-a859-5c4acaf0f67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad338487-469a-4cb0-9bd6-80f23f5e2c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788ab596-b0e6-494d-be17-610315c8b977",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b32c219-9216-435f-b041-eeccc97784c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68344200-bbdf-4c0b-a935-fdf971d1f9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6ca013-3452-449d-936a-7dcef486e7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607a83ff-c0b3-49c5-98d2-3284b665ee40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b87bc7-d62c-43c2-85b1-c804e4808eeb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86a5381-ec1e-44f8-b102-cd8848b0aeb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c578997e-d09d-43fd-8597-66549b0eddb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c122b8e9-1127-4f8b-8e4a-c5eb84305e3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148a23e0-b57f-4d2d-89cd-37220f0f8c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c45d0c0f-ea90-4297-b1b7-fe8edc8ebf63",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09010754-ac65-47f4-a431-fe1bc2dd3594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f07959-f176-4553-95b4-5714e7f9210d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec2a138-06a7-4620-9662-68615ec0f0dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10aaf7c3-5e08-4508-9e59-ce79802b6c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3c1117-08bc-4bf8-b734-de275eed4a07",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55dc4ec5-61aa-48dd-929a-635b45591436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f150261e-14f5-493f-ad36-f17999099d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e33f4bd-a599-4750-8153-72d441dbb08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3fb726b-5378-4f08-8269-8b19b775ec85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2d6829-9aee-416c-8102-74fea9b82947",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75b25c5-71d7-483c-aefa-f2c4e4bcc46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f629b6-bb35-434e-922d-29a9efe19101"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69727100-20a5-429c-92c8-0d010f84e8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4021d910-32fd-4a1f-9edb-418a238c892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272bc32c-c253-4211-af81-b6de26910eb0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc39a91-65c7-4af6-aae7-0b836bb70dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41febe4d-e605-471b-86e4-0eb40a646dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c77f8cb-0389-4657-8c59-045039d469bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9174fb-657b-40b5-960d-5632250b8ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "103de35a-e9ac-483c-80c0-7d0605330762",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655c27bd-6503-4f03-b084-cd57721ac5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c11b13-a59b-487d-bab7-7c7d544c3efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0509d85-4e86-4d4f-83f2-cb92b62565e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01a920a-614a-46df-9926-142352712fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a990011-f078-4dc1-a21c-b819a6635a94",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820077fd-2dc5-4198-b2a6-8f3b39644e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2375ef5-b75c-4e51-a6e3-cb42aed1403c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63c9abe-485f-41a4-9e61-235b8068428a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d14be79-e76c-460f-9a28-0fffac65bdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963ee5ff-8392-4fbb-b19a-6953d523bcdc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c1d0cb-939b-438e-9296-a289ca0e8f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae0d0cc-cb6b-46ee-94da-a729c94df782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8def8f8-0308-45e0-8a7f-a1f60efe2208",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9d6253-f730-46c4-8aff-b0b2b8d5150a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c47090-159b-4eb6-ad05-8ccbd32af65d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa2aba4-f97c-4620-8542-fb1294f83ba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42eac91c-67e3-43da-b5c4-cfea91b92b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caca1030-ccae-43e7-904c-4334a39c6eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8b6de7-11fa-4b06-9a96-3da35bbd4cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5f803d-88ff-4565-bdd7-002c54e6437a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8db28c1-3efc-42c5-8f09-40fc2ecf25aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfa512e-f35d-4e1b-b84a-3a7a49056aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7982dc9-d6f6-43c0-b713-4a944b1741c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4876bdbc-13f5-44d6-8ad1-09a0b3919610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60ab1c2a-3fd0-4b51-99f8-d9d925f388e8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59795e0-f017-4c1c-9ac1-ae63238b7b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b11d8b1-6be5-45b1-bec3-d75c5cb5f3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdb3ea8-499b-4f19-b0be-3c2e10602ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e7eadd-73a5-4e3a-a420-63a73bebe1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd196974-fb24-4f17-a355-ebfd5ce3a316",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daad0cdc-0a28-4907-be55-156f32c90123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0aa0d23-2d68-4953-9cc6-c05e90fe1403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06b3928b-d087-4134-a7de-fdaae79f62c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60aec851-ac51-4873-93cc-85c1df790b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538836c-13cf-417e-8844-9348ef0c77fb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8b3e90-9f0e-433d-89d6-6a56166c1421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2c45fc-a487-4d14-b4a0-85d3a06671ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b56361-4f99-400e-b5e9-997891563d2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c3aa74-d850-4a7f-8528-d244de9d0daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246ecf5e-2727-42d0-8a91-f68246bc3fb6",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a92747-de57-4dfc-82b2-d5ad493ed022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf538e0-6a56-4604-9458-2c6b11f91d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70811054-7bd3-4900-a7eb-1928fa30c0a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae8febe4-4335-4c76-bb16-c5a833b3f5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e93cccc-7fd9-4ca0-8cc8-212a2b8bac4c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72405a6-5782-44c2-9128-b324913222eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "621888e7-e20f-408b-a1f2-62a54001ca63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9350cfd8-f251-415e-9efb-ab3951a92518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59a213e-4d71-4b44-a487-32b3df854774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdb74af-b256-41fa-a02f-8b6a8f45e2ec",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc8c838-b790-44b0-ba00-817692fff181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f26e251f-31c0-4853-89cb-1de3542ada2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d142047-beac-4941-b7f5-9cfb654ff45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cf40d30-3d93-4ace-a995-c70cf240b225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fb8053-af27-4496-8195-12eda9e536e1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886520ba-e7ce-43a9-b619-4e34e100c286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70992edc-2512-4817-8b93-2c4a74c75638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbc5983-f3ea-4c33-8dc4-1f4034315ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acb18d83-109e-4d45-854f-1d2eb46d17db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a98f318-55fb-47ba-a40e-f446bf4b58e0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ecc1ca-88e8-41dc-ad50-83cbe154abe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf4c62e-0a09-42f9-8be1-cb3565995207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dbe7ba-2ed5-4006-b84e-0d14c9995734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e0ad1c-99e4-4a7f-8c67-e6201e4b94f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c703c756-cfb9-4fa2-9356-96240c10bf5f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c0575c-b1e6-4fd7-88b1-f9e1067192c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f8d40e4-b3ce-4937-beea-085bd48d0329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6eecbcf-2638-4da8-b7c9-c2fdad279998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf5a7ef-848d-4115-90a4-d802c6a51053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a787d1-61b4-41a2-8862-610c1a9fbd94",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e254b57b-0caf-4add-aee5-0d89b8965efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308cc9f6-571f-40d8-bdff-ea9a90215591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9919b5ed-c59a-4049-82c1-d15d5ab458cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72db5ac9-6ab4-4727-b7f5-e4d4b3d4059f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e353412c-215d-4be8-9e35-3ab489e79596",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6289fec8-4376-4a3a-a71e-ac81e79cb777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758bb118-1ec1-45f1-9334-3b79a789d57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3eb6d4-65f8-4289-8034-84c9a27666e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d92180-5438-4c3a-b26d-9b92323b63f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf1b53a-7d68-4491-a594-a86e57f2bebc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b850fd-f0fc-4beb-802f-1f8e52534098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83d0c38-cd59-4952-a920-6aa1d3843475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7150ec7f-65d0-4a1d-b3ca-ef78ee24dc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e92b922-7b95-4711-bb12-4ffcc58810e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5cdd3c-1688-4531-8e8b-6456c9908922",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7111eaf-0fbd-4d41-8e0b-ac98d19f7e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0e5075c-0594-4246-a65c-1870af260f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d00ce4-2063-45b7-b53d-1a97378a7467",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8cc7fd-385c-4d6c-b5fb-64ed90698458"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ebb7f7-d620-429c-99c0-edd076466c5a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11442916-0022-4a05-a0e2-17ae01bf638e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e346960-efa4-4288-8587-9cf18920d0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40743a00-7cd5-4c0e-86d9-98570551bb98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b7b810b-ae55-4110-87a9-fdf6a1e398f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20bf7bf7-72df-4d3f-b821-d58253700764",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba4dd7e-17d7-420e-902b-b3b176838498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f06fabaa-6f04-479e-8289-1d2a2888fe12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c275c25-03b7-4bca-ba21-c48ee32a2c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44a9cafb-70d0-44b9-ae83-2b261771c276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "564922ca-560c-4bb4-8b9b-88b39e67e733",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10779555-0922-423f-ad3d-79f00b644831",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcd6247e-6a23-44fc-91a6-34c2c9d86361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "874fabd4-7dad-4957-8334-77b1ddc1aabe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5597fe-f89d-462e-880c-574874d95aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701b1fae-c8d4-459a-8ccf-8b3e5309cd7b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674d2cd6-cc27-4733-9fc5-70b6ba06bfc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4153e31-7018-4372-8a40-4ad766d709b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e06d1d-decf-40c9-83d0-b33d9125f0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a59185-ae77-4682-a7b4-28be74f89082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cd5ad4-05fd-4233-a247-3ea21df1ae00",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03cc1d7-8f2a-49a3-985c-d639acbcce77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d6cc694-1571-41c1-aec8-bc861172d0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f0edf6-bb9c-4603-863c-6d10d31a904b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e314bcc-b59e-45f5-8b50-2adcc5a1c801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347ffe3a-faf3-4196-b5d4-165bbc88754a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f600f584-1efe-41ed-ab69-663fb0f5d2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c84648f-8b64-4402-9c8e-9d2d7480926f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10dfa73c-fdce-43bb-bb14-dda5c089ead1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182d7152-bc8a-4238-9d39-0cad38040175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c0b196-e9cf-4ad5-82f4-79b69ca3f62e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b721be3-4ddb-44e7-a580-c136e09376b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb333ba6-e2ee-4b87-9fad-5c5d1c84bb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed3088e-6e32-4ee0-95cb-5307fe4afb93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b622b1-4553-49fd-ac18-595e866581e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1542934d-e8bb-40e6-98fd-705a74cc072e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c83c5e7-c4da-4ac9-8641-4a0e4e3a6516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfe89c47-cb99-41f4-b64a-51c2eef39dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35593eb-e3a4-4716-8d94-f24d971b5aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f2c8839-39d3-4ffe-9621-66ebe6bff75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4df87d-d2c3-45d3-a600-a846425c7526",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82d62bb-73d8-4309-a394-794a1a1c7d64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16d87ba1-289d-4563-a102-8c375fc83790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c48759a-b563-45c9-a8cc-d678f128a39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85e61de-7d47-4a96-a088-bd5ec66fa263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687a69b8-7bc1-4c52-a513-c1c0ee47aea0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ff371b-6616-464f-bbdd-b46a18befd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77c04162-53f7-4c92-bd49-c2d2a8bb94b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64339112-e4c4-4939-9e2f-822b09e142cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b374f577-183c-4b0f-afc0-a389b92eef58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b08b61-ea7b-44f4-bd04-c32c44dff96f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8c8cb0-e7c0-4654-9a1d-a75e76d9bea4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3250fea-8fb6-42af-90c8-e82123dedb09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d65d4ab9-fe92-45db-8a26-f39c2428579a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470b8b75-6813-479b-8a38-bd29bbe6ea6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83336f65-0099-40a2-ad9d-0bcfbb949bae",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb7f754-6e21-4196-b3e1-715c8474de0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2772835-f7f9-40a4-9792-967b4eaf6d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ac9ca3-5674-4a8a-ba17-bae72806bb43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c2a324-6c8d-457f-975f-cfef00511cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9958827-328d-4589-b868-2ce4b3f95eab",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98325c12-89a7-4a26-85db-6a2b0638ebd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe7309d-61dd-45ea-9512-e06ac31d110b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c7d07d-7996-4d74-a692-f22ce85611e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0567b1c9-a9e1-4e34-b92d-c00c80b31dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ac5f81-0124-4d65-a72f-1497952828a0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea37a11-87d8-4c5e-b3a8-92b24d6a2054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "570b5cc2-644d-4d74-ac8f-10ec515fb3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bc5521-7e46-457a-898d-3775831cea22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac4ad7e9-ed4d-4127-a68d-ea56452c151f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae69a5e-0d0f-4963-a945-65b5d94331f0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a9122f7-ebf5-4219-8dfe-7dde5f20a267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c046c6b-0dcd-436d-abd3-b85aaa2184ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3fdb30-5180-4c20-9912-d36811dfbe4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e95bcc8-a672-44a1-9f7e-22ba33df0de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880b1051-9d47-4b9f-a9ee-93a9e24d381a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288f2dee-844e-4863-993a-48e744d8b8cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac36cb31-5e90-4666-8dd7-c831c6fd0274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f074958-27cf-42d5-903f-2ac5c379a5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4543fb07-2f1e-45a1-97d7-f0f6966e18f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d329a50a-a3b6-4f0e-9e75-7edf87c7ad1e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152a88d3-c903-49ae-b328-16e9cd4b6afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03381e4-0f70-43c0-9959-e02df005fbc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb90f43b-cc28-4731-829d-3efdcb11209c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5903d6c4-7357-4820-8caa-c9fcc0e700cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8258194-71a3-4631-8285-dde4ea7cdf27",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c3cb17-c2e4-4edc-bcec-4a17799d29c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af1eddef-0964-426c-833e-eab662ffafca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33ed8c9-335e-4d95-9d6d-f9476a4d4303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7404ce-38db-4ae3-ad88-fb15604d0026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8420fe91-4bf9-4f1d-b66c-93d63f146ec3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a7b260-996f-4988-95df-479e0e8e77fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e9481f1-3d76-4788-a045-02b2424538d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afa77f48-1606-408a-912e-4001a310e5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3279023-8498-4b79-bbda-25319815a73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3270cef-b0ee-4dcc-bc45-5d3e04fec798",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe803490-3c1a-4221-8ccc-53ba1563f194",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12eeb867-44e4-43a4-899c-01c1101a484a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f77312-b7f6-46b3-ba7f-f667a18ee778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b12885-38d5-4edf-a78c-37cac3384a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b638c0f5-599c-4d88-a972-ec6010515113",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a320d3ff-e53e-4bc0-87af-2ac2af4c52f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beceff89-c4d0-4d89-8551-31101427e200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddf81c6b-01cc-43c1-8491-39e84aa321d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b72bad15-0a12-4136-8abb-385adc667556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeed9f3-edd7-4561-afb4-1ac0cf763320",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8488e4f2-e367-449a-8ec2-31f75b502afa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7cf3c40-87ff-4e85-ae50-fe9c55481414"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b22cf67d-f2a4-473a-aaf1-9639b17900ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d147cd-71f9-4cf4-9893-7ecd81f9c9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fa7523-e736-47ec-afd2-cc49ad8d606b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68ddcae-bef4-41d4-a18a-f9b88035cdb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e6be2bb-1e9a-4fea-a70b-a8d3272bd2f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb4ae3e-30c8-4246-9837-f4562cab5a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca9959c-f761-430e-b49d-6628664ede7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25e063a-6e20-4a63-ba04-a511156c0e36",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9fca08-75d7-42b9-aa1a-9f768d384806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a26b064-4848-4503-a040-fbdb67eef390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6cab18-b2b2-4852-a644-4d769bf8a0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2a8cf7-8277-4a9b-a7fb-c5ce10012599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ae2ec8-ab4e-43a7-a939-d27598106d6f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bbe484-9e27-4ba7-8aa7-9f7c4346c9f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33e110b7-c39e-402a-b538-8436edff9de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "369845c6-fe6d-42df-939e-f9b6234b495a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3777ce3-eeb5-4f46-ae61-7ef17292ef0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3a0bea-1f32-4759-ac8c-5bbb69bbe518",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f1187c-32f7-4dc7-9391-fb7ddd310d2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "610f9645-0442-4405-9fcf-5e3698930e39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1157d6-fbe1-4532-adb4-65b119c71b04",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c6c689-ea04-41ad-817b-e9e0db5b6939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3647a498-2bde-491e-a531-b5ce331c9cc3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08840010-fde6-4e11-93f8-f3d691f17459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b379389-d91c-4981-8e20-af8bfb82cb60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a7af35-1b19-48e0-832e-a7495e4b2156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59857196-a7e9-4486-915b-57ac96b027ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fb9ff3-f3be-40e3-9fc0-3e4caf122392",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484b02eb-4ff7-43ea-906c-0494fa4a87bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22894803-59b3-41dd-8ef2-2a59b871a6e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ebbc48-1115-4ca8-898a-c64d1b5c70f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4213b224-864b-41da-b07f-47bc30faa365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe202a20-af2b-4100-b8be-e290cb8ab57d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8f7ac4-663d-48e2-a04e-3b7efe1f4bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5746e3b3-331a-42ea-86c8-a20ce922ec0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f2193c-be11-441b-9e99-613070145184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63deec60-0e31-479e-8d1d-a97ba5da83c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480c6a59-a001-4b48-a384-60f00299d909",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7201eb8-68fb-484d-8235-3ae97786781d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1b5c948-2474-4fc8-83b7-913937160bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd074c96-e3a4-4671-ae3f-ff48e81fbcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a281e7eb-3399-4a33-aace-05630f26aadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd942c3-a2fe-44b5-8d4d-0fb7d1229033",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def846e0-ff8e-4ac8-a47b-a62b775207e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a472cf5-081f-4a21-896d-8bc0f4d825f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5af232-d7f2-41be-88ed-e5ce94e17937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26703b25-fbe4-409c-893a-edd2218c44aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efeda97b-55bb-47a7-9d4b-1c201f2603e7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afce689-71ab-4a43-8ae8-49792f19b20f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af13c1d7-c924-4261-9f41-64057aefcf55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c3ffa0-e98a-4bb0-a0a9-b57c06b15f6d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d217e3f4-da7e-447e-ab04-0f9110b1e909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e163ebdb-aca7-4aa7-a629-caf200cc2836",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d542338-cd46-4c58-987f-0b53f54559f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc6fce56-befd-420f-a91e-d4c5643d9bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d278be1f-621e-4a3b-8630-01ed336128b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cf1135c-b89c-4fbf-9d01-a03c8bd2481e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8440d76-3aae-417b-a502-a72b59e3d078",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "65edbdc2-cdd9-4739-b522-65c59d743ddf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0c5a77ff-2e93-40ec-9346-5039d2a64e20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "729d5845-8186-4d80-bd0e-ce21bedbe528"
                    }
                  }
                ]
              },
              {
                "id": "b3c16b0f-0942-48a8-a7da-1dba81e272ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7511857-6c6e-459c-8b5e-0db5b5f57679",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35442fb-6baa-4396-ab94-d648bc49b988",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "def68f16-fae1-40a4-abfc-d2a8b078513f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af4d433-8b48-4ef3-ae73-68e3efc8deb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7864399-90e0-43fd-b0ca-a194120325ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90d0bf70-c051-4e9d-9b46-b09a2747ce22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2418c05-1f7d-471c-9a21-8d8160773835"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "add5db60-f87e-4141-abec-fedfee00d118",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d3bd6e9-cf2d-4a8b-b5a7-bc5a3fad16af"
                    }
                  }
                ]
              },
              {
                "id": "3e8d5f5b-81f9-453d-8898-c9e5d129393d",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "09e5254b-e619-493a-8f5c-472232bb8419",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d47060e-ab21-478d-9847-6bc585876f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e7fa03a4-b584-4159-8c62-fe74811f8cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccb9eef-e318-497c-a92a-ca0c9603bf63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4991ad6a-8470-4a3d-90db-9b7c1fe8257b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc2d5c18-414b-4d2d-ac7f-31d3c8125404",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70538e11-65a4-4577-bd34-9570a4c3fdbd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0464dc75-c0d5-451e-824a-7a970d1ccb19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "946b2736-a1f5-4b64-9965-629e52fc7a23"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc093ab3-301d-4e32-b695-57ee156002f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c51946f3-c5bb-4616-bbe3-af1027517e25"
                    }
                  }
                ]
              },
              {
                "id": "6d7d5cc8-441c-482a-ac9e-ba335c60afa7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28cda48f-83ea-4f23-ace4-aac4f61ecb5a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5cec615e-8e58-4071-8456-41b06e421c7d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18dc1fe0-a0e0-4b0f-bae8-a61963446b58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ece2a0d-e346-4ddf-87a6-db69911dee45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f50957a-b802-491c-ab01-0db1992520ea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "16002488-799a-4355-8a7b-0491e28188a5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a42893c7-85c4-47d8-bc50-4fb7d683e6f3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39ef4fec-020d-4f38-8c58-42477d38993a"
            }
          }
        ]
      },
      {
        "id": "d3787069-df2d-4e0f-a253-0181566ef57a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2072a37b-f02e-4c7d-8741-a3fed24f73ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00dff683-44eb-40bf-b542-3ca19dd15a8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7ce64da-7a5b-4ef7-8be9-bac0a030f61b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e38159b-ec85-47f6-9617-bcb24bbe33a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b8997524-bf4f-4378-94a2-8905b77d9380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7e635f-5cdf-46de-84fc-17bce8acfb17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26ac66a4-8e19-4cba-9596-f94a2d919277"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a603b3bd-b282-43ed-813a-ac5a9ed43acb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f7f73bc-35b8-4aa4-b49e-17d35a3e82f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "183d022e-4d99-4af7-ba21-1bccde2a078b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9719b682-41ec-4d33-9074-069d2fd06f50"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45dc2265-6319-4a61-a58d-66d3bf305b18",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d487b701-8cae-458b-8992-9243b3a3228e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c65d33de-54d6-4631-af09-9ceec686bffc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1054565a-a2dc-4a0d-b864-0de144e275ec"
            }
          }
        ]
      },
      {
        "id": "98c3aeb1-e9bf-456d-ac04-8f6b858e3708",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "86cdc5ef-0372-4525-b1c1-7928f23e5683",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56f2726c-ba2a-4a36-8c8b-380bc42e319f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc907c18-f164-4655-9afd-edfeb0c36d13",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92550cd7-532a-4b83-867f-75ed73acc194",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3054a594-c4c8-4f4d-b26d-f1959e259dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44d591c-659e-4c3b-8c9e-c06adf91093b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38e3f1ea-c352-4fa5-8c56-42128fd9297d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8467e454-100b-4573-970f-1e917dd23db8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc2fa606-b64d-48ab-8fa7-b7e5fac2122a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9424d2d-da9f-4d29-80cb-8da331b52b32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "999a89c9-8f07-46f7-8ced-c11847756671"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e808f402-78ce-4833-ada2-86f42a3fe8ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dbd592a1-519b-4226-a7be-c6dff6fbe25f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a46c1b2a-4072-45ce-b7d9-fda7825011ee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "987d8567-ca5a-4fd9-b602-9b6e899d7bcb"
            }
          }
        ]
      },
      {
        "id": "c982b642-7dcb-41dc-9c1d-5da19284be41",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b1ddaeb0-2f6d-4e32-bcba-8938ca1f5e79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "147e5eb8-3d5b-4c1a-8dd9-adcbbce0a93b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a216ee6d-146e-4045-bb29-71f89cc78c8a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac57692d-e2a4-438c-8b2d-9cce99b62a0a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f90a0dd-6f2e-43b3-8761-a7442c27b846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa9ea53c-407a-407d-8bdc-f0d5df608f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04e92b5a-b449-41fa-85d2-26bfd1c53939"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "895ac6c2-33d6-4b86-90d3-a9edfdca5f56",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6fb00fc-79e7-4756-8ea9-0f0c23c0cd26"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab373c16-b65a-4a0c-9b82-5edf87412e4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6006f936-9921-4b5d-857f-5d732dc6fc52"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a7e23ba-d38e-4b95-a4d8-0200c87e2590",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bcf31316-4864-4192-ad58-9aeefb609c80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "513ba546-a286-4889-970a-a91e245ce047",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "199b229b-84dd-4227-8adb-1cd7b358b1d9"
            }
          }
        ]
      },
      {
        "id": "75c32620-9e1c-48db-92ff-a9901ab8a0d4",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1628b568-a440-4dc6-a313-1fd88126fd1b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "87f21ec0-8982-4228-92d1-c8754975cbb9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e43c3049-f9f1-4c14-90e3-84219fb5823a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "420252a2-be10-4554-b25e-1bd9112dddd3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb4c4927-1ce6-456a-9c83-f5a1a81ce24c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 76.37698412698415,
      "responseMin": 10,
      "responseMax": 818,
      "responseSd": 85.91526802491748,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719621461259,
      "completed": 1719621488943
    },
    "executions": [
      {
        "id": "310b4d66-9ee9-4d79-ae6a-90dc6cce9af4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fe47801f-1b26-43e8-a1a7-4bf462841ab5",
          "httpRequestId": "d4c4f014-3139-42b3-be87-cf5d7803f6c6"
        },
        "item": {
          "id": "310b4d66-9ee9-4d79-ae6a-90dc6cce9af4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "394c6060-328e-4c68-b54c-dfc95145e7ee",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 0
        }
      },
      {
        "id": "cc747674-329d-469b-b05b-9e31aefa03bd",
        "cursor": {
          "ref": "0732b096-1975-4153-a6e2-365863f176a0",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "41647910-c4d8-40b7-af7d-8e219b9c087a"
        },
        "item": {
          "id": "cc747674-329d-469b-b05b-9e31aefa03bd",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9096de37-8f37-4c5d-a1c2-595e589e394f",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "38019977-8f1e-4f2a-8ad7-cd9e6364875c",
        "cursor": {
          "ref": "799e62d7-cf06-4bb0-b84c-a56b4ce9f763",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "96ffe4a6-584a-4cee-9d06-1f04f80c69bb"
        },
        "item": {
          "id": "38019977-8f1e-4f2a-8ad7-cd9e6364875c",
          "name": "did_json"
        },
        "response": {
          "id": "b2ec7a7b-b229-4cea-9f37-0855b6fd1f12",
          "status": "OK",
          "code": 200,
          "responseTime": 288,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fef7511-6177-421e-b774-ecab74279126",
        "cursor": {
          "ref": "731895dc-123a-485c-a4e5-5c651dfb83b8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb685d57-8b6e-4b4b-a2ca-2a4b082c6e82"
        },
        "item": {
          "id": "0fef7511-6177-421e-b774-ecab74279126",
          "name": "did:invalid"
        },
        "response": {
          "id": "b3406cf0-6791-48ac-8f04-cbf7f786f7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fef7511-6177-421e-b774-ecab74279126",
        "cursor": {
          "ref": "731895dc-123a-485c-a4e5-5c651dfb83b8",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "eb685d57-8b6e-4b4b-a2ca-2a4b082c6e82"
        },
        "item": {
          "id": "0fef7511-6177-421e-b774-ecab74279126",
          "name": "did:invalid"
        },
        "response": {
          "id": "b3406cf0-6791-48ac-8f04-cbf7f786f7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3aaa7ec-bff7-40f9-8fe3-a28b654124f1",
        "cursor": {
          "ref": "c92a7c5f-cec4-4741-bfaa-88444d014994",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e9d7f763-de61-4ec6-bad2-cf07a7f82c15"
        },
        "item": {
          "id": "d3aaa7ec-bff7-40f9-8fe3-a28b654124f1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fe691298-8f4f-46df-969e-7a1092dbc6fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45e1c0b8-4176-4a9f-939e-7329d5452fbe",
        "cursor": {
          "ref": "7a598d36-5595-4a45-9f67-9e79c0fa8bc5",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "edb9c0c8-c945-48ff-a770-d9f28a15c37c"
        },
        "item": {
          "id": "45e1c0b8-4176-4a9f-939e-7329d5452fbe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "26c41c9e-54c0-403b-bda3-6a8e8facc389",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3a40f-60a2-4b07-8600-86a1330194af",
        "cursor": {
          "ref": "52ddf730-57d8-4a3b-908b-7dd139586b6f",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "80b5a1d0-b6c1-44e9-9d7f-e049463cab36"
        },
        "item": {
          "id": "d4d3a40f-60a2-4b07-8600-86a1330194af",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "23f18451-151f-416c-b72b-fa6682c2b498",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3167a8-9aad-4b05-9678-3259f1f33a6e",
        "cursor": {
          "ref": "48d759a1-7b5a-4586-931a-6fa9616fc0d1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "215f6484-2347-4387-831a-877e654c6061"
        },
        "item": {
          "id": "4a3167a8-9aad-4b05-9678-3259f1f33a6e",
          "name": "identifiers"
        },
        "response": {
          "id": "657b884f-5c6c-4f01-b289-711099d41c8b",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e1d1dd-3767-46a1-9c7b-660651ca92f7",
        "cursor": {
          "ref": "6c88baf2-4ee6-4aec-8713-9bdfb9e8f3f9",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e1a3d6b7-284c-491d-963a-21a2c643fc99"
        },
        "item": {
          "id": "d6e1d1dd-3767-46a1-9c7b-660651ca92f7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "32ecc62d-6160-4cb1-89e2-f50132fa6dd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b300104-8d55-42fb-95bf-d7ff130e0e07",
        "cursor": {
          "ref": "da5a2242-f922-45ed-908c-45b2ec716741",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b3f9da9c-6a66-44be-b694-a2b3b1579253"
        },
        "item": {
          "id": "4b300104-8d55-42fb-95bf-d7ff130e0e07",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0d4db930-d7a4-4484-8dac-a1a41d1ea4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ba607e-5448-4fb1-be4b-07dbb671f89e",
        "cursor": {
          "ref": "05d57b67-4325-4be4-9008-c6751054b045",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2621ae99-f123-4fdd-abef-f5053a71c6c9"
        },
        "item": {
          "id": "e1ba607e-5448-4fb1-be4b-07dbb671f89e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5435b732-506d-4844-ba39-8083c061cdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9277a32f-0d18-4d50-a066-8fe1cfdae6de",
        "cursor": {
          "ref": "b96a29a4-02df-4ca4-abf2-f177e8794083",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "57076d55-4459-49cd-924a-3fe1b9054135"
        },
        "item": {
          "id": "9277a32f-0d18-4d50-a066-8fe1cfdae6de",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6d611a6d-3d79-460b-8677-67faa31ac136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea8bec9-ac10-4665-9900-45019047b8cb",
        "cursor": {
          "ref": "630374e3-214b-4b0a-b638-ad599a82adc0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2e542294-9a2e-4972-a123-7cf97a7d2301"
        },
        "item": {
          "id": "fea8bec9-ac10-4665-9900-45019047b8cb",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "74e3e71d-bd71-4a99-aad6-a98976cba9fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e2a314-47d5-464f-85da-1f43bd81c13c",
        "cursor": {
          "ref": "4c0e2c71-7213-4818-9851-aa0eca327bad",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ae62c267-fafa-4819-ae4d-25cea2eb01bf"
        },
        "item": {
          "id": "63e2a314-47d5-464f-85da-1f43bd81c13c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9dda356e-1af0-4b29-8d34-a4a818d8d2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13031ae-356c-4df7-9e37-42cc1678e8c9",
        "cursor": {
          "ref": "322d4765-ab0e-4853-bad3-2abc648b86b8",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7e846b19-c3c6-41ca-b6de-b76e95774446"
        },
        "item": {
          "id": "f13031ae-356c-4df7-9e37-42cc1678e8c9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "24e1551e-bf5c-43f9-9d32-a341e2e97f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042dd5c7-b735-47fb-a94b-c1e099231510",
        "cursor": {
          "ref": "2a5d60ba-c30b-478e-8d1a-1ed13a36767d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fa59c5a2-e604-4573-b4b2-903c34c5674c"
        },
        "item": {
          "id": "042dd5c7-b735-47fb-a94b-c1e099231510",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5750af11-06fc-4c57-bae0-282f09a73efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be578f7a-fdad-4d47-a29e-cf69ba7400aa",
        "cursor": {
          "ref": "24cf408f-c14b-415d-a06e-5cf623a5f98b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6d6851dc-d64a-47ff-85cc-bbf0fee0eb06"
        },
        "item": {
          "id": "be578f7a-fdad-4d47-a29e-cf69ba7400aa",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d1fbc57e-edaa-4284-a35c-aec946d02599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48e3c48-653a-4a24-ad6c-9806a37f22a2",
        "cursor": {
          "ref": "a38ee581-4015-4ff2-903b-7946b29f6b1e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "902bc6a9-62df-43ed-9719-164fbdebc779"
        },
        "item": {
          "id": "a48e3c48-653a-4a24-ad6c-9806a37f22a2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "98e5e470-8a9a-4d90-98e2-4d12b9706441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8253e5-d1de-4be3-8c68-11aa056f312a",
        "cursor": {
          "ref": "9f177322-4b0e-4fce-8c9c-9379ac2c6b97",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e1456d0b-268a-492b-8898-d15c38a47e9e"
        },
        "item": {
          "id": "aa8253e5-d1de-4be3-8c68-11aa056f312a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4068f188-16c5-4f34-8b03-2fb61b8095fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a3805f-8730-47fa-8286-568349ebd512",
        "cursor": {
          "ref": "fbf22899-2704-47fd-b8f7-d3144be48d05",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "86073cbb-af75-4a66-9fa3-3d333167743a"
        },
        "item": {
          "id": "07a3805f-8730-47fa-8286-568349ebd512",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f797c6a7-728e-4b4a-9d42-2fc01af28482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316056af-a0e8-4e31-8bfa-fc933ccb834d",
        "cursor": {
          "ref": "b017d073-1baf-4a77-8f12-c4d543322c89",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "830f8580-123f-40e3-8ffb-212e74b661a2"
        },
        "item": {
          "id": "316056af-a0e8-4e31-8bfa-fc933ccb834d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4a8533a4-13b4-40ef-b6b7-0cdedb2f1fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbfef56-39e0-42c5-b64a-7c25f3cc5368",
        "cursor": {
          "ref": "5bb87178-e074-4a0c-b0a8-7d625d5a0347",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fabefdc8-69be-4bae-9bf4-7343838dafeb"
        },
        "item": {
          "id": "ffbfef56-39e0-42c5-b64a-7c25f3cc5368",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "110d965c-a24c-446b-9614-acab5b75257f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7ea3ff-2264-49c6-8cf8-eb4552efef0c",
        "cursor": {
          "ref": "47c0cb1f-7c12-478f-bf6f-25462f156746",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f02b9cd5-a6e2-4578-a824-7605b67d143e"
        },
        "item": {
          "id": "ff7ea3ff-2264-49c6-8cf8-eb4552efef0c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cd9ec68c-c80b-4c0c-af4b-d1e42cc07030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9826e20e-3f5c-49df-bbc1-a4f6437fb3c2",
        "cursor": {
          "ref": "66637acd-866b-4a72-ac43-fccb44d84151",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "32bfa280-7412-4cdd-9a24-f31a1a7dfb0c"
        },
        "item": {
          "id": "9826e20e-3f5c-49df-bbc1-a4f6437fb3c2",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "8341c0fe-a6f4-4dfe-a779-ea45ee9dacc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5285d057-dd56-4c76-ae5a-2ee4a0522ed2",
        "cursor": {
          "ref": "dcfb7ffb-ebc3-46a0-9314-08e4bb837fad",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6c7f4308-3ccc-4823-856f-43bddcc47c24"
        },
        "item": {
          "id": "5285d057-dd56-4c76-ae5a-2ee4a0522ed2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33b4dbcb-4633-4993-ab3f-806d42fdcb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f660789-07e7-4553-a9e4-4ecf331db0f0",
        "cursor": {
          "ref": "b94fe24e-7b0f-42ce-b434-371dc13b6034",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d8aee033-6d7b-4a7a-853f-52362037f8b8"
        },
        "item": {
          "id": "3f660789-07e7-4553-a9e4-4ecf331db0f0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a955c2fe-1cb7-434c-b6fa-ab1adf1a6dcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cf880d-a70f-4f4b-bf32-a9d5c7d31a3e",
        "cursor": {
          "ref": "9449fe61-9cc1-4231-94ff-e5f77e152989",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "1ed77510-06b0-4f08-abe8-1e3875607836"
        },
        "item": {
          "id": "63cf880d-a70f-4f4b-bf32-a9d5c7d31a3e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2a02f530-c1b6-4884-8068-608876d8e1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823d80a3-7edf-49d3-b31f-bd324d45198a",
        "cursor": {
          "ref": "39b2d31f-2867-4ebf-a842-dcb632d07c4f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "958a823d-40fb-4922-8b8d-a390e18992d3"
        },
        "item": {
          "id": "823d80a3-7edf-49d3-b31f-bd324d45198a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cf9c5ade-1d12-4fa8-96de-3555a0c01cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45403c0c-b4aa-4ae1-9f33-0bd8a775a364",
        "cursor": {
          "ref": "0defc383-2dc6-44d0-9b46-328038dc6c57",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4dd8bd6a-cdcb-47e9-9080-54e46d1654de"
        },
        "item": {
          "id": "45403c0c-b4aa-4ae1-9f33-0bd8a775a364",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0d9d18ea-bfbd-4b91-90b8-b7f02e669483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22bc7c6-55e5-4ea7-86c9-a476fa6f0aca",
        "cursor": {
          "ref": "ecc8c3ca-7f58-466a-b4d0-5a8917a05ce2",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f20f9d0b-f3c2-4fd3-a4db-99bb7500a49c"
        },
        "item": {
          "id": "b22bc7c6-55e5-4ea7-86c9-a476fa6f0aca",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3ee35f74-f149-42d7-aaa1-9a12e32fd2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ef41d3-337a-4bb4-a755-acb3a7be0a4d",
        "cursor": {
          "ref": "833b1d63-d7b0-45eb-8eb5-89726d41050f",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3084bf95-2b22-4c58-9a02-c6b836fb5047"
        },
        "item": {
          "id": "99ef41d3-337a-4bb4-a755-acb3a7be0a4d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f92a0fe8-547f-4428-9ceb-6390ec1ecae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babce9b7-a132-4e9c-b811-04aa610c92f6",
        "cursor": {
          "ref": "9965afaa-dd6f-47e3-b683-4e52639aa187",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "27ff2ae5-e301-457e-a185-a12159cde28d"
        },
        "item": {
          "id": "babce9b7-a132-4e9c-b811-04aa610c92f6",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1c1557b6-0602-4d83-9b73-b8815c67340e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21557baf-ee63-4dfe-bf7d-44fd9cf89098",
        "cursor": {
          "ref": "eb9c4798-a13d-4bc8-92eb-c2ed433fd52d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d96bf30b-7339-425f-b58f-15c57b15c6dd"
        },
        "item": {
          "id": "21557baf-ee63-4dfe-bf7d-44fd9cf89098",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "cdac4712-60fb-437a-9902-dcf3c5ab274a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6b1afb-1e61-4e8c-9a9f-0277e6069d48",
        "cursor": {
          "ref": "4ca01d78-74d5-46ff-aa71-b2ba8fc1af06",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7293ea04-d025-41df-843b-76596d6f80de"
        },
        "item": {
          "id": "fd6b1afb-1e61-4e8c-9a9f-0277e6069d48",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4767f6fd-c12c-4043-be25-277ac8de019d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f468d890-4725-4089-a77b-0c98403d3ee5",
        "cursor": {
          "ref": "971931c7-a2fe-49e3-ac1f-a0a52942eac2",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1319ae54-e5de-4376-b6dc-fd39a820bf07"
        },
        "item": {
          "id": "f468d890-4725-4089-a77b-0c98403d3ee5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "328a11e1-d897-4871-99c4-d32a99a4e866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88afe0b3-7ba5-4209-85bc-0c5126c52805",
        "cursor": {
          "ref": "a860d06c-d6a2-4011-91b7-bff1af3d8292",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "029e332d-b8b8-4b96-8f52-b687373ce567"
        },
        "item": {
          "id": "88afe0b3-7ba5-4209-85bc-0c5126c52805",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f19ea8e4-49a5-4399-b99e-10b9be8e4206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba847e64-9b7c-4960-9c3b-e366a9f87daa",
        "cursor": {
          "ref": "d467ed54-d729-4062-ae8c-f512945095cd",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "71290e69-ca05-4a0e-b410-6ad873e970aa"
        },
        "item": {
          "id": "ba847e64-9b7c-4960-9c3b-e366a9f87daa",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "77b6a5d5-4de1-408b-8f12-45e86db032a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf5b28e-5148-40d0-a208-52e4f67771a2",
        "cursor": {
          "ref": "0c7d8eee-3fbc-4833-a7e1-93f8e503feda",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "49a26c32-0889-473b-aded-9cbd562558f9"
        },
        "item": {
          "id": "acf5b28e-5148-40d0-a208-52e4f67771a2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0159bbf1-974b-472a-8ca1-c7cb3f205137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4722b5d-f3d4-4daf-a3f3-0af1b329e0e1",
        "cursor": {
          "ref": "f4a8cc3b-5600-4c14-a899-15375a13a03c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5cf3b376-2b04-4071-a260-f3acba6530b9"
        },
        "item": {
          "id": "e4722b5d-f3d4-4daf-a3f3-0af1b329e0e1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0b4ecf71-f881-4f63-b985-e0c3457bd0ba",
          "status": "Created",
          "code": 201,
          "responseTime": 818,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "81a03f06-f884-41ba-b550-a147b5c7436f",
        "cursor": {
          "ref": "6e6243e6-2ddc-4aa6-93be-1aa13b558a24",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7bc0f385-7062-4f67-9daf-80741c372fa0"
        },
        "item": {
          "id": "81a03f06-f884-41ba-b550-a147b5c7436f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d3d1cd3a-021b-4c30-a5e6-a8d6c0fc3cd9",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "385e7b35-2994-4dcd-9ddf-edc31fb42269",
        "cursor": {
          "ref": "777c7f61-590a-4237-9f15-87284413934e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cd31161a-2065-4b65-b67c-1e3a173aeaa7"
        },
        "item": {
          "id": "385e7b35-2994-4dcd-9ddf-edc31fb42269",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9c183f1b-a8a0-449f-a4e3-ebe5a20c50c0",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "8fad272f-795c-4928-a419-a01718c781cc",
        "cursor": {
          "ref": "dbf37f6d-b697-4a07-b983-704db5ed5601",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4971cba5-5563-444e-ba14-56ed373db691"
        },
        "item": {
          "id": "8fad272f-795c-4928-a419-a01718c781cc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d1193a64-0293-4c83-9904-4538e9e596ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9798b64b-e2d7-4581-8e7e-dbd8fac5e285",
        "cursor": {
          "ref": "456bba40-b0a2-4e66-be65-7ccd7f628442",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9587a7d3-2a0b-4582-85eb-5065446ded13"
        },
        "item": {
          "id": "9798b64b-e2d7-4581-8e7e-dbd8fac5e285",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3013c03e-2033-4dfb-bc2d-69c4e27a97e0",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "dafd735b-400d-4f86-a966-e3dbfb41ac85",
        "cursor": {
          "ref": "ed715c66-92f4-4b35-94af-5b9e68a6fc90",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fbadf027-db88-4cd8-8d29-801d3f33598e"
        },
        "item": {
          "id": "dafd735b-400d-4f86-a966-e3dbfb41ac85",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "23b42d2d-bfb7-45be-be2a-29cafcee505c",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ddbf1560-fec9-46a6-a42f-e709c44d0dce",
        "cursor": {
          "ref": "404a4a06-29ae-42a5-80f3-a9460b91f63d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bbd83919-47bd-4f5f-8f9f-1c065b27dd6d"
        },
        "item": {
          "id": "ddbf1560-fec9-46a6-a42f-e709c44d0dce",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "69ecc003-0a16-4683-bbc9-d986730211d3",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bd172294-451d-4928-95c0-732a5fd8a9b7",
        "cursor": {
          "ref": "2c8223a6-29c0-4fea-93a5-b47ddf89e90b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "edd19d48-f0fa-432e-8e89-417281d633fe"
        },
        "item": {
          "id": "bd172294-451d-4928-95c0-732a5fd8a9b7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1b243fcb-6754-41e9-9a27-b6d5eb18fb61",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "de7c9716-a037-4447-938b-13073c6bdaa7",
        "cursor": {
          "ref": "8e9de0ce-21e8-4d28-bf02-fea71a6d93b7",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "34f177ca-6f0d-4051-b94c-87c5d1f39987"
        },
        "item": {
          "id": "de7c9716-a037-4447-938b-13073c6bdaa7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7aa31770-0d26-4c61-9948-b7b2e45d02c0",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d34cf85a-c4f0-4441-9dad-9da84e6122c3",
        "cursor": {
          "ref": "85c2436b-29f9-4e77-8c85-c8fc6c80ce09",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "91eda970-9a5a-47f1-ae59-8b71f3cdff58"
        },
        "item": {
          "id": "d34cf85a-c4f0-4441-9dad-9da84e6122c3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a7c0b04d-f4ef-48cd-a71c-ca4f0440bda8",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "792e2fad-73e1-47d1-9509-fb5ed20caad0",
        "cursor": {
          "ref": "92de12ad-23fc-4ebe-9bd7-50a7185fecef",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "13a4db2f-b1cb-4602-8f83-3ef6036372bb"
        },
        "item": {
          "id": "792e2fad-73e1-47d1-9509-fb5ed20caad0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "da93427e-6b69-4b1f-96d7-28ef06fa1b16",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "966827be-1877-4b36-ae0a-4c1e67afac9a",
        "cursor": {
          "ref": "0b4cdc88-0af4-437b-9f76-b32059a69c18",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "658217d1-bad1-41fa-9da6-215d5746253d"
        },
        "item": {
          "id": "966827be-1877-4b36-ae0a-4c1e67afac9a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ca32dd37-72e8-473e-b4b0-0d2f523d42dd",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3a7e5008-342f-4304-875c-1703175f09a6",
        "cursor": {
          "ref": "128db59b-9f5e-48c8-91ee-31a4146e93c2",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "48805a20-c7e1-4c27-beb6-9ffae3e0829c"
        },
        "item": {
          "id": "3a7e5008-342f-4304-875c-1703175f09a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f39f68f4-d30c-48ea-a379-8da37fb066a4",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b12930d2-3d4c-46b9-b05f-2e8dfa69486c",
        "cursor": {
          "ref": "a913270f-eefe-48ed-8de9-3a50e91f74a5",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6f258112-e06a-4ba9-958b-5db9959bbfe8"
        },
        "item": {
          "id": "b12930d2-3d4c-46b9-b05f-2e8dfa69486c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e3821be3-1e6a-4ae5-8bab-f95e3ed09c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880c3918-417b-4355-89ff-d2ff7e4f23af",
        "cursor": {
          "ref": "f85776a0-8dd7-4c97-92c4-c0a1856f0fcc",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8156cb4a-ad78-462b-b25f-9f0f3fa3151d"
        },
        "item": {
          "id": "880c3918-417b-4355-89ff-d2ff7e4f23af",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8ed14c6e-0c65-429f-9294-98b4d1630105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a849c44-62d8-4e7e-a319-01b151167f89",
        "cursor": {
          "ref": "e566785b-163b-4531-b338-e6f90899e8ef",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "327ab3bb-8f79-4417-8a00-07143430ed68"
        },
        "item": {
          "id": "9a849c44-62d8-4e7e-a319-01b151167f89",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "403ef9b1-b0e5-459d-9acd-b35c18798c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433d3097-704d-457b-91c5-f464e1b57781",
        "cursor": {
          "ref": "0532c354-8b09-47a9-b391-de545d7e6197",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0369bfcc-8722-4374-967f-b761a526a7eb"
        },
        "item": {
          "id": "433d3097-704d-457b-91c5-f464e1b57781",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0c99dd15-e3ee-4e2a-bda7-93b3674b3483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c23f431-2723-4e95-af21-2d1cfdf57b5e",
        "cursor": {
          "ref": "b55e865b-9e45-47bd-b164-84eee38a1e5f",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b07c74e1-4b70-4828-9650-b80f12b4b4b3"
        },
        "item": {
          "id": "7c23f431-2723-4e95-af21-2d1cfdf57b5e",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b6d84194-2bec-4424-9f22-ad078729fdc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f824da8-1aed-4e88-b968-74d80c9c93df",
        "cursor": {
          "ref": "22cb7a81-794a-4653-bef0-bf362c84c2cb",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c9caa20b-a91f-49c6-bf38-901d54ae6f7c"
        },
        "item": {
          "id": "5f824da8-1aed-4e88-b968-74d80c9c93df",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b646d379-c5cf-407c-928b-8d2fb8635e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e46b1c3-fe92-4a48-91fd-719c906412e8",
        "cursor": {
          "ref": "98483b05-b82d-48aa-bfb6-fbbd19330261",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f2e646dc-3c6f-4900-bfcb-4c7b96d35717"
        },
        "item": {
          "id": "7e46b1c3-fe92-4a48-91fd-719c906412e8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "3945ca0f-79db-47ca-ab28-4b2a5f7b733f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a0e739-85f1-4945-8bd8-2027385affa4",
        "cursor": {
          "ref": "88c7029e-aeb9-4781-91c0-095b1dbb369e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "52f65ba1-dc3b-4ffd-a33f-2003b54cba55"
        },
        "item": {
          "id": "c1a0e739-85f1-4945-8bd8-2027385affa4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "92cdce4b-59c2-4293-afac-b5ff15386c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8641f290-c322-40c0-8c6b-d74e56d75404",
        "cursor": {
          "ref": "d22fc402-d204-4fb1-a850-52e5292317ab",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a199cc1b-a56f-4e33-8a97-25470309c028"
        },
        "item": {
          "id": "8641f290-c322-40c0-8c6b-d74e56d75404",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3406d9ed-07bb-48ca-902e-ef0bf1fd8a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2dfeec-0e42-49e3-ac8c-9ade75903409",
        "cursor": {
          "ref": "0b9eb373-4c03-43f5-ac0d-49ba1791ab86",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "047f14bb-9437-4d75-bec0-1f6281fe4761"
        },
        "item": {
          "id": "1e2dfeec-0e42-49e3-ac8c-9ade75903409",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1745f62c-22fa-49b6-aca5-8c74a1244ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fb0844-5515-41a6-a87b-547cc2014f89",
        "cursor": {
          "ref": "48fbd0ed-f2e1-4a37-b7f2-ec3646396437",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "18eaa186-e6ac-4434-a776-5754dff7b44b"
        },
        "item": {
          "id": "b8fb0844-5515-41a6-a87b-547cc2014f89",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ba973386-55ad-4bda-b6fb-c53a2217ee35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ade63d9-0257-408c-a323-a9dc223805a6",
        "cursor": {
          "ref": "e5b5ecce-77a4-4fda-943a-031f1d12c1b3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5b5db4ed-f0fe-4b80-9711-4407ab957bb0"
        },
        "item": {
          "id": "4ade63d9-0257-408c-a323-a9dc223805a6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e4a07143-c608-40ff-b1d1-c2cfa1210ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71adaa4-0254-489a-b9fd-54e5f3ec283b",
        "cursor": {
          "ref": "30133710-e45f-47b0-9ce9-08176271fc36",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "93778412-1d3c-4b65-9dfa-76f69f2c9eee"
        },
        "item": {
          "id": "c71adaa4-0254-489a-b9fd-54e5f3ec283b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "16e6bda7-da0e-4696-a88e-8f9193fabaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea575eee-703f-4bd5-bb61-5aa4edaebb95",
        "cursor": {
          "ref": "11c64eea-f433-45a6-83f9-5037c5d253a0",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "640a42eb-10b0-49b8-8301-52641e150840"
        },
        "item": {
          "id": "ea575eee-703f-4bd5-bb61-5aa4edaebb95",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "be158cdb-6870-426a-8ede-f5194118431a",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9ea46960-03db-48a3-8963-3a97bd2e0952",
        "cursor": {
          "ref": "5227e693-ef5a-4640-9da9-d5ad1d92a545",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0faedf68-cc8f-4c5e-9834-9bf829dc0bf0"
        },
        "item": {
          "id": "9ea46960-03db-48a3-8963-3a97bd2e0952",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "be64364c-25e1-440b-a057-c4b30d7b8af8",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8dc21a4a-0060-422c-876d-4d36298b28d1",
        "cursor": {
          "ref": "35c17079-00d8-4924-8bb9-04e99d02c1e9",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4f282068-3f94-4176-8028-8eb5514af5cf"
        },
        "item": {
          "id": "8dc21a4a-0060-422c-876d-4d36298b28d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "dc0da3ed-ec57-4dc5-ab7b-0745874bd968",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "08ef44f4-6838-4023-b593-f81113da2e99",
        "cursor": {
          "ref": "0b727013-7f6c-43d2-9f33-62a7f9da5bc2",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6f12c4cb-d994-4a28-be35-f7a128bdfca5"
        },
        "item": {
          "id": "08ef44f4-6838-4023-b593-f81113da2e99",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1ad06b57-b89f-4827-9363-6648d2f39a64",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b9a5b279-47c6-42e5-ba5e-963ad34d087d",
        "cursor": {
          "ref": "e8660464-e301-4f4b-9013-14bcaf84853f",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "31276c3c-3d74-43ea-901e-90caeba389fe"
        },
        "item": {
          "id": "b9a5b279-47c6-42e5-ba5e-963ad34d087d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd896cec-cbc1-41e5-8e72-09b72dfa13ac",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8a3803be-1238-483a-bbc1-19571ddaa70d",
        "cursor": {
          "ref": "279e9b57-0929-4ae7-b53f-3e0647cd9906",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "542a63f0-0c10-4fb7-8b10-7b1633be4ba6"
        },
        "item": {
          "id": "8a3803be-1238-483a-bbc1-19571ddaa70d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d5c03959-df28-4fe3-bd3c-7083ace7974c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b3634c-a0cb-4036-9269-0b98dee92199",
        "cursor": {
          "ref": "5ceb8de6-a013-44a6-930a-19bffdcaea83",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "1e03f8da-d74f-4aab-b29c-aca721c2aef2"
        },
        "item": {
          "id": "d8b3634c-a0cb-4036-9269-0b98dee92199",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f667d247-dcac-458e-92de-9d917f58c04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4973b78f-9d67-4d3d-9c4b-5a20b164fa46",
        "cursor": {
          "ref": "22d4d527-56e9-4c80-8877-acec5dd420af",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9afd1591-f784-4c6f-8d44-3e3724a60fee"
        },
        "item": {
          "id": "4973b78f-9d67-4d3d-9c4b-5a20b164fa46",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "4ad4b762-0cbe-4308-8940-5e521b7f9b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c5e893-c273-426f-b76d-1150631e55d9",
        "cursor": {
          "ref": "59f50a73-d6a5-4591-a2b3-51eba4f9d52a",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7358639d-bcb5-4ede-bdbc-a75f58a08219"
        },
        "item": {
          "id": "19c5e893-c273-426f-b76d-1150631e55d9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d054a004-01ce-42ba-9987-944fdc79cbc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93c5263-d237-4eb8-b3e9-9c9771759a9d",
        "cursor": {
          "ref": "8ab23f66-7fb4-49f7-9fb0-f52354173b27",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ae42f1e1-a47e-415e-b967-2d7b754aef77"
        },
        "item": {
          "id": "b93c5263-d237-4eb8-b3e9-9c9771759a9d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8869a2da-834f-4dfb-974d-824f445410ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252568e6-b0b0-4dd9-83f3-20d6ca5fd6cb",
        "cursor": {
          "ref": "bbb1e0c0-287d-4a44-81ae-25202841d5c8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b3dc1c8a-e3eb-4d85-b4b3-f6bbeca81a45"
        },
        "item": {
          "id": "252568e6-b0b0-4dd9-83f3-20d6ca5fd6cb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f5b9cfeb-084f-4c3c-9d19-98d3bfe33322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80804be-0df7-419a-b288-f44e4cbf9286",
        "cursor": {
          "ref": "517cf022-94db-4011-97e9-e0803f86d10f",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2e99bef2-4db5-4f82-9c94-5331d6a66c8c"
        },
        "item": {
          "id": "f80804be-0df7-419a-b288-f44e4cbf9286",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "83792573-6aca-443d-9a58-9ec88fdc87c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba654c6-7490-422f-9adb-bdf2fc3b2024",
        "cursor": {
          "ref": "6e88352a-7bcc-4874-b0db-2d1243868c67",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5bb75e25-82c6-4a0c-b6fc-a133d770f03d"
        },
        "item": {
          "id": "eba654c6-7490-422f-9adb-bdf2fc3b2024",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5333341e-1de5-47fb-aad3-16e61ae60cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9382969-785c-4278-9be9-29e76192a568",
        "cursor": {
          "ref": "9200da55-cce0-48e9-bd21-0ef1f40858b0",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "72f03a99-34bb-4553-b56c-056e41ea9caf"
        },
        "item": {
          "id": "d9382969-785c-4278-9be9-29e76192a568",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c00c7d9-4e98-436b-9dc0-5d4fe558dd91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668a4ba5-947b-4e03-b7f0-1dba7ed87d8a",
        "cursor": {
          "ref": "e3c09020-ac3f-42de-81ca-fced0f36f712",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f699ac75-50de-4fa3-9ad8-1bcd7c20bf50"
        },
        "item": {
          "id": "668a4ba5-947b-4e03-b7f0-1dba7ed87d8a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7416b0e7-0e9f-4c55-b0d2-8dac28450c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22103bcd-0617-4390-8fce-2820212ba2ef",
        "cursor": {
          "ref": "d9b7da7a-27de-48eb-9955-0e947644408e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8fa4468f-dbd4-4174-8fb7-776e06ad2a76"
        },
        "item": {
          "id": "22103bcd-0617-4390-8fce-2820212ba2ef",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "64f38341-6531-4b8a-8de5-80035bbc35d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931b2a75-dfbf-4884-88af-124b568e47e1",
        "cursor": {
          "ref": "6c401ae4-60e1-45f7-8d8d-798ba1f2d52f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f5720fa0-eddf-4a68-a23f-45686d00826f"
        },
        "item": {
          "id": "931b2a75-dfbf-4884-88af-124b568e47e1",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "496c9ac9-5d4b-450f-888c-e4bf465bd17c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92556afe-0187-4b54-8bab-93937d871970",
        "cursor": {
          "ref": "d023a9df-b394-4324-ae05-6df9922a476b",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9083e4bd-981d-4505-87f3-3df0f369dd15"
        },
        "item": {
          "id": "92556afe-0187-4b54-8bab-93937d871970",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ca96b9a5-48d1-4c05-ad61-d2b4813519ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730c1fd8-21b3-4b66-8e58-ea8f8deb912f",
        "cursor": {
          "ref": "279c9fe7-dbb9-4667-84ce-19037f1318e4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7f47fb7a-33a9-412f-b2d0-4043ea974507"
        },
        "item": {
          "id": "730c1fd8-21b3-4b66-8e58-ea8f8deb912f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "424c8883-c2cc-4a7e-9c0c-2ce7a3fbea18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5bea19-9776-4c47-8513-eb84c2029a2e",
        "cursor": {
          "ref": "c933e01e-6f19-4d22-9538-2ce39459be7e",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5a132647-70dc-4561-a76d-ddf77663cc76"
        },
        "item": {
          "id": "0a5bea19-9776-4c47-8513-eb84c2029a2e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "285fe404-f825-42eb-b79d-051e65ca0789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb101a0-c41b-4926-8a74-706691d02765",
        "cursor": {
          "ref": "f35afe5f-86da-4f80-b37a-04f004b298fa",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8c271a92-ccb1-49e1-b3ed-95b58287298a"
        },
        "item": {
          "id": "bfb101a0-c41b-4926-8a74-706691d02765",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4ccaa9f1-901f-4814-b2a1-1511ca8e568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa889f50-17eb-4bb8-8765-e1740fdc7755",
        "cursor": {
          "ref": "b72a4333-0c32-4a90-9f3a-0e1f35b5c1d0",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a71cf28f-f00e-4776-8af1-e5a80e21ba2d"
        },
        "item": {
          "id": "fa889f50-17eb-4bb8-8765-e1740fdc7755",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b1f7c3e6-767d-431a-a562-74483cc8226e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58099d53-d213-4418-a26e-0b3ed8d62795",
        "cursor": {
          "ref": "499cbca9-cd52-46af-a44b-ed05dd5da199",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "28fe46b0-0afe-4d3e-86b4-eb3b58a43387"
        },
        "item": {
          "id": "58099d53-d213-4418-a26e-0b3ed8d62795",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0d9948c7-1af5-4f59-871c-e88e567e0907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d36848a5-f654-4b30-b032-16ceddc69238",
        "cursor": {
          "ref": "444cd01e-368c-4346-a393-0243ef2e207f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "27350131-d00f-4759-8dc1-47bd363d5109"
        },
        "item": {
          "id": "d36848a5-f654-4b30-b032-16ceddc69238",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2402d005-5d54-4b70-a6b8-60890807f35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829f9bff-c33c-420d-b7e3-165d6a3ed557",
        "cursor": {
          "ref": "208cb796-b9b7-43c1-9646-edf02e0e2f55",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b8ecf448-a78b-424f-b8bc-ca6d06f8f171"
        },
        "item": {
          "id": "829f9bff-c33c-420d-b7e3-165d6a3ed557",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5fcf845e-2fbb-4272-96c7-42743ff020dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed25aac9-76c9-4305-871b-a60c11b21014",
        "cursor": {
          "ref": "92f2fc15-e080-434a-baa5-4f4f6121e28c",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d53f4832-304d-4a35-9147-90aa5d547be0"
        },
        "item": {
          "id": "ed25aac9-76c9-4305-871b-a60c11b21014",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bbba6f88-d4f0-47cb-81bd-30b4c2d9a445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f5987f-49b8-4443-9ac2-4d29a74cdd29",
        "cursor": {
          "ref": "f2439823-3991-4624-b18d-877c2a05d645",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "761a209d-57af-437c-ba58-ba917188a800"
        },
        "item": {
          "id": "80f5987f-49b8-4443-9ac2-4d29a74cdd29",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4064eca9-f97d-4353-886b-47c14f3a123e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c0c4e0-06ff-4f66-b270-9d400be93fa1",
        "cursor": {
          "ref": "bbc9c521-e49f-4839-a5c6-79026fcf39bf",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "18d3bbe0-26d4-4f61-a6a7-4e8e2d79c933"
        },
        "item": {
          "id": "d5c0c4e0-06ff-4f66-b270-9d400be93fa1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0cd6a092-2a65-47ff-936f-d7b40a124182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee39b178-95d9-41f8-8cf7-f4a5d30082de",
        "cursor": {
          "ref": "d5d0ce25-cd45-435b-a935-eb20601fcc91",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7bb8d032-b895-40a7-91fc-5f4c655b6068"
        },
        "item": {
          "id": "ee39b178-95d9-41f8-8cf7-f4a5d30082de",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6d46322e-46c2-45b8-a2ef-a0caa85736a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fedb9ab-c6dd-4e5f-9398-2a5458681d43",
        "cursor": {
          "ref": "c496e830-5ebf-4435-a5af-ef8e5e88b0bc",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f519febd-ae53-4bbe-a563-804a0c8ac8ea"
        },
        "item": {
          "id": "3fedb9ab-c6dd-4e5f-9398-2a5458681d43",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ef699929-ec66-4a40-8eff-9383bf7c23e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb87822-6bfc-4626-9242-139e5c50c7e7",
        "cursor": {
          "ref": "46b0b44d-3b39-4a40-a8b5-0ed96080fe3f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5861f63a-0d39-4251-b43e-351c11dc9b4b"
        },
        "item": {
          "id": "beb87822-6bfc-4626-9242-139e5c50c7e7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c2d657bd-6021-4d44-9e9c-2e557562f716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827519cf-1885-4d70-a42d-7556bed11291",
        "cursor": {
          "ref": "12b6ac1d-259f-46db-be68-5d57a1112df3",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e8d2c2ae-a8e4-436f-8918-d71e09bd19e3"
        },
        "item": {
          "id": "827519cf-1885-4d70-a42d-7556bed11291",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7116ec4f-6b64-4d5a-bcb2-8e1250777f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d64270e-cf69-46fa-8270-b3fbb3aa060b",
        "cursor": {
          "ref": "c30c831d-af19-44fd-8754-fd39b40ddf9e",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "79889190-7679-44fc-bee1-d1d16cccbb6d"
        },
        "item": {
          "id": "1d64270e-cf69-46fa-8270-b3fbb3aa060b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3ec1a850-700d-4818-aeab-eae9cd86902e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4b3d5a-994b-4367-a556-0ab207bc74cb",
        "cursor": {
          "ref": "30392678-6a15-4336-915a-137c926bf921",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b0b1c5f8-2507-42f2-a5d3-9adfceaa2202"
        },
        "item": {
          "id": "8f4b3d5a-994b-4367-a556-0ab207bc74cb",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f7ceb47a-813c-4280-a154-d68b4d20a35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e79e4b6-54b0-4222-9a99-11979541d252",
        "cursor": {
          "ref": "0b0ab110-f384-4331-9246-38ae90b59e20",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "767e810a-5dd2-4ab8-abfd-c78802b338b8"
        },
        "item": {
          "id": "6e79e4b6-54b0-4222-9a99-11979541d252",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "628b8229-70fe-41d1-9710-eafde49b3395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d54ed6-15c4-432b-b7b0-55754a39a987",
        "cursor": {
          "ref": "1e1d6cc9-c712-4018-a826-75e095fd2e73",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "056609a6-f32b-459d-8c1a-b9c234b3f9a6"
        },
        "item": {
          "id": "48d54ed6-15c4-432b-b7b0-55754a39a987",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6ae9f00c-3b12-4ead-9c3f-62aac4c36d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3f99d3-b92b-4578-abc7-1b19f15116f7",
        "cursor": {
          "ref": "a371fc61-4730-4c78-9c80-9cc4e4ca902c",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "778ee321-b5cc-42f6-abcc-8b129238ca56"
        },
        "item": {
          "id": "6a3f99d3-b92b-4578-abc7-1b19f15116f7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1e9d4edc-4dad-411c-a325-e7f2722722ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dd4e49-9ffd-4059-8e5c-f55cf5ca5335",
        "cursor": {
          "ref": "98011643-2061-41aa-aff5-0d8f29a1cd9a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "19efc8e8-e9ea-45a2-a114-c2a4a02b0972"
        },
        "item": {
          "id": "20dd4e49-9ffd-4059-8e5c-f55cf5ca5335",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "cf059628-7619-45e0-bf54-e930ba3fbf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "770278e2-4685-4edd-90c8-fcd33226dec3",
        "cursor": {
          "ref": "4cdd31c1-3bc7-4ac6-aa52-75b79f6f705f",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c3899712-da8d-4037-87d2-0650811a4a1d"
        },
        "item": {
          "id": "770278e2-4685-4edd-90c8-fcd33226dec3",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7e52c952-1ce0-440f-93a4-348f4fdb8ce8",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52a19d8-2b30-42fa-b742-3d5bc2e509fd",
        "cursor": {
          "ref": "77d7eec5-a6c9-4352-8840-e5313b71d2ce",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8e8c946d-7f5b-4216-8c47-3e58e1a2ebc8"
        },
        "item": {
          "id": "b52a19d8-2b30-42fa-b742-3d5bc2e509fd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "55d1b242-10fc-4b9c-9258-e8f17b83f400",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb3db6c-5016-48d9-b922-e13e34f268e9",
        "cursor": {
          "ref": "6a748e31-f094-4b04-9aef-793864d2a136",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "dbe55217-576e-4ef3-a3a8-7ef0e97c7be5"
        },
        "item": {
          "id": "aeb3db6c-5016-48d9-b922-e13e34f268e9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fee9c3a0-eddd-4baf-b59d-61af9f224e33",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d118b078-f064-4ab5-984e-37284e141db6",
        "cursor": {
          "ref": "df9d6293-d7cf-4ab4-9441-06b851eb2ce7",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e7bbf445-79d0-40a6-81e2-7f53f6562d06"
        },
        "item": {
          "id": "d118b078-f064-4ab5-984e-37284e141db6",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "028b1ff5-2ab1-4b71-8c5c-224e9e4d9698",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cea60d7-29e5-4711-867c-3182c9aeb192",
        "cursor": {
          "ref": "175667b8-1866-4a8f-883d-66680da1e02a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0f578a66-bcad-4a26-962d-ce88fc562a24"
        },
        "item": {
          "id": "6cea60d7-29e5-4711-867c-3182c9aeb192",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ca9c78b5-cd72-4263-85e8-24839a7d3259",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-29T00:37:56.435Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-29T00:37:56.435Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "40349365-eaa8-4ee8-aa1e-5a4db2f8a4f8",
        "cursor": {
          "ref": "807f44aa-83f6-476b-b08c-eee4536d61de",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "39458436-d99c-449b-b0c6-ec5a99d0ba01"
        },
        "item": {
          "id": "40349365-eaa8-4ee8-aa1e-5a4db2f8a4f8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "64a9b17e-ba59-43bd-840e-1a2c022d1239",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78361833-74ca-47cc-ad8b-a8863f12ea59",
        "cursor": {
          "ref": "33401a07-b646-4873-affd-d912e112bd98",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "83835d61-723f-4eec-be7c-319ad49defc4"
        },
        "item": {
          "id": "78361833-74ca-47cc-ad8b-a8863f12ea59",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "428dcb83-1fe0-4e05-b4a0-d2b523da774a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "536a484d-f7d6-41e8-993e-808cd33aa91e",
        "cursor": {
          "ref": "4a26dcc3-5e6f-4b48-99fc-2475c6cf7811",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "608ddecd-e346-4103-8007-7cb282a7fff3"
        },
        "item": {
          "id": "536a484d-f7d6-41e8-993e-808cd33aa91e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a17a0618-7139-4540-a82b-959503b2cee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "378a54ba-f352-4ed9-871b-1d9a03f49945",
        "cursor": {
          "ref": "b61fe772-0dae-4696-bcdd-3d3daba10f08",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e9cbbfe6-6a92-46e4-b7bf-8f67074574f6"
        },
        "item": {
          "id": "378a54ba-f352-4ed9-871b-1d9a03f49945",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2796b8e8-2028-49ce-b8da-e29c70aae8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03719d54-c96c-4d9e-a0dc-f03af991cc3e",
        "cursor": {
          "ref": "76f1436c-1dc2-48a2-9dd0-1f0716cc947a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "eddcaf27-b7e9-4ad3-bb7f-d70572c291b8"
        },
        "item": {
          "id": "03719d54-c96c-4d9e-a0dc-f03af991cc3e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "760553fd-df9d-45e6-ac78-0303f738ec4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f1a099-edea-42a8-a685-1c52f405b23b",
        "cursor": {
          "ref": "e11c5a67-3c5d-4d69-aaa6-417d97651419",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "86e47bea-ef99-437e-ba52-b4ac25321a4e"
        },
        "item": {
          "id": "09f1a099-edea-42a8-a685-1c52f405b23b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7e206499-9c18-4756-887e-8b8070656d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b657f5c5-ef0c-4f09-b04b-fbf576e1869d",
        "cursor": {
          "ref": "d80be8e9-1508-4fe6-8f2f-4f4b1dc9edfa",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "22a0b086-2445-4182-b6b0-65af2617e2c9"
        },
        "item": {
          "id": "b657f5c5-ef0c-4f09-b04b-fbf576e1869d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "ebf0a704-4301-4a03-b4c7-d8753b1a8d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30719f4a-9254-487f-a90e-874e3110d4e5",
        "cursor": {
          "ref": "034bd0f8-f1a5-4450-8e40-56dfa124c662",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e34ef470-8776-4849-ad74-906359dc5b80"
        },
        "item": {
          "id": "30719f4a-9254-487f-a90e-874e3110d4e5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d8011818-4d4a-4ed9-9efe-eabcc16f78ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a74a0353-b63b-460c-a0bf-2de2e9ee209d",
        "cursor": {
          "ref": "50793569-111c-4766-99f2-53b43808914f",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "43df4879-1f65-46a0-ad2b-b39e72a76f91"
        },
        "item": {
          "id": "a74a0353-b63b-460c-a0bf-2de2e9ee209d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7978345a-ccec-4f6e-bbe4-bd009427221a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d14a77-4098-4279-a6c6-67f2fec4e855",
        "cursor": {
          "ref": "7ee19117-b6ba-48e2-a5e0-07c443a48351",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1b08458e-2671-4e21-bac8-8495cc6c37cd"
        },
        "item": {
          "id": "75d14a77-4098-4279-a6c6-67f2fec4e855",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2626187c-b45c-44e0-844f-e81abff4749f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b33ae4d-2d3e-45ad-824c-7af1afce4208",
        "cursor": {
          "ref": "d467d2f5-bd88-4f71-bf29-09c26eb1da87",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7e87cf4b-7d59-4c61-a528-f73e217f5267"
        },
        "item": {
          "id": "7b33ae4d-2d3e-45ad-824c-7af1afce4208",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cf9c6f5d-95b6-4823-b324-3d3de68b4c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e0621a-0eb3-42fd-8c77-d0e7902d663b",
        "cursor": {
          "ref": "afa20e64-fae9-4e3f-a1c4-4d2eeed86c1a",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fcc53746-b6ef-4473-bea6-2b5d7f01d3a2"
        },
        "item": {
          "id": "33e0621a-0eb3-42fd-8c77-d0e7902d663b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "debd36a9-7be9-4e45-a528-37d53c382d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd736fe-a29b-480a-9c31-361a59c9adb8",
        "cursor": {
          "ref": "30a56eb8-eee5-40d4-bf4d-793b17d08181",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "55afd6ad-78e3-4381-9f4c-1f4d14ed506e"
        },
        "item": {
          "id": "cdd736fe-a29b-480a-9c31-361a59c9adb8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2d0345c-b96f-4d07-831d-23c3084cbc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef4f88b-c330-46b9-9af6-c9cd1e5076c6",
        "cursor": {
          "ref": "03633134-ab19-4546-b499-c76500d6e29e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6beef5f3-a0fc-49c7-9b0d-e428763f0578"
        },
        "item": {
          "id": "aef4f88b-c330-46b9-9af6-c9cd1e5076c6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dc14e23a-a6c1-4fce-bb26-c3ce8fb396cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a36a52-0dd8-4170-b584-a79924c9ad8c",
        "cursor": {
          "ref": "b9badcda-422b-42b9-93c5-08825062c528",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "959a36d1-9ba3-4b57-971b-f3936fad5853"
        },
        "item": {
          "id": "a5a36a52-0dd8-4170-b584-a79924c9ad8c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "52a354ff-3aca-478d-b0e1-b8e6e32e0583",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 84,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "54fe992e-7be7-4535-aea8-da9a7ffaf9a3",
        "cursor": {
          "ref": "489f7b03-9878-4653-8f26-982a6cc8ed89",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d9df1f7b-b772-44bf-867c-20feb81813e6"
        },
        "item": {
          "id": "54fe992e-7be7-4535-aea8-da9a7ffaf9a3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "da813859-a92c-4544-8ab9-0dcb50a85b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce341c2-dda1-46cc-8643-6418b5b376a9",
        "cursor": {
          "ref": "166dc939-b447-49e7-842c-613be455e5ad",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2f87e068-a567-4c69-a2b1-d05be621cf06"
        },
        "item": {
          "id": "8ce341c2-dda1-46cc-8643-6418b5b376a9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "31a2069e-3ad9-4396-bdf6-05a603a2654a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb61099-d124-4309-bcf2-d67a11efcd08",
        "cursor": {
          "ref": "15662875-d94a-483b-9f55-67f7d4ad681a",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fa8e77f0-31d1-4bad-abcb-53fe9e6c3463"
        },
        "item": {
          "id": "abb61099-d124-4309-bcf2-d67a11efcd08",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c623d39d-b6f0-4d5c-8277-7016f03edfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3218e83-f230-4510-b104-2e91357837ef",
        "cursor": {
          "ref": "d4ac7dfb-ccc0-424b-acb8-2d1aee3787c8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "054e20a7-b98b-4880-8708-de34f5694a5f"
        },
        "item": {
          "id": "a3218e83-f230-4510-b104-2e91357837ef",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ffe53c28-3355-4803-81c0-8fb301b73fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1278ac-8f27-4994-a327-bf33ee18bdb7",
        "cursor": {
          "ref": "e19d6b1f-b43f-4cc1-a1bd-5b4aa0eb9fbb",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "4e118a1a-549c-451a-8b88-556e39042732"
        },
        "item": {
          "id": "2b1278ac-8f27-4994-a327-bf33ee18bdb7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cfb85b2a-9aa1-4f7e-b4dc-b2e75cb2eb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169281c0-4b11-40f0-bdaf-21035fd7acb7",
        "cursor": {
          "ref": "62ed4c43-cb46-4e5f-964a-f4b5227cfc74",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4ebb829a-fda9-41a4-8198-6fe231fd62d3"
        },
        "item": {
          "id": "169281c0-4b11-40f0-bdaf-21035fd7acb7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "389e5225-f255-4bfc-837c-f6bcc62ffcf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8ff1cf-ef96-4e12-a94c-c5441da5b4e6",
        "cursor": {
          "ref": "73bc4845-105e-4f2f-a5f5-cabd7994b008",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e0b17dc2-d6f9-4675-96c2-0e43a040dcc7"
        },
        "item": {
          "id": "0f8ff1cf-ef96-4e12-a94c-c5441da5b4e6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6251fcf9-64b0-4aaf-a584-28faf1c12a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c2ac72-bceb-479f-84cb-8a0c84b97901",
        "cursor": {
          "ref": "aac3beff-76db-4f2c-a94c-80510d75e404",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "af9cd88c-e73d-4a26-9621-e46e56859c69"
        },
        "item": {
          "id": "80c2ac72-bceb-479f-84cb-8a0c84b97901",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0aaa0d1d-75ee-4aea-8d4a-050cd6264279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53141b1d-95da-4456-8402-ddc58fa2c6a2",
        "cursor": {
          "ref": "fa47d4ab-f827-4674-8bb9-35a7b0f15320",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cbf346e8-10b0-4193-99ae-46feb40c833f"
        },
        "item": {
          "id": "53141b1d-95da-4456-8402-ddc58fa2c6a2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e8f349cc-8740-412c-b8bc-26048a5bf159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a02ffd-194a-455a-a3e7-ccc9f10c2937",
        "cursor": {
          "ref": "ec3a2256-b701-40e7-a513-ecaa43b2142e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ba81b641-8373-4786-8700-6771d873bdb6"
        },
        "item": {
          "id": "f5a02ffd-194a-455a-a3e7-ccc9f10c2937",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c9a75a2e-7b20-46c5-b0d2-03a0281386ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bb69a78-00c8-469a-bd28-1137f758ccd8",
        "cursor": {
          "ref": "4818bc5b-77cf-41ff-8a0f-268249f8aa8d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dc47810f-6bf2-4b3c-b8bb-a65db0494518"
        },
        "item": {
          "id": "4bb69a78-00c8-469a-bd28-1137f758ccd8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ddcd2d8d-e4e6-4d9b-a42d-44aade421616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b3a291-92fa-4a93-955b-2fa02f12b67a",
        "cursor": {
          "ref": "af642c69-5a92-4300-944d-41a1b8004d0c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ceb0b06a-77a4-46dc-ab4d-cf31dff63331"
        },
        "item": {
          "id": "71b3a291-92fa-4a93-955b-2fa02f12b67a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b23edb5b-eb46-475e-9dde-3706d6911a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0eb10ac-c88a-4472-a8dd-01d5b4b0bae2",
        "cursor": {
          "ref": "353be9d5-3e00-4f41-b535-432c130cbdac",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "bb264cf3-5d05-49b8-97f5-173ee0f2501e"
        },
        "item": {
          "id": "e0eb10ac-c88a-4472-a8dd-01d5b4b0bae2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b7b4e37-29be-4571-9e65-14fdc36ea955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e31b240-d818-47e2-ba65-d6a2f088ca18",
        "cursor": {
          "ref": "aecaa18d-78c3-4876-82cb-bf8a1c96d8f4",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "742c7611-512e-41ec-a830-46c92a896e0d"
        },
        "item": {
          "id": "0e31b240-d818-47e2-ba65-d6a2f088ca18",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "08e1e50c-82e8-4f54-9616-e119ff555bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80596325-16b8-4625-882d-cab52cc6613c",
        "cursor": {
          "ref": "53a7af5b-8b84-4d09-9bcd-06536201133c",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "0e87db02-db65-41a6-8591-3e032707fae9"
        },
        "item": {
          "id": "80596325-16b8-4625-882d-cab52cc6613c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "940167d6-a43a-451d-b3de-f996a8412fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc452776-4445-4b17-adea-fd7177e27827",
        "cursor": {
          "ref": "773f7113-c3a6-4ab1-91dd-d5a676c3c2e4",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7c914b64-5ef6-4724-8f99-d91412c97288"
        },
        "item": {
          "id": "bc452776-4445-4b17-adea-fd7177e27827",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5adb2e87-8e64-48a1-8e6a-9466f341a933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b431fd-160a-4bf7-9c05-6ff4e98ad5b3",
        "cursor": {
          "ref": "742d9d0c-27b3-4781-aa5e-c97ebe37f37f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "69aee004-3227-4e90-8428-4152ab7ccba5"
        },
        "item": {
          "id": "35b431fd-160a-4bf7-9c05-6ff4e98ad5b3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4cd9626e-e002-4dda-9c6f-256333ea7145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69ec14d-2d83-4b0a-8e1a-cce9bff3062f",
        "cursor": {
          "ref": "8e20cfb4-1d04-4cd2-a5cf-5e8093a6450a",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "972ba2a6-1112-4337-9267-2c8a2b3ff19b"
        },
        "item": {
          "id": "e69ec14d-2d83-4b0a-8e1a-cce9bff3062f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7c724d2e-bb6d-4880-8492-ac239abc9cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeea0cc7-00d7-49b9-9e05-5c7ad996e1dc",
        "cursor": {
          "ref": "5ad14cc7-fb6f-4f6d-a4bb-877ad7c53df0",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "28f09ad4-8b66-4be2-874f-0e0148b51b1f"
        },
        "item": {
          "id": "eeea0cc7-00d7-49b9-9e05-5c7ad996e1dc",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "040f7957-97df-47d1-ad3c-8faaa00e1d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a555ffc5-e705-46b8-8d1d-d697a9f57045",
        "cursor": {
          "ref": "cbd544a9-974f-49cc-a333-d0969c94b883",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7974f4d9-8cfa-493e-85ba-87bdd3c5f436"
        },
        "item": {
          "id": "a555ffc5-e705-46b8-8d1d-d697a9f57045",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7491e9ea-1e75-4b58-84fc-d24a8c39a2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "654722ef-94be-494c-ab8c-bc8ba026d342",
        "cursor": {
          "ref": "3628ced2-1042-4f4d-8311-facff5691f25",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "12543969-bf2e-44fe-8b46-e993892bc5fd"
        },
        "item": {
          "id": "654722ef-94be-494c-ab8c-bc8ba026d342",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "425464d6-c0d3-46c2-98fe-d7fef415b98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2050c5-1233-4101-9a20-9d244546c1d4",
        "cursor": {
          "ref": "de99ab8b-f393-4135-9f0d-8c291ef25aab",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "47f214cb-716d-4cc1-a4f5-9e0f2cc24d25"
        },
        "item": {
          "id": "1e2050c5-1233-4101-9a20-9d244546c1d4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "018a4de0-30cf-40aa-91c5-3c7a62a0d0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051d9919-d2f9-40a6-87c6-662b9c61d2bf",
        "cursor": {
          "ref": "12b9196f-62a2-436f-baac-c4d0d50e69ec",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d5a7a400-629a-44d6-b0b1-9526436f5bf8"
        },
        "item": {
          "id": "051d9919-d2f9-40a6-87c6-662b9c61d2bf",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7e0e78f3-5ef6-422c-b21e-38de2192a063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76416a1-917e-4848-b77b-0caf63367d20",
        "cursor": {
          "ref": "05a187e1-fb1e-4fdb-b7b9-d7e4f5e22835",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ba3a9081-1650-4922-88d2-c9315d85f24c"
        },
        "item": {
          "id": "c76416a1-917e-4848-b77b-0caf63367d20",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7e0b4afc-b09b-4f83-bf9a-b0892051563d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1debd0-931e-4a52-a3fe-ddc1ab4582f8",
        "cursor": {
          "ref": "2f9f8c62-102e-419a-9a59-77f104268a09",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "08cf4981-d3cc-4857-832e-06b2ff49513f"
        },
        "item": {
          "id": "cb1debd0-931e-4a52-a3fe-ddc1ab4582f8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "439b99d2-ffc4-4d88-890f-99e9507f4a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90df2e4b-7620-426d-9dfe-bdbd01a64eb2",
        "cursor": {
          "ref": "a86b5924-9564-4d3e-8e02-8e076e996fa0",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "83673c40-02aa-4c68-ad79-379f5f762ee4"
        },
        "item": {
          "id": "90df2e4b-7620-426d-9dfe-bdbd01a64eb2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bcbbae69-32a7-4882-9b3c-6424c17b30f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273fec93-5ccc-4872-8017-2dd58a201093",
        "cursor": {
          "ref": "697cb371-fb6b-45de-b4c1-1a035b531b50",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e7d6c166-bb5f-43e0-bfbf-86945b0e30e9"
        },
        "item": {
          "id": "273fec93-5ccc-4872-8017-2dd58a201093",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "a4b7b6d9-ac03-403f-880b-ea56baa54839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738aa71e-68d8-4441-866f-9f6cba0d4f7c",
        "cursor": {
          "ref": "b4f95057-8a26-4e83-988a-98f8e2860ec9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "89e019ce-c765-4a5a-aa27-65d688e667ba"
        },
        "item": {
          "id": "738aa71e-68d8-4441-866f-9f6cba0d4f7c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "27d4988e-cf6b-4f6d-bb8a-7b6a9ddc2c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70171fd-aa84-435c-a3f1-73e744b13bf9",
        "cursor": {
          "ref": "b624c486-68f6-4efb-9bc6-6754f68b517b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "017051c2-4685-4260-9660-2e894aaaf574"
        },
        "item": {
          "id": "b70171fd-aa84-435c-a3f1-73e744b13bf9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ff5fa38c-487a-493a-9c15-bbfac307aa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0085d2d-a58f-40e8-b9b3-8db69a5e90f9",
        "cursor": {
          "ref": "e0030075-264c-438e-bbcb-fb5c164c271e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c7ff8678-3b3b-49fd-ba64-54cec55193b0"
        },
        "item": {
          "id": "b0085d2d-a58f-40e8-b9b3-8db69a5e90f9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "31c518b4-28e7-4a4f-b5ba-bad82a1b023e",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "cff82fcc-09f1-45a8-a0de-da03718e0fb8",
        "cursor": {
          "ref": "5483fea9-b3fe-498a-8db0-d51766051018",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d290fa1f-c8ad-4f15-9aa1-682853432dc5"
        },
        "item": {
          "id": "cff82fcc-09f1-45a8-a0de-da03718e0fb8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d8c7c57c-7551-406a-91e2-3ab0654c5b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae22618d-465d-4402-8a86-821c86efc9f5",
        "cursor": {
          "ref": "266cb877-e7d2-44bd-b47e-f610660c1462",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e9ed4f2b-5407-458c-9568-3fa3ce5d1fa8"
        },
        "item": {
          "id": "ae22618d-465d-4402-8a86-821c86efc9f5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8c8e9276-9e9b-4485-84d9-9aa002cd610f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1bd7bb-887a-47e3-9d0c-ffdf714489e1",
        "cursor": {
          "ref": "8f3a8a52-f4bb-4b42-988c-11abfed8f718",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "918be0b2-6215-429e-bb91-42a1a2cf83ac"
        },
        "item": {
          "id": "1d1bd7bb-887a-47e3-9d0c-ffdf714489e1",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c4b16a19-c6ec-47ed-abaa-4aa3b5a39134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18839b44-c63d-4ccb-84d5-055554acf79d",
        "cursor": {
          "ref": "02134ccd-9776-4b96-8666-557f2555f08f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "063ff9bf-f402-472f-bb0b-da5775c81691"
        },
        "item": {
          "id": "18839b44-c63d-4ccb-84d5-055554acf79d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "515903b7-4119-4662-af3f-e03a0390fbae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40654b54-4abf-4969-be17-125186201bd6",
        "cursor": {
          "ref": "61684569-4554-46d6-aa2c-55538fdd18bd",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f759620c-ba63-4d32-aef6-fe4eddd12b35"
        },
        "item": {
          "id": "40654b54-4abf-4969-be17-125186201bd6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "17c26270-5357-47d7-ba53-6bbcc6858cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23327998-bf7b-4d55-9c2e-788b3c8dbc28",
        "cursor": {
          "ref": "6af93390-736e-45e9-b769-7a0642980fb9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b0cce9b2-d8a1-4bed-aa25-668a760fb15f"
        },
        "item": {
          "id": "23327998-bf7b-4d55-9c2e-788b3c8dbc28",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "782f89c8-aba6-4245-b42c-61a561aa8fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08642a3c-ec3d-491a-bdb5-f3577c4c0fe5",
        "cursor": {
          "ref": "3c1fa3e5-9296-459a-a1cb-c82a43d0fa6e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "0928764d-697e-49c8-8599-9db3cb754d80"
        },
        "item": {
          "id": "08642a3c-ec3d-491a-bdb5-f3577c4c0fe5",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b89fd029-667f-4d9d-825b-775325384bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a747ff9-80c8-4c4d-a307-6a95b0275857",
        "cursor": {
          "ref": "3e6a5315-500b-4524-b434-1e98ec91956b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ea805e25-8931-4fcb-a103-9f396651f6a6"
        },
        "item": {
          "id": "2a747ff9-80c8-4c4d-a307-6a95b0275857",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d1079e2f-ec09-422f-a7d4-c54d762476fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea861e6-04d7-43fe-a4a0-01d3cc7b0781",
        "cursor": {
          "ref": "78397f9b-1c71-4a79-b720-5c6e87f8f540",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cd01cc14-f8bf-48e5-b884-482d901aaf2a"
        },
        "item": {
          "id": "eea861e6-04d7-43fe-a4a0-01d3cc7b0781",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4443f52e-be67-4ab9-b124-da84eb459da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c27e92a9-6e77-4d92-a452-7b0916c2b30b",
        "cursor": {
          "ref": "37eb4ea5-96e7-46ba-af89-bbf1b173154a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b246cc79-d702-4627-b742-3fa70eb82e63"
        },
        "item": {
          "id": "c27e92a9-6e77-4d92-a452-7b0916c2b30b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3c435cf5-88ee-4268-a8ec-6f9ec85d2c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "407666eb-6194-47d0-9e37-af75d044cdbd",
        "cursor": {
          "ref": "8e7acdb1-dbd9-4ea5-a19f-6b6c594bad1e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "94b34db1-1fc8-488f-b270-ffefb471a646"
        },
        "item": {
          "id": "407666eb-6194-47d0-9e37-af75d044cdbd",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "43493195-2c67-42d3-bf86-4c5e6f137cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc8cfb1-81c2-4d29-b385-84d1a3c88ac7",
        "cursor": {
          "ref": "8efb9345-f431-4a20-a41a-5130d8902f30",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "08362a48-10f2-4684-b539-485fdb080a8f"
        },
        "item": {
          "id": "3fc8cfb1-81c2-4d29-b385-84d1a3c88ac7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3a4789d4-bd58-40d3-addd-dc93a564b0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c78bd02-ece1-4baf-8c9f-1fbe03df08e5",
        "cursor": {
          "ref": "31396c8b-b8ec-4346-810e-5aa1c50eec3f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b4525463-4113-4a05-820a-b7f439fad0da"
        },
        "item": {
          "id": "2c78bd02-ece1-4baf-8c9f-1fbe03df08e5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8ba33f77-ac00-4740-850e-060fc15e03a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2500d2a4-d424-4adb-8b92-0bb2a041c9d6",
        "cursor": {
          "ref": "50c65bd4-80cb-4f5e-bb39-ab174bdea40e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "67cf3e04-2af4-4858-8715-99825bc7c2d1"
        },
        "item": {
          "id": "2500d2a4-d424-4adb-8b92-0bb2a041c9d6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ac90feb5-1a95-42e4-85dc-69c367cb3113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1803bb74-8677-44d6-87a7-789ef1b862aa",
        "cursor": {
          "ref": "086d1559-2245-4b2c-976e-a1eb80079eea",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a9383f40-9a3b-450f-b754-793d36be2922"
        },
        "item": {
          "id": "1803bb74-8677-44d6-87a7-789ef1b862aa",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5ab8fb6f-a91d-4493-bf5c-309cedd650b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0723c1f7-54d9-4a36-9205-b0ce19b9551d",
        "cursor": {
          "ref": "eb205b5f-f44a-40a6-8616-2c3b6d0ff0c1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "37ffeba2-b510-4e8f-8920-9d02482d4af7"
        },
        "item": {
          "id": "0723c1f7-54d9-4a36-9205-b0ce19b9551d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2f93d452-e2e3-4f73-85a7-a30148a626c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42ee6c8-e617-46f7-8b20-4cb3c6cf2159",
        "cursor": {
          "ref": "c5abd015-264f-4573-9bb4-5a097f86691d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "92842f0c-f3a2-4b26-9ff2-19690b6cf1c1"
        },
        "item": {
          "id": "b42ee6c8-e617-46f7-8b20-4cb3c6cf2159",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "23fb4c4f-be33-4193-a92a-40ff00c176cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f6ff39-2bbb-4641-92af-62353522576c",
        "cursor": {
          "ref": "3947d509-5236-497c-acf3-da7556aa3660",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9fda30f9-0335-4342-a8a5-a37df72eb3bf"
        },
        "item": {
          "id": "e8f6ff39-2bbb-4641-92af-62353522576c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6778ba85-c8da-4e9d-9e55-eb65f8fdd886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e29731-a6a4-41e9-8a2b-db6da8a4d0c2",
        "cursor": {
          "ref": "93cb6bb6-3fe9-4fec-aae4-fc1cd84f6223",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "538267f6-19b8-4ae0-8de0-dfa200ea8328"
        },
        "item": {
          "id": "e4e29731-a6a4-41e9-8a2b-db6da8a4d0c2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fa2a756b-8bfc-47ce-a507-8314c34a3863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3dbb71-78d8-4ff7-a4c9-bb2802d536e0",
        "cursor": {
          "ref": "5af57621-18af-47d8-b62b-fb4d152df9aa",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e0d46965-4010-4fe6-9d1c-428023231baa"
        },
        "item": {
          "id": "fc3dbb71-78d8-4ff7-a4c9-bb2802d536e0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "92165790-0f61-465a-a370-176c7e4385a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ed19c-38e9-4ec3-97c4-24cf8dec7d86",
        "cursor": {
          "ref": "385c1a79-98d5-4daa-a3ff-106c7c799367",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f9ed65bb-8692-4b05-9143-7ce0cdce4f0e"
        },
        "item": {
          "id": "9e7ed19c-38e9-4ec3-97c4-24cf8dec7d86",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "710ca17e-8f15-4e4a-8065-549827cda8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac325d6e-4b67-46a6-9e23-23accc6be287",
        "cursor": {
          "ref": "26e3b7e6-2c2f-4c51-9f32-33aa39da4c41",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "8691d5b2-1220-411e-b9d9-3cd646c8e130"
        },
        "item": {
          "id": "ac325d6e-4b67-46a6-9e23-23accc6be287",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8915302e-d26b-4097-8c5d-6d8dde96cc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4223d121-0026-4d56-afc0-92df1e1875ca",
        "cursor": {
          "ref": "3af9fa4a-716f-4ace-a26e-053751675ea0",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a975bee1-f9b5-4a8a-9c58-0560951f86b8"
        },
        "item": {
          "id": "4223d121-0026-4d56-afc0-92df1e1875ca",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "49d70211-24f3-4727-9b09-995d5591a5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6cccb5-9e6d-4d36-9583-c87275ac59fe",
        "cursor": {
          "ref": "c7a9c787-291d-4cff-a729-41668b88ad49",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3430dc5f-bf5c-4175-8c7b-344a8e8eea45"
        },
        "item": {
          "id": "dd6cccb5-9e6d-4d36-9583-c87275ac59fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0f20cd55-93d9-49fd-ac51-ee3354708884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1808c69-fe8d-477d-9198-34c2bd8f221a",
        "cursor": {
          "ref": "157cf755-d534-4607-ab1b-2a7f54f215a6",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b4f8ab57-1a9e-491f-ab6b-b312adb77a27"
        },
        "item": {
          "id": "b1808c69-fe8d-477d-9198-34c2bd8f221a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "62abc9bd-421d-42ad-888f-a6815fcbf7b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eae57e7-3612-44d0-af5f-ec2976779b74",
        "cursor": {
          "ref": "8e4abe44-27bc-4e47-9ea6-1c8c3c3a4657",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "e424e7bc-6153-4118-b8b3-3a5a4deefb2a"
        },
        "item": {
          "id": "9eae57e7-3612-44d0-af5f-ec2976779b74",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e88b249f-3879-4e2c-97a0-68a409434c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d99c63-7d00-46b0-9e66-442c068105e8",
        "cursor": {
          "ref": "b482b252-ba91-47a9-bce0-42587a927cf9",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "96ec3879-7b96-47be-b725-eba46d8d2fe2"
        },
        "item": {
          "id": "19d99c63-7d00-46b0-9e66-442c068105e8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a99ea63b-2a44-4a14-a285-be557ae50f5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d1add8-2d93-40d8-bb5c-19145cf92ad0",
        "cursor": {
          "ref": "4542627f-845b-4f7e-8b8c-cb77dcc64122",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d3fa8b89-f0dd-4ec4-b326-eb9810ac0468"
        },
        "item": {
          "id": "f2d1add8-2d93-40d8-bb5c-19145cf92ad0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ad5e78b2-7202-4297-a6bd-82c059513515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164451a9-8d39-4d38-a0f1-0095cbe291d6",
        "cursor": {
          "ref": "ab169986-54bc-4c4b-b4f3-80ef6e4ca05c",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cfeeb42c-5e75-46e8-97c5-a8a5338e759b"
        },
        "item": {
          "id": "164451a9-8d39-4d38-a0f1-0095cbe291d6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "22a49263-3a5d-46b5-a7f6-1dc9cdc360e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4dc30be-3b80-4f42-8751-7c11ffa83818",
        "cursor": {
          "ref": "653e26c8-decf-4bb1-bdf1-2be3d848942c",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "74032798-bc91-4f18-880b-ca55a83056bd"
        },
        "item": {
          "id": "f4dc30be-3b80-4f42-8751-7c11ffa83818",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "894a5d4f-3e75-49af-82fc-74483f660c3a",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e9ff1d50-1294-4aef-98d7-2578a129e3da",
        "cursor": {
          "ref": "88dbd1a3-cfc1-479a-a637-fcaae610507d",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "90c5da99-d7e2-47a7-832c-4d2bf3c67dd4"
        },
        "item": {
          "id": "e9ff1d50-1294-4aef-98d7-2578a129e3da",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "53ef9f54-3517-4d04-976f-be9928be8b36",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8a0d1f32-4f88-409a-bcde-12d329b86b6b",
        "cursor": {
          "ref": "75ce1ae1-3e39-46b8-8002-7cf77b6c8105",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "23716d7a-ef78-4f3d-a240-fcb8a83e7acc"
        },
        "item": {
          "id": "8a0d1f32-4f88-409a-bcde-12d329b86b6b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "871b1bae-8ce9-4f75-9c09-4ba2e8b6f69d",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dd90ff4e-6d54-43d5-85a6-7a2ebab8ea75",
        "cursor": {
          "ref": "6c0c2157-feb9-4d67-bb66-cf98f9bdfe49",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cadd1933-cea2-4e27-af79-1171d7efe013"
        },
        "item": {
          "id": "dd90ff4e-6d54-43d5-85a6-7a2ebab8ea75",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "87f90e07-2216-4dc0-97b4-695547c7d91a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5767603a-fbee-4cfb-aa20-874feb2bf503",
        "cursor": {
          "ref": "8b08b240-b92b-4882-a32b-628bdbfc6363",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "43ebabe6-2df9-492c-bc96-8e4f08d46891"
        },
        "item": {
          "id": "5767603a-fbee-4cfb-aa20-874feb2bf503",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8d22c6ad-8c7b-4398-b7e3-43ab754a4091",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "788ab596-b0e6-494d-be17-610315c8b977",
        "cursor": {
          "ref": "d610738c-3ac2-429d-b16a-e5e3b09b67ac",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "57e172ad-5d1d-47bb-8c05-52456ad1f4d5"
        },
        "item": {
          "id": "788ab596-b0e6-494d-be17-610315c8b977",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2a63264e-5c53-4af3-8834-ca647aee30a8",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "83b87bc7-d62c-43c2-85b1-c804e4808eeb",
        "cursor": {
          "ref": "5eca07c2-bfb9-4a10-aeae-c6712620e73b",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4ea84f35-9944-4652-af26-55d455295c57"
        },
        "item": {
          "id": "83b87bc7-d62c-43c2-85b1-c804e4808eeb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "404e3c07-b2f4-4437-9583-b70c3aac5fda",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c45d0c0f-ea90-4297-b1b7-fe8edc8ebf63",
        "cursor": {
          "ref": "6ba95c6a-f316-43cc-b9c0-e9d9e839ec93",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "fff7c336-5dc3-4d8d-8bb8-0ffe3bae494a"
        },
        "item": {
          "id": "c45d0c0f-ea90-4297-b1b7-fe8edc8ebf63",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "43031b82-f217-4370-99f5-2c4097f28c4a",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "4c3c1117-08bc-4bf8-b734-de275eed4a07",
        "cursor": {
          "ref": "212bf2ac-2b17-4d0f-a8cf-2d629d8ce034",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "028d7cf7-cd25-4995-83c3-37c8510686e6"
        },
        "item": {
          "id": "4c3c1117-08bc-4bf8-b734-de275eed4a07",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ec30f654-59b6-4245-809f-044b62c4c970",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ed2d6829-9aee-416c-8102-74fea9b82947",
        "cursor": {
          "ref": "fe393d70-832a-48cd-b3e2-7b3914c85f85",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8c6d9ef6-69ef-486c-9c89-fb7d95adff1c"
        },
        "item": {
          "id": "ed2d6829-9aee-416c-8102-74fea9b82947",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "76c124eb-6c33-4059-8dab-447020fb6436",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "272bc32c-c253-4211-af81-b6de26910eb0",
        "cursor": {
          "ref": "f92b9dd4-ba42-449b-8c19-7c9ca859fa27",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "db8dc770-80ac-429e-bae3-e06679e7746c"
        },
        "item": {
          "id": "272bc32c-c253-4211-af81-b6de26910eb0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "a675afb5-8797-4ba8-b34b-ddac28a77498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "103de35a-e9ac-483c-80c0-7d0605330762",
        "cursor": {
          "ref": "6666f637-4187-4613-8b28-ecec717b6089",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b56eac68-a452-4626-b004-e3b23732e555"
        },
        "item": {
          "id": "103de35a-e9ac-483c-80c0-7d0605330762",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "81747daa-e016-4f4d-8d5f-a2d968528084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a990011-f078-4dc1-a21c-b819a6635a94",
        "cursor": {
          "ref": "ae92205b-e023-4118-abba-db97363d3979",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "2634dafb-90ae-49f5-b3e2-04e569b3d5c3"
        },
        "item": {
          "id": "9a990011-f078-4dc1-a21c-b819a6635a94",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f126e14f-d265-415b-aa45-9f323c65e894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963ee5ff-8392-4fbb-b19a-6953d523bcdc",
        "cursor": {
          "ref": "e467488d-b6d9-43f8-921b-a47277e6d61a",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e0219bad-9656-4c85-bd9c-b474c630c50b"
        },
        "item": {
          "id": "963ee5ff-8392-4fbb-b19a-6953d523bcdc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "37553699-5d3e-4d7a-96a4-9712aebab8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c47090-159b-4eb6-ad05-8ccbd32af65d",
        "cursor": {
          "ref": "f8253d9d-a27d-4b1f-9995-2fc8d76122da",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b4a0c1da-b5fd-46ac-aa19-7810449477f5"
        },
        "item": {
          "id": "77c47090-159b-4eb6-ad05-8ccbd32af65d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "25eea444-e5e0-4127-815a-6c36efd16c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5f803d-88ff-4565-bdd7-002c54e6437a",
        "cursor": {
          "ref": "ab21db7d-bc4c-4ef0-9086-60ecf9a1b26f",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "c1617d7c-8502-4e37-81f3-f92e0905995d"
        },
        "item": {
          "id": "2a5f803d-88ff-4565-bdd7-002c54e6437a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "79ff55f0-fab2-484c-86e2-cfefecf90409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60ab1c2a-3fd0-4b51-99f8-d9d925f388e8",
        "cursor": {
          "ref": "660393ab-f153-40a9-b6dc-fdc97f1e143f",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5e1f5602-7953-46cd-a4d9-6b81b327523c"
        },
        "item": {
          "id": "60ab1c2a-3fd0-4b51-99f8-d9d925f388e8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a3d260e0-898d-4244-8620-b35a9c379c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd196974-fb24-4f17-a355-ebfd5ce3a316",
        "cursor": {
          "ref": "aae0cae8-3fc7-45c2-ae65-4bb8084d165a",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "729d3c76-03f7-4e8c-a4bf-c9279f6f851b"
        },
        "item": {
          "id": "fd196974-fb24-4f17-a355-ebfd5ce3a316",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "81498521-787d-4bdb-94d2-0e7ac2945f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538836c-13cf-417e-8844-9348ef0c77fb",
        "cursor": {
          "ref": "824bd26e-186a-4ede-8871-0c423b8c4f6c",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b40bf2a9-8bff-4f30-8006-917e1efea621"
        },
        "item": {
          "id": "9538836c-13cf-417e-8844-9348ef0c77fb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "87d1a33b-a243-4cd1-9df4-9bf5259f2e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246ecf5e-2727-42d0-8a91-f68246bc3fb6",
        "cursor": {
          "ref": "4bf36e3d-1523-4619-a247-3f7674cfb77d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "f83b71fd-e4f7-4658-8505-18945c76c61d"
        },
        "item": {
          "id": "246ecf5e-2727-42d0-8a91-f68246bc3fb6",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "87bcca02-f760-4b7b-8e28-95c994edcfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e93cccc-7fd9-4ca0-8cc8-212a2b8bac4c",
        "cursor": {
          "ref": "45c9efe5-271d-4535-ba22-6c0592fc726a",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d45c30ce-d417-4f5c-afdf-a2b5f2dc7c0c"
        },
        "item": {
          "id": "8e93cccc-7fd9-4ca0-8cc8-212a2b8bac4c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "950ca812-56fd-41d3-bd57-1c4233068f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdb74af-b256-41fa-a02f-8b6a8f45e2ec",
        "cursor": {
          "ref": "ce89a2fa-09e9-440c-9122-c075d69b4c35",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8b4e7515-08c8-455b-aae3-ed01228a6984"
        },
        "item": {
          "id": "2bdb74af-b256-41fa-a02f-8b6a8f45e2ec",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "38700c73-ae66-4018-b6bd-79fa90003a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fb8053-af27-4496-8195-12eda9e536e1",
        "cursor": {
          "ref": "62d11684-fa6e-40e2-926f-b29b0c04371a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "44189d9a-e9c3-4b7c-afaa-801728026d11"
        },
        "item": {
          "id": "59fb8053-af27-4496-8195-12eda9e536e1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cb33370c-382a-4587-8bc7-9daa20c1ad3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a98f318-55fb-47ba-a40e-f446bf4b58e0",
        "cursor": {
          "ref": "ff74a8ac-6ec2-4043-a273-56bf79b0d9f3",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6d806e33-9843-4b8e-9aa8-c59781f789c5"
        },
        "item": {
          "id": "2a98f318-55fb-47ba-a40e-f446bf4b58e0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4c3965a1-1d7e-44d3-b829-0bfbf47a2078",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c703c756-cfb9-4fa2-9356-96240c10bf5f",
        "cursor": {
          "ref": "af396a41-12bc-4794-912e-8dbfccac86ee",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4b67a594-872e-4dae-a096-fe1afc92641f"
        },
        "item": {
          "id": "c703c756-cfb9-4fa2-9356-96240c10bf5f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bad9302c-2384-4795-854c-919b6a61a4d5",
          "status": "OK",
          "code": 200,
          "responseTime": 106,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c8a787d1-61b4-41a2-8862-610c1a9fbd94",
        "cursor": {
          "ref": "6497f287-c3a0-4e49-9a42-16a57f4b2df9",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5d9682bd-cacd-4aed-86a4-e120f03d32e1"
        },
        "item": {
          "id": "c8a787d1-61b4-41a2-8862-610c1a9fbd94",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b1c024ad-2132-4b42-a900-bd73637d38d6",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e353412c-215d-4be8-9e35-3ab489e79596",
        "cursor": {
          "ref": "5620901f-e760-4f95-95da-1be030658643",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "60942094-f9d8-43ce-825c-ade5d8bb048e"
        },
        "item": {
          "id": "e353412c-215d-4be8-9e35-3ab489e79596",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c58f575b-3001-4ba3-938b-519e7b7f3e8d",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "dbf1b53a-7d68-4491-a594-a86e57f2bebc",
        "cursor": {
          "ref": "6d51b0d1-d52b-44fe-9cc9-42f5988f219b",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "21de88ba-06da-419e-bbce-ed10fa7e4085"
        },
        "item": {
          "id": "dbf1b53a-7d68-4491-a594-a86e57f2bebc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0b2ccb8-d90c-4970-ad72-935a781e4346",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "5c5cdd3c-1688-4531-8e8b-6456c9908922",
        "cursor": {
          "ref": "e97e1823-bb8b-406e-83c2-9a06714b83ad",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4bed720a-b395-43b2-b815-0c045b1581e9"
        },
        "item": {
          "id": "5c5cdd3c-1688-4531-8e8b-6456c9908922",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "10c8cddd-c9c6-4dbe-9c7f-8dc5657a4c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ebb7f7-d620-429c-99c0-edd076466c5a",
        "cursor": {
          "ref": "231203a8-eabd-469b-8e5c-ef45d3940211",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f8ad3b90-8094-4427-bf7c-17bc5d1d1b90"
        },
        "item": {
          "id": "b7ebb7f7-d620-429c-99c0-edd076466c5a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "671ab6f1-c25c-4576-874f-f80b02cfd1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20bf7bf7-72df-4d3f-b821-d58253700764",
        "cursor": {
          "ref": "d91214cf-1129-4b5c-9304-83a4a5ce2c97",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e980c5df-03fa-480b-a738-df2db21ebe52"
        },
        "item": {
          "id": "20bf7bf7-72df-4d3f-b821-d58253700764",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ff089b17-4b37-4469-b63e-7a10173266ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "564922ca-560c-4bb4-8b9b-88b39e67e733",
        "cursor": {
          "ref": "cc289c48-8df5-4f7b-a22d-c04022bbeb95",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4dea99f9-7d4e-41fc-a264-d4ff5b9ea81c"
        },
        "item": {
          "id": "564922ca-560c-4bb4-8b9b-88b39e67e733",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e5242ace-1e9e-4baa-b08c-57087ba01dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701b1fae-c8d4-459a-8ccf-8b3e5309cd7b",
        "cursor": {
          "ref": "980d5e21-41e0-4afc-b6f9-e924e4c1bbca",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2fc8ee38-1b69-430d-b2e2-2cac9eba4b4b"
        },
        "item": {
          "id": "701b1fae-c8d4-459a-8ccf-8b3e5309cd7b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a014897d-3d02-4128-ba71-5de4e07727fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cd5ad4-05fd-4233-a247-3ea21df1ae00",
        "cursor": {
          "ref": "bec7da46-6992-4699-a484-d17f47c10c23",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5bf1158a-4a02-4e1d-949d-e940c2789ed6"
        },
        "item": {
          "id": "79cd5ad4-05fd-4233-a247-3ea21df1ae00",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cdbd633b-f792-405c-8c33-da756c0b1565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347ffe3a-faf3-4196-b5d4-165bbc88754a",
        "cursor": {
          "ref": "ee146e61-b103-49c5-924e-5e88d22fb71b",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d41512be-ae32-4369-a88a-a30572ef3247"
        },
        "item": {
          "id": "347ffe3a-faf3-4196-b5d4-165bbc88754a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "69d679e1-fc3d-4b01-8443-71111ce2d663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92c0b196-e9cf-4ad5-82f4-79b69ca3f62e",
        "cursor": {
          "ref": "0db447cd-3be1-4558-a6cb-b47069c41885",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "dca11add-c2eb-4858-b642-ae7bcaf21161"
        },
        "item": {
          "id": "92c0b196-e9cf-4ad5-82f4-79b69ca3f62e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8f4c09f1-6f52-4149-ac9c-bed4987dfa0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1542934d-e8bb-40e6-98fd-705a74cc072e",
        "cursor": {
          "ref": "1a26cafa-65cc-4196-8204-f2dd099bca45",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cb175138-878d-464a-9299-473d501dc577"
        },
        "item": {
          "id": "1542934d-e8bb-40e6-98fd-705a74cc072e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "061bbece-9c9a-4676-94eb-70dec3e22d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4df87d-d2c3-45d3-a600-a846425c7526",
        "cursor": {
          "ref": "40530d47-f814-4f63-bbb3-e2455b578365",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "430c8b46-7678-4b0d-869f-fb3c008f7bf7"
        },
        "item": {
          "id": "6d4df87d-d2c3-45d3-a600-a846425c7526",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "46b9be07-d537-4687-94ab-4697ef53b03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687a69b8-7bc1-4c52-a513-c1c0ee47aea0",
        "cursor": {
          "ref": "4de45095-970f-4968-b8b6-c779677d938f",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ff19b1b5-61bc-46fe-b61c-0d441481dfd8"
        },
        "item": {
          "id": "687a69b8-7bc1-4c52-a513-c1c0ee47aea0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "980ba48c-9c51-41bd-8952-c4d0e2fc07b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b08b61-ea7b-44f4-bd04-c32c44dff96f",
        "cursor": {
          "ref": "169a82ac-b5ab-45c5-8e18-29ac4f99bfa9",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7ee45ed3-1483-4ed1-b426-22aca2f09033"
        },
        "item": {
          "id": "b0b08b61-ea7b-44f4-bd04-c32c44dff96f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bb16eff5-184e-46dc-a1ec-1770a9036ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83336f65-0099-40a2-ad9d-0bcfbb949bae",
        "cursor": {
          "ref": "c16a454b-be69-4259-89ba-7ef0d3a2fe86",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c0f651e6-f62f-42f7-a17d-ca570f878856"
        },
        "item": {
          "id": "83336f65-0099-40a2-ad9d-0bcfbb949bae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "113c1977-2f96-4300-86aa-86b8afa30c78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9958827-328d-4589-b868-2ce4b3f95eab",
        "cursor": {
          "ref": "49f78092-5705-4bd7-8e6c-09ec1d88ada5",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "eabb20fb-2ec9-4e44-908e-b5d55cc2c1e1"
        },
        "item": {
          "id": "b9958827-328d-4589-b868-2ce4b3f95eab",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "6cc2964b-2ece-4bcd-b67d-72f93b93523e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ac5f81-0124-4d65-a72f-1497952828a0",
        "cursor": {
          "ref": "4daad88f-e9f2-4598-9d3a-66949b2fa0f8",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "dfc387b3-dc49-4e77-876f-9d297485808d"
        },
        "item": {
          "id": "36ac5f81-0124-4d65-a72f-1497952828a0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2f17b036-1198-4795-b021-c80d4b2dede1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae69a5e-0d0f-4963-a945-65b5d94331f0",
        "cursor": {
          "ref": "8114a43d-46ae-4dc4-b999-80bc5e8e59e1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6a3cce2b-0c20-4e7b-ae97-855eadcc6ad2"
        },
        "item": {
          "id": "2ae69a5e-0d0f-4963-a945-65b5d94331f0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0b54269b-e674-4947-9e6b-287dd2314916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880b1051-9d47-4b9f-a9ee-93a9e24d381a",
        "cursor": {
          "ref": "9ed79b93-7ee8-4a4b-9d6f-f89692f2205c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "49ef33fe-4db1-4652-9e31-2b41de42a699"
        },
        "item": {
          "id": "880b1051-9d47-4b9f-a9ee-93a9e24d381a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "834a6516-e4bb-4b1f-8804-c5ce9d55cba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d329a50a-a3b6-4f0e-9e75-7edf87c7ad1e",
        "cursor": {
          "ref": "524437ad-cbfd-4a0c-8dba-86302d939d99",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e822a75a-8f67-4155-a768-ac004b51a611"
        },
        "item": {
          "id": "d329a50a-a3b6-4f0e-9e75-7edf87c7ad1e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b04ca436-b0cd-4194-ae36-6fcac974264c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8258194-71a3-4631-8285-dde4ea7cdf27",
        "cursor": {
          "ref": "e4465103-017a-403c-99d8-5bd132696ac6",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6744f308-baf3-4c19-bb65-c7f6bb6534ba"
        },
        "item": {
          "id": "e8258194-71a3-4631-8285-dde4ea7cdf27",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "42106b43-084b-4973-b98e-fdad79de9858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8420fe91-4bf9-4f1d-b66c-93d63f146ec3",
        "cursor": {
          "ref": "691e5bc9-5e32-4712-b5a2-c00957806fa5",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c9a6bc17-f786-475c-b064-37ff2e479e82"
        },
        "item": {
          "id": "8420fe91-4bf9-4f1d-b66c-93d63f146ec3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ad7a0cef-da75-4cff-ba8e-97e3831c3516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3270cef-b0ee-4dcc-bc45-5d3e04fec798",
        "cursor": {
          "ref": "d8ee50c3-2000-496e-b7e7-9a9b3b58e499",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "12b87ae7-a229-46f7-a559-96521fe74cbf"
        },
        "item": {
          "id": "e3270cef-b0ee-4dcc-bc45-5d3e04fec798",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "14acfd46-59db-4b97-ae7e-bf047e3a03b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b638c0f5-599c-4d88-a972-ec6010515113",
        "cursor": {
          "ref": "1075ac75-a09f-43fd-948b-3d6cff8b0f35",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e435bd6e-13b6-41fb-9af0-8cd457410747"
        },
        "item": {
          "id": "b638c0f5-599c-4d88-a972-ec6010515113",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8e1efd3f-e153-487e-9d48-ff7b48fd847c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeed9f3-edd7-4561-afb4-1ac0cf763320",
        "cursor": {
          "ref": "0b2dcd68-1467-457f-8b16-f53dd0e30ac6",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "da6784e1-e8ed-4c7b-b85e-11f9eacf2ee1"
        },
        "item": {
          "id": "edeed9f3-edd7-4561-afb4-1ac0cf763320",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "328c7f5c-354a-446f-9d5e-63f42ebe0cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fa7523-e736-47ec-afd2-cc49ad8d606b",
        "cursor": {
          "ref": "7b1101b3-4bc3-40df-a263-8a940ce478f7",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "464e4d76-be5d-4bc6-8e04-f0a64d934263"
        },
        "item": {
          "id": "39fa7523-e736-47ec-afd2-cc49ad8d606b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e722d5e4-8a23-4d20-9c99-b2322fc9d730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25e063a-6e20-4a63-ba04-a511156c0e36",
        "cursor": {
          "ref": "091189d7-74a4-4db8-a8bc-f87a96169581",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "e92e1da5-97c2-4c00-8733-8baaef5f4789"
        },
        "item": {
          "id": "d25e063a-6e20-4a63-ba04-a511156c0e36",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fa3ec156-93e2-4572-9467-85ef56350cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ae2ec8-ab4e-43a7-a939-d27598106d6f",
        "cursor": {
          "ref": "b531f7bb-a0c9-4003-b26d-673d5e0e9f48",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e86cd42d-1411-4ef5-b3f9-99bb497949b5"
        },
        "item": {
          "id": "16ae2ec8-ab4e-43a7-a939-d27598106d6f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a2b8a972-90b1-4712-ad3c-4425cf9928fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3a0bea-1f32-4759-ac8c-5bbb69bbe518",
        "cursor": {
          "ref": "4cd15372-a608-46da-ac7e-7dfa1e1011b4",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f99ef2bf-b38d-4fa8-be42-d0bdcc73eaa0"
        },
        "item": {
          "id": "1f3a0bea-1f32-4759-ac8c-5bbb69bbe518",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0a0e0e88-94b5-489e-809d-cff6b11cec48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3647a498-2bde-491e-a531-b5ce331c9cc3",
        "cursor": {
          "ref": "725aa8f7-1958-4ea4-b707-338857cbdffd",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f2d42edd-89de-420d-923d-d31f000b9aa4"
        },
        "item": {
          "id": "3647a498-2bde-491e-a531-b5ce331c9cc3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fa413c07-9e67-4c03-b0e0-f63f6085a86c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fb9ff3-f3be-40e3-9fc0-3e4caf122392",
        "cursor": {
          "ref": "2d1dcb1e-a403-4171-b8cc-9d1a9564694a",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "87b1436a-24d2-4f65-bdd8-e00c5b8ac5f7"
        },
        "item": {
          "id": "83fb9ff3-f3be-40e3-9fc0-3e4caf122392",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5ba9ce74-d438-4d76-b05d-0b22a536c553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe202a20-af2b-4100-b8be-e290cb8ab57d",
        "cursor": {
          "ref": "3254c53e-cba1-4c82-8e0d-85a218ed91e7",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c7f23c70-d730-41ef-b919-6362bf0b124d"
        },
        "item": {
          "id": "fe202a20-af2b-4100-b8be-e290cb8ab57d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f1fe7d07-8552-443f-ba3a-80e337b3b27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480c6a59-a001-4b48-a384-60f00299d909",
        "cursor": {
          "ref": "a1495522-5967-48a4-9867-8646fd6edbd2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5711f0ad-8827-4f03-ad86-88ea27648472"
        },
        "item": {
          "id": "480c6a59-a001-4b48-a384-60f00299d909",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9723b167-df22-4600-a770-9f92a8174c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd942c3-a2fe-44b5-8d4d-0fb7d1229033",
        "cursor": {
          "ref": "f8eb824d-c72c-446a-9909-5da1c75f6ec4",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a8468869-a931-410b-ad45-dadb5d6064aa"
        },
        "item": {
          "id": "dcd942c3-a2fe-44b5-8d4d-0fb7d1229033",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2c409167-8c9a-4184-b7bf-8166b7301c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efeda97b-55bb-47a7-9d4b-1c201f2603e7",
        "cursor": {
          "ref": "c97ec946-01bf-4894-8d28-cc5da7ccf875",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "2f29e649-aaff-4daa-b69a-ecd985136899"
        },
        "item": {
          "id": "efeda97b-55bb-47a7-9d4b-1c201f2603e7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a277f809-4d72-4a33-9af7-7b68ef8a6824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e163ebdb-aca7-4aa7-a629-caf200cc2836",
        "cursor": {
          "ref": "9943cc2b-bff8-40ac-9cb7-3cc348429953",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "08d65454-fa43-4f81-8ee2-2b2708ae84df"
        },
        "item": {
          "id": "e163ebdb-aca7-4aa7-a629-caf200cc2836",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "1223a468-8468-4793-b179-eb2b89465732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7511857-6c6e-459c-8b5e-0db5b5f57679",
        "cursor": {
          "ref": "8b03461a-8da6-4717-b9b0-96f6cfd1d14d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "41329d10-5f9c-4726-b03f-1dce57951426"
        },
        "item": {
          "id": "c7511857-6c6e-459c-8b5e-0db5b5f57679",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "701f3214-7ada-4403-b7c2-6d9f0ed08b81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e5254b-e619-493a-8f5c-472232bb8419",
        "cursor": {
          "ref": "a8b027c0-b67e-441f-8907-f87571d80882",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d7aff632-9be4-4da8-aaa0-90c4e81ba2d7"
        },
        "item": {
          "id": "09e5254b-e619-493a-8f5c-472232bb8419",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "be06284a-b74a-4715-9d09-13952e930f12",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "70538e11-65a4-4577-bd34-9570a4c3fdbd",
        "cursor": {
          "ref": "398a1879-9fbb-4c33-b293-31ed8b38b0c9",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "71a454da-47e0-42c8-9194-5ad6d7e690cc"
        },
        "item": {
          "id": "70538e11-65a4-4577-bd34-9570a4c3fdbd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3f670cb8-f793-40b1-887d-dcece7483a22",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7d5cc8-441c-482a-ac9e-ba335c60afa7",
        "cursor": {
          "ref": "08b6f588-4b7a-495b-82e9-17dbab42aee8",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7a2c147c-7a16-49b2-b3fe-2bffd4fc7150"
        },
        "item": {
          "id": "6d7d5cc8-441c-482a-ac9e-ba335c60afa7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "13a9666a-4780-4e6f-b6b9-58312dc5e364",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ce64da-7a5b-4ef7-8be9-bac0a030f61b",
        "cursor": {
          "ref": "d98a30a3-b182-417e-b6d7-c4ae60cb0ff9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d2b93d1e-37a0-44ff-b2b5-5cdc5b37566f"
        },
        "item": {
          "id": "b7ce64da-7a5b-4ef7-8be9-bac0a030f61b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "91a1df7d-d2a3-4127-a4dd-6c1a1fbafbf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ce64da-7a5b-4ef7-8be9-bac0a030f61b",
        "cursor": {
          "ref": "d98a30a3-b182-417e-b6d7-c4ae60cb0ff9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d2b93d1e-37a0-44ff-b2b5-5cdc5b37566f"
        },
        "item": {
          "id": "b7ce64da-7a5b-4ef7-8be9-bac0a030f61b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "91a1df7d-d2a3-4127-a4dd-6c1a1fbafbf3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc907c18-f164-4655-9afd-edfeb0c36d13",
        "cursor": {
          "ref": "cd43c2d7-8585-4978-8068-4ea33e32059c",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e1ad7802-6e44-481b-8ff1-ea38f7198ebb"
        },
        "item": {
          "id": "bc907c18-f164-4655-9afd-edfeb0c36d13",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9be25f4a-7a9e-45e5-aebd-7f1798287a93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a216ee6d-146e-4045-bb29-71f89cc78c8a",
        "cursor": {
          "ref": "61228b1f-a289-4e19-a5ec-62a9c35df80d",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "42eb9146-9968-4960-8ce5-75882410293d"
        },
        "item": {
          "id": "a216ee6d-146e-4045-bb29-71f89cc78c8a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "62896c3d-ed34-4647-bc46-81de2dd060e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}