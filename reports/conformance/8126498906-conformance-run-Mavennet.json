{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "197545a9-2662-40a5-a90c-64d57aa94c64",
        "name": "Clear Cache",
        "item": [
          {
            "id": "46690a44-4b85-459e-90d6-4b0402fff9b2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2e6766e-7168-4d99-8d34-3b904d229f7c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "189ae018-7a56-449d-8faf-20e6a7b97283"
                }
              }
            ]
          },
          {
            "id": "ac6b9e5c-983c-4f43-b585-4bf1c6c97150",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dbd5771a-cf87-4366-9df3-6d07aefff073",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4ed504a1-3312-4a34-8e74-a7ca6353c1e4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "16af0c7f-228e-46bc-87ce-82beb53307c6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8a2c2ebd-bba9-4669-85bc-027aa318bc55",
            "name": "Positive Testing",
            "item": [
              {
                "id": "28465bf7-80f4-47d9-8c6c-925d38781424",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66ef1ead-3959-4890-acdb-ef8aa8358278",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "765cf90a-b23a-429c-89ad-43ee457a80fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd54f5c3-b7dc-4665-ab86-3a82133e155a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e3f5198-60d0-4837-b5b4-b98c076e286e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1895ed31-1fe9-42c3-913a-c24ce853e100",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8009ffeb-9b70-497e-884b-33250d8267a1"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0fdbd8c-6a0d-425a-8844-0d7b8557851e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6ecd9013-f02d-4233-9b06-2ec116a34a47"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "687eeebf-66ec-4ebe-b6f4-1186f909a7c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34e9845b-94c8-4461-ac97-eded816bd059"
            }
          }
        ]
      },
      {
        "id": "66cca0b6-6a6f-41ac-af98-8e382b0ad689",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "c902d298-81dc-4c6c-894d-995dd3d4a510",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eacb84e4-0de5-46c2-915f-386ec29ddc2c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bf5a181c-dc86-4c98-a960-dbd05c98c8ff",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd5512fb-0676-48d7-b4b0-9e0bf7da3c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d95919ca-7b2a-4c78-b00c-c29359bcf090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c0bfa7-62c7-4d21-ada4-32ecbbd19949",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ac16d5-0019-4a73-8020-59684f8c475e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fa2b059-f9c3-412d-82be-798d0ffbee98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c2dc05-89d4-46d1-8061-9458d903397d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fed5e2b-fc5d-4795-b572-b169ac41ae85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e468a2eb-ccc9-45ca-af02-cdd86c51c1dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "589fa545-55e5-4328-80c4-9d4ec5063c55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7bc5f7ce-1eef-488b-9c0c-a58dcdd1281d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030b802c-8649-49c3-88a3-fa1c87612734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f2a1bee-68a8-4247-863f-a553dd9501e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581c56a5-4f4b-4f13-aad8-e20d30c39ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5178d11-c7f1-40a7-85b7-4678f25d3e8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d5b1b23d-c812-4d1e-9d70-96f14d287ef6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "705260e7-ad5c-41a0-b97b-0b3beb1f273e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f35ab16c-de57-4711-a18a-8403c7486d6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "75c79e5b-854c-4711-b247-575e07088be0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54580eff-98a7-4a61-97b1-c662ccd7e358",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8e320056-c883-46d0-b536-29b648085a95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fac801f8-7ab6-43a6-bc7f-f62f6ac6d54a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a960f1b4-97b8-49ac-88cc-5665125ad931"
            }
          }
        ]
      },
      {
        "id": "53602ec4-ec31-466f-a110-5dc06f1b4ed5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "67406105-dc7d-4593-8d60-bc86b45bbdda",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03a37f51-3f87-4e7a-b66e-bfc26c07a719",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "3633d3b2-6501-45e6-9d68-3194e9a2462a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecd256f-9faa-4a7a-9240-ca8f26d5a998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eb0cace-7c9d-4776-8484-c1110280c277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718031bc-bb7c-43b6-9383-c16db98d523a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c5f150d-c0a7-4e33-be6a-5c77b34410ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5085d7e8-8e28-4a72-ab2c-6eee6ebe934a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcf874a7-4e1a-4f77-aaa9-8b19755f1d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5581133-05ad-4db6-9967-466a2cfbab11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f897162d-94b9-48e5-b1fd-0f64bcc4c9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0f72af0-095d-4ad0-8939-82ec7d3116c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c2bbd1-43fe-4bc9-9599-c2e934359409",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eba5db-f928-479e-a4cd-f11bc2e0fd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c00e16c-22e7-4fe3-82f7-edc1b70697a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142f37ad-c173-4045-aeea-74308cf44ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64f36305-eb25-4c4c-9906-47d86ed8f67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe79794-915d-4ca5-8840-2816cc5c2cee",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6190dfc8-f856-4cdf-a152-86ea87385ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050488bb-e0d5-48a2-b332-34325bb00042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb9c452-8d20-4bf2-97c5-f1638c88237a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03388aec-90d6-4a25-b102-35acd6523c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25df5c7e-e949-4657-930a-88c58837587d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a14fd95-5073-41a9-a505-5ce1c8e30785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4806911e-adad-430a-8732-24352fb7a5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0356572e-580a-46eb-bf22-16b3297b73f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7130833c-fa36-4ddb-81a3-64841dc8d798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b74dc8d-1b2d-4649-a9fc-b618e988aa15",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64559d54-134a-4859-9c22-754b4319a1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6ba79c-492b-4ff9-95ea-ecc00c161b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a86604-ed54-4882-bd00-470da3f330f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cd35d77-a007-4268-af46-f5e056425aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ca7780-14b4-4291-9f0a-04e6c6964d9c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516e1f66-4c92-453e-9ab1-a6b65105554a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0bd604-2f8e-466a-b125-7b939bec9b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26c0454-06bd-45a5-a076-49f114aad596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0981ec3-698e-425e-8f56-28c90301d4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd07b9f7-2941-4855-a78f-8687b6347d8f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea0d158e-d30d-44f1-9f9a-c61cd8738692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752db3a1-d8fe-4d4b-bceb-5b87b5931682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a83fdf-60d9-4d20-9e85-cd1c2df0013e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea3b98b5-bbca-4224-85ab-3929356a8203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361b98c6-585e-444a-b92d-ebba78ade1fe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f91e0-3a0a-4dcb-8063-07415586ccba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad92668-e360-4366-8d0f-21ee9aaa924a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01337420-0cc1-45b8-84bf-44dda9006cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaec63d2-6833-428f-a0a7-6dc7b05cf6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b02fd0-f274-4fc1-98b6-aeea68a17fd7",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ba4862-062d-46f2-9c30-f7f5401b17f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eef7cb7-a81b-4f9b-88d0-bd9ab2da47b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b0125e5-15c6-4ec8-8ebd-b77c92973e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72734183-ac0a-4846-a0fc-74d2ed2f32a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e519fd-27eb-4a45-83a3-507b49b7f4e1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355fd242-2563-4b67-9be3-d54059c6600d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffaa18c1-2703-4105-ac7e-55e0b93b8122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d95a0fc-27b8-44c0-bf9a-517c81f886bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59944ab3-f5a7-4d93-a548-31c8e5059a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07e1e7e4-58c5-4679-aaca-213a83514c66",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c381b452-d836-490b-a2a4-d3f9b648e3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f31b03cd-e140-4705-abe6-34abae80392e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d4505b-b161-471e-a0de-7cd86d378146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ac6337a-fd44-4cf7-9734-97d9e0c97b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691b7314-467f-49d2-8352-f71db0a9dbd8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26fec949-f0b6-42e0-82c8-f16f2ae15bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c0f713-a2e4-4801-ace2-ed963715c89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c5971b-45d0-4c5f-8e96-40f7728524f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25bf48ec-5f12-4961-a1aa-9de9884b54de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e27b040-3aa9-435f-b310-3c0a067ee536",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad389e74-f1e2-49f7-b553-531e0645f685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0c82ec-4d8b-4b5d-b9e2-57035ec56788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79339c3-6e1b-4234-8293-1f0820a29f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc9e5cd6-bcc4-4c1e-9319-9232082d347c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50612e87-d0e9-4e8b-9ffb-8d3083087bde",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd569cdf-025d-432c-8076-8d08f2d18240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ad2bb14-07a2-4f1f-ab5a-e210be22e321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26838632-aa3a-4050-902f-37293804f130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a86ea572-c265-493e-9bdd-e479f65985e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242bc350-13e1-40d8-973a-51a2b2bc26ed",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342ecc7f-7af8-4b16-94d4-abd2cb8c6a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95935e69-5647-44a6-9a4d-6ed9cdeb4a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6738313f-f353-4bf9-b4cd-f27b7f9b5b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b6dff2b-8f33-49a1-a87d-1007d411389b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cba77e-622f-443b-8626-9880ac114b05",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be785bfe-04d0-42bf-ad98-093e1181e721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee4cd4ba-b09d-4652-8cd8-e74a624f6bf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebe1b5a-c02f-4d3e-8e06-c34c245d7e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6d70701-1214-486a-b552-ff8b9c9f697b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1372128d-1eb8-4554-8bfb-1d39706c4fd4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd68ce48-ca7f-493f-97ea-7c8bf2b4af60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b43f5a-9023-4a89-a538-2f5dc63f5366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e74f93-d2ca-4464-96e6-dcf4ca2835e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "78ccb77a-b374-4cca-8a91-faf0a1d05d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382c8e36-de65-4664-9481-4c2cda2b75b3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08dfb015-116d-45d6-b76e-c6fcd19d0d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbad805f-410f-4179-ad6d-cb4dd70071c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fba224-809c-41b3-8f30-2221f2c3185e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "81772aa8-ea66-465b-b079-11587f293215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "172887de-13c6-4ca3-bccb-e28674ebe117",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46962dc-6aca-4489-b194-066a986cbd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d0bef7-2e87-4b50-9bd5-e827d4e04c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6458f5-2e0b-441a-ac75-e152ed450cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69b66033-0d3d-486d-9cd6-9638e9e34940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82641a3-cc73-4570-b9d7-d021794692c9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36903d4f-d8e0-42b0-bd80-f569cafb18a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6d23ba-83f4-471c-98a2-c8d3de3537c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ddb7276-95fd-4ff0-9c3f-fecc9ae7f463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe68d389-39f0-4ff8-8ce7-052861f16f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b37e18-8005-4d9e-a717-2a806e647fc6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e277a7ec-61c0-477e-bb1d-8d28f8dd30d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bf175b-6b19-40b8-90c7-5829687170f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf692de-302f-445a-b75e-5355e711387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "950e429e-9ef2-4b12-88d6-9649fa9275f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac9c12b-2f99-4936-8b0c-fa897d44e066",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d26121d-794f-4d2a-a95d-3ba28013ae79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f24b3a-9852-4c4e-8863-47a6400df7a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc6d152-b760-4e04-8727-cf159a60bbec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "114bbc1e-291f-41ef-805c-5891a70e6b62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299426dd-097a-42f2-864d-9d0bb8a1543f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a978ac-886e-4fbf-89ae-e5cc74f403ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080f02e9-5821-4c34-afae-ef7beff44178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990c4a85-5c34-4ae9-a1b0-6cef10025ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbd17bd-b3e8-4866-a52c-de2a74e4ec97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72847fa9-97e3-4268-acd7-0a0fb771fb69",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac52cc7-6ec1-4550-8b9b-054bc74deeaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e16c1b-3ec3-4470-858c-e8f142aa6a80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3219e7-1b7f-4011-ba8c-89851ce17de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "34d47f1c-397e-45a0-ac3c-f205ee2a8102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d463302-bf3c-46fc-917f-b46739e089cb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7717ca50-deb8-4f79-9301-22b5a4740ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c60ec61-ddfb-44c0-926c-a0402bad75a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cee7f90-ee88-4e7e-b2fd-525fec5d1526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc9260e-56d3-4c83-b87b-7f424911030b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ff1466-b762-4096-a5e9-ffae37901d18",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1beb3a-95d6-4acf-a9ac-4c6f98464595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c95dcc6-d8f1-4249-9fb5-b367fe698333"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b54cf69-4012-4eae-a465-d985c4b1ea4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b8dcc0e-e62d-4fe0-9366-f55aeeac98fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c82a98e-1343-44d5-9c4e-5b4c966bfa18",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7953a834-3bd3-4ed6-b56c-5802505892e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb40fa7-9bb0-4726-be1d-8b2d1bd9b9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783f3ae0-6631-4171-8495-926556a3724c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f2cb027-93b0-4d1d-afeb-77ad051649aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd3f780-47e7-4956-ad84-f3a2e694b89c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa33774-47cc-4f00-bf69-a68a9f958625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "145cf776-0123-44ba-8553-8a7fa5b346c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6308c7a-3211-4195-a96b-335a4a978750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b88872a-31b7-412f-bae9-06af5344890c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c10cb98-8d42-4337-9f36-34d562aae7cd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e31025d-0315-4fca-8ccd-28569df6bd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b079be-c239-454d-bda3-0bd791b9bba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5da671-a075-4b81-b1bb-dcabd884c878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f4a154-55cf-4d01-a286-405e67eb1469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6843180e-41b3-4dc7-850c-a2df81dfd58d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c005c17-12d9-4c91-b5cb-e0bf05d85279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d900550-5049-42bc-862f-aac558164eb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80edd145-1493-4c3e-80c8-d3258869486f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6a68b3-9d2f-42ff-9cc3-869ae0c328f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8276416-dba8-48bd-bf3d-d9192a995ef4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abce833-4360-40a2-9ccc-5942811282a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "115e8d0b-ca0c-4e00-b786-c6645ae1840b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0280792f-3d62-4c72-a5a5-871c895bea63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f572b621-4235-4cca-95a4-67623a1999a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ccd44d-a831-4c3f-a09d-dfbcd64a26a4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afaf4557-22a5-4879-adf1-1153cc7c1325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2947e6-8c4b-4243-a275-141af0db548a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aace36b2-f93f-46fd-8914-c5910b65c441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ba58b1-5e9d-4328-aad3-9b06f5072f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5d72fa-3a30-47fa-9f17-95ad294a4dd9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948e7337-0610-4f8a-945d-94cb42a90dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a406d6-fcd6-4f6e-a448-4d3f9d3a7f8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0e9367-f8b7-46a7-9281-187ec96df65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eacec5d1-3fbc-42c0-9cb7-757563fd5810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73a89ff-6043-44d7-91d5-1ae8984b542f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4552e350-7189-43ae-8325-a9aa76853552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a2346cf-d740-4fdb-a6b0-c2044c4cf2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c65b4f-12c1-4c92-bd49-19405573dab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6b1576-023c-4e96-a44b-28761de091f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6b9d04-3b71-46d8-88bf-aa5604b0afee",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8abbb22-5562-4a59-bbfc-8b3a8f8122bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9aa1a5b-2e8a-42ea-becc-d2c02d02e713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2f9147-156f-469c-87e2-2e4c9599e997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fba84e62-3bbc-469c-84cd-368fc0a750d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759785ac-2cba-46c7-8900-9cb3a901559b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d144c0f4-a4a4-4f6c-88e2-c941c119e621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f005efc-ecc3-45c1-9ff1-fd7feb1f49f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0480fff6-840b-4477-8215-13f1705a2d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "67b8b3e2-94d9-4064-ac26-0a965766957c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c85306e-eb0d-41d9-8ea8-53c033a10f02",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d639de6-ae2b-4bd2-a8fe-e3d59f401c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0737a295-f280-4fb2-a456-0d40f0a56fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d362f64f-9cbf-4ecc-8996-61fb6b22743e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8da2700-c9f5-48b6-8c8e-f281b4aac9ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea562450-a7e3-46f6-9326-a8f711950b5a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2cc625-5a60-4774-8b03-dfe297adac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c2d34d-4b90-400b-9e40-57360245e835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df6044b-05c3-419f-9592-f5bb6d561e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9674d28b-b512-4622-a472-db56c7cbba56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f8f76e-86b0-4c85-bd07-e6f34f9ec308",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c583140-c9d3-4495-8415-9aff65e53f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1963d4d9-7538-4b9b-9ce8-257bef634c21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a0a396-4579-4110-abed-1cc80841ce76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "99981e4a-b333-4fc5-8019-27377a7a58c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d68bf4-9215-4385-b8c5-8882e64ed38d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eaf603-f9dc-42e4-b63a-6ca66d760085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee1e8421-58ec-4a0b-9ee2-a796eb477f44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ea97b7-c1a9-4c44-ba18-fe277e8729b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5c8933e-e2b8-4d38-8a93-887091f30255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08d52fe-0f6a-4314-8388-d79c465148b1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d889873a-c63b-4d55-8a99-8d3f73899d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92635b4d-8eed-4f45-bf0b-891efd78c07d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e34dfb-bc88-4186-b1cd-6cdfcb1220c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4053a79c-732e-41f0-bbe6-f1f366a4eb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aea73eb-d25d-4e62-916d-293c39669a85",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa99a86-e37d-4ca6-8bd3-ab042292d558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23491169-c501-4ccd-986c-7ac18162e5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776a3ff9-fdfe-4214-9775-b1c3f19ca0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bb989de-4b29-4293-8e07-a208730cbca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39212dc-d177-4367-b9f4-1c8f4a193d21",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f166231-9ee5-4276-b94b-d56c39aa015d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb376cc6-4133-4108-9513-b6ab9b09e4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b605d88-f912-41c0-b2c9-4d3db49632e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8585a8ee-f09a-45ab-b3d8-ba544f651aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a766f3-358a-474a-8fff-16fbb89b2352",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e92cf2f-8a59-4dcb-bf36-bcca97fcc3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbd644d-a877-4308-ac15-aab6cd5fcd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade83d69-44c1-4284-8144-ce74d58e4514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d12a2b06-df7b-4c70-8721-a8816ae58267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17bcead-8d39-415c-b97b-779867a8f159",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92952b3-35e7-425c-a97b-3332fdcdd35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c984630-3d08-4cdd-9e7c-e90962dd2dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1096ffb-d6e6-497e-a0fe-2a7b786b8a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed6804e-ec6d-4971-9729-8949f8a9972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c458c4b-3557-4d8a-a8dd-ebf2060136fc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee66c63a-18f5-4d8c-b35c-fdc6f374e974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46976aa-b0b0-48e7-8eb4-a1e18f51b509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82405af7-f510-4f90-8e7f-0185d430aea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64e224fc-46eb-4893-a445-491577d27013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d7ce6e-bf5d-420c-a96e-3315873bc843",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc0740b-86d5-4229-b4fa-3799c1d1840e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bf12f4-b689-4b0a-b14f-c1eb8f13c504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824edfc9-ba04-49c3-8134-6ad2e5bfccd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4201b600-818b-4add-9c0a-fea59ffa77c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e733449-7a6b-4f71-b8cb-2d4606ef7088",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b225f68-0530-4e23-bcaa-38c68e463689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68b5706-f803-40ee-91fc-b6f1a624dd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1b772e-6fbc-4957-b430-2b55c833d738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "120b834e-02de-4a68-9a27-80c75ce7fa7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d417a0-40eb-41d2-bc46-7aff26c1b513",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a8aa56-f602-4145-9ed5-085091ee63ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966fac00-c9d6-4330-a1d2-ec0a023e1636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67935ea5-eca9-4f53-b627-eb3dfc9f1555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a0f3412-02b8-4422-8afe-d12b091c2c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c24b174-50aa-4c59-9245-388d59652a65",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77fd388-b662-4854-84fd-8d50e491cd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2963d3e6-ac43-4b17-8907-279828770853"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dcf19cb-07b9-4050-aad8-01129ba460aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5c10ad-3be6-4218-9012-48dc66f305ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac332c8-2389-4185-ac3f-3db919b278a5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d5dd16-e957-4965-9a39-a112a3d4fbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "819d2b94-31fc-4c5e-8025-d2786b8339f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad2428a-0b93-480a-8851-e78d4415881b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b37bd2d4-d948-4711-9375-b7738e512eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db359b62-3464-4a51-afcc-f668a42e94b1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caeacdae-fc21-43d7-9f8d-9c37dc316044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077b8955-c9a9-401b-8f8f-49f86bd74761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6744ed-1e28-4edb-b0e7-16904f9d5114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc89994b-fcf1-40d1-8013-6fda176e0a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a7792c-1c9a-47cb-a7dd-3b84c666c3a8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282ed0d4-262f-48d1-8693-9f182432b969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae39c9e-f636-4b61-81fb-068f3ada3e42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43ee806-62c3-41cf-97d9-d6e5ad7d9391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "55400de5-cae2-4f54-bf46-39b5d779a340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a8075d-77ba-407b-99fd-ceb00a96b91a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b4fc39-0d4b-4888-97c3-b762822f9e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6ab6e9-16d5-491d-9d70-4fcf2a9d536e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e50e12-7a32-43a0-8ff7-2437320244cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd85b5a-2826-4a0c-abd6-5e274be8704d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4224447-ef94-4bbe-b530-efe361157a61",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42abcc8-db3c-4493-afbd-4718a01bc811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc954ea-4428-4836-b009-7e30efc7f7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd692cc2-d779-41ee-95de-c0e56fbd8816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a13dd9d4-062a-4ef9-909c-02506a7106bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3df7c0-98c6-4b68-ab86-0c05a6b7bbfa",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f073a1be-185e-48a4-b47b-12cc82d1d4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d42384-2842-4e59-8be3-7416d0a0f678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9ffd9c-7e5d-4b96-82b8-f18079044356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3327ed5-cf76-4d8d-bc7d-848144dc7dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b0cab26-0c47-4450-9e5b-76825bd32766",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040658c1-992e-4028-9e9e-14d28eeb5064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0f9cc2-d488-48d7-bfc0-0c352396c443"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48f30d4-d1d9-4887-8cdb-9f533ba1f350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f0dc984-44f7-4c25-ac6a-5869f7e9a7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b643ad41-4de3-4250-a0c0-1b69b734f80f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae8124a-4e25-4f7e-ad35-88a1cedbc8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965c27d1-ddc9-4c09-99da-fae09675c835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2530af12-1a16-4ba2-b796-fecc85a37936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d8728d-df07-43bc-b874-f3e70ceaa79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367669aa-d132-472a-849b-ad4e3a3d0318",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4213f5ea-34f5-4388-b8ab-cc4d482dda95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d1a1ea-c727-4444-bcc2-4a2ff4f93c0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61a2e81-708a-4779-a469-70c9d46f1e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "63e17cfd-e589-4a6e-9a0e-96e97f3f5bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909e4e8-3400-403a-8fd6-02a320c8fbd0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c064db89-22ae-4713-ad89-ecbe029623eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05480361-7781-4a70-ba7a-6331437357bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6c8554-cd19-4c5d-a531-5ba16f33494c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2933de64-9c79-4a50-8fc2-5ce2545552d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b14b119-fb90-4f31-aeda-38cd059c63fd",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966409bb-7f6b-4291-ac34-bb09e844f3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a194113-9cb5-4b10-a83f-6a9cad53cad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8574b8d6-ee6b-4c6a-95eb-f5e72890c493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa1c101-8442-4b7a-a5f6-9aa6d0dd5828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0e2bc6-78dc-475d-8f73-303d0716c165",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf90b02f-288e-47f2-bd86-67f287a25783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bd8b31-1250-410d-9985-efb95497c644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd17c36-a519-4f50-83ac-01293def9475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6d4be6-5146-47f4-86fc-d8ba83fef43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8a3e3d-1b6d-479b-8011-3904baf928fa",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba0830c-168e-4a98-9d78-ffc970adc0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2af96d-5f15-403c-bd21-387a8b77d514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c6be6c-db3c-4b5c-943c-4497985b31d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95314d13-87b7-49da-9529-94cf15225597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7014e8-82bf-4a20-8f2f-d0f1ef15de38",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfce74a-74f6-43c6-b50b-a5568b47de18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c27c5b-8f4a-4959-8305-20b6f725bd7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d3129e-271d-4643-877d-dce7b146e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7033fa59-c489-4ed7-a3e9-2fe2f728bddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83b101f-af44-4feb-b5b0-6d6349d847d6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54848263-ce02-4d57-9427-5fcda3253911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4488e9a5-67c4-4942-943a-1e89884ae873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e56acf-53f8-46ee-a1c5-f2e2a96c32b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "882b5cd6-83e9-483e-972f-f18913c879d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28cca61f-087c-4fd2-9804-4b4a7a64005d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269f8a8f-a93a-43a6-8a83-5839bc0261d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3479b60-ad81-423e-9a80-274f448b9ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d6963b-bd02-4183-8d92-e790e96a479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11b34ef2-12ce-44b9-b185-254e2258e6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2380e66-4edf-41b1-937d-287df2d8d093",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11600ce9-880f-47be-ac8d-ce7014b29c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d5dff0b-8a53-4e77-862f-150852c99f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8113f60f-7e3f-4812-8a42-df5f49c20a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "da9b6fa9-eafc-4a6f-b606-837d65dea78a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144e5c92-a3dc-4985-906a-d579451437f1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dd1a3c-b45b-46d5-bc31-9c3488687697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7405bb5d-31f9-41a1-8aca-106d12351e96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdddf4f7-89a0-499c-b6db-48c3c504e581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b03776d-7258-4a3a-a8f6-632b92cdd0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5abb3dd-85af-4964-ab11-2b805bfbdbd3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a760d19a-a0e6-4361-bfbf-ee3ef0c26c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d0d966-d6de-44a6-9953-28fed6fc4f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60e9925-083c-4957-886e-a8436938d89e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b939f5d5-c4ae-4fe0-a952-845799f31845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ebc0f6-8107-4ca2-9313-8924797102e7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd1584e-8bd3-46b3-8583-49560fb1579d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c59722-8dff-4210-9517-e457ada00013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f54f0e4-fd00-4411-8ffe-f85d79ac76b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8432bbff-6618-4ac0-9b92-be6c0d5a17df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e91245-5fe1-488b-8050-a814d8a9ad59",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782265d7-1c8d-49cf-8b0b-1f9d5c564e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670a44e8-06ad-4e13-9f52-2981a6da17ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f1a107-0d79-4009-9c00-c49e41580bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86dc43af-dff4-4ec7-9891-0e8a4bc637bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6bc0be-8c28-4efa-a775-71da9044d283",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe05d9c-2adf-4ca1-b944-61e22bd4f372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd7a5dd-18ab-4bdc-b890-0fd30f39c38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b02afc6-785f-4c59-a469-1425a09e2dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b5ddeb-eb8b-414e-9945-cfb1261f0621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18a3152-40ce-440d-aba8-05d76d35eb0c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a8d5ba-6501-4aa4-9eb2-8611d0cb6465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de507d71-46b6-477b-a6f0-f3af3f83f850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab518c0-6bb1-444a-88ab-79898ee16f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7024d743-ff63-4d18-973c-07001324cfde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317c363c-9682-486a-bef3-091e798bce10",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1878963-defc-4560-b283-0128c5507cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc33a72-ce1d-452e-8289-79c827bbc278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803d8f6f-ec48-4a87-812c-9f16716dce62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d71aa02d-7b79-4aa1-897a-0e214bc30157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ce48c5-6bad-4e1d-a9ae-0d5949043ed2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dbef9b-0a93-4789-bf14-67beb09490c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da301196-6790-499d-b1f5-4af5a79bbd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833acbb4-ca2f-4cf0-97b2-f7e634793ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f216918-b234-4027-a04a-aa4296a76a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16aacbd6-24c8-4628-8a88-81e0c6168453",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57c979a-bdc0-4604-862c-61b1a640b3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2a2733-2244-4c73-9f03-784cd53338d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5737ab2-278e-4cd0-90a2-ea2572d4df9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b22485b-6d9c-4136-9e03-a92f5e60045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25704ce-1a14-4103-a89b-53ce0a896336",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540706ed-5032-438d-9e0f-bc6045540deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34701d0e-9195-48c7-90c2-64ced3b3ed6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd08968-4aa8-4681-a80c-0d6998a0afc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf842c4-c312-44ec-92f1-c8fd7138dc27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458c5596-3ac2-4c48-b35f-ee7ebbe2a960",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c793a31f-539f-486b-a818-6be9650a7d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59cbb18-fe4f-42a9-b823-10d3f7ba6e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d8a298-ab26-429d-8f4c-ae6eb26981ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd133f3-d011-4780-9e24-8312d6740df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e68aec-046e-45ce-83db-410773bbb9c0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f08640-2394-4d97-8178-b9369fdfe071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c373d76-d472-425d-a750-c618956e8882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d6ff2d-476b-4d8a-b057-17cb08292493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c57a0317-2720-4a70-8697-9c1269780930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6bc6ae-2ad4-4df4-8972-065627d2b37c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bf28b8-e869-427e-aa1d-6662332be616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa984b4-3f38-495e-a4d9-1c534f2dc20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c32fbf-fa4b-4897-b2b1-7d39fe3f6268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbfbae02-d3ff-4c9f-b672-3e2951e7ea2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0255e66-56ae-4a90-b57a-754169bae314",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c27e9f0-b8ed-40e7-ba87-5acca77ab9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "879e17d6-f922-41b6-b7a3-4a39d2690d5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7856b3-8e44-4b75-83e5-08e8d8cbbad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d646f1bb-84ce-4cf5-a769-b7ef8a087420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f933d9f-73e7-4401-97c9-bebe9c40b464",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9cbafa-d594-457f-bcc7-eb3647ea494e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c98912-7936-44e4-80e1-c8c41e6c91dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ed0fdb-d7c5-4cc8-85dd-909321a39628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd513117-78fa-4bfb-9719-e3e8b86113e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e613c66-3827-4da5-860b-2c6bf09c56eb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16003a57-0abd-48cb-b003-e97d94ab2a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9f2103-5eb6-47a1-9961-4b928f466081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3e6441-ff59-4fe2-b709-384110ee724e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d5275fd-bc47-44cb-9560-826f3fc45cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07ace2e-1919-4415-840c-0ba567735f92",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4422dc-f0d8-49bf-b638-ca968d863c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270dd5ad-cea4-416b-a591-6942fe2af1fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0caf463-2b04-4ff4-96f1-0c0917fbdede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7847d19e-1368-4f06-aea5-1ede96db6ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22c1be6-3071-4593-aced-40305cfd03d0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aecf1dda-25c4-45db-8b51-6337757f81e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12876ab8-ca7a-4579-b0a9-6d8045d7ea0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7739416-f5d7-4a8f-9390-09a011f4028c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c81d9770-32c1-4d6a-892f-858f14c37797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e3a35c-af12-48e0-b48e-9f56a15bf379",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31b76ac-9f74-4782-8e8e-d6b516403c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e277402-9daa-454f-9ae8-55d7bc36dc2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93247947-d8df-4644-975c-0e66e7c653e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5defd5-e698-421f-a721-8c5471780e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6881a9a1-3120-47f4-9d0a-f55cc0329abb",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45234d9e-3473-477b-ac3b-4157f1d9d795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a1e40f-26c5-41be-abec-36a0b1da7b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fdd5a3-0ea9-4585-bc19-a39e99c4523c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "27db52ec-dc4e-415a-ab7f-5c7c54caaea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140165c3-d9e1-4b26-a36e-1903193652ae",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef6be1d-2b76-4983-8983-c05857c03200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e45d1fa-b0a3-4b47-9830-b661ab3f3f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1086af9-5863-43f1-841a-9035c8bee764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe736152-21fb-4a79-a630-3ae2acbf5044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b642072-0967-42fc-9147-661fb7e8e9f8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa941f57-f594-4c93-8a87-4d9191b69ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd62f6d-7130-40b9-9dad-23ead7562245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d63b52a-383c-4d4b-8ce5-644b71a83144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "210c9300-e11d-40d1-b911-eb728da2d1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8995c84f-4003-40b0-9711-8b87f9254613",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5913bc-bfc4-46dc-984b-a43eef9652f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf7b152-f0c5-4f4a-bed7-267888e07773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257663b4-85d0-46e9-90cf-d984fec56e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aba9254-809f-47f8-9c64-13e999e5c262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e90c7d-2216-40ec-a532-5fe5c8b6e613",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f979eaff-943b-4ea5-af34-65dba69aae52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3a367b61-9953-446f-8b9a-ba105ccc55d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755ab1c9-400c-41e1-858e-1f34feb6198a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae07f4bb-88cb-4c24-9d04-04714deeab14"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5ca4e734-7afd-4dd4-b094-df3ce255aa26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "56179166-59fb-4dea-b89e-14e5bdc06333",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2dd95e9-29dd-4f17-ad29-6c50f98170cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a40f380f-e989-4ba3-8fdc-2102e0084524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5862ebd2-2ac3-4b04-820b-2b8eff26109b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dad997f-27da-4c3d-9599-b1e5cf362e24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1abf1375-6ec4-4028-b7f6-460d08ed6493",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae2397d5-81c8-4155-ac2d-cb08b4adb4e3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2c7205f-8c04-458a-a619-0fd96bdd9376",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7fd6c1f2-8846-4875-b7f9-1edbdf2db2c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ed29c8cc-c400-42d0-9a30-247cf8baecb8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b2e5378-3af8-4f70-a9ce-d3dd466da407"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "54478b87-ea11-4c75-9236-2fba1a5e2a40",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "17cbd83d-4acc-4ac8-be09-ed9f7e920052"
                }
              }
            ]
          },
          {
            "id": "d0870338-aca9-4f15-b47f-74ac5773ada6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b6ae8651-883a-446b-8c3e-ef99664b0752",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2730bab0-4f00-4566-8b66-7cf3059392ee",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454554fd-dd30-433c-ba4e-6d229ea796c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3df763c7-0271-466d-909c-ae017cbd743c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e5dc55-b955-490e-8f60-547856ac9f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b4f260-c5b2-47e4-a5ed-1da6a58a756c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ef3f6380-4349-4f8e-b1c4-9ef3e676b120",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba78cfff-c185-420b-9709-ce1b7c71d0d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15c7775d-c3c8-44b0-894a-e5173fe227f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f64ba7aa-e18e-4e8a-8dc8-c0ed25d99c9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a77781c5-1d1e-4e9a-a791-d7701f15cc5f"
                    }
                  }
                ]
              },
              {
                "id": "6c1c0dac-e60d-43a7-896c-572e251209e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "be11ff3c-469d-41fb-82ab-4294d34613e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65fb65f4-09be-4e52-817c-4c17559fbbc2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e687ac4e-2444-48ed-a93c-acaa67ab8ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ac4ea9e8-73f8-45a3-a910-2260bd3604d7"
                    }
                  }
                ]
              },
              {
                "id": "589f9a09-3f9d-4725-9ad8-484bc11d4907",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b8a9753-177e-4685-9d09-3d6381433d6a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a3394ef-bc2e-47b3-b1e8-22e62d98ef35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "70c8396a-652e-4369-b3b3-c515535862e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80886c4b-c479-49ed-b9a0-992f6a594cb1"
                    }
                  }
                ]
              },
              {
                "id": "e9bda210-e1d4-4125-a9ac-bf4e8ed488bf",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "caaa4b2b-5159-4f7a-815a-3f2b7802d588",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5bebe1a5-063e-4f52-b993-08d6482bd84e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67c6f698-8e56-4938-b379-2faea2cba492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4a399e63-6a1d-4866-bdfa-b9ba777f5976"
                    }
                  }
                ]
              },
              {
                "id": "84035d63-bcef-4f4e-8020-85c3b0e14624",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf0f5d06-6427-4b82-8bc7-4c212c510f08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f78f1494-3733-4373-87ef-480e1b4c0f17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30eb3748-488b-44d8-9420-cb72f634a890",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1929589f-b3b2-489c-9ea4-9c0b8c38c40b"
                    }
                  }
                ]
              },
              {
                "id": "5efc8eb5-be4f-4eaa-9013-5866880c8f60",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b66343e-f225-4a3a-8bda-417bf3b67e3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be996384-1714-4247-8058-d49ffa07bb9e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fad2d5c9-c4ab-46fa-a4c7-47190191eda6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "98a81dd3-5661-459f-b6ac-60023912a72f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "611155ca-5175-4552-aa08-7b321df66f1b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd491f41-1514-4d76-b050-f0a15b0449c5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ec19d772-ec5e-4a9a-b899-c3c1f2524a1c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b340d1c-de16-469b-a107-68045f485210"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1872886d-e1d5-436d-875a-cea1de9af250",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "95383ea7-86ee-4358-a985-da28e7ec18d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8411a49-5aa3-4f5e-b731-e50e25234a61",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "41260592-e452-4c13-974c-f4e2339f8179"
            }
          }
        ]
      },
      {
        "id": "e84cfa01-4cd7-40b7-964f-124c5bac7ee0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f2b4acd6-ac00-4e61-9fc0-1c00d390a7b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c42669c1-ebec-4d75-8be0-29e382a17212",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55e73933-998f-4241-880e-0d71358a07a3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50c9208-95e6-4084-befb-7598a0d17e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9c42ed-a44e-40ef-a40a-f19164023a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf822d1-acc1-485a-9f23-f6e0fc8c2115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "493d0609-f807-4543-9f44-cd478b116477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff76ed2-7ad1-4b93-895b-063d9f0181ce",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0562d3ab-f990-4127-b5ab-7e20f59f9a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3379c50-3943-4eeb-9bba-173e83ad6387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8b8108-448e-46b3-9b08-d8016c1632d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "58ad623e-28f2-44de-a698-6e172c498329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c0bd2a-b050-4717-9206-f59dd415b533",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5836173-b9a5-4499-a75e-e27689de36d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99bd103c-5a8b-4788-b38d-785a0aef0c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8814f8-a347-4601-b624-039925640a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c71e401a-2267-4b7a-a02e-88245292b8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1459e382-945f-45f2-95b8-1b381b83c4dc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f69228-d4e6-44dc-8e8a-07a2878d2726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c06f04-12e8-4ce0-b35d-902e24c3eb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bd77cf-d91c-4e98-a4b8-82cc2aa41994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d19b0431-e27a-44c2-bef8-25817c3ddb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a45ead0-0b20-40f9-9785-9162ec4b512b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0821b4e6-0de0-4f38-9a5e-ee1f768edd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e77bed9-b043-4c83-881d-5733ec96eb4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae30406-5617-4290-9dac-54b6c184ad98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "582887f2-ad3a-4575-a5a3-62eed60c642c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbfbb2f-8782-40dd-836e-57eb1fe951c1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "839e6b91-e3a5-45a5-b5eb-df4f2238e31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6301a1db-c8b9-448d-97b9-4b1bc7b91a60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2493b7-9319-4343-b8cb-3403c47b655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87a6793a-5bc4-4a7a-87c8-5f336279df73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40803276-5d0f-4194-a76f-e788f602b552",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e74964-a0ac-4f6b-af5a-7091bd55684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f377de2-4c52-42fb-9a34-0fd37f57fa7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b764672f-c437-4d89-aa63-c8b0b3e1921e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "365c69b9-bc5f-4605-aba9-4aaaf3084538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2209c64d-d6db-4793-b902-debb0598d2de",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77edf479-b974-4260-b217-d7196f47966d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2849617f-b3df-41aa-9748-c171bc33f4cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92e0ce4-cf4a-4758-8444-5a6c2bfcdde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40af6f8b-adbe-46bb-8ae8-9dc85b919836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b7aca9-3b1d-43da-93c6-a73ede5288a4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d73acb-7476-4dc8-aaf4-c24552a4308a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e93a552-5f67-4a2d-8ec6-78e3089b6c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e933a6-9a59-4164-96ea-bd3952c94d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7914c8-a0fa-4d2b-8a05-8f953df33c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c1c6676-8e55-4c5c-b55e-37daa0b0cf68",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470d1e9a-97e4-45cd-8ae5-2fce46604a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1289c185-ca2b-47db-8123-b60e9dc06a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cd50ed-2d83-4144-bb46-3cef3674ba8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df684d2d-2134-4c90-aa09-b986c8101204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b253795-0aec-44da-9c12-82789e042afa",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba850163-e718-453e-a77f-848005e6b00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d6c7fc6-d31b-4b0a-aab3-d57a0b3d1d0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4159006e-e4bb-4730-9aff-b029f8fb38d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c12daec1-f5ef-47d0-b217-8b057bb62e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7197e008-d4cc-4e66-b410-e49753989da6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ff4fda-e9a6-444a-9f40-5803b2b6f3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dff0859-be89-4f91-834c-05ff5b1859dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a881905-c627-4fbc-85a8-8bfbf600d9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1c6c0f01-9ce5-471b-aee6-600979019205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4c7d8f-817c-4f39-a695-6e7383b66af9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3846acb8-0512-4c28-8d29-f1181f4743a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a856ba-d19b-4183-9c7d-3ca147e06ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3a5c20-53f6-4841-9807-e754a08c7822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba2f887-410d-4f82-8f9c-1f2c0c56f4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c003ea-e060-46c6-8dea-016f5751dd03",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01954ac9-f744-4577-8895-c676d3875cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63a14bb-07bd-4f21-8475-d76eb060063b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992c78fa-c9b1-4291-9464-21ab2ade31c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e11857e-477a-4139-a152-b353418cda4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6fda8c-009c-4d78-b15f-57a80f0ed788",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71bece4-4725-4f47-bed9-c36bb595f369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c396bf-1767-455d-9330-3c21d1fdd41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4942b68-e74b-488a-85b9-027e30dff027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "44668ab0-ae33-4956-acb4-221884ca6330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d3073-8880-4482-b828-ebb30e0613af",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad40ac7-9094-4383-9e8d-1b35c290e92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e803f485-3ab4-4f2a-bc37-3c4a3db5eb4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846a133f-894a-4925-b55b-07414283af7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e63de9a-ec33-4d76-87ce-c52c432bb18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6fa5484-f573-4ea8-9dd4-a20f559888f0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32664055-5039-49e2-9956-d66e025d5835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45f9188-4eb4-4f9b-929c-c99c0f15e9d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f5a3da-d376-4c44-bec3-62d61b4be464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f90dd100-347f-418b-a5ea-e9a0c892bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d523db0-9931-40ce-b579-5578d2759b14",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e37615-7c14-4d7e-8513-cf62ae14236b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c807873-9a27-4022-af11-fcb8aca06ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ce6e4a-b717-40c0-8a63-d56e2d999882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f71c5cf7-1ee8-44dd-80ea-be20972d2154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c43f14-ba96-4017-8e90-3ecc801a6599",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e993c3-11ba-4c71-a813-e747765fdb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e5195f-28ae-436b-af9b-d067360d29aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6978bf64-4e54-4017-ae84-e72947eee362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74c578bf-6aa9-4aaa-8db1-730b45d7f5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a79f8f2-17ad-4276-9599-94b731e13d0a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45647881-9593-4143-a941-be57051af318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf78cf8d-e929-41c6-8908-0ba811532ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51b746f-91c3-4c4f-8370-fdf260d1bfdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80e6a277-9ddb-4054-887d-fc353445d6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e088bd7-8c83-4948-adc7-91f9176b30af",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f4dac0-2b43-4571-b85a-b0b73d3ec93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d26b17-2430-4f26-8c55-7d0e4e3cf936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f971db2-50bc-4f8b-9614-4717c08080c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44c1fb62-3f46-4387-8777-d1a421121a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f08567-5dc1-4698-bb9e-2391a1386954",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc9533b-3c5c-4a17-9278-7ff06d731a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48d21f6-254f-49c2-920d-59928ec935bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51b27c7-3b64-4f4d-823a-a5c9afbeab15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec649e06-a88c-4770-bf5e-09c16909201b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08b592d-19ee-485d-b212-66bbf5fbb0ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5a7d58-c9fa-4945-9981-713cc87a2ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8da3ec-0e9d-400f-8320-8319225f68be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335e9271-a0f4-4674-9c12-03cc88ba9189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adea0ccd-1af3-4071-b07c-f0f3c854d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b662be5c-aaad-4677-8660-0d1589cde685",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045b678c-a0c9-4686-b302-6d29bb2067cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8a60722-5415-4a69-8e0b-6bcb3b4690c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371e3d0d-61b7-4cff-ac3d-50a0f1a16de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "717b53c3-1bb2-4335-aa50-6050f6d9b2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc19a25-444c-4e1a-a897-a1874b328193",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5f24a7-3766-413a-a71b-f16dab81bb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba09fa48-76d6-4861-8dc7-ceff2f7b9138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089d999f-72ac-4687-8f51-b3bd9c95b8b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32042b52-e35f-4eb4-b00c-aa13b0348455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be8b2502-5caa-4a69-9670-648ce3b02f67",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a30b2e-d136-405b-9725-bc091953c06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f6dcf9b-9b10-4f1d-a1c9-7e36a8aeb948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928ea729-c742-4776-a9c4-330d59510c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a564df-6c42-4163-902d-c3869b5f92b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462b9232-1768-4187-8ed1-63b5681d4369",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd17cffc-2891-4f40-8bfc-60588b523cf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa191206-8056-4b4d-a38d-db75c29b0276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c6a491f-25a0-42bc-bf02-8ff948e94183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6606dce-388c-46d6-936a-a0a191180d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77861f79-db0e-4c44-886a-4608189076f3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10232d14-752f-4c13-bb03-f190f379df82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e32725-dcca-4a69-90cc-38014f101b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37525cb7-8790-4f26-9ee8-5810c2d0239a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73caef7b-ec5b-4878-b3bb-6cfa85b5dceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18182475-b502-418b-9284-9a089f2804d2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b77fb4-b386-4264-b410-b2cde34bbe81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc04d481-4a29-474c-8763-d3ee9a04e768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2727821d-cf84-4e6c-b949-82fa9904ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b930485-6ac5-4a30-96fd-06d73952ca07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f969c7-3f41-4e1d-b54b-a013b28c0cdb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c60b4b-5152-4248-9ee6-3a5f330ad29e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b7ccfd-02ce-48ca-8c5c-09f289a09acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bd9f24-5f1e-4b39-b9d2-2267a5056227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde063e5-eed8-437d-82ba-15a87ecbb885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efb65d01-d5cf-4722-a7d5-632e5e9d83fd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00887c65-9d68-40a9-9143-f4e79936db22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5309ae-4cf1-4457-816b-269d5924144c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa87fa9-235b-4999-bb59-2598eb39edc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32811703-3d29-445f-9357-e88d127e7703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d94ee6d-23ad-4095-a76c-fc165cac68a3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008b8bb-fcaa-40d9-8221-0e35cc19af8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d963b41f-f645-4678-a572-e22b2dd8e000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518afbe7-e129-4585-8854-2e77063db142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20a39681-1d6d-4c9c-b115-91ddfc031030"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ca2c3d39-c335-43fd-8177-5b9fbc00b05b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c951c703-62ba-4841-b60f-ae9d8b7d7b9f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d720a041-7985-4b69-8b90-835a4acebee9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d76c32ef-5574-496f-a387-b6e677d36130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3856fb79-7ee8-4ea2-97b5-317668216d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4eacf82-6e0f-48ff-ab8e-2a12f3b5b611"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55364244-a900-454a-b433-fc91757cc32e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "508f0fb3-e32e-41bd-a51c-c3b76dd76d46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5e5b218d-bc24-46a1-8cb2-e0a27873506d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5098d39-4cf0-403a-baf1-f45573d31c8a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e91062f-e5cd-4a96-af5b-d717db3d767b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2af86ed6-05e4-48ae-8dc1-6fa58dcf2eca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cc7921b-53a0-4f6d-882a-441bc3181b32",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "378f4242-f5a5-4cf3-9fd6-dff405aa66ba"
            }
          }
        ]
      },
      {
        "id": "b76da5cf-97e0-438d-90d8-92dbc047a432",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c60545c3-e4e4-4ec0-b50d-e32f4d45e547",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bbdb3711-a489-4eb8-89e6-267637d0203f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb8b348e-53e2-4ddf-a9a8-6ff21724afa0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee0e950-480e-4a16-891d-1450040c7db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6782469d-2ff8-4871-b6cf-3d2fcfaecea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3388303-3de1-4cea-9a2f-454403a5c9f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2a964e-9a10-45f3-8d49-ce6e8ce08026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c4cd02-573c-4b1b-826e-fd360014fbca",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22564e1f-fe22-4ca8-9a74-eb1d70480578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8d5b4d-5f9e-445d-924e-73a3f7f3aec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9100d8da-acca-4210-abd2-44c6affbc61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fee5f6df-77a5-4394-aca0-90a669789997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55ce71b-4c18-43a3-bea4-5277c020ae32",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7761ab3-5fd0-49db-a00a-e17ff9944c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "295a095e-fd0a-47f2-aec7-a1f0397c5191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2428f1b4-9381-48ec-bc05-57f8a5a9e18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be7eaf8b-b7bb-4b06-8c7b-860d1299af57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb3c610-5b3f-4647-8853-6eace3e2bf3f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab54119-cf0d-4be4-a024-953e42dc30ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab27b54e-ae8b-465f-b46b-e516095f40cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd1ac07-c2f7-4943-bb7c-530c86e4ec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3e5a01-a755-472d-88d9-e376358e6992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bd0a95-7a1c-48fa-96e0-dbc022ebc8f5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af45ccee-dd54-4b92-a536-a39e32335fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3476705b-3c5e-47f3-9faf-9413f4dc1874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b2d45d-bcb4-4cf4-b9e1-9a9a6f186337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc65ca30-800b-401a-af47-d33378ece518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29940a10-533e-466c-9a04-c97e7114ed28",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cea46b4-e8d8-4c27-9dae-9110570e767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2714ff0-c970-4d47-ad11-0761b1aa9548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df9f5d2d-bfff-4f84-8283-80463ef5f164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "624e4a4b-ebcd-4c1f-a2be-07194fa1118e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "061a8a71-5136-4ecd-afa6-b784268596bc",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a4e122-2421-42d9-96c4-930c01c80ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e3a05e6-1105-4e4c-b0c0-d9ffebec5619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1692b7c1-f588-4713-b0b7-ef21dbccf83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "acb71a83-29c7-4666-9540-da70ac02af29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095b4e9a-4d8e-4c20-ba6c-aba206b9083f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6121948a-1d56-4425-b7b4-0a7b9d897bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d3bc7a-4fe6-4113-a1ac-328a380929c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4537658b-43e7-403b-ba44-7706a04ddacd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a304e469-47b6-4d5c-95c9-6854042a12a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d643edf6-e348-4981-b827-c1e727695f08",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7828a65-4fa0-48b4-a73d-a20d0cf2e192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94af1b85-0028-40a9-b703-262a4abf876d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b6c2027-5be9-457c-afa8-70394a3eee13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0486379c-5ea7-45e1-a991-52cae6ad3cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bcefcc-92d5-46dd-baa2-2fc67f33099f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ef4df4-8c4c-4075-93fa-0159a8f8eed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69daa34-3bfc-4491-83e6-90a41af3d157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7572f86f-b0fc-4e87-b3f9-09702df3edda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "118cc2d1-ac26-48dd-8cbd-2c16da05dcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce609ec-5b20-4572-92b8-a9b6f328157f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ca4cd6-02db-4924-b13c-9cf7f876125c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69638e1-fccd-43d2-97a9-02eb494b3854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dab7761-dc53-49d6-b903-b14964c6ccf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0ae387-9b57-4311-a3b4-f7c50003f273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae672fd8-453e-47a2-a49b-4cc5fe38a32a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884b07f6-fc2d-483a-8aed-9558ca587fd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "852764a4-3323-4c48-bf47-144d5a752e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0b5f71-8b8a-4cdc-949c-a2a4ef2a3c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77f8d91f-f852-4076-953a-19d4e96442e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a200e5db-ebc5-4fad-b68b-fa4b56612f70",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72cbbe1b-1602-4211-b1ef-ea1dd93ff11c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40016132-332d-44fe-926d-efd0f6dfeb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6960c3f7-4c87-4699-b3a6-2885f60601b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e95ca4d-3f0e-4784-b46b-5342ba000abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d7580a-5b25-493c-904b-cf8862caa506",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1310ed8e-45a5-4949-91fd-87a8cc06061d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a266cca3-7221-4f79-a79a-0f63232e635d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3261b565-5225-45e0-a564-a0de4c330650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc9cf7a-a821-4930-b7a6-b215b0dd8163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed05159c-3c06-4ad8-a8eb-3daf80ee0738",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7d6d62-3071-4fa1-85f4-eb31f9db795a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e91ec73f-bf94-4703-ad29-9ff4ade277f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c12eb05-7d96-4b1a-b52c-66e839dd39f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "37497002-4bde-4ce6-bedf-e08c6fc16f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c84d05-f569-48e4-aac0-460d79445f25",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f63ebfb-a947-42b3-83e4-1e3ca6ecd999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce957488-d718-460e-a5e7-3ba17365a919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1cbf87-202c-4952-b9a8-5d523d1c66e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "00622775-2222-4c78-9f99-5d1643eadce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e602fb1a-b991-49be-a65f-62b642931424",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be522b7a-3c61-4245-a7f8-08abf942a7f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661ad0f5-1253-4b14-9c3e-80b1e7902d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b755a538-4b90-4900-9854-9c039f001e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "363b5359-3030-472f-9bd7-d841e23260f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5410a2bd-b379-449d-aa7c-e81a98af6eff",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3738a3b5-3800-4527-837e-1894c8753445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2e18b1-b3c3-43f1-9c14-f3e2204b8b24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888f2c87-59cc-44a5-9890-a85f99ecda17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c91718-b30f-471f-a998-3c7abac18293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cfafc4-6b2b-4e5e-b697-4a5cba13ccbc",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9244c448-be26-41ca-80c0-745448ed691e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec06735-5ef3-46e3-a107-c40e47f43b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb065e0d-7924-499b-8886-e9e99324e1dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80ab7d8c-a162-4b24-8e81-4ea4ad1b73a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14b4e970-5bbf-495a-b334-a98acbf9d5cf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374a41d0-08cf-4382-9699-c80f266a2647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "877abd43-aa00-4b72-8b35-2143d904d611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53d6899-24a6-4e4b-bf43-3917badc1a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "302a70e1-828f-47ec-87d1-b316bb3f576f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0be2029-1455-4628-8633-a0fcc27da585",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951bde00-f5f1-4b3a-bc52-4de5532cc82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e05ce5-89ee-411b-9f1b-e8580a5f9cff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a02cf52-aa16-40fa-aabd-974d3477a62b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cab57f-cb6d-4836-8e7a-a267fb739da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae69a4ff-4d7f-489f-8335-6a03582b0c45",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad045a5-e7ec-4c14-810f-2ccf00aa20fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796b1e00-e4f7-47be-a5f5-5a9159bedd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9082d965-08d3-4be8-9b85-d6a97e8eb3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb5723b8-a9a8-4c38-afc3-897c0a6e9632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a471dea-70de-4d45-b833-49d1ed199fb7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d2c33c-214d-453e-8e40-b20021c361da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755be633-57ac-47b1-bcc7-214a4b6fa83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783b2dce-9554-446a-a003-3d9ac38f9b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "666814d2-5366-4a4c-a987-30dd8ebc3711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16046e46-d4f4-48b5-a2c2-9b8886a0de05",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b22a8e1-3a0e-4fec-8120-6898269e01a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41f534f-5d96-4ab5-9ab4-f881850f8540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a67643b-344a-406d-9dc2-42328a5fc6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89bca5b7-f9b9-428c-ad22-017903017016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f2cee2-0aa4-400b-9ba8-2167321eec5d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea5630b-6a84-4397-8582-406aa6a2564a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a43b74-5a98-4623-adcf-67c174cebea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f332255c-2343-47d6-9789-28284d5b0b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53de8461-26c6-4d2c-a05a-f44a96b955be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6651328-47d4-4f62-9a91-7b9ebe3d29e2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f1a1e4-20c3-4d48-8837-2135510ce433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9231734-e2cc-465a-a317-fcb33fe74200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735107d3-ad04-4785-9dc2-423755931e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee847cf4-74f2-4d53-9df0-72a0ff6c0720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8c0f5b-cb1a-4226-b75f-91ee5b60d06d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe29667-6a1e-46ca-b541-fedaf7d7c4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17322d0-2907-4ec2-ba53-aa2dffda226e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fededb24-eb2f-46a5-847e-f1769f52c672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b150bb-0367-472d-a9c9-4393322769b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87463f19-273e-4a37-939d-ca79050fa50b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0c1a06-e21b-4597-88ed-0a9d1ad5d4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37c292e-85fe-4fa2-b939-dccf59b4fb26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aa9446-67bb-4267-8e40-280b7c2d5853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07679983-14a8-448e-bddf-1d5ef65dff10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1602f9d-2e67-456d-92a7-99b2ca36fa1d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f005a57-0a5d-4cae-b59b-8afccaea143c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746078e9-5b40-4b33-a5cc-4cdbbee56e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e49c93-387e-48c9-859a-e8beb7514579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c4dc0a8-10cc-4a74-94b3-e589f66cfc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c99b93-21a7-414f-aa28-63ca7cc3a54a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97bf6ed-5dd7-4bf2-9747-7264aff86913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "535c80d5-d75c-4444-a0a8-9eb582628840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c906da5-a944-4f31-8b8f-19805a44f0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c299a98-11e1-457c-b488-b07fa113f778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce351bf5-4d73-4940-812a-bf6e705fbe69",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8f1d53-b5f9-4378-bb01-90c8c1a99013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08027d05-ad87-4224-838a-c8ca39a692da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877f87fa-ddee-4454-a8eb-691f7f3e51be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23bea86-c1b0-450d-a5a4-d154926500e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163b6a82-d52b-4dc7-831c-f2d25566e561",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29663e05-e0c6-4ab5-adbe-cdf183423f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c428f03e-204a-40aa-b875-7d694a16ed8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52513cbc-93b4-4cf7-bb21-588f9ab70d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9bc6295-494b-4d5a-9834-4f6be126b185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd6fa63-12f9-4445-bbff-0ea6856165c8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cb7b528-0045-4496-b32d-b99446f516f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1751db35-0bb9-4f06-a9f9-b6d1231bdade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dfa28d-7312-494c-8e96-f29a88c9b5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0458438b-cb5c-4529-a41d-1c2120bd5012"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c025113-98f4-4440-b1c9-089a5b31cb16",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e116b9dc-3d08-43e8-b597-6911f488218d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30810651-9117-4ca6-9879-459302ad20d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21080d9-54c8-4853-a7ed-b1d99df077d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1abe8b-932b-468b-babd-1bd607412be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78a56b1-1fdf-40ea-852c-a68e0dcc841a",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ceb9cbc-bb0d-4e58-8c2d-b57e8e41bd05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14b30d6-fa05-453e-8a97-fe7bf9bea8df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c634ed-b37d-4b9d-a20d-0bb1a697ca5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9617282d-6d6b-45af-882a-2475b3e6a19c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cf3423-b494-4128-8113-53cac1e10eb2",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d00445-99f9-4767-9331-4c26ddb81a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f53509e-8c2b-4c31-9522-663f65d39657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7bc42e0-ab64-4b08-9aa3-3a60320eee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f8c9f5-2beb-4247-86ed-b2576128849f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bcc5366-c462-449c-b7f3-b9ed07955a6d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2ec17b-c4e5-4b66-8bfc-537a5dfbb050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562e9468-c201-431a-a4e7-8f34ae435bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a4e18b-dd8b-427f-860f-24531259cf71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54956a45-7699-4937-92e7-d4827f663125"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b4176f5-84c7-44da-8342-8e83f4bc6451",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c117503a-a434-47ef-8e7a-e26b99ca0f45",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055413f0-e370-4c7d-b503-9e8cf51c5900",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb2f7bd-0ff9-4eed-979c-fe306f5854b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab9b0b6-0cd6-4792-a2a2-238d0db49f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc64bc59-b2fc-4319-a3de-d70533896fc5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e2588d9-be98-4b4d-b940-cf8d47783115",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "309cee68-2ec4-464c-a544-62060ae607b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "339172e4-6d0f-47dc-8233-e8c7f043a297",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "613503d4-7b8c-4247-b839-ac0238528a02"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4830d1d1-cf25-4adf-b8a8-9a63752e665a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "59f45784-4a50-4edb-8b34-290919946584"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0d94451-15aa-448e-92d1-18b5f1aa0ab5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67f70118-1635-4a8a-bc59-c2a405e18875"
            }
          }
        ]
      },
      {
        "id": "d2c9f7e5-82d2-40fd-a250-f195b68322fa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "3e9fbe10-d795-4b65-a871-1aa691a8e67a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "012de7e0-7c65-4950-883d-474c9d415e89",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "49922e42-4caa-46cd-84ca-9e6fb32bf363",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa48769e-52c0-4fe8-9c76-6fa2d02da1f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75db2b8f-88a1-4ec9-8902-1ae2cc7e333c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5c2f1c-c6a8-4e4f-8a7e-b277bb301252",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5940358-de11-492e-865c-9d0e2784d93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba9c129-9fc8-440b-8e0a-a3d6efa51d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26509ee-01f7-4276-bf03-19c559570125",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da58b222-46fb-4389-834d-6308e98bf6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5265e95a-38b1-4a08-b0ad-273126c859cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9c619f-7c31-4669-b4bb-6a6a9b449cab",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac3fb43-e0c1-420a-9dca-8abbd4109ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a72665fa-a1b5-4b3f-8374-c7a9365d4319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37633afc-111c-4105-bc9c-ba8d3a5de3bd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3659fa-0b50-4caf-b384-952766f4f85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf55dbac-d657-427f-82a9-dc2b40fb340c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d0222c6-0d61-4975-84f9-9cbc66395c4b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa52b6d-628e-41fe-93b5-c4c08ff56320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefaebd3-3bf8-4a05-a9e0-73c9737e06f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc57187-a2d3-4fdc-b9b8-b8c1a6751758",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33494794-ecc3-410b-8406-adb4f49a05cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5df8a7-d536-4c5d-9290-438b6cd162fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8b725b-c63e-4399-b422-efdaa1f4df76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab84f481-dad0-4057-9bd5-41d0620057b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b61f0e-e21e-42c2-b459-f955142d30a7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfeb48b6-2b9e-4827-8fdc-47a98b925f97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7099b5e-8ad3-466e-a106-c8b8cb5c0b76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c380abf-3c2b-408c-b08a-2e966b5b8cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2784ec-874c-4bfb-b57e-cb168750502d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cbfef3-3aac-496c-a389-c39c6f6765e4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7785fd-4cf1-4c12-a40f-433382c9ad19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bbc6257-cf3d-443c-a3a3-e7d08b91c5cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82475428-06a3-4af5-b0ca-84b65c3beabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9830b9b9-398d-4d14-9695-e2a44d84a889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0ec9fe-21b7-4044-b6e8-3d9dee53b34b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37237465-6866-4600-9969-1c0451b44520",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b852cac9-d9a1-43da-bc94-d0e699efa557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bed1d3-f85b-415a-9b99-c48a0a812de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4593555a-c496-455c-89f9-aab181500c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212ef720-7b14-4a6c-bfcd-094f27d6d226",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45688d63-2a44-40f3-91aa-72bb12802ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb84ecf2-2ee5-454b-bf0e-a20f6ed18fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aab6dd-d057-4d82-ae7b-cf20eb612d6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cedf725-5124-4dd2-bf1f-fde2d6ae9745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2deafe9-2828-4f01-98c5-bbe67e9c7944",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833df88e-00c8-4f0c-87cb-d537c291f46b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b4c38f8-32e8-4ed6-9f3a-2def166aa49a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae33487-c040-449c-b2e8-92c563a4d7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0587abb1-830c-4c75-a37f-50f8eb26df57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "accc87fb-23b0-4c4c-ae2d-18b89e3c5e8c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f24ed9-fa99-4657-a9c3-3c8024fb7820",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7867a5f7-4f7e-43bf-a4e9-593afe2ae3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba695d4-3821-4912-980f-c19ce1505ae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916c131c-3e15-4c8e-82da-19ee2834c6f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9883dfe5-abc2-4429-93f7-9e520eaa76e9",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f8cdfb-c29d-4574-906f-c8ed4af4d7b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf5c614c-ecd8-4d37-99cd-265b2c7f410a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1384617c-3207-4621-8999-240c0922ef67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa66d2c8-ca02-4bd1-8a8f-d52595182ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531524ec-7b5c-4289-a76b-ca509ed9cde4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d568656-1bd0-447d-961a-4c15a7c5d49e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a882cb-d0dd-4a40-9b2b-cbc2dea8ee59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e48fe11-de7e-4dba-8b09-be23bfd6b3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9431db6-c938-4f53-add7-0571f694bdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1802d890-91cd-4dcf-8d2a-d1495d132b75",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfef1dc7-1920-42b4-8eb2-5298bf4c3b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eba36267-207a-42bc-86b8-99da56dcc57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245d7cd4-90e0-4818-a431-57e7801dcd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534f09b0-8752-41d0-8390-dc8f526b612c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3531ba2a-3dd3-474f-890a-a4e5e3e37c8d",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e2e9e8-c1cc-44c2-85bb-f25613487da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa52a10-f599-4ca0-8c41-676c0eb48a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8529bfc2-0cc4-45fc-b038-aaec132adc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0116b05-38a0-4fca-b637-f0f64b8d8dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b2f24-62c7-4ed2-a02d-8270b59b15e5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1f1f61-96c0-416e-91dd-227a529b450d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad4b51d-0010-4d24-8697-25d2a28702ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a71ff1b-1aa3-48b6-9987-cb1408d9ec20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c53c5c78-0306-4e02-b2ea-afc0b7ee959e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0882c9c1-2d98-40dd-8e3c-86ad642f9b91",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b8edc1-a8ec-4389-bb11-4371403e4525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdebdbb-edce-48dd-bd90-f56b9b6b112e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cc317d-0c9b-4343-b8bf-cbce1aceb7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9c8abc-c7f5-4d44-a416-498da9616e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0737993-b124-4e26-8bfb-4ddc27f3dbe0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f6fcdf-87fb-41ae-80e5-5223d41bdc36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ea84b8-d8a8-448a-b85c-09898a445319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028f434e-9e9a-4974-8a70-e47714d94e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeefdc65-2c6f-48d5-88be-9644795256a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cfa40e-dbba-4dc9-80e7-671b960e46f2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c75ab4-9f83-4798-aa5a-23591cea9335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97749779-9a3c-47f2-840d-4a6c76d52462"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e89519-0559-4d58-9d8f-67f097c834ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb197ed3-3b7b-448f-ba92-54df3759ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32431c11-ac38-44aa-aa73-6ad849610729",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29bc65ea-4933-43bd-a99d-b42ce61cc654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e1fc4e6-1216-4a4e-8a5b-205a97c040fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54882dc6-bc1e-4166-8503-99697e42fff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0da70a-c905-4cac-9603-947b6e53f866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dd281f-7194-48c4-97f9-58449d1bbd92",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24773e49-c62d-4282-b316-644249466e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5df7971-873f-4f08-9951-fdc7acfe11b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef8f2a2-473d-4f84-9629-5ded44844701",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae8ede9-29b4-4e94-a78b-99a2a9e58250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c11f5ff-099b-405f-a02f-0824f9c986d7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042f96b0-fa32-4b53-8920-5241b323e8ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4308bf1f-a68b-463b-b1e4-c10737da86e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad0edc4-e331-4c51-8571-10abf34ff31e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68063162-164d-40cf-8690-e0449e31651b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0de19d-2365-4f35-99c2-65128e1ef208",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d2506c-43eb-4982-be65-c8e3cec0a824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "114c4514-d5ba-4e7c-a701-65259ce5d16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db466f7-53e4-4fe4-83c7-f6a1a2dfde37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0db5bae-2ac4-47f9-a734-60bd75358751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfabfe8-fed8-4b10-8a7c-0da8b0e5645f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6c7a59-8610-48c3-ab75-c02399586109",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3743cb34-ec4d-4a6d-b0c3-8ed8901c843c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "113c4924-3e57-47d2-be0a-91b18af94e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855e938d-60e5-4fa0-9774-623d0499f5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36971dbe-3e5e-470f-ad78-ef10edc8f30f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48801eec-a21b-4017-a4a8-eaf1e4dd73d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4997f5d4-0e0c-4bd0-aaf9-d64c4f8045fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cce26c-3d2e-4bd6-89a7-0ea20e86aa87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4f18bc5-3a98-4c55-9521-2699ba1989fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0b01cd-8131-4e05-98d0-3dc1d5d2036e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce22e8a-4977-406e-a3cb-eb8f8eb8647e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9cca3c-9ec4-4fce-a7d0-4272b29cef72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3989fde-0595-4f32-bfd1-20f2c0924eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac571ae6-7d9f-42ef-9c7d-8699a39766ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedc9b34-3059-4f38-a006-13ca85e3f133",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c653690-4d1f-48b6-ac0a-1bf809939356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b948dc38-fb1b-4a60-85d6-7ac18530ad0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec00000-9cad-45a8-a39c-eb2d935d672a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38783da-3626-4ed0-a67a-d9c10d394096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a27e51-3c1a-4c32-9a91-6fb4c2eea736",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206d8da4-84cd-4934-889b-ea6763d8d9d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7588b96d-5903-4e8f-8e9c-60449a214ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4216bd1a-71d3-496f-8247-8053b0df510d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e4a983-766b-4cf8-a2f2-796324e1b430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c6b4a9-fe67-4a9c-8f60-551eeacc7ad7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3c18ba-ef7c-47e1-a614-a731db70ad8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22994ede-bc1a-4a9d-9eae-66f07148bf59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328e4db3-0e91-491f-9702-25d30f9e4f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7945898-2429-4855-913b-0e3d2624a233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9680ae-bef4-4f5a-89c0-abec499e7d4f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faada14-255d-4b3d-ad62-b46cb2decf49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f539825d-db0a-4b6c-a14c-5f850554aced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f67e58-bc01-4883-be4a-c78975a39ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8ad504-de9c-4e84-8621-4eab5aabd9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac6c06e1-ff20-43bd-843e-912dbe84a103",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f4a2f6-2686-4942-a58b-5de1b1db384b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716da651-28e2-491f-a3ec-159b9cc82dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c08305-dda4-4221-ad30-7e20eb97811c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf5e1dbc-9912-46b3-a00c-323f8b6281df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c10a33-60bf-4d94-b3f2-5daddc1d2983",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d2708d-c22d-4dcf-8187-b193be43d594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb37d35-8b29-4b19-aa0d-2a15ad3586d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b41367-d793-44d9-b56f-bf6d7c7551c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcb0cb5-d52b-4c7d-8dc3-6bfa01f00bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17872d4b-138d-4e65-a87e-8f133f213a18",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d2cd13-aa0a-4f32-8327-be1022d28904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7d76fbb-05af-4a77-83a9-561c36b089c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4580f45-bd75-41f8-b59d-0ad0b6b0730c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3eba42-be7e-46d1-a42b-5ae625f27122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835db3b3-9757-4098-8a32-bcbd92227c0e",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47285226-4966-4476-bbfd-368ea6f88d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3eac49b9-aaac-414c-b011-219c2d0843be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f6730f-a935-436f-9d11-8d0ba750c728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0a988e-5063-4c8e-a553-eab2e86b3388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebd20ea-7a8b-4a42-8f9d-312203428bc6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5856d6e1-3ea0-48ac-bf1e-38c93e9d6d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e699f6-f263-44ab-918d-95e17b7ca26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67724067-47d2-4e1a-b9dd-8156df3c8b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c308bf-c209-46b0-b055-59bcf9f3e8b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc86a4a-a309-423c-8f44-39f19a105146",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65349064-2897-4c1a-b128-192562454f8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f291cf-4ff6-4067-9a98-17803f3b57b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e54d4541-3cde-41da-a523-346cd5b4b168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c614cc-3ce1-42f0-85ed-440e0201fcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e2936-9ceb-4a52-a3d3-fb9259b5bcb1",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa1ae2d-3749-4e48-be45-805eab4e98bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c2f06c-1420-4f2b-b181-e6d659de3142"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff80296-592d-4056-86f4-9666888b360f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "918b367f-13d9-4a20-9e78-2ae4e8b27d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321a93af-edf3-4cd4-9cd7-5e22f966e5fa",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2861dd3-a81c-4a42-99dc-8879ed8f11df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37718f07-41ea-4bc9-9bd6-3732b4a555c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f4336-91fc-4958-a506-4156dc2b73d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41e85f4-d371-4fe7-b237-6929378bb8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7520cec-ae51-4900-b895-625aedef0a00",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d748b4ee-81a2-457d-ac56-ca8d10a89df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93dcc58c-1b24-49ca-9a67-7a79ec9cd997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a351c526-035e-41cc-9932-bb49d5000ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646e836c-de73-4112-81fc-832ad5f37995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8fbe01-5d48-4f53-89a5-ebea185396fc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd9a114-1d4e-435e-ad73-80ddbd09f387",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d982089c-1d8b-4bb2-8506-6547de231b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ec7d0c-14f6-42d8-be3b-3a720ffd428c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd6f7f5-ab93-4f22-8d2b-2bcaeea32b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7f8077-9bbe-4295-abea-ebd1655cd133",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7859322f-1fc5-46e4-accb-e6b8f4ce0d87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8067ebe3-d501-4cee-85ea-e8f20953d952"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630fb974-4eb7-4779-9ccd-1bcef412b1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b9f100-c2b7-49b7-a59e-aa65a267c496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9cc823-67be-4bc8-ba2f-cadd3eab9e67",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6c3919-779a-41bd-beca-25c7dc51c686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bd5067-7992-4ce8-8b22-daaaf9713949"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512f82e0-6f27-49aa-9dda-d77b5fff825b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8cbefa7-2fcc-44b7-9bfb-b9c34dae2a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673f2473-7d4c-482f-871c-61f6452b6347",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9088a117-5cab-49d8-bace-02cf030f79b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e98a054e-b4f0-4e14-80d5-213dd88f12a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df19fdc3-6130-470f-b83b-d589ea79c0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34a968c-9b53-4426-8178-e48a720e8288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74533c0a-70ad-45df-a5be-c2cd95077d25",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6b7e29-b642-4860-8456-299e9ff04c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f756da2-b998-4248-bc87-d1d97bac4911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78c71d2-4e00-44a0-8df4-bbb0b0deb3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d22a71a-f100-423d-9c27-22d144c6b8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d174703e-6ee2-4867-b8d0-705af477af14",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b481612c-f2a7-4097-bc85-7e3edfb9777e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7673232-baff-40ce-8f2d-9ab91879f6ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a771c0-9c04-4afa-be9b-d48c086bbdb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ee278b2-357b-4462-9ba9-9701c27afe9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ac6f73-fd53-4b45-bd8e-5167f581734f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e8a31f-0951-46b6-9be0-928056f20c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9af83e1-3ef5-4182-84ce-647502ec88e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b436d5-44a0-418f-8252-cc0ec0fe9f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40320447-fd61-4033-9a0b-f2b047e5616d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d39362a-f936-487f-a2f8-6a35cb7c03cb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064a5fae-7a48-47ca-8daa-e0c68c5d3644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da826e07-d6b9-452f-bf8f-53e44f2b361e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4982f00-7f14-4a3f-ba48-913fa99252c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d177804-c76c-44ec-80bf-5c6e33f850df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b59f99a3-110a-4af1-b793-2e1fd39124b1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd84bd0-1dff-4c12-ae86-6055b37032a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d87b3a0-9acd-47c2-b883-9bdc3ab5ded8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b8177e-608a-4467-88e9-8498aa9ee5ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c17f46-f8f1-4329-bad9-a599f9d93957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23ffc78-19fc-49dd-ac05-f0dc102f94e6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46279b2e-f7dc-4e66-ba02-5552f7e6dff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da23ff0a-30e9-4821-ab1d-d7e7f986fe55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd424e51-e1c4-44db-a409-7bde4003d9fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d3d2c0-5dbd-4d59-b890-825b648ab851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278f7ab6-ae43-4468-bdf0-29c35fe299c2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d12f12c-2d6a-449e-bcaa-f059505246fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2037a10a-a797-4dd1-8414-0be4efb8b526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d10624-2d46-4e56-bba6-45bbee302092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "061b8ec9-a3c4-41e5-bb1f-4fd24db4bbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531d2c5f-bf1c-40fd-bfb4-41c21e377b42",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2daed7e6-cf81-42af-9b6e-8abe35a2046d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649bf9ec-e59e-4cf4-a9cb-d5eb9ea6a241"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d333fff5-25c2-408c-a048-5541ef26619e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "731f7d62-a166-4f1d-8ccc-f76dbe9b799e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f48a6d-675b-4bee-824d-0041ed558e98",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b060296-e5eb-4799-ada8-9d57a08ad7e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4bbdfb-f6a8-4c0a-b925-fb487c252c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49be75b3-bb4b-4678-a4e1-9c83a34e542d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6c4ce3-2539-4d83-b21a-f8a993d3a33c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94ed484-1d82-4698-8d0d-3725670a0a8b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79fcf92a-ccc4-4591-88ae-547ae0403009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6734b86-ff56-4a5d-b53e-a5fbbd9e995a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "058f4b5f-b687-413f-b063-b5590cbe50a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c1752b-ca7c-4d53-8274-3ffdadf5997b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7430ed-9b1e-4088-84c5-f262df6666d9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abaf2974-a800-4105-8cae-d1be2c5c7427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "591f9ee4-9691-41bf-8c64-27efd2fe684f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9c302b-6748-46ce-86e2-7e123897210b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c31869e-8ee8-4c55-a5b2-375aa02fa40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8679464a-807d-4960-8701-51063cfb1fae",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f086cf3d-bf73-42c6-afe0-3e07bb2e29b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf6b049-44cc-4ef5-8019-7d1748f714dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ead7a60-3ca6-4771-a9de-1ef6eec8bf80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbaa3082-5c57-4307-81df-c166f1611b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bdffb45-f0d8-439c-99ef-84b3d0bd40e0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb258a6e-fc8c-483d-a5c1-2e440e5acf38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2edf10-ea00-421a-910e-ad41f33e39fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ced182-169f-4baa-9c66-6014da58e0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8514dd44-1eab-432f-afb9-0a721ffb39a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd25fcb-2308-4929-9b98-ddd2d48133a5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a4ff16-353f-44a9-b83c-32df10a7ba88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e277bf-d2c3-4567-945e-6d2079d41b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e162621e-3f15-4da6-be24-73cd9ad53607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b15a52f1-aaa2-4ef5-929a-c16284fcf34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd2e952-ba08-4887-be3f-249320cab65f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdd62b2-d607-4a06-8e4e-e35cb120a4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc22dbfa-5d2a-4801-a0ef-0420544404ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d23b7d5-905c-4cfd-a0ba-975f4b1e6f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93a3eb1-ee3b-4362-848d-bdcf8ad1df2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195368e6-f07d-4ad2-9a1e-d0bf3aeafd20",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0574ea-9f87-4d4c-af6a-ff9cbd7dacbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f500af-057c-4330-be9b-c7e8bf72d39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509f4dcd-988e-4273-ba7e-442a37855430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc657996-c9e1-49c0-b86e-0c0774641c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f08a41-5553-4f19-a8e0-79122ea6c75a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a11848-703e-4abb-a6e0-9c7598e62e42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06fc05c4-4532-4d19-864b-4f5846b17641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4db13c8-32a3-4ae4-b769-d6118391f26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50966f37-29c1-48ed-8f51-da8a089ca36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15567915-98d1-47fb-a0bc-75c4a016b681",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc469e04-3e5e-4e0b-bfd3-5ab7760c31e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9e8aea-8ddb-436a-80e7-426bf312e836"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34debb6-9a25-49a5-9592-15abd0fc8eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09515bb4-106a-4e8c-84b0-388f0d3e5b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef64d548-b5d8-441b-9a9c-be1f80158b43",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2ee0a1-4446-4f7f-b658-ad0ede26b9c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70d97c15-bdb5-48f5-86bf-3b6336078bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c67aaba1-b034-41b4-bb84-f9ab2710616f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ee76a6-e22c-4c50-bad0-b3922156029e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "048a000d-7291-4bce-a47f-0206cb99d2c5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766a354f-13b2-4fda-b4d8-077af9e53594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50e5e23b-5e7f-4a5c-bc26-5fc824edc6c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2c54d8-1bc5-4b7c-8acf-2383cb6f7db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34843e4-dc1e-456d-bce0-358c0943c83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b735ab67-a1b5-472f-9a09-ce04d53f3395",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4be3c1-82ae-4d91-9a4b-738ab82a8c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b52daf80-364b-43e7-9c1f-b2ac8a6098a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8a8087-177c-477b-a89d-b42702a6a060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b734e79-e93c-4334-96c9-160e8877d683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a8e5eb-b3a7-4231-8f71-cee6ba933e12",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb60c33-98ca-4f0f-8c30-a02324d46163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f6ebc7-bc51-4b02-a2d5-9308b72a4815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d67eefa-4b6b-470c-8e41-0fc6bf22457b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03aa42d1-9825-495b-a8e2-8d263ed3b923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c2796d-e374-460d-86df-185e842d54f8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5c05b1-f72f-4d5f-b307-7f45af4b6bf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b0f005-f038-4823-bd7a-6c6536156ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cd28bb-a17c-4a24-bf50-e37e611c478a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "271a2bca-5a28-4f71-b7fd-ce66ee60b06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "350320bb-26ae-4ad7-aef2-e0ad475282b3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb038c6-4964-44ca-8bf0-efa601330316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b8ef6db-208d-42f3-aaf9-133b262049c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71607b50-11e1-4aea-b2a5-df71ce58b6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eadf54e-7f3e-4875-8bbc-b5578aa5431b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a8c1dd-6beb-4e51-b1f9-2576346d23f4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2675ef-1c28-4528-b2aa-3f5ba1733fa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec32f4f4-a99c-4b1a-9751-0d8211a9379b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d55ed62-a167-46ea-ae8b-9e0fd07ef608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc693326-4d2a-44d3-a4eb-a6528f489a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3f17e2-89c3-471c-bff9-71bc0f3d065e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc7e6c6-513a-47cb-a3b5-a1316c05bdcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1124b580-bd5d-4063-9581-f0c8a58bf305"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1903f751-0049-4b75-ba22-35f7ccdf0ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027bd8c7-376f-4f3d-bf6a-e75656c978eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f98d78-ae9a-44f1-9639-50a7cd765498",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1849b897-f7ad-4d91-9a53-c5b1aaee546b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee78ae8-b715-499a-a102-e96a93984365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c861d9b1-97b9-4568-bb5c-b49548de5037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd48613-144a-4eb7-a026-6a8bc504f9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb224908-231b-4e1c-9dbf-57f7294ee3e3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02bdc746-ee48-4927-aded-955e560f86eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60dbd9cf-63e3-4761-ad0d-6d932ebb180c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06a774f-0f2b-4759-8ff8-fcf95c4b455e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4893002-3190-4f32-a00f-4de13f575910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a8e16f-f71c-400b-b26d-797c7f70e6f0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe5a53c-49bc-484c-8b92-4049cdf0c7b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d65fc5be-6837-4571-83d9-e43167918812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16414cd-3bbf-480f-b140-232887b9b66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a4b253-3431-4ee6-b5fc-1c2a781dd204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c87e05f-b88b-47e5-8eee-726326f359b9",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a446d4a-9b3a-47c6-9b9c-6b0a73164d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b4d54b-09e1-4786-9397-1db1c0134b1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fef3d6-9b08-4967-b865-57719e082859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584978dd-53cb-4c16-9e69-6200efbb3674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc9a474-073b-4c90-98ec-d56e3c7c3b21",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689c1eed-9461-404f-81d2-706d9208ea80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43019d71-acc6-4055-83cf-4843282be68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b320a9-0bd4-4a60-b124-0c9795770e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbcf67ee-980e-430b-a3b9-013e21a0d700"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142089b6-707d-41f4-add9-122ac42136f1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d2729d-831f-44d7-a49b-b35b211ace39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f10e602-be75-4368-8ffc-640a0521e56c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6d7bde6-87b3-43bf-b9e1-98f320ec4904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8226e5-06b7-47bd-a33f-29caaa5b47d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9c872f-637c-4a0a-8ac4-ef60e915e4f9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e748e9c2-156f-4360-a0bd-4edad950533a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5e065d8-af2c-4856-8643-e293cb8952eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "317e8909-9680-4254-8e14-13a7de1f3fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92b4fbd-c7c4-4e67-af9d-628701021f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440467e8-c1ca-4b9c-afb0-2a32ccdc63db",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c975439-6eca-4135-a9e1-384267c8ed35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e37d7e-ec48-4e49-8920-24cc66681596"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a20f1ef-d1fb-4ad4-a106-f2fa15922588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69706a34-a64e-4622-94d2-c2e82c2f66ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea5467f-562e-4a51-98b0-4e3348a70f7f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a6a376-b270-48d4-8975-05b88e5d5e7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20bd3a37-5bb2-4310-8212-5647607a491a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8509874b-87e0-48c1-b69e-27eb931c2ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d968dd5-8ebc-4477-a5fc-53464ed9c539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae036c9-77e3-4a6c-a01c-18dd5607cb28",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483cbc43-a5d8-4e92-a0ff-bc5b1c6fbd08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c67b53-48de-4161-80e5-ad2647883ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298126f2-ae74-4906-a46b-ef9715b5d187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34c13941-bfff-487d-a1ad-ebbbac82bf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f98daf7-83c7-4105-b805-d0401a13f98a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057a1ba0-95dc-45ce-9503-c27e409794eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9036144-ed2c-4f63-b7ef-e753207f602e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8136e5b1-443c-4548-85fb-2ffef8388f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "086ea4f3-9ea6-42f3-895d-40960cab997f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c355223-ecce-4a07-bf2f-5f6287b3b6de",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7269d868-ca4d-40b2-bddd-f9a4f8254f7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84e5f96-467d-4335-9ba0-d4c7bc7cc6dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe59e43c-79ac-4b9b-9cca-b8b3c6d97f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c063b5cd-e918-40fc-a583-1019e548c63e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aec752a-ebf5-4c13-935f-deed69870bfe",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f7b2e1-600f-4376-bacc-9d8c97fc078e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "905be4b0-298e-40c7-8b9b-461c2cb5462a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05664092-0833-4693-b791-130c19edf577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764312aa-aca8-4ec9-a88f-67c0575b1922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f036f6a9-80f4-459f-a402-00c9e1e1f235",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d734a80-98b2-4fca-974b-1e08307981a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c31068cf-56c2-4119-b19d-6aa6f4276db4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c48967d-8d41-47df-82ca-e71bd338a446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af31852-fcb1-42e5-875d-52dda69c93b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61975c87-18b8-4151-bbdb-22ff0b45b3b4",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af7a056-2a1b-4561-b31a-22c088f825a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1026f6e1-83ab-4439-b176-cba630899e7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df974b83-1f3f-428c-a116-1516a4957271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1757f712-3cae-486b-bf7b-83af1c8421fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b99f0d-a5e0-446e-9575-056c961892d7",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01658d1c-f377-49a0-8072-4bcd232a4656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7746b2fa-d9b8-4933-80da-728ad589ecce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc640870-650f-4139-9a63-13796dbd686d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9454a0d-f905-4d7d-bf42-07eeb5a36b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58fd7831-0b40-41b4-9aa3-a59a4333f024",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2165747f-a8d1-4d22-a9d8-f0beff185a54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d02925b4-ac9f-4d0f-bef0-bdd08fdb2006"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0fd519-ce7f-46ce-874c-96bdb4bcd063",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ecc164d-d13d-413f-90b0-65554bd7d309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4b0d1e-c8e5-470e-ba80-d515c5fb2754",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5becda58-4fba-4106-a9e0-0f8805fc9db5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9bdece2-ee3c-491c-af12-bd588a327165"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2931bda-7e87-4052-9f60-78726decf960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eac622d-7d4f-495c-a623-565a6e3ca969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6b67b8-6f60-4d3a-b47a-3c3f51979a54",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787a780c-a83a-43e4-b5a7-f64007e23c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3c79b08-2b3d-4959-badf-575eb757003c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81805198-e109-4c7f-ae34-40191f0cc149",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe1a94f-2422-45ee-94ed-25f8cce9e142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190b93cc-5c73-4544-a1bf-e039d18cf5e2",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394f89d0-b545-422c-882a-e252093a0e72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f94f24ee-1a4d-4fd6-ac79-7c878db1c60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4fe411-7052-4b10-8c57-24c9501eb4de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8deb20-2ebd-42ce-9f1c-1d657e298452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8533190f-2746-4f3c-89ef-1bd637e48530",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ac4ab7-a9a5-4d01-9003-feb3e79b0bd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8c740e-7a14-4c40-b733-32853c021d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b1949e-0300-48c3-b161-98ae0fd07147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c12e29cb-3132-4ca6-9ee3-9174dec6a330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ffc44c-68dd-43f0-96ed-f2b1139b97d7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09a5ec9-0bf0-455a-99b7-55c1b0e28394",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e3c26a2-4eba-40bf-bbae-eac7ed73885a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180f0196-6807-451a-86d4-c7b51f2f9a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5be4cdb1-cd30-46c6-b4da-0384965c8aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59268718-0441-4c1c-85be-e3e7d00981e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5375f6cb-e27a-44e4-9345-2321ccf4d3e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba4760c-df23-4f5f-971b-d167264ce13b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf6d24f-1860-4138-bd33-fc6ddcc31b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d64406a-eea2-4f1d-9ee7-0c8508e5d20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaebe400-ce58-4dcb-9381-9e6f8d106212",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b62280f-001e-40e3-9bce-c2ea8c567f32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be3e5b98-3233-4303-ab06-2412754916de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb6b1cf-d9d9-4532-b444-46ea5693f200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4e38800-ad50-4a19-97ae-c005afb585ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2406457f-5de6-4b56-842c-7ef4eecae42a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37d5a94a-0654-4f8f-8e6f-115ca3a2df5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed237cf-fead-4b86-ab1c-0ad59d59f3e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42af1853-6d60-4f34-8bf9-97efd9a739d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64e156ff-7e23-4ae1-a091-46c85ab5eb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119941cc-d58c-42cd-bc6a-f2d5925df3b0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f8c0d6d-cf0b-496c-a949-2ea5ae36f065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59dc08ba-2d80-4a85-8e41-1b01cb80eda4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6df87a3-9e83-4abf-9e63-9cef5c1e27b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0227fa90-57f6-4b9c-a1c1-d502d1dc21b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6503e486-6cd6-41ef-8ed1-2b38cc9abe2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c2cac7c-d6fc-431f-aa4b-b511960baf28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "555554f5-6879-4c2e-944b-495137cfc8b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8a312f10-d68a-4966-b78e-c5a071d7f6cd"
                    }
                  }
                ]
              },
              {
                "id": "da379f95-da21-48f6-9480-4416b3bfb389",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97887257-1e69-4d9f-8fc6-619ec254f88a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb69ade-69c5-4188-8712-f618c9c7c2cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e8aa8c6a-1a13-45de-b2d0-20511d9fca9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3678ccb-27fb-4fd3-92a0-38bd9b726213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79f82221-95ee-4abe-985a-3da0fed8a629"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "31aa1975-67c2-47e1-82b0-0ca68d5c11ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46b9ece4-f4d1-4b60-89e4-907802d0b35a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2e781138-dc39-4b73-b011-c52ffcd3ec32",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39d2dd30-ed0e-42d1-ac61-ee7d81ab0125"
                    }
                  }
                ]
              },
              {
                "id": "1fb6b637-e690-40e5-8c11-41f341ef6602",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d2a9e402-01bf-44dd-b16b-cf4fa9b90ccb",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1a635a-0293-454c-9b9e-f05c2b16a87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "32d8974e-f089-496b-afcc-b07ac1f245dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0fecd2-5f2f-4d5a-8a4a-f6faf640e960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd03c7b-9513-449f-b015-31f576050ac1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "49c727df-af48-4bfe-b006-bb491b1aae7d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1b46d718-5fb9-4595-83ca-d968e12f3820",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6dd657e8-1741-444f-a3da-b9c39fad207f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3a39c081-3c1f-4074-92cc-d107a5e1a6e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e861b368-6279-4b5e-b03c-a62a0c9c1733",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a8654dd4-c9f8-4e1e-af08-e0390d3d85ea"
                    }
                  }
                ]
              },
              {
                "id": "f5120ee1-ecc1-4481-8c1f-79ffff2b8e6c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0163275-6c34-4205-bc53-d15a184c3330",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "72f3a82b-6bbb-4a8d-9919-5f7c718ec5c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a245071-0e34-4260-91e6-bcf0a27539a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "650aec5c-e62a-4eed-97a8-cd62c40896f2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a724a7dc-8d7a-460c-a443-42bdab883289",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0dd9f01a-8f9c-4e6a-a3e6-1b12c4e3b604"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22d9c955-02cb-4ac1-ae01-71e132cedb3b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6de61d6-5d1b-4de6-a90d-02cb5a7b9fc5"
            }
          }
        ]
      },
      {
        "id": "44235355-7f81-42f7-80cb-0641f79e4fd1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "bb711dd3-4a33-4ec5-959d-e5c5d61b1c18",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1669d96f-873a-44fd-8704-605e5f04ef8d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3eb35e97-f918-4209-8d07-88c4ae45a88b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13171892-6d47-4309-8b27-12936d9f7161",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1530d123-18c8-41fd-b009-4036d0a1c1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584e6764-a939-465f-bbe3-c5e4cb992751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64a8f325-fa07-45c9-bb81-8e5ff5f37f83"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3ad2bed-f69c-42df-aaf0-36ad48607a11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00bd6c4e-be69-4a3e-95bd-23eb433e6bf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1fed3f7-f0fa-4f00-9a82-be056ef03e36",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26212960-aa2c-4e01-9189-7417fb4b96e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "917c77f4-7892-43a6-9e43-c7b58fa4a6dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a3bbb30e-7d84-4565-934d-7f02d8fd67d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "397ea531-3833-4564-9795-b3bf9dfcbf44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e75b2882-be84-4247-9a10-df3fe1d4d761"
            }
          }
        ]
      },
      {
        "id": "d8e8b529-433f-4eb1-86b2-aeab60d33322",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1d197431-5646-4ad0-b140-af882fb808a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "023d9e25-e8de-45d4-924e-adcca2fdc3a9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02e7850e-1119-45f6-8207-8a72305a0e32",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3ba433-404b-44bd-865e-332e084efef9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0555163b-9569-4891-aad0-1b95ab0588a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10796aad-ae9d-41fa-8c40-08a890592458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "077be4b0-0ca8-4507-9c4a-92df086d6d13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c072e571-0dac-4b52-b486-fe6a822d4400",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abbff90b-ec35-4f78-ae41-2762719284d3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e25b046-8b1d-4002-879c-5c2187e82f00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63bf55b9-2ad5-43ac-9803-f9cab14c77d8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da10192b-b79e-4e19-b8c9-b4b05fb467cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a709f0df-c320-4510-8b7a-161bf6e5e971"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5561f1b-f630-4cc4-afb1-9a6bd2095c87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27f4f132-f383-4f91-bae2-55c6cd774e84"
            }
          }
        ]
      },
      {
        "id": "3425c3fb-815b-49e0-bacc-b1cc716bcdd4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a26eb9f6-1e2c-41b3-bc9a-0bef741381fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2fd434ff-4157-48a8-b450-6aca04682134",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9533db11-0e9d-493f-a124-0937a830aa63",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c791037f-f299-4b53-a4c4-e8a3ebd3c334",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "678906f1-0d8a-4039-af64-763535f5bb43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d00b757-84b4-49d6-a820-a87c9ad58887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb643876-2cf0-410a-a503-4f771737ba60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc93bfd7-3f91-44a9-8b57-0e34d14c6032",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68c8a732-447f-46fe-9b31-c8100f6bc30c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae11cee5-a9c0-4880-a8f5-4a940ead6b15",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d28567cc-6e65-4551-a42f-d7d144f6ef6b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c24fcdbe-34af-43d1-b59e-61761adcc5d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38bf9f62-d990-4910-9a3b-6909b79632e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5e1f7e1e-50d7-4974-b6f6-d65f2065c070",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5465864-cbcd-49e5-b151-75628b8f9141"
            }
          }
        ]
      },
      {
        "id": "c6cf2936-d7e8-4144-8cdf-e019f2bc39c0",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f0219c6-acdf-4a88-a246-2e03d167ecab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6755d3c-4992-407e-9000-8b3be7377e47",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2e8e6f0a-a156-4b8f-8759-9600924bf473",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25a6f707-4556-4bde-92da-0b35749d011b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95f93e38-f683-4946-b8d4-e3e1dcee0967",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.4035087719298,
      "responseMin": 11,
      "responseMax": 580,
      "responseSd": 77.96158740364089,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1709426167465,
      "completed": 1709426195814
    },
    "executions": [
      {
        "id": "46690a44-4b85-459e-90d6-4b0402fff9b2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "daaa32e2-af37-4fab-8a71-5d281e8a262b",
          "httpRequestId": "7f64ede1-dd7b-4797-b024-b81c7348c769"
        },
        "item": {
          "id": "46690a44-4b85-459e-90d6-4b0402fff9b2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "569c34fa-6936-42e9-b146-fce31d15416b",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "ac6b9e5c-983c-4f43-b585-4bf1c6c97150",
        "cursor": {
          "ref": "55d2e1ea-4f3e-41e0-b66f-e8046ed6d9ce",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0f5c2707-f4d7-4156-a471-aa801672cec6"
        },
        "item": {
          "id": "ac6b9e5c-983c-4f43-b585-4bf1c6c97150",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "45d6b3a3-33a0-4083-99c7-7b580667d79e",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "28465bf7-80f4-47d9-8c6c-925d38781424",
        "cursor": {
          "ref": "5e5a6e70-aa63-4280-8c75-3529858f54e9",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "75c162fe-9113-401c-99ce-d46c0b8172e6"
        },
        "item": {
          "id": "28465bf7-80f4-47d9-8c6c-925d38781424",
          "name": "did_json"
        },
        "response": {
          "id": "a5c0c23f-ac5f-4863-834c-bf1bd3aa26d1",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5a181c-dc86-4c98-a960-dbd05c98c8ff",
        "cursor": {
          "ref": "51d10e64-23e3-4238-926c-a68106d3bb39",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43da02ec-c232-453f-ad6a-01401a244951"
        },
        "item": {
          "id": "bf5a181c-dc86-4c98-a960-dbd05c98c8ff",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a7188d8-d21f-4731-86f7-7ba92beaa965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5a181c-dc86-4c98-a960-dbd05c98c8ff",
        "cursor": {
          "ref": "51d10e64-23e3-4238-926c-a68106d3bb39",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "43da02ec-c232-453f-ad6a-01401a244951"
        },
        "item": {
          "id": "bf5a181c-dc86-4c98-a960-dbd05c98c8ff",
          "name": "did:invalid"
        },
        "response": {
          "id": "8a7188d8-d21f-4731-86f7-7ba92beaa965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c0bfa7-62c7-4d21-ada4-32ecbbd19949",
        "cursor": {
          "ref": "4c728398-3c4f-47d3-8bd2-b05d99aaaa15",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7c41254e-3fb7-488a-b4a8-d275f5a4da0b"
        },
        "item": {
          "id": "20c0bfa7-62c7-4d21-ada4-32ecbbd19949",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2d3ee691-3f65-4c75-a7a4-5f3a12af930d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c2dc05-89d4-46d1-8061-9458d903397d",
        "cursor": {
          "ref": "c423590e-415c-4293-8005-638872577656",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7b746a6a-54a3-4bbb-84de-39c0284ce6bb"
        },
        "item": {
          "id": "27c2dc05-89d4-46d1-8061-9458d903397d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "4183db50-fc6a-4b2e-abe0-b3c5211cb1de",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc5f7ce-1eef-488b-9c0c-a58dcdd1281d",
        "cursor": {
          "ref": "1a0ea20a-9942-4650-a344-37437cf60bc0",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6a5f8530-f593-4852-a9f9-3b5f906ad036"
        },
        "item": {
          "id": "7bc5f7ce-1eef-488b-9c0c-a58dcdd1281d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "897767a4-03e2-454c-9a1c-03a294ded24a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705260e7-ad5c-41a0-b97b-0b3beb1f273e",
        "cursor": {
          "ref": "93756d7d-f3e4-4954-85d5-0d4ec86dadeb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "87f3f035-19e5-490d-a890-4b3e344e562c"
        },
        "item": {
          "id": "705260e7-ad5c-41a0-b97b-0b3beb1f273e",
          "name": "identifiers"
        },
        "response": {
          "id": "216d9793-24d3-4d39-8099-1f0fe14dabab",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3633d3b2-6501-45e6-9d68-3194e9a2462a",
        "cursor": {
          "ref": "3cdef1d0-0c23-4695-99e6-bad096a6e335",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "184bd180-c430-42cc-a4fd-ac47e264f587"
        },
        "item": {
          "id": "3633d3b2-6501-45e6-9d68-3194e9a2462a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ec786c6d-2c73-4739-9b75-7ccbd82f5c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5085d7e8-8e28-4a72-ab2c-6eee6ebe934a",
        "cursor": {
          "ref": "8f197270-768e-468a-be56-a9c9d62a1c93",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "401b6a52-83e4-415f-8ecf-0c7a5da20c81"
        },
        "item": {
          "id": "5085d7e8-8e28-4a72-ab2c-6eee6ebe934a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dafe097f-5db8-4d3c-b8ca-bf71583cd9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c2bbd1-43fe-4bc9-9599-c2e934359409",
        "cursor": {
          "ref": "fa2bd92f-67bb-42da-acbc-c4ed75abd480",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "52d86a35-ac81-410e-8419-86436d779610"
        },
        "item": {
          "id": "11c2bbd1-43fe-4bc9-9599-c2e934359409",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cdf2e237-8405-4f60-9f0d-9f057b258124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe79794-915d-4ca5-8840-2816cc5c2cee",
        "cursor": {
          "ref": "28f059b1-efdb-425a-946c-4e8dcf89ec54",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "661521db-50f4-4368-a30d-ace258813875"
        },
        "item": {
          "id": "ebe79794-915d-4ca5-8840-2816cc5c2cee",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4d8a154f-d783-443c-8431-2234c5c8d221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25df5c7e-e949-4657-930a-88c58837587d",
        "cursor": {
          "ref": "93336b46-9a4e-4663-8031-f89416403070",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5710c38c-153f-4591-9612-fa624bda144f"
        },
        "item": {
          "id": "25df5c7e-e949-4657-930a-88c58837587d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "981a5b64-b74b-40ca-a024-16d0e9db065b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b74dc8d-1b2d-4649-a9fc-b618e988aa15",
        "cursor": {
          "ref": "3248b4de-2587-44d4-91af-fbe5e3bc6586",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "76af92da-1d89-46a1-9eec-81d476697a82"
        },
        "item": {
          "id": "4b74dc8d-1b2d-4649-a9fc-b618e988aa15",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "88c39a57-e598-4c4c-89e9-14991305610b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ca7780-14b4-4291-9f0a-04e6c6964d9c",
        "cursor": {
          "ref": "38a21689-768e-4769-93e9-9ba60ac165ad",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c068b6a2-dcb7-4593-9a7d-f23a5a6cc0f0"
        },
        "item": {
          "id": "62ca7780-14b4-4291-9f0a-04e6c6964d9c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2e6e6dc6-df38-4e74-bba1-42ae2384fbd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd07b9f7-2941-4855-a78f-8687b6347d8f",
        "cursor": {
          "ref": "8c034f95-cfed-45de-9769-097943470f25",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "389f2964-0eee-4bd8-ae3b-63a8762a9227"
        },
        "item": {
          "id": "cd07b9f7-2941-4855-a78f-8687b6347d8f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d1a66271-a07f-4181-94c9-5d6c934fc5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "361b98c6-585e-444a-b92d-ebba78ade1fe",
        "cursor": {
          "ref": "0c971b5f-20f3-4f4a-b19a-cb212e570d0c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c83ccee3-3cea-4e62-b249-f9fe12fe19d5"
        },
        "item": {
          "id": "361b98c6-585e-444a-b92d-ebba78ade1fe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0dd0fda8-82da-4f02-9222-da73ce1c3670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b02fd0-f274-4fc1-98b6-aeea68a17fd7",
        "cursor": {
          "ref": "5ec89604-d98a-4aae-89bd-b511243950e5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "58734b91-0d11-48e6-8a97-9571fabc5d9a"
        },
        "item": {
          "id": "16b02fd0-f274-4fc1-98b6-aeea68a17fd7",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "fa0b1369-58fc-41b8-8db5-f82f29c0669c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e519fd-27eb-4a45-83a3-507b49b7f4e1",
        "cursor": {
          "ref": "769f7fd0-931b-4f22-84e2-f31f89e7212b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7f8b9227-4216-4d10-b8f4-c5e7733da4d6"
        },
        "item": {
          "id": "d8e519fd-27eb-4a45-83a3-507b49b7f4e1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8c8878ef-14be-4d37-bdc6-34684674a150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07e1e7e4-58c5-4679-aaca-213a83514c66",
        "cursor": {
          "ref": "2dc0a848-79c9-48be-832f-f296efa36ce4",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e40d1878-9e16-4590-86a6-61c441e9c377"
        },
        "item": {
          "id": "07e1e7e4-58c5-4679-aaca-213a83514c66",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7464d9bc-ab05-4546-8fef-9e6518d0c4f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691b7314-467f-49d2-8352-f71db0a9dbd8",
        "cursor": {
          "ref": "86b202c7-daa5-4514-8cd4-6b31479ffffc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "40a5e9c7-9393-4877-b191-f4800d48e6c0"
        },
        "item": {
          "id": "691b7314-467f-49d2-8352-f71db0a9dbd8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "03c5df99-e0cb-411e-b1d0-7acecc8acab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e27b040-3aa9-435f-b310-3c0a067ee536",
        "cursor": {
          "ref": "1d9f481c-07b4-4074-99da-537e57c088bc",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4054ea34-da50-4947-98ef-7e9be2ec2907"
        },
        "item": {
          "id": "9e27b040-3aa9-435f-b310-3c0a067ee536",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e4de643e-dbbb-40dc-9e0c-c37e7f259023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50612e87-d0e9-4e8b-9ffb-8d3083087bde",
        "cursor": {
          "ref": "223f6734-c919-47dc-bf08-c78b652d1d40",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a7da34a1-fb03-44c7-9854-d378bb251eee"
        },
        "item": {
          "id": "50612e87-d0e9-4e8b-9ffb-8d3083087bde",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2b4f9c48-7d0b-4606-b6f9-6d2d1cf186f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242bc350-13e1-40d8-973a-51a2b2bc26ed",
        "cursor": {
          "ref": "51df7ec3-d375-444d-8b9d-cd6f85127dad",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4973aed5-b5ca-47b9-91d0-f1fd0f9eebb3"
        },
        "item": {
          "id": "242bc350-13e1-40d8-973a-51a2b2bc26ed",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b2392880-8892-4131-bc37-37125ec10c01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cba77e-622f-443b-8626-9880ac114b05",
        "cursor": {
          "ref": "5d83c5e8-f7b9-4e3e-bf7b-668da74bc6aa",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8dcbbd64-3a65-4ade-b685-7bef23665e86"
        },
        "item": {
          "id": "21cba77e-622f-443b-8626-9880ac114b05",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "33886ffe-d518-4ce2-a236-53f1195786f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1372128d-1eb8-4554-8bfb-1d39706c4fd4",
        "cursor": {
          "ref": "0b79d5b2-823c-4398-8c8a-da40ab54893f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "8d84b34a-d8dd-464d-8df0-4cc46b2d163e"
        },
        "item": {
          "id": "1372128d-1eb8-4554-8bfb-1d39706c4fd4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7e6aad47-c2d9-40b7-8add-02698de3e568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382c8e36-de65-4664-9481-4c2cda2b75b3",
        "cursor": {
          "ref": "912bca22-aaa1-41b4-9287-902f070c2442",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "856c26ad-cccd-4028-8d9f-33107949d53f"
        },
        "item": {
          "id": "382c8e36-de65-4664-9481-4c2cda2b75b3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "da52ff42-fd49-4ddf-9e45-a2750e4ac879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "172887de-13c6-4ca3-bccb-e28674ebe117",
        "cursor": {
          "ref": "1f0a82fb-579d-4405-b432-16e84678f7ba",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ae520334-5f32-48bb-9649-ef16cc03c749"
        },
        "item": {
          "id": "172887de-13c6-4ca3-bccb-e28674ebe117",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9e405eca-0504-49dd-81cd-b08fda0cd995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e82641a3-cc73-4570-b9d7-d021794692c9",
        "cursor": {
          "ref": "c9ad8c2d-ef5a-4dc4-9b9e-aaf1aba5656c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9add72ad-68cb-4aea-bea9-2b7fe2fd16c1"
        },
        "item": {
          "id": "e82641a3-cc73-4570-b9d7-d021794692c9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f2c2790c-d7b8-4db3-89a3-51060e4eec7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b37e18-8005-4d9e-a717-2a806e647fc6",
        "cursor": {
          "ref": "589e4c60-2005-4d6d-81d2-2df416aaadb1",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5a00fb7-b1d4-49f7-8bdf-532874591123"
        },
        "item": {
          "id": "73b37e18-8005-4d9e-a717-2a806e647fc6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "45eded24-f5db-4bcd-907b-24217284dfde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac9c12b-2f99-4936-8b0c-fa897d44e066",
        "cursor": {
          "ref": "c6324dac-67d8-4a53-8cea-4a7c03067e72",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b11800f5-afb4-4b13-b570-dd2718749bc8"
        },
        "item": {
          "id": "cac9c12b-2f99-4936-8b0c-fa897d44e066",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fd15ee36-82f3-403c-bbd3-e1d716bedc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299426dd-097a-42f2-864d-9d0bb8a1543f",
        "cursor": {
          "ref": "e74d469e-e912-4e04-951e-a85f0fea7f6a",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "cefb4f96-9dba-4a77-8a5b-c796cb427e09"
        },
        "item": {
          "id": "299426dd-097a-42f2-864d-9d0bb8a1543f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3741cdf7-7c1b-447f-b08f-5b8339753e33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72847fa9-97e3-4268-acd7-0a0fb771fb69",
        "cursor": {
          "ref": "d531d763-81c3-4088-af5b-737b5fd13d50",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "587f43b9-e5ce-4779-97aa-79e8926612bb"
        },
        "item": {
          "id": "72847fa9-97e3-4268-acd7-0a0fb771fb69",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "77721e26-f506-4454-af75-b56110808877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d463302-bf3c-46fc-917f-b46739e089cb",
        "cursor": {
          "ref": "3663b350-2873-4520-8e3d-575d8e8926c9",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ebb481f0-a122-4526-9c87-319e333eca2e"
        },
        "item": {
          "id": "4d463302-bf3c-46fc-917f-b46739e089cb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e400f1e7-4880-47f1-bab3-4f01538b3092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ff1466-b762-4096-a5e9-ffae37901d18",
        "cursor": {
          "ref": "2685d6c1-1d6f-4ad7-96ec-ea7f1990f951",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f947e880-b550-4245-8250-30cc6c2a2c66"
        },
        "item": {
          "id": "43ff1466-b762-4096-a5e9-ffae37901d18",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d2e67dde-0a28-450b-b8e6-b72a8306c1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c82a98e-1343-44d5-9c4e-5b4c966bfa18",
        "cursor": {
          "ref": "924cf484-5530-465b-83cb-536fc34e336e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e0b62d53-6bbd-4a24-84be-9cc7a55229ca"
        },
        "item": {
          "id": "7c82a98e-1343-44d5-9c4e-5b4c966bfa18",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7a0f2cb0-0d03-4060-8b98-24f2abf5e43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd3f780-47e7-4956-ad84-f3a2e694b89c",
        "cursor": {
          "ref": "5908f4cd-c1a9-4ea5-bcba-1038a0601a5d",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fed0d100-9f0f-4a48-9ac4-bb423c6a78db"
        },
        "item": {
          "id": "dcd3f780-47e7-4956-ad84-f3a2e694b89c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2508b009-3bb2-4237-9c10-6084976ccd3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c10cb98-8d42-4337-9f36-34d562aae7cd",
        "cursor": {
          "ref": "fb04c0a2-4055-49bf-a605-5ce8d4507595",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "739fd53f-71cc-4c41-a05b-ecc1bc97d6a6"
        },
        "item": {
          "id": "0c10cb98-8d42-4337-9f36-34d562aae7cd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9bb56a41-f6c0-4cfc-a3ed-a45f3cb36d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6843180e-41b3-4dc7-850c-a2df81dfd58d",
        "cursor": {
          "ref": "033003c2-269a-4200-aced-6598199272ad",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fa2d49b1-e981-4775-a90a-ded69b3a7da4"
        },
        "item": {
          "id": "6843180e-41b3-4dc7-850c-a2df81dfd58d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "044f55bc-5fb8-4d16-a9b9-448ae7fea498",
          "status": "Created",
          "code": 201,
          "responseTime": 580,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b8276416-dba8-48bd-bf3d-d9192a995ef4",
        "cursor": {
          "ref": "60507ba3-5596-4c6a-b176-ae9e7a0840ad",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "c2591839-8963-45b0-94ab-ce452cd06ab5"
        },
        "item": {
          "id": "b8276416-dba8-48bd-bf3d-d9192a995ef4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ec9a2d87-cccb-460a-8e7b-b00ec7ad5194",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "07ccd44d-a831-4c3f-a09d-dfbcd64a26a4",
        "cursor": {
          "ref": "195086f1-439a-4d0c-9bc2-e64bc19225b4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f8cf2122-cbfc-4c7f-a0c4-f9465205a0aa"
        },
        "item": {
          "id": "07ccd44d-a831-4c3f-a09d-dfbcd64a26a4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "32d49f20-0d2b-44c0-be25-8afab8207af5",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4e5d72fa-3a30-47fa-9f17-95ad294a4dd9",
        "cursor": {
          "ref": "03124efc-6608-49c9-a382-e9bee90dc8cf",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "313853f3-ea54-48e5-af4c-b1b116edc925"
        },
        "item": {
          "id": "4e5d72fa-3a30-47fa-9f17-95ad294a4dd9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "687e9614-d347-4fa8-8cf2-ecf53b8d8ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b73a89ff-6043-44d7-91d5-1ae8984b542f",
        "cursor": {
          "ref": "574de107-f019-4cea-9078-0cea98863f71",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e49a727a-e20b-4d41-a021-48d76e7f20e3"
        },
        "item": {
          "id": "b73a89ff-6043-44d7-91d5-1ae8984b542f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "12a66864-46c0-4410-8ae7-dd881969c2d0",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "cf6b9d04-3b71-46d8-88bf-aa5604b0afee",
        "cursor": {
          "ref": "5628f75d-f366-4ebd-a2dd-581bf2ed9aec",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a26bf39a-d9ee-45e1-87cd-8910936db57f"
        },
        "item": {
          "id": "cf6b9d04-3b71-46d8-88bf-aa5604b0afee",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0a14c932-2148-4bea-b5ad-d1b2449daec5",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "759785ac-2cba-46c7-8900-9cb3a901559b",
        "cursor": {
          "ref": "47418b52-b167-4bdf-8a76-0a2da735c9a1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c7e730bc-9ead-40a0-ae3c-75748c783206"
        },
        "item": {
          "id": "759785ac-2cba-46c7-8900-9cb3a901559b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3ef4f805-ef0e-4f41-a354-0879e2fd7c58",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6c85306e-eb0d-41d9-8ea8-53c033a10f02",
        "cursor": {
          "ref": "97e516af-9b77-4359-a0e4-253c44ed4931",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9e4f16a2-214b-47c2-893f-5c5434ea6b58"
        },
        "item": {
          "id": "6c85306e-eb0d-41d9-8ea8-53c033a10f02",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "59c7c4ac-bd20-41b4-afbf-05a56cac005e",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ea562450-a7e3-46f6-9326-a8f711950b5a",
        "cursor": {
          "ref": "ee52cac0-1b18-4675-9d09-d8d87efe35d6",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "16966fc8-724b-48d4-8254-9aa7d2f6c584"
        },
        "item": {
          "id": "ea562450-a7e3-46f6-9326-a8f711950b5a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a32655c3-03e5-4cbf-83a9-6bd4ca04f27d",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "76f8f76e-86b0-4c85-bd07-e6f34f9ec308",
        "cursor": {
          "ref": "d4b4f70b-28bf-4c37-96a9-f78f6af168e1",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b2978748-ab15-4891-bd68-dd75f2012903"
        },
        "item": {
          "id": "76f8f76e-86b0-4c85-bd07-e6f34f9ec308",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7c3a4bdc-5cf8-40ee-9e22-bfae2ac6b10a",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "42d68bf4-9215-4385-b8c5-8882e64ed38d",
        "cursor": {
          "ref": "a6293747-cd3d-4f12-986d-93d4f0e9b46c",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "17b9ae02-974f-4bd0-a868-841f2aa4816d"
        },
        "item": {
          "id": "42d68bf4-9215-4385-b8c5-8882e64ed38d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f9877980-5c8e-40fe-b3d6-4896919f54ff",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d08d52fe-0f6a-4314-8388-d79c465148b1",
        "cursor": {
          "ref": "0e442343-2b50-48d0-8ea7-1f8d68605974",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a32aa5f9-d4c8-4f4a-84e0-df0365be125c"
        },
        "item": {
          "id": "d08d52fe-0f6a-4314-8388-d79c465148b1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b4bd6f67-6252-4116-9284-12e37c9dce2e",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3aea73eb-d25d-4e62-916d-293c39669a85",
        "cursor": {
          "ref": "bb4f895e-7512-459f-aeac-44a3f97d351b",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "12df41c1-6743-469e-bc4a-caa8c8987b4e"
        },
        "item": {
          "id": "3aea73eb-d25d-4e62-916d-293c39669a85",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a50a480f-ed7a-45d9-aaaa-82d3a2eb40e9",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f39212dc-d177-4367-b9f4-1c8f4a193d21",
        "cursor": {
          "ref": "f16d7ce0-4d00-434a-b690-1107dcbf86fe",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9f46222c-0716-402e-af4e-13b338d90e3c"
        },
        "item": {
          "id": "f39212dc-d177-4367-b9f4-1c8f4a193d21",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8b1fe2e3-2922-41fd-a9af-ed0318320a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a766f3-358a-474a-8fff-16fbb89b2352",
        "cursor": {
          "ref": "660b3e17-2680-445f-84dd-5ba0c6fd0605",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f314354d-e6c1-4439-804f-86bb45db313c"
        },
        "item": {
          "id": "12a766f3-358a-474a-8fff-16fbb89b2352",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ac134b6a-f0e5-40e9-9527-4266961d51ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17bcead-8d39-415c-b97b-779867a8f159",
        "cursor": {
          "ref": "32c070ea-f98a-486a-a53d-55b741cad60a",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c8c1823b-e2f1-4bf3-b627-c6117bee8475"
        },
        "item": {
          "id": "b17bcead-8d39-415c-b97b-779867a8f159",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0069b004-0f60-44b0-be7f-8df64812e35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c458c4b-3557-4d8a-a8dd-ebf2060136fc",
        "cursor": {
          "ref": "cc447e3b-a421-4a0b-b065-1e7815f18074",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8c7a7232-fd35-419a-8abe-c03c6ccfa339"
        },
        "item": {
          "id": "5c458c4b-3557-4d8a-a8dd-ebf2060136fc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5c8c60e8-67b7-4bc5-9560-3069b11ff42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d7ce6e-bf5d-420c-a96e-3315873bc843",
        "cursor": {
          "ref": "24bb9514-97de-4629-9432-78e8597b2fc7",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "fc8987ca-28f4-4614-a4d5-0790ec8bd9ee"
        },
        "item": {
          "id": "34d7ce6e-bf5d-420c-a96e-3315873bc843",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ea793ee4-449f-4443-a547-a74f9cefadf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e733449-7a6b-4f71-b8cb-2d4606ef7088",
        "cursor": {
          "ref": "1be616f2-971d-47ea-b7ff-4e078cd417fb",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b3a09fa0-b3dc-4c31-8e44-360939d71926"
        },
        "item": {
          "id": "5e733449-7a6b-4f71-b8cb-2d4606ef7088",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "eab5034f-f0d7-42c4-9fad-b37693ee7fcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d417a0-40eb-41d2-bc46-7aff26c1b513",
        "cursor": {
          "ref": "3d94dcda-0123-4cfe-97b9-b6cab7b8f3d7",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ae6920e5-f509-4a99-924a-87178bac1fd7"
        },
        "item": {
          "id": "d2d417a0-40eb-41d2-bc46-7aff26c1b513",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6bf95529-f333-492b-99e4-bea64a2bb487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c24b174-50aa-4c59-9245-388d59652a65",
        "cursor": {
          "ref": "eafd4673-bc34-4c89-975e-55f4f153cdce",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "600cfead-fee0-4e2f-a3e0-97fd54dacf2d"
        },
        "item": {
          "id": "1c24b174-50aa-4c59-9245-388d59652a65",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b992e4df-7898-416e-b545-7b996811b1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac332c8-2389-4185-ac3f-3db919b278a5",
        "cursor": {
          "ref": "18fe47a9-3c81-4fe5-aad5-2547aada3b97",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f9743a2d-2e4c-49f4-8656-5b2dc966bff1"
        },
        "item": {
          "id": "6ac332c8-2389-4185-ac3f-3db919b278a5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b77e8503-e505-460d-95a1-5eea8b5ccd73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db359b62-3464-4a51-afcc-f668a42e94b1",
        "cursor": {
          "ref": "521703c0-c379-46de-94e9-f3c550d53d29",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e0dbc50c-f00a-4ea0-ad36-ed58b0861db4"
        },
        "item": {
          "id": "db359b62-3464-4a51-afcc-f668a42e94b1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dfd661ac-0d83-4416-881a-c8a3877ced04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a7792c-1c9a-47cb-a7dd-3b84c666c3a8",
        "cursor": {
          "ref": "42cc4179-0f38-44f4-be58-e0e7498ef22a",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "01380fc6-e4bf-44e3-b3c6-e7b717d8befc"
        },
        "item": {
          "id": "88a7792c-1c9a-47cb-a7dd-3b84c666c3a8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c93e72ae-cedb-4786-aea4-96dd408c0b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a8075d-77ba-407b-99fd-ceb00a96b91a",
        "cursor": {
          "ref": "da08caf6-ba8b-490e-8061-2cf38fb0c065",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b1d461d6-1715-4275-81e4-821c93843d94"
        },
        "item": {
          "id": "47a8075d-77ba-407b-99fd-ceb00a96b91a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8618b26b-e753-4a39-8431-bb95cc206054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4224447-ef94-4bbe-b530-efe361157a61",
        "cursor": {
          "ref": "cfcb656e-98d4-4c00-a4ab-ef9605aa71d9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "562507b2-462e-40c4-92a1-d9cb0fea1480"
        },
        "item": {
          "id": "c4224447-ef94-4bbe-b530-efe361157a61",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "50bfa23b-3c7e-4481-bb5d-abbe1203b90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3df7c0-98c6-4b68-ab86-0c05a6b7bbfa",
        "cursor": {
          "ref": "9a79fee9-ddfe-42ad-a969-4c8ed86cecea",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5f13b456-a611-4823-962c-0c62b48750d8"
        },
        "item": {
          "id": "ce3df7c0-98c6-4b68-ab86-0c05a6b7bbfa",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d6c2e920-99dc-4f03-af0c-2d7066b64082",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "7b0cab26-0c47-4450-9e5b-76825bd32766",
        "cursor": {
          "ref": "0d503f5d-d692-44fd-95bc-7301e68ee508",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3fd7fb4c-41f0-4d4c-8513-0c705ca3af96"
        },
        "item": {
          "id": "7b0cab26-0c47-4450-9e5b-76825bd32766",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9995382f-0751-4f6a-bf1c-8390287266f0",
          "status": "Created",
          "code": 201,
          "responseTime": 303,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b643ad41-4de3-4250-a0c0-1b69b734f80f",
        "cursor": {
          "ref": "92538a96-3ede-44fd-931e-dafaec530840",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "fa09db00-5928-41da-b340-3418e4a8b64c"
        },
        "item": {
          "id": "b643ad41-4de3-4250-a0c0-1b69b734f80f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ec77da41-8f90-4010-8cfc-754dc0c6cb49",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "367669aa-d132-472a-849b-ad4e3a3d0318",
        "cursor": {
          "ref": "8e626782-3cce-41d0-890f-36faff4c6caa",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7798c62c-6288-4ec3-a5f2-94d14bc65d9e"
        },
        "item": {
          "id": "367669aa-d132-472a-849b-ad4e3a3d0318",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ee8dd55c-2e21-4838-8efc-d186efd5ee99",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5909e4e8-3400-403a-8fd6-02a320c8fbd0",
        "cursor": {
          "ref": "8921342d-f099-4a71-b345-d5a92251f4f9",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b1598d6b-5b0f-4c6e-a70b-41040db192eb"
        },
        "item": {
          "id": "5909e4e8-3400-403a-8fd6-02a320c8fbd0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "49cde8a1-f602-48f2-b066-8fc9d235f8b6",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7b14b119-fb90-4f31-aeda-38cd059c63fd",
        "cursor": {
          "ref": "ed032a77-319b-479d-abc3-6181d21fe3b3",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "07e9df3c-c940-4283-83aa-f061ffb533cb"
        },
        "item": {
          "id": "7b14b119-fb90-4f31-aeda-38cd059c63fd",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c4eca3c2-34c4-4868-9b64-0c7839f7617a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0e2bc6-78dc-475d-8f73-303d0716c165",
        "cursor": {
          "ref": "9a5b7807-c354-4c59-992a-67a19d956818",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "41387f83-ea66-42b3-be53-90f35bf22b91"
        },
        "item": {
          "id": "ca0e2bc6-78dc-475d-8f73-303d0716c165",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e8471134-1069-46c2-b27a-74d5df5d95c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8a3e3d-1b6d-479b-8011-3904baf928fa",
        "cursor": {
          "ref": "bc43528a-108f-4aab-8a7c-27dd386028f4",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1500430b-f4f2-480b-8968-15e0dce05fd4"
        },
        "item": {
          "id": "ca8a3e3d-1b6d-479b-8011-3904baf928fa",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "dff07ce3-5222-4dc8-99ed-9301482989cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7014e8-82bf-4a20-8f2f-d0f1ef15de38",
        "cursor": {
          "ref": "b0410ff8-6369-4fd1-bc0a-eea61eb72c84",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4bcf2bc4-2b8a-4109-8281-3182f0eca0f8"
        },
        "item": {
          "id": "4a7014e8-82bf-4a20-8f2f-d0f1ef15de38",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ec97ad6e-bf0a-4558-9d2e-03ccf17944a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83b101f-af44-4feb-b5b0-6d6349d847d6",
        "cursor": {
          "ref": "82e31a81-cd5a-4740-be15-9f893c8b104b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "60506cf2-3da2-47a9-accd-3810e0d4eca3"
        },
        "item": {
          "id": "f83b101f-af44-4feb-b5b0-6d6349d847d6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f4862f11-b3f8-40cf-a6da-290b930eda4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28cca61f-087c-4fd2-9804-4b4a7a64005d",
        "cursor": {
          "ref": "682fd9dd-58e6-42f8-8e05-2301dded35d9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c5ea0228-1b09-43e9-b7ef-a47dfa59f251"
        },
        "item": {
          "id": "28cca61f-087c-4fd2-9804-4b4a7a64005d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c56389b3-c45a-44b4-aa8c-5d05a3434d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2380e66-4edf-41b1-937d-287df2d8d093",
        "cursor": {
          "ref": "d701ee94-25ca-438c-9e04-535f8bea23e7",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "751f0c36-4c10-4bca-a0b5-70193a2a9060"
        },
        "item": {
          "id": "e2380e66-4edf-41b1-937d-287df2d8d093",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a9946f8b-fc2c-4b58-b85b-5343762fa17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144e5c92-a3dc-4985-906a-d579451437f1",
        "cursor": {
          "ref": "1a1f3183-cb09-40c0-b586-f4793b19de8f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9c872fff-5808-45ba-901a-60ca0a5b3f4a"
        },
        "item": {
          "id": "144e5c92-a3dc-4985-906a-d579451437f1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d23797b5-03ad-4ba9-8dd5-740cec6d5dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5abb3dd-85af-4964-ab11-2b805bfbdbd3",
        "cursor": {
          "ref": "91845d33-01d6-4ff7-8208-1ce57c55aa92",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "73b86612-fd15-465d-b8cd-d553483b9976"
        },
        "item": {
          "id": "c5abb3dd-85af-4964-ab11-2b805bfbdbd3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3ef98dca-b25c-4b88-a5ef-0ce927c5db76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ebc0f6-8107-4ca2-9313-8924797102e7",
        "cursor": {
          "ref": "06c92c91-888b-4942-9d79-1bbbc226e42b",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "8470f905-545f-4525-baa4-ad74b8cbdc66"
        },
        "item": {
          "id": "37ebc0f6-8107-4ca2-9313-8924797102e7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "65f5fd5d-ca82-46b9-9725-f62fe90e0ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e91245-5fe1-488b-8050-a814d8a9ad59",
        "cursor": {
          "ref": "b11e25c9-94da-461a-8c7b-7f7feac17035",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "09d6468e-21d1-4551-8664-12f28c5e7f7d"
        },
        "item": {
          "id": "95e91245-5fe1-488b-8050-a814d8a9ad59",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "113dfdea-9090-4f6d-a2b2-258e1d8b32b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6bc0be-8c28-4efa-a775-71da9044d283",
        "cursor": {
          "ref": "c1a793d3-789b-4283-8c74-5e3019151b01",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8f40a88f-2d15-484f-a79a-f6d7b4f4cf31"
        },
        "item": {
          "id": "9b6bc0be-8c28-4efa-a775-71da9044d283",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4a03ff81-d8bb-4fe5-a8ef-46f7e59f65ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18a3152-40ce-440d-aba8-05d76d35eb0c",
        "cursor": {
          "ref": "b46b50c8-4d9d-4e91-9b90-0baf252f7df7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "ed9f1aa1-18bb-4138-b191-26e99553e95f"
        },
        "item": {
          "id": "a18a3152-40ce-440d-aba8-05d76d35eb0c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8275f3f4-2a6d-42c0-8607-e092f2622445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317c363c-9682-486a-bef3-091e798bce10",
        "cursor": {
          "ref": "916fb827-fdaa-4bfb-bde2-a068e2a5a171",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "62f64885-f2ec-4b06-99d5-372b82e16b58"
        },
        "item": {
          "id": "317c363c-9682-486a-bef3-091e798bce10",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "de56ffd2-015d-4199-a330-d4e14fe4eb18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ce48c5-6bad-4e1d-a9ae-0d5949043ed2",
        "cursor": {
          "ref": "ff37da1a-2cd7-4233-99d7-99df2f004a62",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2acfcb96-9fc1-45e6-a6a7-92a537956e08"
        },
        "item": {
          "id": "03ce48c5-6bad-4e1d-a9ae-0d5949043ed2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "61476345-b351-46ad-8c8c-bd8b0198eea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16aacbd6-24c8-4628-8a88-81e0c6168453",
        "cursor": {
          "ref": "39b8b7a2-e5ef-4cd5-abc0-e3d24e33a35f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cdaf7edb-d3f3-4aab-8504-fff0bbebb9c7"
        },
        "item": {
          "id": "16aacbd6-24c8-4628-8a88-81e0c6168453",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6fd372c2-7aa0-4911-ad2d-5a3db96b6c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25704ce-1a14-4103-a89b-53ce0a896336",
        "cursor": {
          "ref": "a8721b82-a501-4481-b7bb-287b17134eb1",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "afcab072-797c-4ebe-89c9-b3675af310fc"
        },
        "item": {
          "id": "c25704ce-1a14-4103-a89b-53ce0a896336",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "83c5d127-2f0f-4b1d-ab61-3e56c00d38a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458c5596-3ac2-4c48-b35f-ee7ebbe2a960",
        "cursor": {
          "ref": "2e83b096-13fe-4ea5-9d70-7567034354dc",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5c4dfb9f-b5ef-4ad8-a801-b959d82f5829"
        },
        "item": {
          "id": "458c5596-3ac2-4c48-b35f-ee7ebbe2a960",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "77a74405-15ff-46f6-a945-10d84de9d186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e68aec-046e-45ce-83db-410773bbb9c0",
        "cursor": {
          "ref": "c27f3f6b-db38-4639-a4f6-277443bfbc2a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "17c669c1-b72a-4e51-9237-aeb88903557b"
        },
        "item": {
          "id": "28e68aec-046e-45ce-83db-410773bbb9c0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c9ad3678-b2fa-476d-9757-b98752904d7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6bc6ae-2ad4-4df4-8972-065627d2b37c",
        "cursor": {
          "ref": "228f9acf-d782-4d12-8ab9-8bded2b8046e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d5a379fd-4a20-466c-aa52-1555f2615f6f"
        },
        "item": {
          "id": "1f6bc6ae-2ad4-4df4-8972-065627d2b37c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d5786b4d-d730-4c25-b565-ec03d4b75d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0255e66-56ae-4a90-b57a-754169bae314",
        "cursor": {
          "ref": "67b4d6cd-3860-4b2a-b1ef-9f07f3e61d3b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a3d5c6e3-7d73-4511-9aad-5caf2a7489cd"
        },
        "item": {
          "id": "f0255e66-56ae-4a90-b57a-754169bae314",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9cd890e1-7370-42f4-9add-f59f01adc81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f933d9f-73e7-4401-97c9-bebe9c40b464",
        "cursor": {
          "ref": "f5c38179-09c1-4887-b3c2-7b9c8880f601",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7566fbe3-18a7-4840-82d0-381a5da7a4d9"
        },
        "item": {
          "id": "1f933d9f-73e7-4401-97c9-bebe9c40b464",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dc40d2d3-9109-4e32-910e-6867754d33e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e613c66-3827-4da5-860b-2c6bf09c56eb",
        "cursor": {
          "ref": "0a7a28ec-9b11-4b7d-8b2b-1f258c50f731",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "83400011-ce62-4a18-9f45-a1d2024e9585"
        },
        "item": {
          "id": "9e613c66-3827-4da5-860b-2c6bf09c56eb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2216f38-a13a-4072-8beb-29fe375d64d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07ace2e-1919-4415-840c-0ba567735f92",
        "cursor": {
          "ref": "6a8bd0e9-b593-4191-997d-ebff173d0741",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "237d87ee-9b90-481d-9daf-523cf07a1354"
        },
        "item": {
          "id": "c07ace2e-1919-4415-840c-0ba567735f92",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7ba8c69c-5871-4c0e-bc8d-a53bb9bd2699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22c1be6-3071-4593-aced-40305cfd03d0",
        "cursor": {
          "ref": "5a184634-cfd7-471d-a9dc-01a28261f187",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d184983b-4668-4bcf-8086-3178bbe98bbc"
        },
        "item": {
          "id": "b22c1be6-3071-4593-aced-40305cfd03d0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "db8043fe-8326-462a-8f5f-283591673b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e3a35c-af12-48e0-b48e-9f56a15bf379",
        "cursor": {
          "ref": "ef35371c-556f-4276-ac89-8674c9915097",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f6ac6371-f25f-45fb-bb58-1d0fddd949f3"
        },
        "item": {
          "id": "91e3a35c-af12-48e0-b48e-9f56a15bf379",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "58cf6a18-da5b-482f-88d1-2582906146df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6881a9a1-3120-47f4-9d0a-f55cc0329abb",
        "cursor": {
          "ref": "70700f0d-4bca-4357-ac74-5b83782b0ab5",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7c4cae35-dfe0-439b-ab76-cff3dd9f31db"
        },
        "item": {
          "id": "6881a9a1-3120-47f4-9d0a-f55cc0329abb",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "86c7a593-788c-4879-86cc-90241354b4b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140165c3-d9e1-4b26-a36e-1903193652ae",
        "cursor": {
          "ref": "610cc869-e0a7-4067-b346-f90abb65c03b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a9d6a54-5cb5-4b1d-8ced-c1aa87621a91"
        },
        "item": {
          "id": "140165c3-d9e1-4b26-a36e-1903193652ae",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1356a20f-6a99-45e9-aa6b-fc6b259e666c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b642072-0967-42fc-9147-661fb7e8e9f8",
        "cursor": {
          "ref": "be815aa2-98b6-483d-bd91-00cd72624890",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a9491fee-9c33-48f5-9659-25cfce5b5ea3"
        },
        "item": {
          "id": "9b642072-0967-42fc-9147-661fb7e8e9f8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "03a6a224-bfc6-4742-b9f9-90359e7ba57e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8995c84f-4003-40b0-9711-8b87f9254613",
        "cursor": {
          "ref": "9a39f46f-e941-4a2a-83eb-037938b3f415",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "69ad71f5-db08-46be-b208-0e8f3ae22faa"
        },
        "item": {
          "id": "8995c84f-4003-40b0-9711-8b87f9254613",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "cdf49e39-f840-4607-95a9-ce1791f7e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e90c7d-2216-40ec-a532-5fe5c8b6e613",
        "cursor": {
          "ref": "490a9756-ba10-419e-b0db-3dcdeefb9700",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bb3e1710-3ee0-451d-9922-9764bafc7f51"
        },
        "item": {
          "id": "87e90c7d-2216-40ec-a532-5fe5c8b6e613",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3f6fffb4-2903-421c-b014-c5f492e87fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56179166-59fb-4dea-b89e-14e5bdc06333",
        "cursor": {
          "ref": "73fe93ae-c28d-470b-9392-15f18d22dd93",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "5abd6ad8-776b-4042-8c30-0b42a292e73d"
        },
        "item": {
          "id": "56179166-59fb-4dea-b89e-14e5bdc06333",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7a28dab4-ca8d-4435-b8e4-47db5bec0b2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2730bab0-4f00-4566-8b66-7cf3059392ee",
        "cursor": {
          "ref": "287684b3-53dc-4243-b461-f4c5c45eea69",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d10d96d9-ebdd-4bba-917c-e530efe8f9c5"
        },
        "item": {
          "id": "2730bab0-4f00-4566-8b66-7cf3059392ee",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "431bdf9a-06d8-42f3-a1a1-65107926f8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ef3f6380-4349-4f8e-b1c4-9ef3e676b120",
        "cursor": {
          "ref": "e95c2a48-2ed1-40c5-9c08-4fb751716a83",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "64acdd02-6829-4e78-b2f7-5e0efb5b06a4"
        },
        "item": {
          "id": "ef3f6380-4349-4f8e-b1c4-9ef3e676b120",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f99317e7-f9df-4e91-aa3c-04a99aee72cc",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1c0dac-e60d-43a7-896c-572e251209e9",
        "cursor": {
          "ref": "bc7d4850-8770-4254-ac25-39a732c42b7e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8a91e6ae-e98c-4a6d-b532-85b58c389f79"
        },
        "item": {
          "id": "6c1c0dac-e60d-43a7-896c-572e251209e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1cc788a7-5998-48ef-8f4a-57207e2eca19",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "589f9a09-3f9d-4725-9ad8-484bc11d4907",
        "cursor": {
          "ref": "eed5cef4-5364-484d-b052-c996be6f4f96",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b8d33c21-a79b-4422-95ac-a6a7709255e1"
        },
        "item": {
          "id": "589f9a09-3f9d-4725-9ad8-484bc11d4907",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "de436c47-1977-47cc-b80c-0375fcac99d0",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bda210-e1d4-4125-a9ac-bf4e8ed488bf",
        "cursor": {
          "ref": "d6241890-7521-450f-9152-2a5dd64d185f",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ed67e7f4-1d55-41ca-ace2-004d7615f6e7"
        },
        "item": {
          "id": "e9bda210-e1d4-4125-a9ac-bf4e8ed488bf",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ec809ea2-91cf-432f-a32f-0957a8a59ed0",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "84035d63-bcef-4f4e-8020-85c3b0e14624",
        "cursor": {
          "ref": "bacffef9-50d5-4284-becd-3fc799fe7224",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "188cee65-f7f7-4570-bed1-5b609484f131"
        },
        "item": {
          "id": "84035d63-bcef-4f4e-8020-85c3b0e14624",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "eb61fec6-d729-4ec8-b122-2843a4349d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-03T00:36:21.508Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-03T00:36:21.508Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5efc8eb5-be4f-4eaa-9013-5866880c8f60",
        "cursor": {
          "ref": "b52effba-9764-4236-aa74-c43bcf811e77",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8c89493e-973a-4ef0-8ca8-0742039945ae"
        },
        "item": {
          "id": "5efc8eb5-be4f-4eaa-9013-5866880c8f60",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6037bd34-a346-49f9-a446-42828f5c8067",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e73933-998f-4241-880e-0d71358a07a3",
        "cursor": {
          "ref": "7c546d03-2c65-483d-ad18-a74bf0b3596e",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "919b080a-973f-4c82-a31a-1340e17b2ea1"
        },
        "item": {
          "id": "55e73933-998f-4241-880e-0d71358a07a3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8bc18409-bfba-4b96-8d84-9ae4569c8251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff76ed2-7ad1-4b93-895b-063d9f0181ce",
        "cursor": {
          "ref": "206779e6-9de1-44a8-a092-ce749a8d13cd",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b36fbf33-8258-4480-b7f9-cdb2502e89d8"
        },
        "item": {
          "id": "3ff76ed2-7ad1-4b93-895b-063d9f0181ce",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c9ed9403-c965-44f1-8a3d-67d6fc941b20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c0bd2a-b050-4717-9206-f59dd415b533",
        "cursor": {
          "ref": "ae2d55e3-e92e-4140-ad11-83dfafb73fa9",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98b9f461-7a2f-44e5-a82d-ee76b59cbb75"
        },
        "item": {
          "id": "59c0bd2a-b050-4717-9206-f59dd415b533",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "43126c93-2374-4309-b40f-9f4cd1832101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1459e382-945f-45f2-95b8-1b381b83c4dc",
        "cursor": {
          "ref": "26e1e28f-9466-47ab-b13d-139df0bc77c8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5c58b40d-e701-4d75-a5e9-2a5f49fdf9e7"
        },
        "item": {
          "id": "1459e382-945f-45f2-95b8-1b381b83c4dc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d70d946b-a0a9-43b6-a72d-0a8c07327886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a45ead0-0b20-40f9-9785-9162ec4b512b",
        "cursor": {
          "ref": "8120d45e-de8a-4009-8609-519f9b3d6b0e",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "36196a5f-4c78-4fc0-9491-f072475be854"
        },
        "item": {
          "id": "7a45ead0-0b20-40f9-9785-9162ec4b512b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "29d0a7c3-2a21-4b43-901d-f87810b9422f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbfbb2f-8782-40dd-836e-57eb1fe951c1",
        "cursor": {
          "ref": "30d71bfa-e086-4d8c-87f2-a466d91aa630",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "adc4c172-1f73-4b32-a54c-7267b123f405"
        },
        "item": {
          "id": "7dbfbb2f-8782-40dd-836e-57eb1fe951c1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "170a42cf-c27d-471e-acb3-0d69770f41bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40803276-5d0f-4194-a76f-e788f602b552",
        "cursor": {
          "ref": "75141211-ad53-433d-94c3-224de0a9036e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "154e461f-6d08-4a67-88ee-fa41b3f8a28f"
        },
        "item": {
          "id": "40803276-5d0f-4194-a76f-e788f602b552",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ea1bdce7-1586-4ead-8275-c10f997a3e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2209c64d-d6db-4793-b902-debb0598d2de",
        "cursor": {
          "ref": "68540113-781e-4c95-9c2b-da4793167667",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "e0bcab4d-645a-464e-b3ad-3b370cc19950"
        },
        "item": {
          "id": "2209c64d-d6db-4793-b902-debb0598d2de",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1f9f47b6-18c1-4c78-a2cf-adf9f3903ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b7aca9-3b1d-43da-93c6-a73ede5288a4",
        "cursor": {
          "ref": "c434b7a1-c67a-4b48-a328-c22b2a06601d",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d2800d32-6ba7-41a9-8ade-3cdc8b8098ee"
        },
        "item": {
          "id": "78b7aca9-3b1d-43da-93c6-a73ede5288a4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2a70472d-459d-484d-9491-e232c784165a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1c6676-8e55-4c5c-b55e-37daa0b0cf68",
        "cursor": {
          "ref": "4d08abf8-efd2-45d4-ae25-a5be7b09ca4f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f5ee58e0-7a14-496f-8ecf-8adab88854ff"
        },
        "item": {
          "id": "5c1c6676-8e55-4c5c-b55e-37daa0b0cf68",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0a76c989-4a72-4325-a9e2-c4147ae86da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b253795-0aec-44da-9c12-82789e042afa",
        "cursor": {
          "ref": "230ad09c-ed35-4af3-9b41-66a57c4501f5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e734c0c8-b6d6-42a3-8198-9c2403035ebd"
        },
        "item": {
          "id": "0b253795-0aec-44da-9c12-82789e042afa",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "621886a5-ef11-445f-af2f-7e47685f0280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7197e008-d4cc-4e66-b410-e49753989da6",
        "cursor": {
          "ref": "c3bf4c27-c805-4f0d-a962-026dd7fab50a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "80c3fe0d-97fd-4b5d-8e67-246b6dd6b3bf"
        },
        "item": {
          "id": "7197e008-d4cc-4e66-b410-e49753989da6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9db3cf66-dd96-4a86-a47d-debe4ebee2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4c7d8f-817c-4f39-a695-6e7383b66af9",
        "cursor": {
          "ref": "e88fd109-cbe5-4dbe-a183-3691189bbf88",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1c368a8b-dda7-45b0-b0b2-5998636112e6"
        },
        "item": {
          "id": "2d4c7d8f-817c-4f39-a695-6e7383b66af9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "39ed425c-37e8-400b-b2ce-927adc8cf43a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f0c003ea-e060-46c6-8dea-016f5751dd03",
        "cursor": {
          "ref": "edae0c30-c500-48f4-a46c-066e3324ff04",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "307dac92-b4ff-4b7d-83f6-3e0c531f8cd5"
        },
        "item": {
          "id": "f0c003ea-e060-46c6-8dea-016f5751dd03",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1435fc16-64d7-4d46-b222-ad071992859e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3b6fda8c-009c-4d78-b15f-57a80f0ed788",
        "cursor": {
          "ref": "0ea9c2f1-ca20-4964-bc5a-235728d10736",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2a95b8e6-47d0-41cf-b7b9-1964ae3ebcf3"
        },
        "item": {
          "id": "3b6fda8c-009c-4d78-b15f-57a80f0ed788",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "54c6dded-2e53-44aa-a7e1-c70ac9c5809a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70d3073-8880-4482-b828-ebb30e0613af",
        "cursor": {
          "ref": "180a37d7-6ae9-4a07-abfe-e53ad376dd5c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "19ef3ded-aa0f-4986-a992-33def8c28bc2"
        },
        "item": {
          "id": "b70d3073-8880-4482-b828-ebb30e0613af",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "18b8525d-3b7f-4b88-94d0-dcda544821f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6fa5484-f573-4ea8-9dd4-a20f559888f0",
        "cursor": {
          "ref": "af3ba5eb-a142-4d16-ae20-0727db1183d6",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3d904e13-fdb4-470b-86af-363fb42b1c54"
        },
        "item": {
          "id": "f6fa5484-f573-4ea8-9dd4-a20f559888f0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "79b06c88-eb50-4115-adc0-271ee735d7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d523db0-9931-40ce-b579-5578d2759b14",
        "cursor": {
          "ref": "91bfd859-e1bf-4589-9b6d-50e313ddd5ff",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ebe1902d-3130-4913-930b-23e6925b0f06"
        },
        "item": {
          "id": "6d523db0-9931-40ce-b579-5578d2759b14",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "17fd666a-5381-4f5f-ab91-9221ddddeb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c43f14-ba96-4017-8e90-3ecc801a6599",
        "cursor": {
          "ref": "08ce4339-f74f-44cc-82c6-fac2758de3e4",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "36c985b8-8450-4f09-b805-626b548722c8"
        },
        "item": {
          "id": "b7c43f14-ba96-4017-8e90-3ecc801a6599",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "faa7ce8c-1dbc-43c8-98af-cd28f8854bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a79f8f2-17ad-4276-9599-94b731e13d0a",
        "cursor": {
          "ref": "a725ca4c-8db8-41d0-a84d-e51bffa5250c",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "72a2e39a-52c3-40f5-b9d4-0111603552da"
        },
        "item": {
          "id": "7a79f8f2-17ad-4276-9599-94b731e13d0a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "093efa2a-e09e-41c9-adb2-00a9b53f184e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e088bd7-8c83-4948-adc7-91f9176b30af",
        "cursor": {
          "ref": "47ce24db-fe86-48af-a2cf-822ceecc34d4",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "646ce4b6-7d8c-46dd-a019-0852b646204c"
        },
        "item": {
          "id": "4e088bd7-8c83-4948-adc7-91f9176b30af",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "add2d568-dc68-48b2-8005-f8d26292af24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06f08567-5dc1-4698-bb9e-2391a1386954",
        "cursor": {
          "ref": "e42c5e4a-27d4-4093-aeef-2a2402bf96f6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "736fff22-a279-4fb4-9a27-3b3dd4c825bb"
        },
        "item": {
          "id": "06f08567-5dc1-4698-bb9e-2391a1386954",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ea91f1e-46df-4dac-b053-1cbeb9f8bba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08b592d-19ee-485d-b212-66bbf5fbb0ad",
        "cursor": {
          "ref": "c27430d2-f2f6-4a37-8b22-0f2e550dd262",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f1d470cb-8603-4488-bc55-74b85b7fa2bc"
        },
        "item": {
          "id": "c08b592d-19ee-485d-b212-66bbf5fbb0ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fbb9c233-c474-4df0-89b5-5f830448e94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b662be5c-aaad-4677-8660-0d1589cde685",
        "cursor": {
          "ref": "4bdc27c3-0a93-4fa5-91c0-aad1aec29fc9",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f4950938-2288-46c2-b737-0ec12c907e18"
        },
        "item": {
          "id": "b662be5c-aaad-4677-8660-0d1589cde685",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8eff33af-83d6-4ca7-94f3-008854d59452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc19a25-444c-4e1a-a897-a1874b328193",
        "cursor": {
          "ref": "39629625-257d-4c41-bcc4-f08a62cda1b9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "03c21f23-dc11-43b8-b2d1-cfdf69d4965b"
        },
        "item": {
          "id": "5cc19a25-444c-4e1a-a897-a1874b328193",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ab673e71-37cc-418c-8e04-173b069eedf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be8b2502-5caa-4a69-9670-648ce3b02f67",
        "cursor": {
          "ref": "71d943a1-364b-4748-a353-c8bdbb1de8b0",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6466a7ae-8b3e-43d3-a432-2be078b05dad"
        },
        "item": {
          "id": "be8b2502-5caa-4a69-9670-648ce3b02f67",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2a2ca150-c9a6-4005-aff9-5ff93135b3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462b9232-1768-4187-8ed1-63b5681d4369",
        "cursor": {
          "ref": "e121b6b4-21fb-46b2-b204-1dcc139f4403",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f4068b95-3168-4c6c-8798-9bb2082eadad"
        },
        "item": {
          "id": "462b9232-1768-4187-8ed1-63b5681d4369",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8ae225c4-ee27-4ed9-afb7-bfba4933dd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77861f79-db0e-4c44-886a-4608189076f3",
        "cursor": {
          "ref": "b8f21dd9-74ee-4000-9aee-854c50fcd7f7",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2743d636-9496-40ba-933e-50ef0b488f0b"
        },
        "item": {
          "id": "77861f79-db0e-4c44-886a-4608189076f3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "dbf86a5d-78e4-4f31-8de8-6b1eaf9d8263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18182475-b502-418b-9284-9a089f2804d2",
        "cursor": {
          "ref": "2ce63222-9cff-4349-85e1-c4f1b9d78ec7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "101fb5e0-4e59-4806-8bc1-2cf8e5a94021"
        },
        "item": {
          "id": "18182475-b502-418b-9284-9a089f2804d2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a604cd9e-c3a7-4773-91c1-7e5496bf822c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f969c7-3f41-4e1d-b54b-a013b28c0cdb",
        "cursor": {
          "ref": "6167d457-c283-4f88-a292-adf3543c604c",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2924add0-351b-41dd-94f6-434abcb452eb"
        },
        "item": {
          "id": "a7f969c7-3f41-4e1d-b54b-a013b28c0cdb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "85d49ffc-18c4-47bb-be7d-bac3dda6f7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb65d01-d5cf-4722-a7d5-632e5e9d83fd",
        "cursor": {
          "ref": "7585529a-b192-47ec-bfed-691be363d229",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "19c8d338-aac8-4fcc-9bc7-20aea4c6abbf"
        },
        "item": {
          "id": "efb65d01-d5cf-4722-a7d5-632e5e9d83fd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a7106ca9-a645-4417-9356-59782c133a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d94ee6d-23ad-4095-a76c-fc165cac68a3",
        "cursor": {
          "ref": "9be638dc-48d5-423b-845b-3419f1ecc3d7",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62f69e7a-6c6a-44f6-9f59-304c6f4a8a28"
        },
        "item": {
          "id": "1d94ee6d-23ad-4095-a76c-fc165cac68a3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "90172fb9-0785-4aed-8932-2c76884f0d99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c951c703-62ba-4841-b60f-ae9d8b7d7b9f",
        "cursor": {
          "ref": "6ca320bf-401c-4dfd-af16-e8b0e1742cff",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "897f28c2-a61b-4f9a-9e40-1b542ad6dd88"
        },
        "item": {
          "id": "c951c703-62ba-4841-b60f-ae9d8b7d7b9f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "07ae4733-8fa0-4967-a4bc-d05cedc230fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8b348e-53e2-4ddf-a9a8-6ff21724afa0",
        "cursor": {
          "ref": "30c6f9b5-e606-4c55-8e76-443257253b2a",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "9c12acf9-6e07-4fc0-becf-dcaf18f185d9"
        },
        "item": {
          "id": "eb8b348e-53e2-4ddf-a9a8-6ff21724afa0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ff21083c-bf60-4380-a6d5-f5368d90e266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c4cd02-573c-4b1b-826e-fd360014fbca",
        "cursor": {
          "ref": "707d0063-660c-4f31-bfe6-8e563ee8bbde",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "28e739b6-670f-4d23-926c-4b2fefd34dcc"
        },
        "item": {
          "id": "f7c4cd02-573c-4b1b-826e-fd360014fbca",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0d859d4c-c3db-422b-92b8-9380ace0040a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55ce71b-4c18-43a3-bea4-5277c020ae32",
        "cursor": {
          "ref": "9d419b3d-2790-4760-a87e-7baab11c7c93",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b41bd7b7-f937-4455-b8ac-fd8e830493bd"
        },
        "item": {
          "id": "b55ce71b-4c18-43a3-bea4-5277c020ae32",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "742a01f1-dda9-40da-b9dc-7f1501ed7ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb3c610-5b3f-4647-8853-6eace3e2bf3f",
        "cursor": {
          "ref": "e4f39e44-e914-4b44-9b7c-990368f82882",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b6f3bd88-182c-4034-9307-2920d172f32d"
        },
        "item": {
          "id": "beb3c610-5b3f-4647-8853-6eace3e2bf3f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a3f6d6f9-1731-4d6e-8a3a-d3276279f6cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bd0a95-7a1c-48fa-96e0-dbc022ebc8f5",
        "cursor": {
          "ref": "c31a3b4b-3e5d-4451-8e22-6fbbcfe2a1da",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ac9b9293-8421-450d-bb3f-0b89b0dae332"
        },
        "item": {
          "id": "09bd0a95-7a1c-48fa-96e0-dbc022ebc8f5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a09b8f84-6d08-4af7-82ae-201b1598666d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29940a10-533e-466c-9a04-c97e7114ed28",
        "cursor": {
          "ref": "35389a99-16d5-4083-85a8-470e640c2cb8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "4289a9ae-f166-4c45-977d-cb5c0b9aeda9"
        },
        "item": {
          "id": "29940a10-533e-466c-9a04-c97e7114ed28",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "271fb4f6-a7b0-4d3a-be46-fe81234f465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "061a8a71-5136-4ecd-afa6-b784268596bc",
        "cursor": {
          "ref": "ab68def7-bd91-4f96-9bac-87ac5a108179",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "69cc1a5f-9e8c-445b-a034-c6bd411cdea3"
        },
        "item": {
          "id": "061a8a71-5136-4ecd-afa6-b784268596bc",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7adb6d0d-7c3a-4a48-b450-2ad025862cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095b4e9a-4d8e-4c20-ba6c-aba206b9083f",
        "cursor": {
          "ref": "ffaa3123-0d4f-4d29-8e1b-4d244813fb51",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "671b7feb-5253-401b-9353-9f2cedc136ca"
        },
        "item": {
          "id": "095b4e9a-4d8e-4c20-ba6c-aba206b9083f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6584e7c1-8491-49f8-9ea8-dd6aec79abc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d643edf6-e348-4981-b827-c1e727695f08",
        "cursor": {
          "ref": "ff5f03a5-82b1-4578-9892-5778959b9068",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4391b6ce-7b25-49cf-90ae-2babd5d01cfc"
        },
        "item": {
          "id": "d643edf6-e348-4981-b827-c1e727695f08",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d6d40df0-45fc-4907-9900-d28fe3acb0ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bcefcc-92d5-46dd-baa2-2fc67f33099f",
        "cursor": {
          "ref": "23184f0c-4663-403a-9f28-101dc73e56ad",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9927926a-9813-42eb-add2-f72d1e8239f4"
        },
        "item": {
          "id": "b1bcefcc-92d5-46dd-baa2-2fc67f33099f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18b08ffa-a193-44c2-8ef3-87f367276bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce609ec-5b20-4572-92b8-a9b6f328157f",
        "cursor": {
          "ref": "ef6971b7-2c2c-4eea-b839-e19b4c946b1e",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "3afbbc26-3329-4162-a9f4-d3f86feb55a6"
        },
        "item": {
          "id": "bce609ec-5b20-4572-92b8-a9b6f328157f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "980139d9-a05f-4e89-bfef-81afa197363a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae672fd8-453e-47a2-a49b-4cc5fe38a32a",
        "cursor": {
          "ref": "abcfbabe-9ed8-4792-abed-b44ecf8a99bb",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9d80853b-afdf-4255-bb68-615a8c7ce82c"
        },
        "item": {
          "id": "ae672fd8-453e-47a2-a49b-4cc5fe38a32a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8373dcc6-7259-4e03-8249-ff442ab306db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a200e5db-ebc5-4fad-b68b-fa4b56612f70",
        "cursor": {
          "ref": "cf68f16c-b5cf-4483-9492-7d46220f4c18",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d80b947f-a757-47c5-a5b6-7cfe2539d579"
        },
        "item": {
          "id": "a200e5db-ebc5-4fad-b68b-fa4b56612f70",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "15f8539d-11fd-4e79-b78f-06dade961da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d7580a-5b25-493c-904b-cf8862caa506",
        "cursor": {
          "ref": "81574740-1386-47e4-9e29-e24abcf06fbd",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5e2b17e1-908f-40da-937e-d5c7d9dc61bd"
        },
        "item": {
          "id": "91d7580a-5b25-493c-904b-cf8862caa506",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "44d40ae6-f80b-476a-8c4d-33b76b3e5820",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "ed05159c-3c06-4ad8-a8eb-3daf80ee0738",
        "cursor": {
          "ref": "baf60334-4b2a-4372-9bad-d2921a89367e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "89974759-67bc-41e5-89ea-d8451c2c720e"
        },
        "item": {
          "id": "ed05159c-3c06-4ad8-a8eb-3daf80ee0738",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8d052d3e-9642-4d8c-a315-5a5452bf1bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c84d05-f569-48e4-aac0-460d79445f25",
        "cursor": {
          "ref": "db165712-3c37-445d-9e92-0fcb9442732a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0c71f45b-a4fa-48f8-b3ec-242e81ff9157"
        },
        "item": {
          "id": "13c84d05-f569-48e4-aac0-460d79445f25",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d2036b0f-859c-4f3e-9c0a-17880bd0efc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e602fb1a-b991-49be-a65f-62b642931424",
        "cursor": {
          "ref": "586694d0-04fc-420f-beee-d54fb8f5c121",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9101b334-9697-4e7a-9a82-06db35b71283"
        },
        "item": {
          "id": "e602fb1a-b991-49be-a65f-62b642931424",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1a563a77-5f81-4a27-9124-3c57ddbd84e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5410a2bd-b379-449d-aa7c-e81a98af6eff",
        "cursor": {
          "ref": "0f682079-778f-4bbf-a5f5-5f7e74dbc11f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "09d0ae4c-8ba6-44f2-800f-16ce990ebd6f"
        },
        "item": {
          "id": "5410a2bd-b379-449d-aa7c-e81a98af6eff",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e38572f0-2180-44eb-8b28-6a8a4300d210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cfafc4-6b2b-4e5e-b697-4a5cba13ccbc",
        "cursor": {
          "ref": "32258e51-afbf-40f9-a0e8-5f9376e2d278",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7da65556-bbf6-4e40-974b-f4c5633229cc"
        },
        "item": {
          "id": "69cfafc4-6b2b-4e5e-b697-4a5cba13ccbc",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "65af1b9b-81a5-459b-a6c7-1c3143daf194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14b4e970-5bbf-495a-b334-a98acbf9d5cf",
        "cursor": {
          "ref": "cc717550-97cc-4526-ae47-f68a43c06c83",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "31bb48b0-0cac-4882-b361-6908bfd7aa25"
        },
        "item": {
          "id": "14b4e970-5bbf-495a-b334-a98acbf9d5cf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "55b8e9ab-b7d4-4d4b-b26d-fb3d32bea240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0be2029-1455-4628-8633-a0fcc27da585",
        "cursor": {
          "ref": "ae148b37-aa19-41b0-af67-eefffd26427e",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e41dbf4b-12d8-4766-abd4-34684ea467eb"
        },
        "item": {
          "id": "b0be2029-1455-4628-8633-a0fcc27da585",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "19783ee4-e767-438d-87d2-9c20d2ed275f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae69a4ff-4d7f-489f-8335-6a03582b0c45",
        "cursor": {
          "ref": "14832fe6-eb7a-40d9-a786-f41605fa73c2",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2a0445e3-8065-4d27-8cd9-f384862bbe50"
        },
        "item": {
          "id": "ae69a4ff-4d7f-489f-8335-6a03582b0c45",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "094c475e-ee3c-4e14-918f-cc89288ac19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a471dea-70de-4d45-b833-49d1ed199fb7",
        "cursor": {
          "ref": "69367c9f-d9b5-4c2a-a06e-20c4de9670d5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "c564609f-74e2-44bf-9d11-40b194da4bfd"
        },
        "item": {
          "id": "4a471dea-70de-4d45-b833-49d1ed199fb7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8fd3800f-228a-48eb-ab81-48db350e8c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16046e46-d4f4-48b5-a2c2-9b8886a0de05",
        "cursor": {
          "ref": "cb3d15c2-7bdd-4f6b-9014-a79017a6eba6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "84010eeb-0951-41b4-9479-fb8800ab228f"
        },
        "item": {
          "id": "16046e46-d4f4-48b5-a2c2-9b8886a0de05",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "92718e85-45b7-4c2d-9777-eb71c594a745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f2cee2-0aa4-400b-9ba8-2167321eec5d",
        "cursor": {
          "ref": "815d3f1f-2713-4529-99db-f8cb9536763f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e6dac924-8f5c-4c8e-8357-5984a9458c5c"
        },
        "item": {
          "id": "f2f2cee2-0aa4-400b-9ba8-2167321eec5d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e02fda76-011f-4167-8bca-a4307bd340d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6651328-47d4-4f62-9a91-7b9ebe3d29e2",
        "cursor": {
          "ref": "ae51658a-4f51-4876-80a3-0d862b08f378",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "fc2107df-9092-4b1c-b05c-b045a15503b9"
        },
        "item": {
          "id": "f6651328-47d4-4f62-9a91-7b9ebe3d29e2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e6da3d47-896a-481e-a6e4-09001e4b490c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8c0f5b-cb1a-4226-b75f-91ee5b60d06d",
        "cursor": {
          "ref": "7aa947b5-58ab-4cb6-922b-940f5b7afde9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e095fcb4-1fab-42db-bc91-72d8ea352cb3"
        },
        "item": {
          "id": "de8c0f5b-cb1a-4226-b75f-91ee5b60d06d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "44a937ff-bc35-4435-95b7-a9b8229e3995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87463f19-273e-4a37-939d-ca79050fa50b",
        "cursor": {
          "ref": "2f98309b-c587-4f73-9c64-2f880482d13b",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b27ae95f-769a-42d9-b1bb-4ae375470d99"
        },
        "item": {
          "id": "87463f19-273e-4a37-939d-ca79050fa50b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "579a41dd-2829-466e-a3f2-55c9684abab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1602f9d-2e67-456d-92a7-99b2ca36fa1d",
        "cursor": {
          "ref": "bde373f4-c41a-4161-9ee2-62140c00d096",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "30314866-3585-4195-8efd-610578fdcd41"
        },
        "item": {
          "id": "c1602f9d-2e67-456d-92a7-99b2ca36fa1d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "774066b9-36f3-4589-a704-e2df540fe387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c99b93-21a7-414f-aa28-63ca7cc3a54a",
        "cursor": {
          "ref": "7f73620c-3a07-43db-879e-cf9bb77201b9",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "89928c38-22f9-468c-b2c4-816bbc858e8a"
        },
        "item": {
          "id": "13c99b93-21a7-414f-aa28-63ca7cc3a54a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f1241907-61b5-4ccc-8910-b2713fcb0ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce351bf5-4d73-4940-812a-bf6e705fbe69",
        "cursor": {
          "ref": "4446b143-890e-4eb5-bb3b-de349e289d51",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fef4510e-673a-4374-a9df-4457db10b44a"
        },
        "item": {
          "id": "ce351bf5-4d73-4940-812a-bf6e705fbe69",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9ea35dcb-5e19-496d-bdbf-613a4c4f922f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163b6a82-d52b-4dc7-831c-f2d25566e561",
        "cursor": {
          "ref": "230886b7-0f3f-46d1-99c6-fe6a0fdd91ab",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "f0ee8a20-a753-4bc9-bcb2-72373e85c7aa"
        },
        "item": {
          "id": "163b6a82-d52b-4dc7-831c-f2d25566e561",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "317a2dd6-abc1-488f-8abc-3de70adcdc5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd6fa63-12f9-4445-bbff-0ea6856165c8",
        "cursor": {
          "ref": "3af89ee8-a0f7-4318-8b56-64e8063aa80a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9785b2fd-3b76-47a0-914e-74715ee3b3b4"
        },
        "item": {
          "id": "8bd6fa63-12f9-4445-bbff-0ea6856165c8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "31116250-d399-4e4e-a1f0-a2ab1a96dfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c025113-98f4-4440-b1c9-089a5b31cb16",
        "cursor": {
          "ref": "26c9ac96-e497-4478-bb76-3b36d675015d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "64082c24-a1ea-4aa2-b0ee-5e60482bd432"
        },
        "item": {
          "id": "1c025113-98f4-4440-b1c9-089a5b31cb16",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7427d683-70b1-46a6-9aff-fe26f648736b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78a56b1-1fdf-40ea-852c-a68e0dcc841a",
        "cursor": {
          "ref": "f2ddfd43-35fb-4b44-b0e7-83cae5d1c980",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "37ed13a5-69fd-46f6-a72b-24e982db7eea"
        },
        "item": {
          "id": "b78a56b1-1fdf-40ea-852c-a68e0dcc841a",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b5a7da43-6a94-4b47-8c9f-cd5f918868d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cf3423-b494-4128-8113-53cac1e10eb2",
        "cursor": {
          "ref": "f6dc2476-6e82-4128-a689-094093c3b169",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "aa762dee-b2b0-49de-97b1-516f1860297b"
        },
        "item": {
          "id": "f0cf3423-b494-4128-8113-53cac1e10eb2",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3d5ee504-74ec-44dd-9bc1-65bcb4d9a808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bcc5366-c462-449c-b7f3-b9ed07955a6d",
        "cursor": {
          "ref": "7c20f87b-99de-48b2-96a5-022942e60ce7",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "441cd4d9-abfa-4ffa-afe0-50e0ae35cd2c"
        },
        "item": {
          "id": "4bcc5366-c462-449c-b7f3-b9ed07955a6d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8deffbe4-23e7-4bbc-b05b-f1a8f8ef10f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c117503a-a434-47ef-8e7a-e26b99ca0f45",
        "cursor": {
          "ref": "ff4879eb-cb5b-4886-a94d-d85cb8c98a32",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "6a7a27b9-085d-4943-bc99-e67f579dfd9a"
        },
        "item": {
          "id": "c117503a-a434-47ef-8e7a-e26b99ca0f45",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e0f6c905-3e38-4d4b-b05c-3d9897cf2750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49922e42-4caa-46cd-84ca-9e6fb32bf363",
        "cursor": {
          "ref": "96c052c9-1161-4f3e-a623-1e54f0862355",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "08bb6d20-90c4-45ed-b318-c7d45f518cbb"
        },
        "item": {
          "id": "49922e42-4caa-46cd-84ca-9e6fb32bf363",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c49c9ac6-0de3-47ab-b2a7-c59f0431816a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5c2f1c-c6a8-4e4f-8a7e-b277bb301252",
        "cursor": {
          "ref": "c8110ea6-d2fa-4c6c-84f8-56e66304e90f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "851c1407-24db-4d30-8dc0-cd5b5087c84a"
        },
        "item": {
          "id": "2a5c2f1c-c6a8-4e4f-8a7e-b277bb301252",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bc572be4-353a-4f53-bd84-b8560ed75075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26509ee-01f7-4276-bf03-19c559570125",
        "cursor": {
          "ref": "0126fbe6-9746-47e8-8cd8-fe9f5a87f5e5",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "05a95467-db43-4c79-b57b-8764b118b811"
        },
        "item": {
          "id": "b26509ee-01f7-4276-bf03-19c559570125",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "80f89b99-ed21-4bf9-8e1f-2b4afbb4be2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9c619f-7c31-4669-b4bb-6a6a9b449cab",
        "cursor": {
          "ref": "c95e9894-4a54-4555-ab5f-ab627c89cf5d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2a60e5f7-683f-4aa9-8e07-85e782910354"
        },
        "item": {
          "id": "7f9c619f-7c31-4669-b4bb-6a6a9b449cab",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a4699cad-437e-4218-8c4d-22a252fc76e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37633afc-111c-4105-bc9c-ba8d3a5de3bd",
        "cursor": {
          "ref": "07cf4ad5-1ff5-452b-9557-13fc3c71df0b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e51cfc47-d090-4ad2-96c1-2c34f6f704a1"
        },
        "item": {
          "id": "37633afc-111c-4105-bc9c-ba8d3a5de3bd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d80f8d26-3418-464c-90f8-ef72a7483014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d0222c6-0d61-4975-84f9-9cbc66395c4b",
        "cursor": {
          "ref": "65ccb39a-654a-400e-a062-0eb779a59435",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d1b85292-f40a-4de1-8ceb-2fae2122a74a"
        },
        "item": {
          "id": "1d0222c6-0d61-4975-84f9-9cbc66395c4b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "71a5bb7b-61f3-4658-8c2e-268a8d75dde2",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9dc57187-a2d3-4fdc-b9b8-b8c1a6751758",
        "cursor": {
          "ref": "ce2e1ea8-34e3-4323-81da-990bf9499ee4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cc457bf2-f0b2-45af-a0a0-f9c70ff9eab0"
        },
        "item": {
          "id": "9dc57187-a2d3-4fdc-b9b8-b8c1a6751758",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b2db89a8-f56e-4154-a521-a6404ea90e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b61f0e-e21e-42c2-b459-f955142d30a7",
        "cursor": {
          "ref": "622e564c-7d45-412c-98e6-10ce14a01540",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "01385df5-5762-4ce5-95fa-c0d68ff0a789"
        },
        "item": {
          "id": "f6b61f0e-e21e-42c2-b459-f955142d30a7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5eef4a6e-3ef6-497a-b7eb-82fb6d007cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cbfef3-3aac-496c-a389-c39c6f6765e4",
        "cursor": {
          "ref": "43466279-00d5-4fcc-9e3a-d05cf3980589",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "de9ea3c5-344c-402b-a084-3958d540dc61"
        },
        "item": {
          "id": "90cbfef3-3aac-496c-a389-c39c6f6765e4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "364c21e0-49c0-41bc-aaa1-db7361031e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b0ec9fe-21b7-4044-b6e8-3d9dee53b34b",
        "cursor": {
          "ref": "350449b0-557d-48d7-a1a7-fcb365e44786",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "5bb0f374-7d08-4d6e-b9ee-687a43ebea31"
        },
        "item": {
          "id": "2b0ec9fe-21b7-4044-b6e8-3d9dee53b34b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0c78ba57-ce07-4424-b41c-c71a816ef309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "212ef720-7b14-4a6c-bfcd-094f27d6d226",
        "cursor": {
          "ref": "527d2bb2-97e3-4499-b748-9c64914edcbd",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2878c475-ff6e-4468-a29c-90932bc131c7"
        },
        "item": {
          "id": "212ef720-7b14-4a6c-bfcd-094f27d6d226",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "de3cd45e-725f-4931-b68e-3d4501f1e967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2deafe9-2828-4f01-98c5-bbe67e9c7944",
        "cursor": {
          "ref": "1e04a093-9bc4-4d32-90de-b32b18e62611",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2d98b04b-2baa-441b-bd1f-c780859b7ffd"
        },
        "item": {
          "id": "c2deafe9-2828-4f01-98c5-bbe67e9c7944",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "004f559f-0d53-4fdb-9e12-7123dcb764e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "accc87fb-23b0-4c4c-ae2d-18b89e3c5e8c",
        "cursor": {
          "ref": "57cd6764-05f1-4dc1-9655-86e1672cf89c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "80b2f51e-1b9a-485f-9ef7-46eedfcad68d"
        },
        "item": {
          "id": "accc87fb-23b0-4c4c-ae2d-18b89e3c5e8c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e0ff8e6e-3a6d-4f34-b420-fafd42c4cf33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9883dfe5-abc2-4429-93f7-9e520eaa76e9",
        "cursor": {
          "ref": "813402e0-95b3-4fe4-8877-f206118a0a07",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6e39a140-1577-41b9-b870-c6a311ce5840"
        },
        "item": {
          "id": "9883dfe5-abc2-4429-93f7-9e520eaa76e9",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d4c81ee0-359f-4e4d-b665-46cc5ee9a02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531524ec-7b5c-4289-a76b-ca509ed9cde4",
        "cursor": {
          "ref": "5c87da08-8851-498a-b1dd-58825d8e739a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1826a2c3-e6f4-44f0-bc61-0c510a70e510"
        },
        "item": {
          "id": "531524ec-7b5c-4289-a76b-ca509ed9cde4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8f2a5402-4f55-4371-9b2f-15e3854f14da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1802d890-91cd-4dcf-8d2a-d1495d132b75",
        "cursor": {
          "ref": "cddd6e01-3995-4d2c-a4de-c6f8bff3c1d5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a1a92322-757e-43e6-bf0c-7a9da7aa29db"
        },
        "item": {
          "id": "1802d890-91cd-4dcf-8d2a-d1495d132b75",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e6773800-01b1-409b-b447-d203bca24cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3531ba2a-3dd3-474f-890a-a4e5e3e37c8d",
        "cursor": {
          "ref": "d3270848-891b-4fe5-a956-07ed07abcdee",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "72ef5cb3-2783-493b-b12f-fe7eb584e6f5"
        },
        "item": {
          "id": "3531ba2a-3dd3-474f-890a-a4e5e3e37c8d",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6a68471-4bac-4647-8c27-89043ea7288a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3b2f24-62c7-4ed2-a02d-8270b59b15e5",
        "cursor": {
          "ref": "a2f90cf9-528e-4ce2-a4ec-383ad5b986bb",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0f9be045-6d51-4d4b-8435-5da0fa9db034"
        },
        "item": {
          "id": "6f3b2f24-62c7-4ed2-a02d-8270b59b15e5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "43064f5b-aba5-471a-91b4-c81b07ec42bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0882c9c1-2d98-40dd-8e3c-86ad642f9b91",
        "cursor": {
          "ref": "b02e8322-f8cf-4a4d-b5b6-49589d4da72a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e528b874-2aa1-4713-b7e8-3a74563baa41"
        },
        "item": {
          "id": "0882c9c1-2d98-40dd-8e3c-86ad642f9b91",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b032fe0a-41db-47c7-81fc-2c863d1f57fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0737993-b124-4e26-8bfb-4ddc27f3dbe0",
        "cursor": {
          "ref": "cd020b68-6760-4940-af48-94d261279a86",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2ab6a0e3-46bf-4a42-85aa-fbefb937f08a"
        },
        "item": {
          "id": "a0737993-b124-4e26-8bfb-4ddc27f3dbe0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4d063081-81e6-4e15-bba2-b8b608e94a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cfa40e-dbba-4dc9-80e7-671b960e46f2",
        "cursor": {
          "ref": "70437198-65ef-4318-aa72-174f4d7ba076",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ec376a33-1299-4d1c-8d71-df7baac0e972"
        },
        "item": {
          "id": "a3cfa40e-dbba-4dc9-80e7-671b960e46f2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5b7e363e-7d6c-4e13-9f6a-b3f03c4a2d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32431c11-ac38-44aa-aa73-6ad849610729",
        "cursor": {
          "ref": "3022cf37-bc07-4c89-bd3d-2551842f3538",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a96f96b4-9bf6-4b5c-8b84-b48f84daf273"
        },
        "item": {
          "id": "32431c11-ac38-44aa-aa73-6ad849610729",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f652cd7a-a870-430b-bfab-8d6599ea3ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dd281f-7194-48c4-97f9-58449d1bbd92",
        "cursor": {
          "ref": "0035c4ae-ed86-4c71-a85e-b9b27a17653b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d812893c-50c8-45bd-ad26-b84437ccc269"
        },
        "item": {
          "id": "95dd281f-7194-48c4-97f9-58449d1bbd92",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f36cd4d7-b130-4b34-8b9e-2226e7e10edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c11f5ff-099b-405f-a02f-0824f9c986d7",
        "cursor": {
          "ref": "d16f2c33-2159-423a-80be-b95945588480",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "642858be-c1b2-4a21-be38-7d554152cf39"
        },
        "item": {
          "id": "5c11f5ff-099b-405f-a02f-0824f9c986d7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3d26f025-5ed3-49b5-bf48-8d1a525cc6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0de19d-2365-4f35-99c2-65128e1ef208",
        "cursor": {
          "ref": "04321dbe-ca6c-4315-a61b-88c12638f0b3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "df4dc0c0-b92e-4d2c-8b44-90d3c236d38c"
        },
        "item": {
          "id": "7c0de19d-2365-4f35-99c2-65128e1ef208",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7b6c4820-d239-4397-83cb-77cfa7ca07b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfabfe8-fed8-4b10-8a7c-0da8b0e5645f",
        "cursor": {
          "ref": "99514976-7cbc-413e-af9f-f0bc9fe78fc9",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "3dd4abb8-2bcd-45db-b0df-4e38fce5bd11"
        },
        "item": {
          "id": "fcfabfe8-fed8-4b10-8a7c-0da8b0e5645f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cadf7199-c758-4de5-a7a1-9f624a290404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36971dbe-3e5e-470f-ad78-ef10edc8f30f",
        "cursor": {
          "ref": "533d8ba5-f24b-4893-b7e2-e128d85bb83c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "544a9add-6f69-4ced-b4de-10885b184623"
        },
        "item": {
          "id": "36971dbe-3e5e-470f-ad78-ef10edc8f30f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6dc08e2f-c025-457b-8315-dee7ab4d065f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0b01cd-8131-4e05-98d0-3dc1d5d2036e",
        "cursor": {
          "ref": "763d03b1-50ea-435d-a96d-95d2d2caef92",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6d0caab1-b7e5-47f7-aa74-7a0e5ec10dc1"
        },
        "item": {
          "id": "af0b01cd-8131-4e05-98d0-3dc1d5d2036e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f0006937-d735-4f09-98ec-0e0d0c6a418d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedc9b34-3059-4f38-a006-13ca85e3f133",
        "cursor": {
          "ref": "6087acfd-cbea-452a-8470-47be187fc5de",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "631730b2-18d9-4799-bff1-f04338983e4e"
        },
        "item": {
          "id": "fedc9b34-3059-4f38-a006-13ca85e3f133",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "13f1de8c-521c-4471-bc14-0328565eb532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a27e51-3c1a-4c32-9a91-6fb4c2eea736",
        "cursor": {
          "ref": "7f436e53-9d0b-4783-abc1-fee3dc305967",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f1ea56ef-d395-46aa-a55a-4d61323c3027"
        },
        "item": {
          "id": "f4a27e51-3c1a-4c32-9a91-6fb4c2eea736",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "77f21514-ec3c-4b61-95ef-f6633ef4c29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70c6b4a9-fe67-4a9c-8f60-551eeacc7ad7",
        "cursor": {
          "ref": "f2635728-9494-4f08-bb67-8358ad04625a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fc9a5038-16aa-4629-8d74-8601097a8df3"
        },
        "item": {
          "id": "70c6b4a9-fe67-4a9c-8f60-551eeacc7ad7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "734f50ae-4b63-4775-aba8-ed4de9e29caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9680ae-bef4-4f5a-89c0-abec499e7d4f",
        "cursor": {
          "ref": "4777f835-c8e5-4033-9f88-12408ad83bf4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "56334999-f446-48dd-bf93-3469f464694b"
        },
        "item": {
          "id": "0f9680ae-bef4-4f5a-89c0-abec499e7d4f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6eb31022-5aed-4c1b-9541-8cb3dce93a01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac6c06e1-ff20-43bd-843e-912dbe84a103",
        "cursor": {
          "ref": "ea3bf582-65dc-4898-8f61-3b773fa6fc23",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5a0de42e-6b0c-45a5-9c7a-d80c7cbb3c65"
        },
        "item": {
          "id": "ac6c06e1-ff20-43bd-843e-912dbe84a103",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0c03a759-63b9-4635-9453-4c9379bad85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c10a33-60bf-4d94-b3f2-5daddc1d2983",
        "cursor": {
          "ref": "e2ab773a-86ce-4c9d-95b4-f2c40ebfacb2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "25fd661c-0dd5-4ecf-9a77-f5551b0a65de"
        },
        "item": {
          "id": "34c10a33-60bf-4d94-b3f2-5daddc1d2983",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8d7ed7ef-1261-42a4-bb2c-9d850c2802ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17872d4b-138d-4e65-a87e-8f133f213a18",
        "cursor": {
          "ref": "9b92f164-740a-445f-88d1-ff1d9993cad6",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ed178e5f-6355-43bc-b72b-2a003485187a"
        },
        "item": {
          "id": "17872d4b-138d-4e65-a87e-8f133f213a18",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3e5d18f4-0ca8-4b1e-9e41-07d838391227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835db3b3-9757-4098-8a32-bcbd92227c0e",
        "cursor": {
          "ref": "a926f30d-1e1a-4ef0-9019-b81cc66e6543",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1a7ed2c7-da16-4325-bd64-61f7f9cde561"
        },
        "item": {
          "id": "835db3b3-9757-4098-8a32-bcbd92227c0e",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "780ace29-32a8-489b-9234-612eb877243e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6ebd20ea-7a8b-4a42-8f9d-312203428bc6",
        "cursor": {
          "ref": "c45b756c-19b1-43cd-bcbb-0703f3353a03",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "41448816-f429-411b-b46d-878984f59ad3"
        },
        "item": {
          "id": "6ebd20ea-7a8b-4a42-8f9d-312203428bc6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e90d6766-38f7-4377-ba0e-7f99e6c66b3c",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cbc86a4a-a309-423c-8f44-39f19a105146",
        "cursor": {
          "ref": "3a33f940-8516-45ad-aa60-b456faa8bb82",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "815d327b-d19e-4f1b-8cfa-4f2329154ac8"
        },
        "item": {
          "id": "cbc86a4a-a309-423c-8f44-39f19a105146",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1f862289-23f4-4851-95f1-8a9e0534298c",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ee3e2936-9ceb-4a52-a3d3-fb9259b5bcb1",
        "cursor": {
          "ref": "a8d3ff28-c6a0-42e6-813f-c29e78e3dbee",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "025fb80e-58a4-47c7-b473-e959c4346404"
        },
        "item": {
          "id": "ee3e2936-9ceb-4a52-a3d3-fb9259b5bcb1",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10688e01-b364-4ebf-9ddd-38cfd505e967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321a93af-edf3-4cd4-9cd7-5e22f966e5fa",
        "cursor": {
          "ref": "ef5062c7-8635-47cf-8d14-5109c11daa9f",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d2840377-bc57-4094-8fd8-3f577144a68e"
        },
        "item": {
          "id": "321a93af-edf3-4cd4-9cd7-5e22f966e5fa",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "90ce4e5b-4d1f-4ec6-9c52-75f084a7fe16",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a7520cec-ae51-4900-b895-625aedef0a00",
        "cursor": {
          "ref": "90fddbcf-be5f-4318-8b64-6abad5b420ee",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "664f2fdb-827c-4213-b170-d73a22ad4f74"
        },
        "item": {
          "id": "a7520cec-ae51-4900-b895-625aedef0a00",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd81a026-98bc-4403-956e-ab06129d2a5b",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "db8fbe01-5d48-4f53-89a5-ebea185396fc",
        "cursor": {
          "ref": "22695ea0-acaf-4bf5-8365-494e4e8edbda",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ac3c15d7-f0b1-49cd-8ed4-3e308a1af6c7"
        },
        "item": {
          "id": "db8fbe01-5d48-4f53-89a5-ebea185396fc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f1202005-f1e7-43a5-b3cd-8d1d8c22b81f",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8f7f8077-9bbe-4295-abea-ebd1655cd133",
        "cursor": {
          "ref": "8a73bd8f-901c-4562-8a24-6fb9c968a61f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6ff8dd34-a8a4-43c3-8c8c-001d7a4cd768"
        },
        "item": {
          "id": "8f7f8077-9bbe-4295-abea-ebd1655cd133",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3ae4ec9a-cc9b-41ac-bf83-380ef7ca9a94",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0a9cc823-67be-4bc8-ba2f-cadd3eab9e67",
        "cursor": {
          "ref": "47c1900c-d086-49ac-b68c-543f9fb12dc2",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "958a8635-2065-44ca-8d43-383f34fb744d"
        },
        "item": {
          "id": "0a9cc823-67be-4bc8-ba2f-cadd3eab9e67",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5076e0b1-5eed-489c-8bd5-48a612921508",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "673f2473-7d4c-482f-871c-61f6452b6347",
        "cursor": {
          "ref": "a39e8b66-ea4a-4cb1-b00f-27b9db71561d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6085e851-3c12-4796-8445-e7f424f97a22"
        },
        "item": {
          "id": "673f2473-7d4c-482f-871c-61f6452b6347",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eeff127e-4e99-43f6-897d-efda0a93fd97",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "74533c0a-70ad-45df-a5be-c2cd95077d25",
        "cursor": {
          "ref": "6fb5d825-babb-4b60-b4a6-83c6b194f967",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e85d7b3e-c0e5-4a1b-9807-96cae9714231"
        },
        "item": {
          "id": "74533c0a-70ad-45df-a5be-c2cd95077d25",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "58a24fba-7cf3-47cf-a325-e6e4b732827b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d174703e-6ee2-4867-b8d0-705af477af14",
        "cursor": {
          "ref": "0c6a11ce-f219-43a9-86d6-890d04f3d90f",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6d02b74c-8243-4d45-9d5a-8c9b7dca85a2"
        },
        "item": {
          "id": "d174703e-6ee2-4867-b8d0-705af477af14",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8cb07147-d886-4ed7-b998-7a1c5533cc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ac6f73-fd53-4b45-bd8e-5167f581734f",
        "cursor": {
          "ref": "8dfb6a95-e90d-414a-b206-052565503085",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "476554f0-e1be-4f85-b240-210d2d569e13"
        },
        "item": {
          "id": "73ac6f73-fd53-4b45-bd8e-5167f581734f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "79f4adc2-db5c-4515-82b1-15a75831e151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d39362a-f936-487f-a2f8-6a35cb7c03cb",
        "cursor": {
          "ref": "c5c3fa5b-07a8-469a-9cc8-2fce5e1372e6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2dcf6648-ac51-4102-b756-ac88f4d03a42"
        },
        "item": {
          "id": "6d39362a-f936-487f-a2f8-6a35cb7c03cb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "435a7150-043f-4a1e-9133-4a931bc786db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b59f99a3-110a-4af1-b793-2e1fd39124b1",
        "cursor": {
          "ref": "23e9e754-db69-4ce6-bff1-e445e86e4099",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "1f6158af-d2b8-4687-a347-f72babfa513e"
        },
        "item": {
          "id": "b59f99a3-110a-4af1-b793-2e1fd39124b1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "725b9255-0c5c-4117-a9dd-3ca7b47f8e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23ffc78-19fc-49dd-ac05-f0dc102f94e6",
        "cursor": {
          "ref": "7531e6a0-18a1-4a58-b5bf-0843d42fd1f8",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "42d03b61-feb9-4a16-94a2-52f62276f8d7"
        },
        "item": {
          "id": "d23ffc78-19fc-49dd-ac05-f0dc102f94e6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "478585cb-a362-4889-8265-602629d67888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278f7ab6-ae43-4468-bdf0-29c35fe299c2",
        "cursor": {
          "ref": "ee96a669-e2d7-4a5c-8c87-bd796fad284f",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c35e4687-5b2e-49a6-9764-a1ed380f4367"
        },
        "item": {
          "id": "278f7ab6-ae43-4468-bdf0-29c35fe299c2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "73f6c3b5-0225-4d5d-9e2c-3071d6e949e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531d2c5f-bf1c-40fd-bfb4-41c21e377b42",
        "cursor": {
          "ref": "943cb683-29e2-4e02-a14a-61a56779e577",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ee96b487-37c1-4da7-8bc1-cded2980b674"
        },
        "item": {
          "id": "531d2c5f-bf1c-40fd-bfb4-41c21e377b42",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ce3406cb-f68e-44fe-96a4-c9c1c6c59867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f48a6d-675b-4bee-824d-0041ed558e98",
        "cursor": {
          "ref": "94908d81-376d-4b80-9f48-a9eb4f0ff6d1",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "3f1b9ec7-9594-4f24-879e-d542c54d6624"
        },
        "item": {
          "id": "08f48a6d-675b-4bee-824d-0041ed558e98",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a352a3ac-1a71-44a0-bd92-f6e0e6f36cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94ed484-1d82-4698-8d0d-3725670a0a8b",
        "cursor": {
          "ref": "5709c237-d823-4d4e-b5f1-c8ce9fa3e423",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3da1ce45-17a8-4ea1-9d6f-aaa5914116a8"
        },
        "item": {
          "id": "e94ed484-1d82-4698-8d0d-3725670a0a8b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b7516955-3245-43c7-bd43-1cfdf491827e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7430ed-9b1e-4088-84c5-f262df6666d9",
        "cursor": {
          "ref": "d0638b98-7803-46f8-9abf-a6acd14b04fe",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0355bd35-1c59-46b9-b705-8f4875a83e51"
        },
        "item": {
          "id": "cf7430ed-9b1e-4088-84c5-f262df6666d9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a084ab4c-2749-434e-a02d-307859bc010b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8679464a-807d-4960-8701-51063cfb1fae",
        "cursor": {
          "ref": "12640dd6-2de2-4f4e-acce-4b91ef58f635",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a5c3cb6-c001-4629-9479-9e0381bb56bc"
        },
        "item": {
          "id": "8679464a-807d-4960-8701-51063cfb1fae",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c931e6ce-1fe2-4653-849f-a1a243e90d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bdffb45-f0d8-439c-99ef-84b3d0bd40e0",
        "cursor": {
          "ref": "aefe0d08-0698-4ee9-974c-9d1e95338bcc",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c2e7dfca-b880-4e32-adac-b4a49f77b47a"
        },
        "item": {
          "id": "6bdffb45-f0d8-439c-99ef-84b3d0bd40e0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "22bab018-3a79-449f-8c62-4545eade173e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd25fcb-2308-4929-9b98-ddd2d48133a5",
        "cursor": {
          "ref": "7168e7aa-f5e5-48c2-ae2e-43e0122e650b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6b358577-8336-43b0-ba36-41b267cc3e02"
        },
        "item": {
          "id": "ffd25fcb-2308-4929-9b98-ddd2d48133a5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2cc54085-d4c9-4e79-93cd-c1e7a380373b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5dd2e952-ba08-4887-be3f-249320cab65f",
        "cursor": {
          "ref": "32536483-1eee-437a-ac23-31fce552c0a5",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9dfb0ee9-210b-490f-8dc2-5fa295db6e92"
        },
        "item": {
          "id": "5dd2e952-ba08-4887-be3f-249320cab65f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "47e437a3-26f5-4cb6-9afe-22a5f6c5e899",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "195368e6-f07d-4ad2-9a1e-d0bf3aeafd20",
        "cursor": {
          "ref": "b26bf83c-fb71-47a5-b437-b1ac3c384cc9",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7ce2e221-4115-4537-945d-3a4dd01fd7dc"
        },
        "item": {
          "id": "195368e6-f07d-4ad2-9a1e-d0bf3aeafd20",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8fe847a9-6bc6-422e-a2af-1986f7860773",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "68f08a41-5553-4f19-a8e0-79122ea6c75a",
        "cursor": {
          "ref": "ec8ed626-4fa5-44d2-9aca-facc162db2c9",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "130bf7b0-8fb6-4760-9f45-3dfa129c6195"
        },
        "item": {
          "id": "68f08a41-5553-4f19-a8e0-79122ea6c75a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3ba9fafb-254f-48dc-9132-f65eee94913b",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "15567915-98d1-47fb-a0bc-75c4a016b681",
        "cursor": {
          "ref": "9f367cd7-63c9-4491-9194-d046091f2342",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1f86cb79-5b53-4dcf-8dc2-fa59ba431406"
        },
        "item": {
          "id": "15567915-98d1-47fb-a0bc-75c4a016b681",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "62a23129-1b0a-4483-9090-d75be7f610ab",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ef64d548-b5d8-441b-9a9c-be1f80158b43",
        "cursor": {
          "ref": "ff2d0373-8ec5-4cee-a161-c3824dd2b077",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f4abbc06-9394-4b71-9841-a41220c52e05"
        },
        "item": {
          "id": "ef64d548-b5d8-441b-9a9c-be1f80158b43",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "75e6c9fe-c767-48fa-925c-dfb6aa2c8f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "048a000d-7291-4bce-a47f-0206cb99d2c5",
        "cursor": {
          "ref": "956313da-72d8-4d3f-9745-7d0a8649c049",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fa86580b-edc7-4005-af4d-afda53e08395"
        },
        "item": {
          "id": "048a000d-7291-4bce-a47f-0206cb99d2c5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2a1447d9-027c-4158-b35d-5eb34e95435f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b735ab67-a1b5-472f-9a09-ce04d53f3395",
        "cursor": {
          "ref": "b664749a-b547-4cdd-97d1-0ff178af9a1d",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6fe5a2b5-d826-4da3-b728-c4d86de046f6"
        },
        "item": {
          "id": "b735ab67-a1b5-472f-9a09-ce04d53f3395",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ce5e78b2-d8ea-495e-ac16-818be2a51d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a8e5eb-b3a7-4231-8f71-cee6ba933e12",
        "cursor": {
          "ref": "e6496227-4704-45c1-8cb9-f3d7eec68c32",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "deaabdaf-c74a-446c-bbed-e97d1906d1c8"
        },
        "item": {
          "id": "a9a8e5eb-b3a7-4231-8f71-cee6ba933e12",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "490d3099-d9f8-4b16-8e49-b50f792ad14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c2796d-e374-460d-86df-185e842d54f8",
        "cursor": {
          "ref": "2e722e79-2828-4cc2-a3dc-8accb1b449cd",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a66493ee-e53d-4953-952a-5fa2bef80c0e"
        },
        "item": {
          "id": "20c2796d-e374-460d-86df-185e842d54f8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3a760652-61e8-4c76-aeb2-3316e462ec55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "350320bb-26ae-4ad7-aef2-e0ad475282b3",
        "cursor": {
          "ref": "2f66fd19-be8f-4163-bd72-7dedfbf2c2f3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "aa069311-5761-4c47-92e1-656c272bb6e0"
        },
        "item": {
          "id": "350320bb-26ae-4ad7-aef2-e0ad475282b3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2c1e7598-c5c1-4c19-9eb3-2328a804d1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a8c1dd-6beb-4e51-b1f9-2576346d23f4",
        "cursor": {
          "ref": "e9333269-47e0-4cf4-b27c-91d047142759",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "85c43acc-df4a-441f-8a30-1bd3483c96b4"
        },
        "item": {
          "id": "39a8c1dd-6beb-4e51-b1f9-2576346d23f4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3ea698a4-f93a-48a0-b071-a54aac0163f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3f17e2-89c3-471c-bff9-71bc0f3d065e",
        "cursor": {
          "ref": "4ee0b5f0-1999-466f-95b9-55452ba851a2",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "d14f0dc5-14c4-48fa-b6d0-807107e3a22c"
        },
        "item": {
          "id": "cc3f17e2-89c3-471c-bff9-71bc0f3d065e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cf205ed6-9167-47b3-9467-494d0ce147d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f98d78-ae9a-44f1-9639-50a7cd765498",
        "cursor": {
          "ref": "d31fe3e3-0bda-4c77-ace7-f25d4492ee77",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "6a1c9af8-29fc-4295-ba16-c8842d0df4c6"
        },
        "item": {
          "id": "63f98d78-ae9a-44f1-9639-50a7cd765498",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4934c0ac-96e1-4051-9cda-bcdf0bbb1ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb224908-231b-4e1c-9dbf-57f7294ee3e3",
        "cursor": {
          "ref": "1d254d92-e33b-46cc-a6dd-3f9bcedeff8b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "c8ccd142-2c03-4f64-803e-3d7d47044368"
        },
        "item": {
          "id": "bb224908-231b-4e1c-9dbf-57f7294ee3e3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0d6f60e8-5d5a-400b-91f3-ee67aae8dd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a8e16f-f71c-400b-b26d-797c7f70e6f0",
        "cursor": {
          "ref": "2ed39fe1-6055-43cf-8708-e260fb37f6e9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "57cd53f2-3b24-4507-97f5-fd82638f334e"
        },
        "item": {
          "id": "b7a8e16f-f71c-400b-b26d-797c7f70e6f0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df0a7f76-3946-425f-9948-cfb967263586",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c87e05f-b88b-47e5-8eee-726326f359b9",
        "cursor": {
          "ref": "3bcc35be-2042-4a65-bc8c-4765f5311dce",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "1a6696ae-841c-4018-b3aa-b8f083a885d1"
        },
        "item": {
          "id": "2c87e05f-b88b-47e5-8eee-726326f359b9",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "94e2fa6b-4a44-4844-9a4f-fcad5e653d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc9a474-073b-4c90-98ec-d56e3c7c3b21",
        "cursor": {
          "ref": "b0170770-a47c-4235-a008-f1439ceb2192",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "4adc2898-cdfb-4fc1-9d80-0a45e1ac5eb5"
        },
        "item": {
          "id": "afc9a474-073b-4c90-98ec-d56e3c7c3b21",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "2f328025-1e59-4b1b-8561-149c9ebc7ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142089b6-707d-41f4-add9-122ac42136f1",
        "cursor": {
          "ref": "758568ea-b442-41e2-a077-05ff43c56ecc",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f950479c-49a0-42bf-adca-5d59a47e85f9"
        },
        "item": {
          "id": "142089b6-707d-41f4-add9-122ac42136f1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afcdefca-09e9-4e07-8f54-9a8798778145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9c872f-637c-4a0a-8ac4-ef60e915e4f9",
        "cursor": {
          "ref": "ee1f9fe2-c339-4d8e-baef-c8ab6ca64587",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "69b52177-362c-48b8-8c4e-ebc42bf6af45"
        },
        "item": {
          "id": "5a9c872f-637c-4a0a-8ac4-ef60e915e4f9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c71a2a87-fdc3-4dc7-a23f-97e5e387ccf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440467e8-c1ca-4b9c-afb0-2a32ccdc63db",
        "cursor": {
          "ref": "2ae1c050-b169-4bb6-9d94-3e2472549d80",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f22bde92-c8ce-4b46-a4a3-193139b72d74"
        },
        "item": {
          "id": "440467e8-c1ca-4b9c-afb0-2a32ccdc63db",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "cd468c48-be91-4fb1-8726-e58fe4888d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea5467f-562e-4a51-98b0-4e3348a70f7f",
        "cursor": {
          "ref": "978708f3-c3f3-4f5a-8f41-5e9bad8aea12",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d0129ec8-2f2f-4daf-b04e-b376c816c19f"
        },
        "item": {
          "id": "bea5467f-562e-4a51-98b0-4e3348a70f7f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "35401e45-f1b1-4a88-9dd0-39752449e1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae036c9-77e3-4a6c-a01c-18dd5607cb28",
        "cursor": {
          "ref": "0ad1a925-6261-4218-a6f8-98b6a93e4523",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b6ca709d-0e60-43b6-8d8f-fac831602ce2"
        },
        "item": {
          "id": "4ae036c9-77e3-4a6c-a01c-18dd5607cb28",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a149baf0-3e9d-4894-aeef-67beb0a1f6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f98daf7-83c7-4105-b805-d0401a13f98a",
        "cursor": {
          "ref": "f3e62635-3c3c-4b5f-9726-843247262f41",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "38da6dd7-2a26-40bb-9a90-10de05f97536"
        },
        "item": {
          "id": "7f98daf7-83c7-4105-b805-d0401a13f98a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e8437f39-6294-4066-850f-11d59bb70dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c355223-ecce-4a07-bf2f-5f6287b3b6de",
        "cursor": {
          "ref": "8667bac9-c1dd-4435-baae-0a7c87c96d4a",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "66326492-7115-4493-971f-bc4eb62ac122"
        },
        "item": {
          "id": "9c355223-ecce-4a07-bf2f-5f6287b3b6de",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "976e0e0f-865b-4b47-bd23-4f197ea136ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aec752a-ebf5-4c13-935f-deed69870bfe",
        "cursor": {
          "ref": "6325c82c-3aba-44ca-8d3a-9be4db581a1d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5e001347-c69a-43b3-9e80-4b3fd3f826da"
        },
        "item": {
          "id": "8aec752a-ebf5-4c13-935f-deed69870bfe",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e907b9b4-3a7a-40c9-8296-cf26611e3cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f036f6a9-80f4-459f-a402-00c9e1e1f235",
        "cursor": {
          "ref": "8d37fab8-2293-485b-bd95-d547f6f138a4",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "f50e9792-c5b9-4f4c-af41-d8682c4a56ed"
        },
        "item": {
          "id": "f036f6a9-80f4-459f-a402-00c9e1e1f235",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f2b9cf19-2543-45c8-b435-ad4ede3e7501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61975c87-18b8-4151-bbdb-22ff0b45b3b4",
        "cursor": {
          "ref": "2108ec8c-c536-4c26-aedc-c8378df27c52",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "8d63678b-142f-4cc7-9949-8b6c48c1bad4"
        },
        "item": {
          "id": "61975c87-18b8-4151-bbdb-22ff0b45b3b4",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "83824905-ea98-4194-bb8b-78a9f841b167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b99f0d-a5e0-446e-9575-056c961892d7",
        "cursor": {
          "ref": "56752458-0e8d-454b-9068-816d7ee5df52",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5965bd00-26e0-4378-ae3c-267ec25ce1b5"
        },
        "item": {
          "id": "43b99f0d-a5e0-446e-9575-056c961892d7",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cdb7a6e4-2bc9-4bac-98ee-4051926cffac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58fd7831-0b40-41b4-9aa3-a59a4333f024",
        "cursor": {
          "ref": "4d35a9d7-e00c-4698-b128-d4e6ce54a033",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a7652a91-027d-4a80-90a3-dddaaa9b27f3"
        },
        "item": {
          "id": "58fd7831-0b40-41b4-9aa3-a59a4333f024",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "0fb3f993-8008-4962-8ccd-722a2f5777e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4b0d1e-c8e5-470e-ba80-d515c5fb2754",
        "cursor": {
          "ref": "44d20592-76b9-4b94-8428-957bc950cfd7",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2fe07f7a-00b3-480c-a91e-41949d0d4b0d"
        },
        "item": {
          "id": "0f4b0d1e-c8e5-470e-ba80-d515c5fb2754",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f0f69c54-280f-487d-868a-136fb6904b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6b67b8-6f60-4d3a-b47a-3c3f51979a54",
        "cursor": {
          "ref": "474af5c4-aef7-4069-8ae5-4ff65d7594f9",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "0fc0e283-c11d-489b-9dac-425a3410f70d"
        },
        "item": {
          "id": "2d6b67b8-6f60-4d3a-b47a-3c3f51979a54",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "3984f0d1-1026-4ad1-86b8-e3e45b9c4392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190b93cc-5c73-4544-a1bf-e039d18cf5e2",
        "cursor": {
          "ref": "53e3527f-f675-4cd8-9efd-1114094f12e3",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "46889a7e-577f-4216-938f-3f54ad01f31e"
        },
        "item": {
          "id": "190b93cc-5c73-4544-a1bf-e039d18cf5e2",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "53d5a0d3-df8a-4f16-87e6-d2488acc1bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8533190f-2746-4f3c-89ef-1bd637e48530",
        "cursor": {
          "ref": "daf5c444-770a-400a-a373-a4a3c2023884",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b486e629-0150-4ada-9212-b15f683f4724"
        },
        "item": {
          "id": "8533190f-2746-4f3c-89ef-1bd637e48530",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aced4486-f6e7-444e-b238-6becf092eed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7ffc44c-68dd-43f0-96ed-f2b1139b97d7",
        "cursor": {
          "ref": "63125e62-4795-4792-9284-6e7bd17c7a6e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "847f92c8-958a-4f73-bd5b-e527896cc7b3"
        },
        "item": {
          "id": "d7ffc44c-68dd-43f0-96ed-f2b1139b97d7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5299d9b7-5646-49c5-9168-d29bba080aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59268718-0441-4c1c-85be-e3e7d00981e6",
        "cursor": {
          "ref": "27961efc-6669-4c4d-bb95-3496649d65da",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "5da5857b-87e3-443d-b6ef-38a9f1b83d0a"
        },
        "item": {
          "id": "59268718-0441-4c1c-85be-e3e7d00981e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4005f162-593b-4eea-b4fa-3c36bca5b0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaebe400-ce58-4dcb-9381-9e6f8d106212",
        "cursor": {
          "ref": "653b198e-bf93-43cc-8d16-72a1b949942e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d987bb65-9956-44ef-84fc-7ccbb39f6241"
        },
        "item": {
          "id": "aaebe400-ce58-4dcb-9381-9e6f8d106212",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d8770f7f-cacd-4af3-b0dd-5840714e74be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2406457f-5de6-4b56-842c-7ef4eecae42a",
        "cursor": {
          "ref": "593dd7f0-d7ed-49bb-9c47-d5fce9839881",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8b30223b-b09f-49c5-8419-ce37554b4d75"
        },
        "item": {
          "id": "2406457f-5de6-4b56-842c-7ef4eecae42a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e00c111a-1805-446c-8386-dec7f41458d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119941cc-d58c-42cd-bc6a-f2d5925df3b0",
        "cursor": {
          "ref": "5b793d23-3489-42f4-a2ce-dea8e69d5733",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3272b919-d909-48ac-9f84-c71c35645d60"
        },
        "item": {
          "id": "119941cc-d58c-42cd-bc6a-f2d5925df3b0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e6acdedc-1466-4d2a-b36e-40d33cef489f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97887257-1e69-4d9f-8fc6-619ec254f88a",
        "cursor": {
          "ref": "73169bcd-d2e2-4fbd-95a7-964215406a99",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "018ab217-2459-4f8e-b0e5-21263b35666c"
        },
        "item": {
          "id": "97887257-1e69-4d9f-8fc6-619ec254f88a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7be34073-8f47-4e97-b6e3-25a631f1b130",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a9e402-01bf-44dd-b16b-cf4fa9b90ccb",
        "cursor": {
          "ref": "c0e4d425-22ec-46be-8687-d3001a82684c",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1570bcbc-f1ca-485f-ac2e-b404b4e477c0"
        },
        "item": {
          "id": "d2a9e402-01bf-44dd-b16b-cf4fa9b90ccb",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e383a38e-9ca7-413c-875e-9ddc81ada04d",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "1b46d718-5fb9-4595-83ca-d968e12f3820",
        "cursor": {
          "ref": "4a893c10-e617-4ec4-8142-2d7247da2d27",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "383d5861-6bba-410a-8898-56a7aaf6e926"
        },
        "item": {
          "id": "1b46d718-5fb9-4595-83ca-d968e12f3820",
          "name": "credentials_verify"
        },
        "response": {
          "id": "fc994e2d-9475-4654-aed5-eb23e253cb38",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5120ee1-ecc1-4481-8c1f-79ffff2b8e6c",
        "cursor": {
          "ref": "9b9c5cec-2bbd-4392-9882-51d32c70d027",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8814c890-4eb9-4ef0-9a66-940052b6dc06"
        },
        "item": {
          "id": "f5120ee1-ecc1-4481-8c1f-79ffff2b8e6c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "310befa9-6e71-411e-ad49-226cdebfb705",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb35e97-f918-4209-8d07-88c4ae45a88b",
        "cursor": {
          "ref": "de05bbd0-d116-4909-adb8-eba78444bc80",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "09bb1e41-f849-44ad-8b3e-9fa61862a4d8"
        },
        "item": {
          "id": "3eb35e97-f918-4209-8d07-88c4ae45a88b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "478774f4-40a5-474b-b793-16804d26aa04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb35e97-f918-4209-8d07-88c4ae45a88b",
        "cursor": {
          "ref": "de05bbd0-d116-4909-adb8-eba78444bc80",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "09bb1e41-f849-44ad-8b3e-9fa61862a4d8"
        },
        "item": {
          "id": "3eb35e97-f918-4209-8d07-88c4ae45a88b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "478774f4-40a5-474b-b793-16804d26aa04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e7850e-1119-45f6-8207-8a72305a0e32",
        "cursor": {
          "ref": "1c276302-6adf-4b56-90be-c3f3d092aafe",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "1d5d47dc-b232-4dea-aab2-6a764a108c58"
        },
        "item": {
          "id": "02e7850e-1119-45f6-8207-8a72305a0e32",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "254ce2a1-ecfc-4301-b2aa-8b0907fe1847",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9533db11-0e9d-493f-a124-0937a830aa63",
        "cursor": {
          "ref": "04a08c43-e701-49e0-b044-3a4d01c2e8f3",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d13fc230-dd3d-457f-90ce-5ce70056e6e2"
        },
        "item": {
          "id": "9533db11-0e9d-493f-a124-0937a830aa63",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9da1dfba-c9c3-405c-bc9f-404f70be791d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}