{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b5cb9b06-4cac-4a04-95d3-652cbc744ad7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4165200d-ec8b-4385-a0b8-e4db7bd4abba",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e3f34e7-7e24-45a6-87c0-8e9d6337cb9e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5d45a838-85ae-4211-b25d-2581ee1c2b4d"
                }
              }
            ]
          },
          {
            "id": "b3dfc924-c641-496e-8e6b-d6e1c1453702",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7d8155a-8b95-44f9-b05f-463ec7a333be",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab18a04d-ff4c-42b6-97fd-1635048baee6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "99de7b9c-916d-4ecc-a849-f8e354b8ab7b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c3a2bb4b-be9a-46a2-a8b1-1605db9883b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6af918c3-6490-4b33-8d60-9b191b223714",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92436f25-178d-46b8-9048-dda99f1c9ea8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a156da8f-eb96-4b8d-9f5e-08776b9d001b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a84294c8-b513-4701-a613-4a8986c21b0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d99588cc-6155-446d-b6d6-c46a5e2b0576"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d70a6eff-9885-4ea3-8e55-421d25224177",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92b0c193-b401-4e13-9979-1d586c1d2539"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6804d6ab-1e07-4262-85fc-3ef013d20dc8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5ef85406-6013-4356-bd4e-c52fce9d0e30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6fb82e2-4c9e-4f77-a79f-352e2e0f92d1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd92f072-f8f1-4f19-be7a-f9cda169845f"
            }
          }
        ]
      },
      {
        "id": "0d91ea32-4c11-43b7-a5de-565418c0660c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1a98cede-fcb2-48a5-9cd4-49ec77f01d17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95aec21f-7a48-49af-b6b4-67da9c0a7519",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ef57a88a-7b6a-43e3-9cc8-1e72e90745df",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe865679-841f-44cf-9e4f-7c1999497304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a4c9979-e77d-4a64-afbe-cbc62e1a5977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee87c45-fe68-4e77-a4cb-adad12bc7458",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2177cd5f-c17e-4139-921b-3ba3ff120c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "557acc77-ff35-4ceb-b054-4eb81aa65f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f5c0d7-a5b5-4901-9914-5cfdd68dc33b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33d052a-1fce-4d3a-8664-018aa5fa1b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b43455b-7377-4cb4-8894-f05dbcd5857b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d57bcdf4-9f7b-49ec-86e8-19de547f8522",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3784922-9b54-4fd2-b906-8564eeb2686f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71299452-90e9-4621-9b6d-4c24fd8a0daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a122abb-015a-4c45-87be-2faa3124e850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72c5a35-633c-44bd-8fee-27763a87edf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb5c5aba-37fb-47a6-badd-ee0549b915d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "212ccb72-1aa5-4d72-b48f-ab00df786721",
            "name": "Positive Testing",
            "item": [
              {
                "id": "37c9e38f-e659-4dfc-b588-6d3cd764774a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fac8e940-dff7-4249-874a-2f7ad80cfbb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "499fedd4-1fee-4198-acf8-1dd401ba15b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "234997da-02e2-4bb6-953b-03b2dc881a2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8599ea3e-fa54-4640-91b3-44d62ec00f5a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "03e2892d-703a-411f-b469-38f069594409",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7103be8b-49e4-4843-9af8-e2bfddf82fb6"
            }
          }
        ]
      },
      {
        "id": "2a004704-5597-4806-a3b6-d83161d86b2d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e02f7751-2c56-4c1c-b35a-ea1e73bab220",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a8c105a-d937-4296-9e5b-804a1eee7c40",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4e05b3dd-f766-47e9-8eac-e7e94b02ebfb",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3508694a-148a-4cee-9142-5f2d4d4e1155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443fd62f-d954-4434-93a8-b72caf53437b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9210974-a13e-43c9-b131-23831610c80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5ccbe36-4f05-4a71-8718-930cfa2dcc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823c4274-b700-4830-8102-8ad84c7e6615",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175eee8d-c835-4586-b7c5-1aecf5ac47e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6315507-7096-49f3-93d5-93a4c2a03098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5eeadd-a8ea-46cc-83bb-30d0d19673c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6fae9cc-073b-4494-ae76-3165696958e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a8923b-bc1a-41e4-a947-7e7aac94e1e5",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd502db-8b05-4f60-9aae-f0fd9ad200b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18877d4e-d62a-4ed8-98ae-af412116a5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a1c30c-b02f-462b-843d-2820e2c9e091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6578c9f3-d079-4469-862a-81d99a5b9c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa51461-bd76-44af-92dc-1cf2cb674b12",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea65a1fb-5a84-4660-8e05-621050c40967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08322b07-3a42-426a-90f9-945ab42a86e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71a146f-abf2-4fc7-92bf-30e3e90a6ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ef88285-2594-420f-a5c9-8cebe31a44c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cce180-f43b-4569-81bb-341a210ac669",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e84ac1-cfdd-41e8-8573-2bbaf827fba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477e1aef-db28-468f-bee9-06628f36a702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bd7cc6-579d-494f-be7a-98b895c0174b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0b73c78-f231-4926-8703-6a82246309de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "812da7c9-006a-4132-b563-3d0cae940830",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7855d722-170d-4d2d-8cab-4ac548bf0c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d09aca6c-517b-4d35-8edb-141d3e30a706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce84606-1e71-4401-a95b-65d6416cae95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fecfd4d-5ae5-4082-b20b-d84a8bd7c755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32055009-dbb9-4130-9807-2dc2ce7dd524",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36642e3f-386e-4483-be1d-565a95532bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c26f8f-ebed-4cef-8bf5-c19e860e9ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8e8f0a-8773-41c3-a8ed-840788e5869b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "810fce86-5393-471a-a15b-c07c3f416767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf2a939-e5d1-41fe-958f-00200b1cd336",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5da9d07-91c7-470e-b6fd-ed13ad0c2bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe6616d4-cfad-4a11-bf34-7feadd6a4bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5ca850-10e4-4b98-a916-908b8fca1491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc729cd2-f093-4102-acea-94b47f769dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccbbc49-6893-4112-8443-3eee3aa798c9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca489a4a-09b2-4c80-a3ad-6c00bc2361fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b729ce-b142-4116-88ca-af39b4ade283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bf3149-97a5-4090-81cc-59434ed49adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5b3d3db-1f3a-4242-b885-91b29513950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06acda20-41df-4122-b165-9a5bcbcc73da",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8167b7c1-c39b-4f69-bfaa-018358d0735d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9a3dd65-105e-479b-bdeb-49e2b0e28946"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0ee93d-c26a-4330-933f-88d476589753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b61227e-ab64-4030-87d5-7a56cdff6560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f895163-6fa0-4316-8b0c-a23da66f19d3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dfd172-d4f4-4c5e-b096-0df3e8670b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "724db7ec-0fdc-4f2f-9994-79d159eda0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab79491-8b53-4a04-b894-35424f5ca82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c81d59c3-feaa-4c8e-9937-8b3f74fbfaf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1c8a15-d28f-41cf-939f-d66a62992db3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603bdd2f-b372-4e83-aec0-2f126459fc15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11d33dd-c748-4032-81a9-b5cbdaa2ac72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435273de-b26c-4596-a973-7a95ee0ea26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3eda47e1-a8eb-4e45-a29a-413a4804cb38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1921a680-9108-4f77-a836-40789a7c0264",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5d0064-5526-43c9-afa1-5f497642918a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3b5520-50ed-4b11-a9cf-c8e5f013508c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5e5647-6e85-4ef4-b783-191f7e5a180d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5410af8-d578-4bd6-8b9e-88c1146c1cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4e161a-2789-4597-9f3a-7474a78ff65a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fafca21-7fc1-489b-8334-2e8040c11d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "106cc728-02b2-4ea1-bec7-6ccbb227639b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a7eb0a-1df2-4f8b-909a-3b4c99e3adcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64abedb7-8abd-4dd5-8e91-a67acf43310e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f94289-0bfd-42f8-ae14-ea12d5a55cfc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f8ff0b-9a43-4f57-8894-d077d8b34ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff25b028-8ee6-44f6-b240-072101fca3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a43605d-4465-42ba-b61a-1fbea37ffcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "087ff2d2-a945-4140-a841-a9b0d2c9f67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd2726d8-40a1-4d21-92d2-ef1eb2756b0f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2babf3-e5fa-4e6a-8360-cfe9a25e0b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f639f52-94db-48ea-be2f-58c47b879c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8623a1b3-dd7b-4851-bc2f-6bd971ac67fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac46bc25-cebb-4d4f-8a1d-a5921f68a5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fef2ddc-9641-4354-b714-d3842dc610cc",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0e25a2-ef56-47ee-8f4f-f8ed4aaf3752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "233dffc3-ee7a-4ec2-ae8b-e4912e6a5dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f58ee7-93e0-4a92-ba4e-34abf2ddeb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af2e48c7-d2c4-4b80-82ef-8527673d1752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f400987e-4048-451d-82ad-8ea143bdab9a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e7f25a-2c3a-40d1-b192-a43700ebe726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25098c2-19e2-4b62-ae26-5edb185afbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d382fe-7781-4c1e-b7cf-fb5660f5bd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5cbf01-b823-4160-ae4b-403c155c6670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fb40b6-c5b9-4efd-acdc-a3dffeec97fe",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b343ab0-848f-4a68-af55-ef11325ad1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c3b4da-febd-4087-be6d-ffeb3866a694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3dc2b7e-c969-427a-aad4-1ad3369e5e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3490fa7-28ed-4f7d-8b13-11bc40d4b2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb69252-0b45-410e-8c65-40bc0a7e6639",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f931ef4-5ff6-4c23-ba84-0f9ab21645a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b29c3f66-3e89-444d-9baf-4c421b960438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a64bbf-3025-499d-a52b-8c6137885f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c46a12a-59a0-47b1-b85a-3e6bb5341212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97e8d31-7c20-4c71-8181-e86bb0525026",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46509a22-f4e0-40b5-86aa-afe9843515e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e572260-642b-4b4a-86cb-5a3116bbeb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637d6cf6-a96a-4474-b940-67a3c57ae0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ed811b6-8cc9-44b9-b7cc-203f08a51b60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0af2bf-8fde-46ef-b745-74b86d58f0af",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fc9269-3066-45cd-94df-ba19c79d270e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7812e440-7144-40a1-987f-ebcddb30f81a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586aa667-2077-42b6-bd7f-9e5f5471a763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa26f30-b51f-4922-bc9f-6a0a97261775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a9731c-215b-4e97-9b74-294be14df0c3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c68d52-816f-420a-b897-af5f6a632d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b491c79-d8b0-4bad-af46-2f2397423431"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ae683f-ccf9-4a6c-ac6d-4717b269b86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18495f95-224b-4a98-9921-59fa20ad94eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef144ac-07d3-43f2-bb7f-eb45ff0af293",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a092de4-6bad-4531-814c-a2e19805fba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a13457ee-1874-4e22-97e2-971eac7af192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6846737-2984-4701-b0bf-c2d996122291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d8669b-c407-46b8-b50b-dbf705b5752a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2766dd-c75e-4754-a369-94acc19c8767",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1847d25d-1faa-442d-9efe-b522e51201e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d34133-3df5-45f9-85fa-f34c360b2c84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c613f43-0ddf-428c-9515-7a6084d9b986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa60b8a-ad8f-4f0b-8d91-2e9bffc53eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07e8f2b-2476-4224-aa9a-72c54f0f87b7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8fa7c8-441c-4ca8-b16b-a542c976ff0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba261787-68b1-499d-8307-1ed8b3706880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d5b8467-3a14-4f87-9815-d959740d7f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4807ed-a479-48c0-bcab-26973c6209fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf882ad-70b9-4c47-bfea-e33745210e54",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04991477-80a0-45c3-a53c-40f2dda07d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7968db3-1073-4e71-8b6b-8d2e1685d0f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36552992-fe56-4f61-a768-16cbd1c5163c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1b29f8-f75b-4968-a210-c7ae6f062846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad9ef7b-4585-498c-909b-cf0032e82e83",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826b5eae-680d-47c3-b50e-fe8cf5d68974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6545f7-de6f-4145-bba2-615f79f9cd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d06adbdf-3bcb-46c2-8076-6e975f39239d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3ac722f-3ee7-4472-bc5e-1b1d4e371bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a65440a-8c95-4dee-9842-984abcc1e319",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ef6fc7-59da-43d8-9896-5de1b758d534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e450d68-c613-4e63-b74c-612b0ba63c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6633239c-11ce-4ef5-bf4e-3bda17cada13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ceb9a1-f6fb-4439-926d-2d16459e9f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fc0975-a70e-473c-ac0e-073a0d5724b6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3af6fca-b63b-4557-bd39-187532c4805a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0740aa7-fd05-4374-b302-66d6cc8265e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94532c97-27aa-4529-b91b-5508bd80f7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a474be0b-a939-41da-b652-620e170d4e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a585b938-2d6f-4013-9df8-1f0324858a65",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343d3b90-51c8-4981-9b14-aa1bd880e7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b334a71-5f49-4939-8323-7a22c0e3d966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48787898-3c52-4506-b15f-c3000f9d080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e36e9c9e-7d38-444f-8d8c-ca6436b588c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29d727e-6b29-4e5f-9637-c61af19ecdb6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7498b151-7f0b-4e95-ac22-e899d8ae94a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db3154d-19b5-431c-9ccd-b2d7a0834a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d48d9d-260e-4f92-94f6-1ab2c494501d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09f760b6-cfc9-4335-81d4-ba21be28ba35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfebaac-0fc1-4986-849c-c01fa7b81cb0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c040e336-1f2e-47a2-95d9-20c7bd040cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "085326bd-55fc-4395-848e-6add20caa756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34eead18-cc99-4454-be94-9704fa3e1a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7af73f1a-2459-48c3-9368-1f82c43ecbf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a6e7c4-1185-4dfd-a237-8dd494a1a630",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbf676b-10ab-4be4-acb7-a8a496d21d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60b5ca96-3f6c-4949-987d-c8f639b70118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29df41f-be5f-4c36-8368-f15c7d2f19e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a68dd9f2-a3fb-4bda-8520-9884efd74fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df67ab16-37a7-4c58-9405-e92bcd4d42de",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028b59d4-0844-4964-b77c-0e5cc52958f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c017949f-8732-434d-9bf9-5eef8e927fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb5fc72-7f9d-4fdb-bc14-7cbefcdf1d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c1642721-1608-4ca5-8207-3a3b0a5aa9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b6314e-3f62-4422-aef8-39a5c394661e",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c0a08-e4b6-4f96-a0de-d74f7da038b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b2bb1d7-179b-4b17-a878-db4e919b9f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f50b00-ddbd-4cbe-89f8-c747be1f57d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4602511-4f22-456d-b3a3-0bc94bd39bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4656bd-cfff-4323-801e-ee99a2b7b84f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd10eada-cb36-474c-9325-e385f38de13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82dabede-816f-4077-9225-6d0c1e3df81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c195e1d9-aea6-491f-9e0f-2c88aed056f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "21a5af14-120f-4a49-9fec-8252935ad05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623be582-24b2-42b3-831d-089113cc96e5",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf7ebd0-f3aa-4088-8e9f-7693ae4f6b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad796a37-3fcd-4322-b4f0-0a55bbeff3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d694fa-9481-43e3-aa40-0fee9fc51178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "777c5fad-325c-407c-bb19-7db5c11dcd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff295cdb-c24e-43ce-8576-7362cf38b292",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dc2dc9-21c6-43b2-9ea4-2e773efe350f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9864fb9-b733-45a2-a085-d3edc6ca8bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f7cb1c-7221-4940-b933-ca0fbebffd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b82a98c-b760-40ed-bc44-c4ab57d8ddd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290f6d46-ca21-4ec4-b1fc-2fa819e72bfc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ee6e4b-774a-4c55-9479-05ece9986640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24e36be-332f-4764-bd88-c0408ccdae9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8befd0a5-c048-4b34-98c0-0efc98fecafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "06d55047-0db7-4c09-a1fd-66311686268d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afab82f9-342c-402a-a331-81229677d2a6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22acec71-a01f-4225-8335-220d0b0e0b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e28c632-7607-4bb8-aa49-e7e107888afe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328bdf45-3af2-48ff-abcd-183b401b1b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9567f50d-6f32-4c71-b84e-b3d3eea4e1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4be544e-6052-4fa9-ac0a-09011d7be3c7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239892e6-843a-4811-90ff-4aa07c37b9e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b0954ae-8f74-4a57-a0e1-836247bab2d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ccc69d-911b-45ba-b70e-06a2d96d0899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "af7b18cb-6ce3-4129-a18f-424b3bd9182f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fa40aa-c0f9-4906-9e7f-e71149813c5a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74a0646-c0a7-47d4-8ce8-c0dd6a0f8bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f39dade-38d5-4e40-b263-d0de6d799d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98370abf-4df1-4016-8b00-99f7ae550282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "529b68f9-ec33-4e16-94cd-66d36527fb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90087a37-0b5b-4451-abad-3c6cc4b01c0f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e5f1ad-122d-4890-9acf-39797d4ef92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bab8b5-08cc-4c4d-bf4c-fcef4f1908dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3885e1c-a8f7-4f11-8db3-f1f81f20d3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc706755-07ab-4bed-a68e-7d4cd50b720f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c62015-effd-407d-833c-c3527e035269",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9d3741-6fdf-47fa-a4f7-95b089a68737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "980f30d6-7b3c-4397-954a-eb25f4f60408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f69ffb8-369d-48aa-85cd-7880e9f8285f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "beddd6c6-8f3d-499a-8c27-550c27c09b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66edec1-3aa8-4eb4-8df5-222fca8d8ecf",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389773fe-fb3b-4375-85da-00051690de2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "164daab0-6c9b-4f59-912b-768d89cd54b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f91460f9-180a-4990-b79a-4cd3996b8a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1312ae57-1f18-42de-948a-42f2ee587f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e10c133-7f7d-48f0-8fcc-b711b579aae0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536fe3e7-71b4-4076-a978-838d7b7d3411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae89b63-7f16-44f2-80e3-8b4713b3d109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcda5926-df5c-4661-96f6-94a69dba8780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db984417-4823-4fb6-8688-a2008eeb6629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ccbf57-92b4-48d4-9bd1-6ea2a51abb8c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2b510f-241d-40d9-818b-0c3be1aa08b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "253fec2e-780a-482b-b680-4f1b2f3a4ed6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93866367-d1e0-498d-aeac-7e334bf34698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "512b308d-38a7-476b-8eaa-9f9637250482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "967fb146-e3a2-4f1f-9398-de74b2c0c7dd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7abef1ca-fe7a-49eb-9334-ea5117d5f1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3d88f12-7060-4a5e-997d-ce6c21762825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf12ae75-92e7-4bb0-9a79-7667469c55c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f03a8d1-4a91-4418-aee0-9b6731c333a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecee082-f36c-4f0d-a6dd-f4303b4479b8",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb1fc52-ffe6-4f32-84d2-22470b25c687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cd17f50-7fa4-4880-87de-52e448608777"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d93baf-6e93-4223-9510-93c95b89d41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bff4d3f6-f6b6-4657-ae55-343ccfd2b6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23417a3-0db3-4b43-8dbc-518c7afff651",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269fc39f-a332-4062-bd52-069dce584f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9f1abb-db99-44a4-8934-7039d2fef0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c10a67c-d404-4ab3-ac90-695d4ebe2f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "10a30197-bb8d-4006-9420-2e3caca6a1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6274ddd4-ae42-46fe-aa70-a8eeab1e096a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31beb46b-3fe7-430e-be97-a44e31923b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a690c6ef-a87b-4258-b79f-644d75bdc289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9048e3f-8e77-4f2c-a1fb-3ad079cb16ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f936ecf8-c4d7-4dc9-b894-d5b5e9fa9af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a94be5-b830-4002-a4f4-fff9f5a11ec9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8e78c7-a7bd-4beb-ba82-6a8d14cde5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f71c33-0cc9-4434-986e-244da68a2fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a34d1b-c2a7-445e-8bd7-f180a51e7b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b49945ba-466e-40b1-9967-2f0354fd4cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68309454-1fca-4987-8a7e-0cf99fe82055",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b789b4-4fc3-456f-a26b-f07b731abef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704178ad-6add-4152-bc92-a5d43977ae69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df699745-fee7-47bf-a537-974e6c471432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e056a72-b3c5-4edb-84de-655ab333c5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad45294a-d34c-4f75-8a60-c9c47d0754fa",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d76152d-86ea-469d-9a70-40e299515294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ac528c-80b6-4a85-a3cc-f71a858d8b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2497888e-406f-4e47-9e5f-8d85d0b017cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af3bc8f2-4488-49d6-b0e3-6c754b46bcff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3b9092a-b6a4-432a-a5ba-61c1ebb59a4c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d17f72-002d-4d8e-92c9-3d513091422e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9453b39a-62e2-478b-a8ba-82321da62fb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3619d0-a4e0-4cce-9a1d-593e463e7156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "119b803d-8e10-47c1-a67b-dafcd825229a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf56883-461b-4ec3-8cc3-86f5d3312046",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4495097-b8ef-4bfc-a16b-9ab268dcecc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13c3ae41-2c65-4ae8-855b-5b06f595a36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0ed484-8b13-44e2-b1a0-f36867b3313d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b894d4-ccfb-44d5-8f0b-c7539c61275a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7192532-6730-48a5-a1d8-292363a96cac",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3d620d-f9ac-416e-9ee6-63ff61748c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4869d4-13b0-4eed-a6d2-282cd784cbd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1081dc-2cad-4133-a6cd-69d459f9d789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbd6c0c-519e-4feb-a7ee-851b615662b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc039e5-38f0-4e60-93d9-797b6f26d145",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69090c00-85ab-42ca-944d-60d9732541b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95c1490-07f9-4fee-874e-64e2ce16d9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37a7623-7c56-4845-89bc-6f0ed687bd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1276a3b4-1847-4ebb-9322-49bf68584522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ac048e-6178-4b74-8c47-d3b1b1438fef",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474d8007-3732-419d-a80e-21e22c9bf9fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b825fb37-f28a-43f5-b499-e6af554c22ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5be782c-6929-4650-900e-9ceb75eed0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a62eb3a-d8d6-41cc-ab46-b0517ac963f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e1c210-0fdf-44fa-9f30-c079032fc837",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3ee9ba-1c2e-49ef-8f92-e55d2cc2adcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f99c71e-9f48-49f6-96e3-b77db193bbe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeda3bf2-84d0-4052-b307-40966fa5eaa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef906d79-3714-4c82-bb0e-68702fa2020b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf96ea6-2393-4488-b4d8-d81a3b9862c5",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3196ea4-4742-491b-b42b-34ec3d37a416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c82efaa-5b28-4f96-b355-01d8e13b1c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f96b10f-fa21-47e7-b162-38c319103376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9bd5115-ac6c-4039-a47f-d69a21a04559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b103e208-c95f-4fed-9650-90c89496e952",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "141a9994-6661-4815-9e81-5e8ce698245a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95c0fc6-d0a9-4437-97a3-1709ce5271ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cd86f5-4fbc-4a10-b6b5-db699dd72b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e43e040e-d24b-4d03-87eb-2e03bc37b16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0153ec5-5150-474a-b43d-a17dd948c81a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e7f561-dd44-4fc0-9ced-686359a60b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8b21b6-8854-4b2f-b3a4-506c7bd160c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23759fa2-5663-4b44-8678-b0bc86f23b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7edd44-c212-468b-86aa-ef60ecc1de0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db547831-917f-4603-82ff-0b1717105fcf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28d1025-1c25-4d72-b31f-fd73338ce916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11971133-d5e9-4396-b19f-739ade54096f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db681c97-d868-42b1-ac20-b06168b644e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b9c016-b829-4517-8a72-8ba1b613fdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6936822a-7874-4b17-ac8f-3aa6521b21b6",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ec30540-946e-47cf-8315-6fc1d501556c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fa9528-1e55-4677-8fc3-df018796114b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d777b67-c4ab-410f-998a-fe1f5ceb5edd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db871b90-6991-41d8-8e6d-d189d0bd46ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fd4c7b-d2e7-45fc-a8d0-0e0085cee23b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85cdb2b-6189-448f-a849-5a30690abe1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc9f09b-5fb1-4e98-98ed-e83a9dfe9558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac8d4b4-8d6e-4ae6-99c2-d3477ae532c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42c53bba-ccd7-4498-b83d-37f514b7fb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477cad3f-dfe0-46d8-9bbf-05d0e2ffdf7b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a51dc9-9c80-48ff-b8cf-ae3156ab78e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9346e192-8c6a-4953-8e28-57c5e91e513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27da6a21-26bc-4923-b3b6-58a28bfa7490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c0ce16-a30e-4eac-a7d7-5f0a26da4cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f253feb-1c7d-4da8-9a0c-77ef70e4ed5b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b28dd6d-8528-4b5e-ae0a-28d7a595dc7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af0af20-3121-4a8d-be17-03f89fc8fcf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4073d0f-96d9-40c7-9b67-4a63eda9a633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f68a44-be5f-4064-acf5-89b39ae3aa1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3b219f-d091-4141-8dfb-bec8b34102da",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7738cbad-e31f-496d-9b59-b6fc8ac7f5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a77970f2-91a8-4c80-a972-70614dbad61a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfed147-5d5b-4a3b-bf91-386e0ec09da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "472a4059-34e3-4bc3-a898-0c0f47ec4e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1ec90d-1d77-457e-ac56-56284eaf073f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427ba82c-daba-4d23-be9a-317ccf380037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "146929fd-559f-48a8-a133-29ee41f85ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b22797-b6f0-4dda-ab05-ad28edad40fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "175ed0f5-9fdb-42a6-b950-ee4100326af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8639ef-2cd4-4d68-9c26-959cba225548",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2495b5ef-6696-4e0f-b827-7d5784ab623f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a66ffd-998b-47ed-8ab4-0be46588ecb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1362cbda-9906-4c27-802d-ede32592b377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "273067b7-2ca9-4c05-b57d-6948dc00b282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f631460-b15e-4dbe-b75b-74daccd60ac2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cf06ad-110a-4faa-b803-753aa2972d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89250f0e-c196-4969-b579-b6486d07dd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "526716b1-70fc-4914-8b0b-d66c8da92ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51fa2c5b-144e-4253-ae8f-e04faf3a5b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a243bf-60d1-41e4-a855-24e060a79ad5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06cf45cb-766d-415a-8232-0704642f37cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "229f8695-580c-4013-af16-1d8c61448b6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833f7bbc-1d88-4bf0-aee3-496046e94962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b399f2a-fe88-44c7-af27-81a9e0925044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b03383d-bb16-48f3-a45e-796f73601490",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7f27fa-9461-44db-9f97-b19060dafa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e94460-ca7b-41b4-9251-a2fb0c329d70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f83216-477c-4016-9fa3-6f0a48910ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d14adfa-3aae-4b98-8b2c-247e1c086e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655d37cc-8ff2-42c9-91cb-a3d603e05f44",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70513ab3-40c4-4aa8-84cf-3d104f9874ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a844f466-fd53-445a-88a3-a7418938b771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3d8688-e681-422f-87e6-44f60f1cac1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f06737-423c-438a-bf66-38894df901ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeda565a-2582-4ee0-a3e8-3537d8be1f98",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "708ce9c8-ba60-455b-b329-cf0b90d0b6b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8334f6-ad96-4c2c-a1b5-3d6bfc046004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef23ef41-9896-4b51-9a50-d68dae4baffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ad2af2f-040b-4c55-a329-dd9c6cba8adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da08cda-8090-4c66-9904-e7eff59e17c0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf772cc-697a-4758-97c3-93e390ceb545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f144d09a-9c69-4559-bca6-df4ab93b2b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0c8c51-74b2-46fd-be7c-566c895aedf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5445fe1a-724e-47d4-8b01-64986c50b34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0730f7c3-144a-40f1-921f-a4b66a7256ef",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b816d33-d951-40dc-a30c-acaabcc44c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addeb4be-c8ca-4b6f-8684-cd3bec16c51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e069e03-92f8-41f9-962a-f2487df4bb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "328ee5d4-2622-4ae1-86d9-a08ded3a5658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed9460c-dac1-406f-b02d-8a4578994785",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1d22f8-9f31-4be1-8c52-8f91dc46db09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f2b585-fcbf-4bf4-ba42-c712c54fd7ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae56fb8-cf2d-4878-805c-614598afd527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0963a86c-302d-4ac4-b00a-b875ebcdd9d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa3a86b-4b65-4de5-8e10-db6f3d793b2b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fdaae7-f917-4c3b-a704-aa87db33ac72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8286e2fe-1549-481f-8cf8-8e143af6b7d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4050143-f335-4b3e-8a38-285bec940f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a588b1a3-d078-4b91-82fa-8d349ae94eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929f00bf-a795-473e-b0cf-40b36b063ed5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2da5a3-0552-4c0c-9d98-71dba33a45b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e6acb7-57af-485f-b2d2-440fdaa5c9cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d1eae6-170d-4a92-b989-c0afe59fa6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e02873a8-183b-47f2-949f-6045cb3251ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5b540d-4fc4-4098-bf1f-882e120ef9f2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c21f5c-4fd5-46c0-801a-efc6a91c53da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb921e8b-b595-46da-af4a-17506699f9e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3a96a8-283f-4e97-8437-294568d80979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eba1143a-011f-441e-9a7c-d9421c26d374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f60e8c-b515-4c99-ad90-bd41cc5a975e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afd5993-4029-4063-80fd-48a80ed4a02d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4792a9a3-8afb-471c-8cc7-2d48f743b503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116320f2-841b-4f3c-a396-02404f392c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0bec194-d454-4703-b0b5-4aa5d642012a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860eb700-20ce-43cb-94b5-e47081c339b1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c77e31-0809-4315-bf0a-56e98b02abdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c303b2-3e52-4e9c-8b9d-5a50a785f9de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5e554f-bc60-42b0-811d-cf49d7e59dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17b4c420-3048-462c-9ef7-0c728e08c4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae59b04-ca93-4a79-bc25-80026bfa1662",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6540b9f5-a6f6-42c0-9ba6-952bbce6e6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c2e2ffd-ac56-4c4e-9593-be8916bc31f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c286c3-2f7d-48a4-acc4-f2a521db2e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1f33ac-8f23-4ab0-8742-22ffce7fdc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3be550-848b-485d-a847-e3ff4b20955f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3475da-562e-4b9d-a82c-ef5ed64ba8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5415dc3d-dd4c-4809-9436-73d4830f07f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d9b926-5712-40b5-8b78-91daad1584a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0fb8bb1-4bfe-4a29-b9ce-a5e5588e0a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb9d98d-4b30-4dd4-b2ee-de1011b6e5ed",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0168ed-68da-4c5a-9355-fd52a246e638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60eadfd1-ca58-4b8d-b53b-e7a6945f025c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60181557-36dd-4e63-8d9d-e3708279e71a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7838db10-03cb-4798-a501-8b3ff9f99674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f442eb6-eec9-4cb4-b92d-ba6e95e2234b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "395532fd-d408-48d8-ab19-69e004fd1d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1defc0b5-8a4e-48be-945f-a29b38aaa24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfb442f-5b80-4ffa-8be8-abdc2d2959b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "472b28aa-bbec-4765-9244-0dee486915f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdc469e-3a36-4448-827d-cb77869b246b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f08abd-d8e1-4abd-a465-526cac84a1a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa215ae-a2a2-4e36-88cf-97b338ad827e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20708bc-0553-42c5-a1a8-dc836e9fbb22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77e8669f-51d1-4e64-8992-97e5bd0d870b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14462488-0d32-424e-acef-d117e28666cb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba2d807-31e9-4e3f-bb30-d46e5532a805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "187baff0-b832-4b39-a62c-944f3d8f28c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6e1f80-c3f0-424c-913d-74ea6be639f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "31fbb56c-e8f0-4523-8033-3d110ef136bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b9205a0-68c5-4e54-a010-a498a2a3da42",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdc266b-16e0-4f11-ab31-8eff22b8b974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2b0cd9ff-2ff4-4871-b75d-b76270a99fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71c190d-452d-408f-bf7b-e68663e8490f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b029b9-f20f-471e-98fb-4fb15c25d815"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a008afb-4726-45d9-b50a-6191451aaea1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "326eb7b4-dc36-4879-9026-0f1712320f4d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1e962e-7bc6-4b04-9e11-e7cfc8831b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69247b2b-077f-4189-ab35-035ab8560a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7204d2d-7b71-4bc0-a964-486e195cdfac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f067eaf-6368-436a-a200-364b675084c3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63bb4b57-8014-4c07-a78d-971158601004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a820a30-06db-406f-8deb-48441d24c3fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91ba0d5e-9127-4cfd-bbef-f60afff0a22e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2780efd-74c3-4d24-9ca7-7a5a9eba409b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74fe568a-54ec-49ca-82cd-602ef075949e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "99aafd8d-4fbc-4427-af2c-546d4337479c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e4eaea2-b5b4-486e-a2e8-c2955e0e98c9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0fea8e5-d99e-4ddc-be59-fadf2da85e38"
                }
              }
            ]
          },
          {
            "id": "6be73e37-8fc2-4060-8029-090976b176c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "afbfd8d9-6510-4377-8a96-3a0aecd91bbb",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "94ce2aa5-306c-4f1f-b34c-4e7650617ff6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8abf73d-8186-4681-b862-a5548117d01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4e8ae06b-6881-4ac7-b6df-eef9a03a94cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc2ad9-090f-437e-b395-ac43dae0903a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37e984b7-7813-4309-8c8c-d59be6ae0b71"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95bb26e2-c1cc-44d8-8553-8c51fa959932",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bfdade6-a289-4261-bfae-9b5010f31e78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b30921a-82c5-45fb-b9fc-8ac8d7894380"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad54934b-5efa-4a85-b60a-c1c64adbcba2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ab9df30e-bb68-4a68-95f2-c0365e0b59f2"
                    }
                  }
                ]
              },
              {
                "id": "2e1a3ce3-c081-4915-a6ce-250ac88f3ab4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c49e4682-7d12-42f9-9803-9f264b73d402",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94e54401-7910-424c-9ff5-e76c5a588cf7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01c741f1-4aa3-4989-bb6d-c0bc7aa3004b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8716cdb2-a6f1-4b8f-9465-96f5c649e309"
                    }
                  }
                ]
              },
              {
                "id": "1a389915-cb77-4c84-82b9-a974b3776bcf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5c6bc6c-75f7-417b-b130-0a70d3244506",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12d2cfd5-2e68-4bd0-b4d7-e2503ebd714f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b79ce066-2ca7-4e09-a81f-06ee24ef4bee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "57a4f5d9-9396-4964-a9f6-44608212376b"
                    }
                  }
                ]
              },
              {
                "id": "4fdebe12-eb66-4493-b5b2-d419b73804c8",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3249566b-8b74-495a-b7d3-fa6e53b83a28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee531c3b-a25f-4903-9f63-a00d4a03f6c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d83c91c2-ae54-4b3c-b6fd-df9cbd7b8e46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "63d8436f-941d-4463-9755-d516a66f214f"
                    }
                  }
                ]
              },
              {
                "id": "a6a39877-7cbf-4484-b056-c5cd71f979d1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "076d204e-0165-4ade-bac2-e6aad043798e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15dfa077-8bc4-4a95-a003-b0041e72e5ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f21628ad-935d-4c6c-a026-7816e33f87b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "125f786a-3474-4235-996d-047e59818526"
                    }
                  }
                ]
              },
              {
                "id": "f773bbc5-c840-435b-b114-9a0c64cf11d9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c068396b-08e8-4caa-a67f-397a4c2e44df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b2c89f5-df2e-4f9d-a9fe-52727b4161b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a2a4bea0-d20f-4948-837f-555c7d00333c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a69da65-5d6d-45c4-9c51-17e92d7c9bd6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "615a00a2-5f2b-4bfa-904b-7215f6d8c884",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b81964ba-beac-4f61-9360-949e77bf9387"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "426dc21a-d166-4cef-aa47-dfeb7ff20935",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "067e7339-7e40-46a3-8c15-c8900b2d24f7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "08d68384-bbe0-44f3-8c76-9225086ea14d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "17e45194-cdf2-45a1-bc6e-979a6ddf8397"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38914599-745c-437d-a5c2-70768055d9c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b2c79bb7-b0b2-4e99-a9ca-e7d890fa0a6d"
            }
          }
        ]
      },
      {
        "id": "d3c76b5e-bb89-4a5f-8561-00238e8e4124",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bdb5077f-6725-4d80-9b7c-de172dee04c3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0517de90-9e52-470a-b43b-f31d0825f0d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "87f8525f-4ae2-43d3-a43a-b523f5a37a21",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74444610-63fc-4f92-b6ba-c764a92ea167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e220fff8-6c4d-47bf-af9a-3eea3fd8ef8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22f417f-de81-49c2-b338-0ec8acf00a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1fb2f5-66df-4185-9b2b-ba76e7332958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e37553-263e-4d61-a6a7-a27bc080dae0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a76a28b-ae12-4f2a-8a95-cd063b589b8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250e1331-0277-43ab-8535-74959c4592c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42123286-4ef5-4ca6-a6f7-709933e142e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b706d57d-2f25-4665-8e4f-1729e75839e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949bc472-a299-4054-9843-8623c405b8b1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09418e9c-1458-4b88-86fc-b89cfcd1f5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217ee4a1-40b2-4ce4-b3c8-e85af0966a56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57621536-0e52-4ff5-8996-0f7ab7fdec8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5648176-8846-4b30-ac05-f26b5cf9045f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e44c84-0549-43eb-a778-5bfbd5b7cd72",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32447816-a6b0-4bfa-a000-1399e0b97f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6ad828-69fd-447f-8fb6-57f1d1a7e3f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e301e6-791a-4316-be6b-ec644a73f83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ecc460-868c-428f-b99b-e0b8471cefc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b449a8-da2a-4f2c-8e77-55c37f07de2d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d84ecae-fc38-4572-a586-42a65022f441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13f5238-762c-4016-8f5a-1ba32d9bd71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fca092-19cd-42dd-80d5-b1b98c7b3a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "570bf87f-6a90-45b9-ab7d-40d2edeb382c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306e4850-f42b-433f-a813-3d8219d29c6b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69cd599e-7fcc-4fb3-8c15-658ebcf3cbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66639c92-738f-465e-b702-130166421abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd66a85-1685-4482-a804-515e9d114a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e97c7ccf-16ec-4fe7-af8e-e7ba500d70b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fb4b45-1c92-4ca9-a2eb-91d49b586bca",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2122ca-c0f0-4489-9632-e1dc231fe6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180ed021-10e0-4dca-a52d-15e98e6d2891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96e0124-11e1-4102-8042-d11abd4c56b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "497e639f-8063-4e4f-bcd2-cf51818b77e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb901af6-278c-4018-88c8-a9f4469c7541",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e002ee-4732-4eb4-83b5-6c1d451a779c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25d2cb2-fdd5-4a53-868b-28abe06bb308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf419afc-dd14-4665-92f7-616fe1efb29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4e24c9-99da-4ea2-a29f-ff3dfba4dea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8acfd2d-086c-4868-8f00-2d5ad24b2a76",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f70545-4086-4acd-88ee-94081a7e2caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0206d238-635e-42e5-af6a-4d252e4cc2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6bccfe-f587-4f91-921a-94f14d2ae37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1185b06f-cbe0-421f-950e-29f605ac49ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde1d784-dad2-4253-9d00-4bfc81b869aa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482ed7f6-1fc1-4c0e-8424-ef14d61aac26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eccba0fd-49e0-439b-a002-ac4e3da8f594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de552a62-2088-4b8b-ac4f-17fc758b3cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e87eb5fa-4dc1-4a1d-a04d-745962f3808b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461f0f06-5ff8-4f83-a69c-da52dbab4880",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce20812-264f-42a3-9b66-adaed2342fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e78e88-e750-4932-ab4a-b4580ec9ed79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a172c91-a668-4baf-a9c6-c95a94dfbd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a7fa2153-380f-4618-ba56-72da8f64b0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d5474cc-d5c8-4754-b441-4537658dee87",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277418bb-eed0-4474-a5ba-74adee303ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8c25f6-01a3-49d0-855c-fdfce2cc7851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4d6459-201d-46d2-ad48-41255d044d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9598979b-175c-43ef-bd40-6a66afb08db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb2e31e-26ea-497c-9e92-9a6e44459ed4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b69fe5-3964-454f-98c9-8cb85c4ca3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca82fb3d-5b5c-40bd-86d1-93cddac7c3f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808c4263-de43-417d-b7c8-dc7abff4cefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67ac3f89-91ae-4dde-b5f1-fe311e6931fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0126ff0-38a0-4245-89c7-ef70bc929cf3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c6599c6-9b05-409e-8615-5066764c6bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696c0d35-adb6-4109-b059-7935b75b5564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70627c7-2655-4c13-ba6f-29aab2b1f474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "4adb4128-5de8-4178-9556-a8a93e0f587f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1677b539-8f37-45c2-be8f-623db03adfb9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b052a64-33a3-4957-969a-d26b2c8c3baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0685ef42-ef73-4513-90a2-5e680bc69b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d72a5f-3699-4de8-b40b-ddaf849c9f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c95b2d-7b99-451f-91b9-df0b9b8fb6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d817eb2-4841-42bb-a796-d524a200ec40",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "206ef4d6-ce24-42eb-a3cf-452802534568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81be3917-fa86-4a01-83aa-db8e47233c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5c73b1-edb2-4af8-90ec-cf8ebf92601d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfe6af7a-5f0a-4a25-a9ff-f12587110694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81c64ac-7bfe-4d83-a3f6-01b08f45f95e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecbbd4f-07bf-4cb5-9500-2e740153f9bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b11ee9-d0ed-4d80-95d5-77d7df87c504"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "015f9b42-0c5c-4258-992c-816ee881c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "03b54f92-d07e-4c8d-8cb4-e5de4149df1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03250c22-50a7-425c-bde4-536ced2e19fc",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e822e2ce-2924-4174-9517-c1068d614a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c7f74a-2a63-40df-9435-b3035a193af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8db10ab-89fd-476f-b87d-0eee6a349b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "60f48ecd-c894-4ce5-9e78-eca1a47f5b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846a4b18-f104-43db-929f-9bab30e0521b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ad93678-35c3-4d8d-a129-fb88c20598a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca2e1bc-1134-4452-bb50-a5c5215b9baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e972f744-7de7-44bb-9ce0-a62df78c3d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a72651d-1351-4e7e-b932-816e965a6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc021ea5-946b-4dfc-9a12-5e2ea88d8fc3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173663fd-5e5d-458e-b8a5-9c2b4230e186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b9aaef-f833-485d-90d8-96110d7e84be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eef7551-ebd3-4c1f-8969-c534af5ed18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bad5c4-1aef-4b2b-8175-b33d2ce10534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7cf9b0-287d-47d0-90fc-6add22671211",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18299f0d-f06f-46bb-9920-f5515398a220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c4631e-7576-4f39-8fc6-af9b630a9961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cd0ed6-4b13-416d-9ebd-25d188bd2846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "64d5611c-eeec-41e3-9739-d6d64adb9c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0c1825-891b-4e1b-9e2d-6c62582a8a66",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26648ac8-f24a-43dc-b0fc-e00fa28327e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa8e4bf-e2aa-4e40-8932-91458e61d2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd8d0c92-a9e4-444f-967b-6c4cbae80775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "530ae9dd-d354-4ecc-8f5d-52b2e97883aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102d5972-579d-4780-ba12-0aa73a327cc7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a2c777-1b47-411a-9193-ca9ab51b8051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3e5c32a-955b-4f24-8080-e286be476392"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b853c2b-787e-4f37-ae41-a6bc7057223c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f058a3d2-4a96-411d-b6eb-d57c3b9a0154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbf953f4-8957-4e1f-b52b-5123cd4b5e42",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866d7cc4-4718-4fd6-8f73-6d79f71af8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7258d3d8-b25c-4e09-bcc0-981bbe18185c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22bdd44-fc63-4f54-be0a-620905d07c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d58421f3-1dee-4f77-99a8-0231a20053ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f576bcad-b568-406b-8dc0-0fd80769b1de",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8013856a-6051-4c2b-96b0-e573af05f4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d43963-0321-4f77-8f66-0b3417f9e2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52efdf18-4209-4c40-b50d-5f7acdf49b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d032f1e-092d-415f-8412-b2ec5da0e6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82606d16-7517-4cf8-9bba-4d2799df4ce5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c83ee3c-1755-4b68-9441-5f192599e270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e6a284-5bbd-4689-81e3-61b8987a9c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99c9a24-b19c-47ac-9534-c57405c49a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e04dde9-58db-4ef5-9aa2-95b1cc52dfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88786a80-2656-4e7d-8e8a-e8250868ec62",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a057bb-b189-4484-aa31-687c16a12022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81e945a-f572-499a-883d-dd325b4cdf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1032756-ad0f-4eb1-acb9-504d87e43721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c6832e0-1823-4276-8771-ef27644537df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa7489b-4486-4808-945f-27a1f3a01ed6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9281053c-c9b7-4a11-8666-65dd879c1326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701c8097-5d33-4ebc-8fd9-37365548ed6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98f1e49-939a-44aa-a6c4-9d076ecc9ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fb27317-b5d2-40b3-895f-5b0655cd16fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a3f8bf-bc7f-4d73-acdf-402a4b227945",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5df23f-6edc-4507-b59d-760626c0b3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273e33ef-a32f-404e-b2af-03e85f893e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93ef610-e15e-4cfc-93d1-34889863a3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e607a1-912a-4138-ba82-68c4f1b27829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5642f5c9-56ca-4e2c-9000-d3fcf99f55f1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a3fae2-87f9-4839-be2c-a23b8d9ca2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "236df16b-51d1-4425-8d1a-26fe2fa9bcc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f7be2c-3a38-4ffb-9bf4-ddea2d542652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78fd3302-14d4-43b5-a1f1-cb37a9e70637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98893617-9052-4989-b27e-b0b80959f24c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b857f6c6-3f0c-4cfc-8afb-be7b712ce52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11b64f90-3b80-472c-b6ef-1f31cd00d7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ea4497-1239-49b3-b8ef-abe54ba3f843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bfb54f99-d667-4688-9cc6-46d6b671ded8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2f696b-fb03-4790-811d-bc2e9156a23e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1922e87e-f15c-4ff9-95b2-e696009867db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8db8f47-567c-44d2-9b83-dc90156e20ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc31e595-7288-49ef-8014-f4c7489bbdeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a621e492-d8b3-4a0b-8a05-4bec172a3f43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a29c63a-ade0-4a4f-a2bb-5c7a15641ee8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9936db8d-e317-4296-b575-60f08b9b991f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea04609-8349-440e-9555-4b5c73225a3d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5098bfce-c8cb-4913-b890-f17980eda5a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e555766d-a960-48bf-b846-dc313fcad80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6bed057-77e9-40bd-9d65-8deadd9b6388"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10e85bc9-f873-4018-ae8a-53f721c7e734",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e7f978a-0751-46b2-b537-9bc7c6654fc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fcae7e7-444a-497f-b9e9-d88e8147c27d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c00b1c11-3aa1-4791-893c-e8009814e0f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "19a25318-b327-48ff-8ff9-8527526dcb11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b552afe6-3239-455a-b543-dfe15831054a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12efacb5-2a39-41a5-8a4d-c8c1902cfb2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cc218904-36d2-4542-9e5a-7fbe1ce68a84"
            }
          }
        ]
      },
      {
        "id": "69aca911-1c8b-405b-af75-ab8baf3c3015",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "be11e875-e31b-41b4-bda9-43adee96abf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ada83bf0-5605-42e2-88b4-05d73d075b53",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10e08c30-10af-4628-8169-5ada86606600",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd1cd62-8881-4538-a083-5aaa340a825a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74efb9a2-28e6-4b2f-8e06-965ccba4453c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974d5c0a-a24f-4fda-8e08-38b19e02b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4035a417-13d7-49fe-8860-cc6e5ce5b7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f8c62f-c7fb-43aa-bc3d-d5fe3afc3ce3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c350388-a65f-44a6-8540-2505f6ce13e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd5ba3da-268b-4516-b34d-770ce261b212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2727d62-c499-4630-a21d-3671f86eb19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21268158-b232-4e5d-9b6c-17562920c8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ef6480-97be-4afb-8e2c-6854d01a295b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d69815-f36a-43f0-ade2-38f0e4cc1562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f389d0d7-c504-4fbb-bbf2-7cb21cde9851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e85aa5b-db6d-4bd2-9e2b-3e05f631be26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6edcf8-7fc9-4fd7-b58e-c491702f84a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1540793f-012f-4016-98c1-46dc027adc9e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543c4f88-ca6e-40e7-a75f-c31976e8d121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb481af8-c10b-4127-bb69-262d0a41e316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bbaf23-8d5e-4e36-97c4-1b4c1dced08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13fdaec6-bf2d-40b6-9179-7048ded65f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2685ad83-3c0e-45f9-8f33-97540f0ff5b0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60981e5-2606-4055-9010-367b54f61487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af13e03e-b468-47ee-a369-04cb114bcd31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b798a39-9b42-4067-92b6-7d4b7c177a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9a4d01-64de-4802-b04c-0045101559c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69d70c6-71f4-4de3-b7a0-233c802d29d6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37f44fc-e75c-4d02-b397-ec6e99f2c9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a94894-75f1-4573-8e16-67cfc8db2c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7ed092-c19a-4bd5-8171-2a8ac23bd769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7e79a4-fa90-481a-bd62-c9ebfbd65164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274f2929-4f2a-4aac-a32d-a00d6215be39",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08a2dcd-ba34-4159-a2a9-e1a40fb86d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c51e415-45bc-4a9c-9b24-792c17b92380"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efc8cb6-0706-42dc-b70b-424e147490e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2fd40ce1-e1ed-4b70-991b-e8bed88b8709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c186c83f-e65e-4b82-9c02-e039c72ecc22",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b8df19-a44d-4348-9a99-629378a00b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6605b64b-8ce4-4b0c-8f98-73011e2794e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114b4597-f2c7-4731-87e1-357c46426d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d6c5f5-b9ad-4088-b39e-945b1c58e377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e153caf-9508-4858-be0a-0c508ad06a94",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8138b67-f1a1-498f-a9d3-0803e0396093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4b91fde-f731-438c-b097-7f51883cb11f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b3e761-5b22-426b-ba7a-3a1cbf30b7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97f18e34-ac8b-45aa-a206-f61a3ea731e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ca5616-7dc8-4977-a548-324f61530300",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c181b0-1414-4ddb-9fd4-633afb730625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decaa1b1-fb9f-48d5-930c-84fc02c73aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fd0a69-8ea0-4fef-b7a0-65786f6dbe7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2316bca7-d1b1-4e00-a560-3ff3de4a6db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e7c0dd-eca0-4486-a133-ddfdce3f694d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf09cb9-97a6-42fb-b9af-5484a73dbd3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f34258-d370-4bc0-9e8e-c284e02f718c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0595801e-8a14-49dd-b10b-d0710ec9b93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "50d0a0a6-26dd-4d67-976c-6abe0ae64e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2f3054-ea83-48c5-919f-62786cc41835",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f52ae1f-c76c-4a3b-8bb0-96cf4efd8031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17ba97df-051a-4d32-bbd8-d746b20336b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3eb215-79ee-490e-ba74-6cd648a42124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42ec6466-e190-4577-97dd-ceb2ff5730bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0128180-81c8-4697-9e8e-ec48c27e67ed",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43f4399-0a3a-4539-af9d-cc434f4875e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7eae17e-d3f7-4e4c-a8cb-f935d85506ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ef5b84-0a13-4f8d-adad-02713a35c5f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38818332-20b9-4e94-8b5f-5fb49f1510a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1bad18-757e-43d2-99aa-bdbdf4630f74",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a13902-b7a2-4c94-988a-d14f2ac378ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa8913d-cac8-4f01-ab6e-3c36a2a16a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5940f99b-7b38-40f5-b815-54312856c94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "26244026-41dc-4df3-aa81-edf4894ce173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1a2a2b-144f-49de-99f6-7026d77a6109",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c12a9512-3526-4bd3-bf1d-dd7731f1ce00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab672e5a-e590-4c6e-8ba0-653c3ba37fee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdba3333-6078-48c9-b2e0-07e48c15a1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3a37f1-92ce-45ab-bc7f-00562b5c03c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6050a8cd-08bc-4ded-950c-b640f4e35457",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "139814bd-7077-4e0a-bf11-bcc987bebe1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0579f585-8087-41f1-86bc-7ff49c464326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd799086-b46e-4b0b-9895-8165bf95c27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e2b9aa9-4d25-4103-a670-50a0474e5773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733e84bd-c884-4f6a-9a4d-fb652795582f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f86d15-b9f5-4be0-b34f-e4c741e28b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7437ec5f-0af8-4317-bb02-a73c9ddb14e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3a7f13-7600-43c4-900c-163b1a724e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24dd679-28e9-457d-bab6-86b47d80e980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2cf51c-82de-42af-8b90-e2b72526223f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7021fe0a-8e83-4bc1-b9a1-1769bfd3fe54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b37c254-e099-46b0-b53f-569e0795885e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394962e4-3ccf-4883-98bd-27ad36fd956e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8bca52d-d4eb-4346-b357-5e718b9615db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4a2c44-13fe-4258-aaae-7235c3582a4a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374e23fe-e072-4b49-98f3-5bf6c11f7ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f48b40f-f8ae-45af-a830-f56b74c90817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84b3fbb-8d04-43e4-acd7-87d1d4954ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38e3ef5c-9eaf-4e9c-82ba-8c1f4e976204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42881d47-cf10-467c-ba70-2e5afbb21be6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b54f2b-8619-4eb9-b8ac-007095aa460d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f088c9fb-5182-4216-9f38-4d2a4ecf7d69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc378ca2-0e93-4541-a67b-d1f16dbb848a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdad1a41-c94e-4901-a9fa-a13793016aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887bb9d3-2721-4c93-8b3e-cd2d4f4a91f5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01feeb1-b42e-4ccc-a9da-20308a9a0efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ed1e84-46a5-4865-8516-2e1916480e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d7d831-bd51-46e4-89bc-3708eb5d101b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97a2916a-81eb-41e4-b996-14fc8b3bbf7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae2d1e8-0e93-4967-812a-3aea2d719287",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28737a37-7cf2-4f55-b327-36d3e0042acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87bf47f-1315-46cf-ac2d-5aecc26dd1f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0845831-ab5b-4970-a837-a752eb5ee708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08a7d6b8-dcab-474d-bbf9-a7d52a32b05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9028520-4bd3-44d8-adab-9d5d3704ba02",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcd9dc6-daa4-4011-975e-e2d6eeb8b241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d54d821-7582-4fad-9630-11b864cc6b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5293ba1e-e78d-4dc4-8015-676521e9a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22de1432-869b-4d7a-8934-94d575166cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd8cde9-b455-4019-b011-be851ff27031",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2480dbd4-a3cc-495a-ac5e-da260ed11121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3cfc24-8415-4d9d-8f2d-d256e6db9322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2aad462-b160-4e0c-9bda-a6e9002661cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2524e03c-8c7a-400d-8942-86bc1d7f8de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bcb710-c889-4462-b565-efc9ffa74e78",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea7fd5d-b27c-4eb2-8c6e-086425c2faba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12e528d-cd08-428d-9b17-80ec41a330c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb801073-003a-4a5f-98ca-7f8753dd5a86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "044d8439-7e55-40a2-8be7-89d075dd87f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e3d868-3e4b-4eb5-bbd6-23a166746dac",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf250533-b727-4184-abe7-6ec8181d98f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1095296-29c8-4eab-8f64-413cdc76cb88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbafd9b-bc9e-4892-a64b-2453b51160df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ccb9b5a-4313-4310-9318-e81a333951cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b1a2c8-a0fd-4edf-8051-64f0791bf0d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c73dc7-78f1-426d-84f2-074579982ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580b8efe-8da8-416b-8b55-ea0417130c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2bda1a6-7c3f-4df1-80d2-498931722b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57b6692c-6601-4735-8c5a-a1d5d67ac75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a94ce4b-a9f8-491e-baeb-a636c64ac3da",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6225edc2-cca3-49b4-9abe-10168579a679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c9eec1-aa95-497c-853a-f1878afd427a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a262526-7a04-46b9-bee5-b33b2d2050f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7ff693-d9bb-46c3-9fef-e9c3e03ae6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad239f4-a7f3-47ac-906f-a13c6471f26d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4045ae4b-a4f9-41d5-8f05-947176abb871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a842a65d-7be7-4d9c-822e-96667bf582c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1963a0ee-a0d3-44dc-9258-dbec92b50638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e10237bc-ecac-4d6b-9389-377f00993b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b421f2-f9e6-4289-b10d-500006bbb02d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7864e29-61d8-4abe-a144-0b9b739125c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cd7d8be-7e76-4bbe-948e-b748d3ca1db6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786ce230-dca6-48ba-9944-b00e65667d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c84b30ef-8a25-4477-8ef6-eaef5d90e9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d29b4f-acbc-474c-938a-bd13a967a1ac",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e13d47-56e9-4f3c-998f-194a13c83101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3644af61-623b-4d86-a02f-dfc5a21926b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad23629-0b26-4d61-ac91-6620640fc739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4142d738-fb52-44b3-999b-859091cf216c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b029b4-7c9a-46e9-87fc-842d09d15c99",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79984efe-123c-4de9-95e1-07faf4c42f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb6910f-e2ef-40b2-a0cd-37fa7667c532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94930328-3818-429e-986d-c7340b706c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde93b1b-c0b9-4f05-8dc4-925e3fc35b20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a39a517-b5aa-4be6-8037-580cd9a2c8f1",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a057f87-77b0-4089-9726-5ab118be3d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8488c88a-6472-4a66-9d29-3ec00a09384a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0025592d-80bc-42fb-8582-f77ae08ed094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "623d6a23-8f4e-4ad1-b21f-bd09aa83377d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bede4481-689a-4ef6-bf5b-e8c128aec168",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd51d932-6046-4976-a74c-6d9c08a11087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbccdf7-2973-48e8-a10d-3ddaeb148cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac73772-2776-420d-92d3-5f9d26fc7eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c148af9-9ece-443b-911c-1fb8c983aa95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a478580d-46c3-43e3-b8d8-c606d733da25",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac527b8c-be94-4c5b-a277-244ed8d6b2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded6f7ed-d996-45e6-a254-71dc97ed213a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fc4e08-84b7-4c17-9113-abebc6fe926d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db39806-66b2-444d-810e-0462088ad4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0a60bd-bb5f-4593-885a-a5b3e0d26932",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b098b4-1176-4c0e-aa3d-48f2af0234b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a749c3c-1307-4979-9921-1d949468be96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7b4573-3e01-4289-955a-f7996d15e635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2188068-5ba1-463b-a355-79c01ee67d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac32316-aaa0-4d21-83e6-60b9daae811b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e248f9c-c1e8-4fcc-84ac-cb698ac367ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0626e151-9d4e-49b5-895b-66d49a3eebe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7ef673-7af4-419e-9e7a-4384ed6341da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c99e1fe-be8f-4642-9f40-d8fa261ad926"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aee92f22-4624-4eef-b837-edd0653ba688",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f364eb85-e118-4ed4-991d-ede00deb117a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f0ab44-7854-435a-b2c5-bb583d63bfea",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "838c105b-cef3-4e45-85ab-f4bdca08aa7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e200e4a1-540a-46f3-9a49-426a6c705fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87354d59-3b1f-40e6-b89d-4e91bd947a4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c41b2e16-9e2e-49af-b785-57bf670200f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a0e4905-e022-4ef2-abb7-b22f71df2d30"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6a003e6-6b07-4c09-a2e4-99816514545b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a38e7c25-5994-4280-8267-4ff0a436bd2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85dd43b5-61ae-4840-9d03-ac7cd39c7e40",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "27beebd1-868d-48d4-8a97-ceb7b21f8c7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac89c263-1ab9-439d-9715-ec1029630933",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "117c574e-0c8b-48c0-8058-cbf59720ce20"
            }
          }
        ]
      },
      {
        "id": "6764be82-501d-416a-a928-98b79360c7fd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4777e356-2cef-48d1-bd2b-f712a402595d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77ab883a-a355-48f5-8ae5-85952da4c9e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6097543a-c72a-4502-a085-7bd4e38082ef",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33bf8bd-d848-4172-b99d-c01bedd499e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab60aca-9ffe-48e3-8063-f750b76a73c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3541aca-3096-4566-a115-3bedcfdd728d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8703607-d402-4d76-ba1b-608ae510f6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417cd960-c321-45e7-a927-2e73e630d549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c18bd19-7576-4fc6-ae51-8b85fef33bcc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe0ac66-e332-4f31-acb3-9a54355883bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c556c5f8-1db5-4055-8de3-6589b21eaf65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263c82eb-64ef-4205-a69d-c67e9530d5fc",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb900630-1c20-48f8-994a-32bdc6baad80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a977027a-7bee-481a-8131-c7d23435dc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5f19b9-5b6a-467e-b2e0-b9bb9f3dea8c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152b3ab3-af2a-459f-9fa5-8cbb0cc4523e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e013bcb7-3981-4f2a-88f3-032ac852ecb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6094de9f-cd1b-48bf-8f1e-b18aba735ef2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ad8db5-eccd-4418-8a24-ceac163758c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03212c23-7063-41fd-87a7-c1ab7c9a7515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5184642-aeda-4688-b788-423657d5e5f6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719b0f22-3570-4b65-9e34-b9a6f362f37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4118d3-934e-497e-9c72-708900fb32bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24568ca7-50f6-473f-afba-279fc0089af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5483542-90ef-4dce-b05b-063fa5752856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d74969df-f915-4ad8-aca1-53b371d70567",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113ead7d-c9c3-4fdd-8921-1ad90265d499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4914c8bc-02f2-4bfd-98b8-8346fcd0f36d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da10ed7f-1551-4fa4-8ce2-89cf0b8d774a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f4f926-f449-46fe-9998-9cf5b45a7857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc47387-89e8-431d-b35a-0842f99013fa",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79149ba4-6c15-411c-b7f1-4fa986c26102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba876c9-e977-4938-bb6c-ec06b545fb25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ba4bef-0d40-490b-8900-33b3a05aeee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18f9b84-a633-4a60-ae5c-813670b93525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fdfb74-74a8-485c-90aa-d59fadc7bacd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda013cc-e2f1-44b3-b9a1-f95cef794c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cedf00-79be-4d5e-ab23-0d288eea20c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfb348d-c886-4cc6-a429-69d178cb6f35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa6e119-c113-4924-a4ed-337f32f5245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c348cf90-eb0b-43d8-b1b4-24ea0fb17a68",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f7f35a-77c4-40fc-afe8-06cd41c88bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78aac33c-d452-4084-8dfa-2e3679f61b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dbf7992-1d3e-4593-9445-c1f357eaf007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0df13af-dfd9-427f-beba-53912984b243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c5fbcc-4681-4893-8482-89aa4d30ea1a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9687305e-272f-4b35-afde-feda1a9e46b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de16afcc-1f84-442d-af02-5063ee141920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeb0679-7bd4-49e5-803a-db59b3dcca67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0db01c1-541b-43f1-92c7-d1872bafb6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2577caa-b91a-48bd-baf7-101b3a1ef958",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1865907f-3a60-416e-b270-c4f81094696d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7af77898-2af7-4c86-94fe-3aef361222c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c492ef4-af07-4453-a936-abc383d1d1be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9330a397-b9e5-4178-9237-a461e5a285d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cefcd8a-cceb-4f56-80b4-f03563b60035",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1a67d7-c6b5-4c27-937a-6bb998de151b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0b7aeb8-acc4-4f87-ba52-acd5b8a3d3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1d0808-ebee-490d-bbdc-5bb782f3c4b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f56082a-0cf3-4a5e-8359-bc720257a77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9285c65-4e37-49ac-94cb-c4216f8941ab",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0350353c-66ac-4bdd-a53d-4c2f8380f8ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "931c6f06-49de-47d7-992a-8fdc96a1c798"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d512fc7-6be2-4648-a906-24918da75a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab8a28c-f0c7-493f-a86f-797d6261b861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7be2bf1-9962-484a-9e88-31172f8d3ae6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9d88e0-7a60-4288-88b0-87d641ddc82e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab1214a1-2bd1-4169-bb16-d6c5bf466bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f9fc71-03df-467b-9046-b1a0c966cc0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9fbb085-71a6-4e7a-a044-1bc4157874bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3117f87b-8642-470e-afdb-9e18e9560898",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7068a521-db2f-4b31-9a06-b256dee16165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbeb1b1d-1733-4e28-9f3c-0cb5efce4ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4faac498-1339-438f-8e13-f07952016896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f39bb2-5055-4c67-80d4-bcba847900b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff0e4f1e-9d12-481e-b96b-ab5a809768a5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c60ca0-cd09-4791-a741-c0de61011e49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9f1c61-8c9d-4f3a-9cdf-fc8bcf5edb56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52ee508-575f-4e96-bbea-803f32f91476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478e45ae-4054-447a-abd1-ee06012af32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d5cbb7-408b-49a4-81e1-f9838b5a9e66",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dda7f3c8-259b-4695-8e47-e35f55e00406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "220899cb-c975-4982-8624-16d7615a7a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63911858-bead-4e96-810e-33ea189d4554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ddacd8-03c1-4ffa-9fcf-5e2dc2143cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e56e9a-a731-4b8e-b22a-49dc145f5609",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dfcb1d-0a5b-40da-a00a-aa4cbf676654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62446c39-218f-46e1-9469-58187b257543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce91a1-1f8a-40f6-b00c-9e65348615d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213c3f7e-39f9-44fe-9eee-063635836701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001d1f08-905c-4a25-883d-7bc6ceecee0c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1ab342-0ab6-4973-9a98-8b5e310ec810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d5c74b-c56a-487e-812a-f9544dfc9301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7870e78c-91ba-444f-ab23-ac76072b50be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e08ff5-bbea-4dba-a9ee-0535187f967b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c14286-9a6e-4073-b99f-efd0760720c0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cf81fb-f9b1-425a-a004-00216a7b8f7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ad991a-b04b-4878-8c01-68caa0b595d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c1e8d0-c333-4fa0-ae90-72c5d219002b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b56f265-976a-4967-bb28-a7f55a7f99d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a471823-ff32-460a-bf27-1ca0174869af",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c1ee68-ecfd-4cf4-951e-bae2a191069e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3033ca17-5681-41d6-bbe3-ff8465aff4b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28aed3b9-b366-4c93-92bd-cf901b3e809a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d23635d-fec2-4155-a58e-bc7ea142d4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f928a0-b7c5-418c-91a3-2bd2445ae10f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c50e0a-ac6f-49d2-b7ba-8a1e053134e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e69a1034-1ac4-4114-b0e1-fe962c027f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ec74ce-2fb6-4c0b-ba8b-6b8911680d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7474a2b-df28-4ff9-9a43-756b70c741aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4223cf02-5e76-4dfa-be88-59a7d26ec6ed",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944739b9-d40a-43cd-97e7-6fd35e59c96d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38747201-6b34-42c6-8b5a-d3f9a48fb330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c705bf4-60d5-4497-bef1-a32af6f2a8a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a5d1b2-ef4c-44aa-b31b-04e4dd7424fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aac09498-9a0c-4114-b0ee-231ec40f163e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5259833-ad59-47ed-b2f7-d9912005c1ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a105d5f-140b-45ad-912b-a3ebd3c3d3aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "828db917-d166-4138-b345-2698ee5f1280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5ada7b-3769-4438-a579-b84bf7894557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595a0b74-fb7d-4eb4-8ec6-c00aee57c13a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00397673-169c-4ed2-878f-57da3093d033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce33d16-586a-4d17-969b-10c54bd015e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "413d94b9-4a17-42b6-937b-097e2a7f2003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feefd8c6-fc72-4006-8d4a-081681edcebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dd677f-37ea-4142-a4db-2b307d0e20fd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dbdb23-9c61-4000-80f2-f6c61e43da6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dda22a9-d79b-4c97-9d66-cf6bb30e80da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d45901-8bb9-49ef-b027-7c4207aded42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12bece32-abbe-4982-8388-2f67f68dc614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ede1ed-9134-4c1d-81c8-57fd6b1f63fe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02847971-489c-41a1-a32b-f44489f1c0c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1df1981-045b-43a4-b7af-b7ac40b67564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2f86dc-75eb-4f0b-992b-d5bffe63a80f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3d556a-d69d-41ed-aa2b-6c8e317d49b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9080135b-6bc0-4e49-b386-be2fe3be228f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4872a5-d32c-4f7b-b8bf-331a63299b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fd9d711-9ee3-4c9b-9628-8d80b6bd550f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0e1e16-b860-4ebe-ac54-bab630d7b954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b6a826-8432-4dce-84f2-19be0ae46b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba0e116-4483-4edd-a84d-6d21f89f02fa",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0f4182-5f5f-4588-9878-85f1cf315d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3cf8a9b-c7b2-4abc-adb6-bb53719d17d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e290d0c-7de8-4997-b07c-3dea8861a901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c3323e4-8ba6-499c-9694-00c40499a1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3789c3ae-689a-47d0-a1a8-0108739efb16",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cd92ed-432e-4662-94f7-bbfeffd0cd90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3241af40-defa-48f9-8492-eb3199407f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d64adc8-41d0-4d54-83bd-518a2415d451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd516b62-9004-4d7c-8723-97878d4cd531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9949e2-ba26-411a-b2fc-0ba70019a90f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b767cb60-1f0a-4108-a9cc-081d47ab5ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e11ba0e-0fb5-42b0-8a51-c8fd4d38d167"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a373f83f-9f69-47f7-b0af-4ac3db7e36dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9869776b-7edc-49a5-a03d-c42b861646a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55e47076-f1b9-4394-8d18-b4f73f5de560",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5312c2ac-9cc6-41e8-9b12-0e1655e9cee5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91290488-bcd8-45e6-838b-192138a62418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c82345-39a6-4e5d-9ee5-d4fb0c96c756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303840ce-18e9-4b96-af5e-e612f3cc422e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f29a703-3d8a-4eb0-b007-8f4f0ab75f0a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f5199a-67a4-4e64-861a-14a935a6ccd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590ff1a5-5de8-4e60-8f85-beb4846ef37c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca06c247-0087-45cf-80f7-ced51f6d0559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e29e9de-f70e-47fc-aa2b-4b461b1b54d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20788ada-9b3e-4fa9-9fa8-c0c5460af54b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6459d08f-5491-4f13-883d-d655d680dfe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e14d20-5d56-4abe-a865-93fa439a6da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a8c1db-1162-40a6-a14b-2e6e054d07da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d9ebd2-6df5-473c-81e9-3b3944784b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b5f1b2-0e9c-4230-a0a1-c3a01c8ad7aa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b059d6a-5a13-4c5a-86c8-29c1d091b3d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3beae38b-2c5f-4f0a-9d00-74a0b77ee4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b084f09-42ed-4231-bada-08ef8c2faa7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dab95bf-c5ff-49bf-8226-62b871ef9e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92600533-4843-4623-a87b-f539335a85ca",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7ca6db-f564-4c6d-9cbf-552d683a11e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef40a3b8-74d0-4229-9337-4378b0d6e9d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bcd97d-0c76-4319-8e13-b95ef655a7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1cd39d8-b3c0-40dc-9456-81cd603ff8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8960097-030f-41b8-8f5a-f268b7379c9a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f361911-f68a-45d1-887a-d7d535fd9d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b07c87-b3d9-48c6-af69-53d641ac6e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b6a027-9bda-437a-90ab-4bf882b07038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8ec8a1-8c24-41e1-9c90-e381c2a7830d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225a7c74-ecd6-4568-ae3e-2bf499eb50a8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d775754-352c-4451-8ec6-64ed9403e228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e1f9b3-2279-4bdd-80fd-c4a9b809a9ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "272ec8cf-5270-417d-8f0c-1ba35acd2caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d541e85d-aab5-44e8-94ef-dcd605c8e019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdd7cdf-fa25-4052-986b-d507ff750ca1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d40e0c-cfc6-41d1-ba79-73dacedbb119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227578be-ed56-497d-934e-132d831ab82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598a6d4d-ab88-4d18-9626-ffdeb6807190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90aa2d0d-8eed-4f74-84d3-c9061be58c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f22a023-94db-4409-ae80-941b07bb76d0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72e0b87-bec1-429d-acb9-2e81cabaa96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc1e1e9-411a-45a3-bd50-1e2ae6216f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202cd52e-9e6f-4c34-8e80-fc8b3dc405a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655a9a37-2dfa-4798-b5ec-a96a5d38d0c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4124ddb3-9fe8-4b77-8c0e-1a2ddd4d76a6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca8ce05-296b-4df7-a4f4-aa8bd065eba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36eb703-0e20-4cff-9114-5c5df95f8892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4218543-88d3-4900-9ca4-135f66fda12c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c54276e-66ed-40b2-833f-2212348c0bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83fc709-2ac1-4c7d-8124-95afea8bc3a6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e2db8f-ca27-4f3a-ae70-093c8d6615d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca918da-325f-493c-a4e1-6489692535c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc52213-8629-461b-8f35-62124170e479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8b7452-b8af-4b00-8368-4cd716c8c191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01118fe1-1d4c-43a5-982d-e61938d73673",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38663c63-27f0-4d2c-acbc-4f72ad6b8fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6dd31f-7d4a-451a-aec3-b82fbfca1c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73420e7c-d197-4757-aff2-df59021b4d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a991d94-1f14-4943-a72b-8d3e0ca84f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7bb001-3361-46f6-b9bf-fdf64e959470",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f084b0-243d-4d6e-988c-5d3a3dbcfcfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8970e78-c35e-4546-9463-5c9115c526f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9474397-a55a-432c-8a8e-2af65d121294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7aecd9a-1c9e-4c4c-bf34-f6c977322429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b13efa6-b88f-473a-bf54-356a06c65d50",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c32dc60-7e60-40b7-890a-6431742615df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d9506c3-3a1c-4a32-a267-1218f60f1fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d83b87-58d1-472e-9dac-d1859fc776d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68a630f-12a8-4895-a330-c03a0e2d2efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579a7d49-4c42-4775-8e40-0b98a96c871a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b547f6-284f-4b0a-bc22-2e00debc7589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64520b59-de8e-432f-92e5-c859daecb76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "509aa224-4e9d-4c93-9b5e-b1fc21fe16a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7fe779-4e70-4949-ad36-28edab205261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f725aca-8605-4107-8712-8ed995f8d850",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8afe61f-1508-4675-a81c-15169da86b44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a479d022-58c9-45df-ab90-82dd0c492772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b411d2-87aa-497f-9ee4-fae2059dc93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4376ce8a-4102-4f58-b736-3c376e52602d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c4ce9f-bb06-4d6d-af33-df113fbda008",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193d15d8-74e3-4f1d-a306-fb2d1469743e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b697b217-0ce4-4303-a6a2-f694d2645a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d80d8c-9913-4bfa-b094-b20ac62e4d66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf0d923-43f5-4c9a-8dc2-d85dcfc1b3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da8e6ca-2357-40f0-a98e-74f373c15590",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee62a0b1-f370-4ec1-ab48-d13a34d8fc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc605be-fdef-4932-9a90-f8360ab02917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "523970ec-af4f-468b-b71e-96116a83a6e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e0a023-5568-4e4e-a0a1-f2a790713145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eb2b1c-4ad1-4016-88b7-1ddeefe1f415",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e401788-9c09-4910-9009-c12b612e1e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ec3db3-61d7-41de-87a4-6d21a322631d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ab7f47-5b49-4463-915c-b3887077323f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a57736d6-a620-436f-878d-9afdadf0d2b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29bf6e0a-17a9-4893-9ab6-7b61226f033f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ce3ff7-d115-47ff-b06a-ad6323a3765f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7954c3c-59af-4464-ae2b-f8f6a724e973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddbcd9d9-1156-4e65-a3a7-9347d21c0f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5bbacf-dd68-4edc-b7c7-7c83e2f37399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3d491a-bbc8-4e9d-8f20-6b74e0abe8f7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5433204d-adae-4dc5-8bf8-eba4ad482749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625c4b89-410a-4b4b-921e-7f5ea0126f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a9909f-5f6a-41b4-811e-d27f2eed9d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c84efc2-eac2-4a5d-8093-245945cd4d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3e1947-afdd-4f6e-b6fb-0cb7e1b008d9",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5eec109-34b5-48dc-b6f6-aec25acedde5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f0da45-0a87-45b7-9054-c8962488fb25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33695135-4aba-4439-b22d-528d8a2ecbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbf78686-d49f-4450-a445-fa49495dd612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e80018-7610-438a-bcf6-7b48032b9c8f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629d9a5b-2467-4fa1-ad21-eec3c909e499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c773c7a-ed0b-4a84-9803-b31464befc82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbb086b-c7d9-41c4-8b93-112e53c7d858",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f12073d-f270-451c-b4b6-2692b1ffafdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c81a56-ad55-40e7-ac7b-503c4cb16d38",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9db0944-59fa-409f-81e8-877a78aab2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74fd3300-eeab-4942-ae39-4be09d90c882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89f18ba-42dc-4e8d-adcd-ba1e2098a394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c7f23f-8c44-4342-92fa-a36fc1856091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6841d153-934e-4e4e-ae4f-220ac14d88f2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25329222-cfd1-4117-920f-253f7058e28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0593886-6196-4c61-a027-2c8ef092caea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1f101c-e6b1-46b3-8304-ac181193aa26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb6911e-e95d-499b-864d-5860fe23a7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8598a831-329b-444d-a368-514f8d4f4be5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b327818-d441-41a8-a075-059fb2de67cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0031d976-da07-4b9f-b54c-9e1c07b17682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997233a9-717c-4766-a351-d047c32ad632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d8c75d-5f52-4314-b08c-37f39ede8804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef820d2-21dc-4568-8b74-0da37c27d34c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7aaa4b-6da3-4555-9031-ce7598122d04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d820fbdb-492a-4da1-91b8-f217f3ff2e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ca2af2-49cb-4892-aff2-ceb0d1501d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3512ccb7-b94f-4622-93bd-64c09cbab38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4727b6-ef63-4869-9be4-b7d1b934cb6e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befd6739-eaad-45a1-ad71-62e47221f64a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7f8fe5-2061-4223-ac1b-308c49995c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2363c6e-4d13-49f7-88b0-112728b91a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e09316-03a7-4062-8152-828c0544856c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e834cf55-9108-4944-87e2-406460e2b5ff",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bd241a-c96b-44f6-83ab-34a5b6815bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550d103d-9bec-4086-8fc1-6880cd872adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "463240ef-461a-401e-b990-8e1d9220b84b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984482b1-f389-4f4d-88d3-ef89c3822d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8323354-28b5-4d14-bec3-d3446c09bdbc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046c28ea-bd2f-4c92-b255-00a95d4ce7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526fae06-92e1-4021-a46f-bfc9c5ffc753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2520efc1-4c4b-4899-b16a-109dde134f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526d5ee1-bc22-47eb-aeca-dad26777558b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b78998e-a346-478d-b7b0-43bf37d9c4ed",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8962084-0b63-4183-a126-12d9c1849454",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c23f92-3a3c-43c1-a27f-ef077901ef28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68b9e0f-4789-4a32-a7d1-f9209cb64f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3db7dc4-a183-4c0c-b519-42a592bb8dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c30fd97-12be-412d-8770-271d415068d1",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b2fa85-d6c1-4ed2-b82b-676b0bd47261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "756b0339-9cdf-40c1-9e88-1b091eb8b060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64448ed-89bf-4322-8ef5-1a019cff083e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "512f9700-a679-4060-ac1f-e19344a7c019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b251f3a-e39e-42c3-97a5-467475a09fde",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7580989a-4cb1-4cea-9a11-2408b555f051",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3773ac6-35c9-4882-bc5c-2ec4bcf74baa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc4a4ea-b676-4b56-9ca4-f8f58eac582f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "850957cc-96b0-4f42-a923-97729765488a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1729516a-70cb-4901-9dc7-d3fd860eb1a3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d005449f-4ec7-49bb-bb60-cb6187823df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89105b12-b0f1-4d51-afd9-e7265a8015c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db345e22-b174-481d-8c15-59daa9b1c7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c8ea4b-c7e5-4c8f-a116-7fa9e19bf318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be21ef5-d8bb-4c53-82f5-414972ba4718",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03264154-ed2d-42fe-8d84-5a191883609f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77e2dca3-c573-407c-82b1-9de5375d56c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82250a01-130d-4d72-800e-0926136f646b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae728143-e65d-416f-9226-a7e2d98c3a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e978c17-a718-44b7-80ec-e0d7ec0757c9",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b136ba50-45e3-42e3-b6fc-8e823bacb6e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "308790e9-e31b-4391-8c42-afec3536351b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c03509d-13c0-463d-8aee-c7c6b16d8b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ddf75f-9794-4ee0-93c7-fc73cf04025b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1055097f-ae7c-4110-84fe-d5d900e881da",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3240bf2d-1fa9-412f-9bec-c85943f93dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9ac82a-f23c-4cd2-bc6d-c92116ebca1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40335285-071e-4680-a1d5-84a6d53445e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c470a51-9251-418c-99f0-a482c3c4bd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704bf597-e715-4ed5-a0d3-9705de34dae2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f206a3-9728-4c81-8a4d-7b5d234c5a5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e32a8765-8984-4356-bbea-0112162b2233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06f3fdd-dc03-4691-9536-763992a423fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27f6c499-ca82-4337-8de3-0cbad5fa7545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2969b4c5-4c57-40a2-8a64-eb9ef321e5cb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60c24d3d-f8da-42d7-a3ae-9b249c26dbfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c65f08c0-7cd4-4199-be15-45aaed95216c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38c51fa-15eb-4ddd-b9f2-da4caf92ae41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c4c074-3659-4561-b291-0e9fbfa20c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad4ea6c-cc55-4a4e-8f4b-4e786a8b9ad5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0714f431-5b36-4dff-b11d-741c26485fc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e3f88f0-1cb6-4496-8b0e-92da3f54bbb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf94252-18c8-48ae-b9d9-75610d5501f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ecd1aa-d6c4-4fe5-9cb8-b3fef97099cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d274e2e5-366b-40fa-bb2e-3d2bfd96adb4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f695936-8b99-4f77-880d-ad1062cacfbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f29d9c4-6e5a-4b48-9cbf-ed354b1d2802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d98954e-3ab7-49e1-80d3-1778370b74a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7903d582-8fde-4a27-9ace-28312ad711ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c60f2bf-0ebe-40da-a3e5-ea8e8404c1b5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5805faf-b509-4fba-9d0d-a2bdd89e8312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c44fe56f-05e5-46ca-af1d-0f4c6c8ec22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "864dfa1d-69af-43a6-8932-b1b8d93e1173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7629d71e-b75b-4c0c-b580-628319693cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c33aa8-824f-4524-94d6-3242ee889670",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811a96bc-092c-431d-850d-403a9e242b14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20d1a9e8-905e-44a7-bc2d-9312bed45f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241db39f-5d6e-436d-8d05-857300d405b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bf82bf-8851-4e3f-ad2b-252695db8762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c57941-10c8-438c-bbfa-125e0f4ff30d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3f0023-96f8-497f-99b8-1c6ad6191e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30e3c77c-30fa-4cae-a8d7-cf466c20573a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc332292-3a3a-48bd-a5fe-85670546a9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "648bfc13-47d9-4cab-adad-6912d0217fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32476524-5852-4881-9c74-357036dc5c42",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9317a38a-b7b2-4695-8564-69dc4ed6b9dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5688a6bc-3ffb-4563-87bf-85c10ffcd5e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53eb7033-6ea3-4213-8b6b-f72fe94bb8dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdd9367-b42e-4d5f-9172-f800c56216f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b2e85b-0a95-4365-bfea-641446c9c099",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c60c0c4-23b5-4d5b-b1c3-bd6bdc2c9c64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79e4b67-d7a4-4278-80eb-e9fbbe803f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bceff8c-18e4-4c74-b881-6ef19297a049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "033e61a5-f239-404f-8303-32f2a20940b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8830bcaa-58b8-408d-84bd-fbc78b2b4813",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6313a934-ea30-481d-91c5-9e8439b10b16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "875fe925-652c-4c7d-9e34-f3418c017c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9024de8-55a7-4d16-931b-647cc8c547db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63ec078-6dba-4ec1-8aea-e0957f9e4aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c85bfdc-5269-4f29-9ef8-597d6ae9235f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fc03ba-180d-461b-b75a-126ae3b3f6b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44bf1fe5-f66c-4645-a84b-950f0654359d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4285fa8b-a43b-4ff9-b9a8-adaa761ae897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82edb0ee-e109-4732-907a-7bd882b3c6df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cff71-37fc-4b05-b7db-160d07e4a41e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64309304-e5e9-4613-9d3e-8d5dbf6a5507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1bde599-0232-4e3a-abb9-3134ec1530b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0c9379-768b-4ab9-a083-cf249f4b165d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efce0cb6-d912-4fb9-a9df-5f089732f27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3191e4-ca3a-42fb-bb41-1f19b1d7a047",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1587d0-7839-4e34-9c35-05241ddc0e2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffec6ba0-c680-42c4-a78d-3f2c76110d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4f7190-09d2-4e87-8c49-ee72c5daffa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231884ab-20c7-4c32-8795-2d8eaadeaf0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d74fd7d-c4ea-4d49-a0ab-24df9b334d8e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d391dd5e-e0e5-4006-9339-cbf38cb09237",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f46edde1-6bc7-46ad-9788-8f9e584e7e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d750444-9099-43b1-a3a5-16e199dea3a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7feb1951-97b9-4a28-a4e1-40bde8986fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca32542c-1211-437c-8fd2-a11fef7da87a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e65ef8be-bcd0-4f31-9576-81863f50ee8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "872c8dfc-f7cb-4159-9bbe-b4ae011c1c59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "886d6bf6-02b0-42f0-b2d4-a38fef4fb0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1072a77a-57c6-4b28-bd54-774c235c2aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ec2abc-8161-493f-a4a1-10c79a18e744",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a15ab8-bfb9-4a4a-9228-3b49e773efbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0481e3b2-e705-4244-8e54-5486fade11a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cd0e67-2524-4190-951e-342f4efbe073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16dd32e7-04e2-4233-b5ce-ed94ec719fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380d5899-71f0-4187-9500-f8e429ad6765",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d492a0-5d25-4fa7-8923-7e96bda5d283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dca0a5d-69a6-4b97-864e-d903e90d64c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534196cb-b786-4944-89f1-5bfc938a1fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21894205-e11f-4278-9fd7-e64fcf0abed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b936eb-5df6-473d-b94c-3de1b5984d98",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e003a8d7-d447-4ee9-8cbf-fdea4ef942c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fdec504-6e62-43f9-9ace-510caa5c70f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed8b674-2d16-4f2f-8b4a-3ffbf906b811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12df80af-766f-4749-bb1c-9ad6007e7f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c04c17-e229-4404-9ee1-d423ceb6f239",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04e8b5b-3671-4095-bea5-ccdd5d74ddae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "739789b1-0fc4-41ea-b477-f5f59cd189fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc11148c-dc04-4bbf-bb14-f2a2264b164f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d6c559-4148-4c0b-9235-14e4be112aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016aa7db-6741-4585-877e-8b1762a776ca",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a116c622-608e-4bd1-baeb-8e09558c713d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e437eb36-426d-4896-8082-433d9f598e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf083e8-f41f-4f0c-8d3c-662b9d8d1422",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330a9812-dd35-4610-abdd-c27ee30a3b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f921167f-e759-4a22-9237-580358324261",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99366a00-2333-4b55-b2b2-139809ecc423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46279c10-fedf-488e-9193-494fddefce31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115d2c45-e830-4e36-9113-81992a33daf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e4f5ec-05cd-4323-8305-cb9a08ffe9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dc577b-14b1-4bbb-8848-03dc6aca7d49",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025e1976-acda-47e4-8054-af3a9f81d493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b14b9a-8935-4ba8-b4b3-ee8e3a273c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d8961d-33e7-4fd4-960b-95559902bf38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5132a9-73fe-4180-9b84-87ccd54dc950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872f89d0-2df5-4764-9a10-aa8ec13c2f03",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcc9c1c-0da6-4706-be74-85038f2784bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c336b66-51aa-4687-bde6-bd1f9eea31e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55eac504-de92-440f-a2f3-ee66f047aa97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa56356-351a-4bb5-b003-4a74c9e388ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c8c6e22-a70c-4967-95b0-2264af38804f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3be32e-5892-47b9-ba1d-d2cbe56994bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a47126-67fa-4778-9d93-c83feba53ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad624e1e-761a-47e8-b0cf-cb426498a41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8af6f5f-4d8d-4a3e-a0dd-1a797563f464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a69b63-ef57-4e14-a80c-8bcf6afd895e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee846a9-d18d-4751-a691-5e8ba851913b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbe8d03-0e3c-44e4-91f9-e7c604763984"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37e6f74-18b8-4ff0-83d7-25dd997bf465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fc2272-cd20-4f8e-99ef-b6b39d3ed3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72eb011a-f50c-41ca-a219-3cde55842b3b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e1bfaeb-4aaf-4cf0-b3d7-19aac7c3626c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a8266c-35d5-4ddb-84b4-cad24524ef75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "986f0ceb-468d-40f9-93e6-9351105ef344",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3a7c5a-0955-43e1-8e0a-51d6f4cda8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aec65c3-cec3-40c7-bf0c-72adafbd8466",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c2015c1-acf0-4a12-b0f5-907688f2f702",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a7b130-2d68-4ec7-9fde-e4c77c82dd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bab888-af35-4fd0-a084-55f156aa3e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77645d55-61da-4181-9bb2-0c2f629f8bd3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0e52f51-6155-46b6-b754-b30e78ae61da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3bbe19b-3f4f-4932-b8fe-f511a5811878"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "37ad6b83-c029-4d67-b850-d4e9ecf16ae2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a77e051-1f48-4627-82f3-47cddfdff317"
                    }
                  }
                ]
              },
              {
                "id": "d629da8d-e98c-4f6a-b0f9-6e48d67c9880",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bcfe3e3-47f6-4462-9f8c-9a1969ea6198",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe50e57f-c5ef-4cdb-a296-ccc408d47c70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8f1b88af-5bca-47ae-895e-1918793deb49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c33af5a-d94f-4bc5-b972-cc592eb4a797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c61109f6-f23b-4fa3-859d-e43bb01afd1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aaf76768-8b89-49da-8ea9-2a8e905a2889",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef45768e-d319-4916-b92d-1fb709d69efd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5b6ef02-a102-4bd5-8047-cd38de8ebfe0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f0f750f-9335-4d23-82b0-7fd4d9cff3ed"
                    }
                  }
                ]
              },
              {
                "id": "1ae981e4-8d66-4a6f-86fa-de6d487cf14e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "935c33a8-c18b-4e50-a856-6733b7642238",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec5eeba-0d05-4e1d-90be-4f2ed6c3cf76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c014dcf0-a421-4ddf-b1f7-5e799955d292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228d632f-eda4-4bfe-a7c5-de49d92a8f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e70b9d-0f8b-4122-9421-24cbccf71dc1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "82f54b22-2007-418b-9845-2a0c6bc48bff",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a4d5394f-6b1c-4a4c-be86-b4c60b0588bc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07714948-bfae-4c42-81a6-a400902424f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d81ef63a-2f65-45b4-8c13-c63c88b60b19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8be154a-6425-4a99-8e84-99853462a412",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc5bd11d-ffd4-41a1-b041-8086cb8c576c"
                    }
                  }
                ]
              },
              {
                "id": "e143ab52-dff5-44df-8c34-7bd4e4e30ceb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e00c920-1fc3-4471-ac73-9395bd1db32d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "462edbcd-1f5b-4351-8aea-5f16b5d678f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d6cd8ea-e063-45ac-aa6f-41ccb6b9b8ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3091468-727a-45a6-b8d9-bb9db170e18e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d768c813-34e4-4d70-8c50-3aa9013c518a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "33eb88d3-0ce5-4efc-88a4-479a47dd9b17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3181fad-77c3-40f6-a38e-74968d189db9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5792b93a-4cb9-4911-a201-f47245699b32"
            }
          }
        ]
      },
      {
        "id": "be0b92f4-b276-44e2-83a1-d1b6f6a3b23f",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f6b9f06f-df97-4284-9e9f-ad87d7014792",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8bb4b94-3d45-41eb-9e69-b588c0f3576a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "864c2e78-88f4-428d-a075-a2e84f6bfb8c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd24c9a-a28d-4fa4-9b99-c4d983a6f8e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "311c8d9b-a3af-49bb-ad8f-10f30862f2dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d62d40e-c786-42c9-954b-454ed1b0b345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa75dce6-ed68-4dd6-a9d0-d99a88de8e9f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "03dbdc55-6105-4243-9789-2b5b3acccf68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf31e7bf-6f5c-498e-b1ff-4f874e5ec43f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d00260ba-b42b-4cfe-a9bf-848015d4bf59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b3bdae0a-6f6d-4b3a-a8ba-c6e77888ed75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3156b0b-1fe1-43b4-85d1-b2ec62d14ea1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f6fef4c9-e8c4-4228-b0fd-6c34c532396e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54c5ec4c-473c-4120-b8d7-cf874f0f1b2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0aae203-635b-4c50-a0c9-a9af9afc47ed"
            }
          }
        ]
      },
      {
        "id": "7d8065d4-906b-4439-8630-9fe9f840b22c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "0822d081-c37a-4322-82ac-2742154e95b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "917625b3-101e-4668-a010-1172ccae321a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eda5ff12-e0d5-4a24-9f06-8db4fba66069",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fccc6d-21d3-4990-9586-bafb6ec370b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a72917b6-8fa3-42b8-99d1-4eb15cb8b47a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616fefe6-3b9f-4918-b734-32c5a52a897a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91a23931-804d-4b6d-98ef-5ee7fc89a4a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1abe7aa4-687e-470b-8ccb-581c82a7e885",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afa704a1-a491-4681-a7cb-8303584aed76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d814d75a-e2f6-4401-b4ec-8e967acea4cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21c39360-d507-4b7e-8064-2b0789468656"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbe83091-4c14-44ab-9ee5-b358a3c4524d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "87555ab4-e376-4517-a768-3f024e6a37d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2870def-7a63-4322-97e2-b37c50cabf6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ef70b65-abfb-4575-a34d-30cedeb46d08"
            }
          }
        ]
      },
      {
        "id": "03158717-1a00-4009-afaf-c0a24964c3de",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e95869bc-1d55-4b52-a3a4-048b38192422",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bf37e869-e647-4e89-92c6-cf2e957b4624",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1fdbf901-e726-49db-afe2-f22ceb0320ec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03edd65-509d-4b9a-a8fb-5f00a6e8760f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da12e22a-db46-4077-afb0-1ca81a89059e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d5f545-ca47-4348-82cc-f2b7b67b06e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdc8fa1f-10f9-429f-8b51-663bbd9dd626"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43880736-305e-4fad-bfb5-2a82a57d4bdb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7da958bf-af49-411a-86bd-9335f312f9f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76a74e48-3941-4a78-945b-fc4d04753625",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e53a10bd-99df-4d76-b75b-d397ce6d914c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7f230e32-4601-4eb4-9ebb-8d5b1edb2a3c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a458d937-0017-4b1d-aa4f-66cc9116de57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "be3e596d-faab-465c-b9ab-52bedf3d2eaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe59b7b3-0642-4ec1-b86e-860d009cf076"
            }
          }
        ]
      },
      {
        "id": "d10b254d-00f8-4879-b486-7118da479377",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cea14d5e-cd44-42b2-943c-65d6b7b140a1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b30e067-8ff8-4960-8707-34cf8834cacf",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e3eb8d2d-6f51-4d7d-a61a-dbfa91e94a53",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3657e19b-213f-450b-874a-ace748df9efa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5556358b-6c1c-4090-9c7d-a4bf9f662a87",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.97192982456144,
      "responseMin": 9,
      "responseMax": 606,
      "responseSd": 81.20750495605724,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704242116829,
      "completed": 1704242144883
    },
    "executions": [
      {
        "id": "4165200d-ec8b-4385-a0b8-e4db7bd4abba",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9af4ee82-d178-4248-af93-4b533a6f3e8d",
          "httpRequestId": "365471b3-8ed8-47db-b888-7f96e1709504"
        },
        "item": {
          "id": "4165200d-ec8b-4385-a0b8-e4db7bd4abba",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bab3bda6-01b2-4f9a-86d7-6825f6bca425",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "b3dfc924-c641-496e-8e6b-d6e1c1453702",
        "cursor": {
          "ref": "5aeebd4a-5442-4c3c-b82c-bad6d327679e",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a67d1372-f17f-4f66-ae4f-3912c303b835"
        },
        "item": {
          "id": "b3dfc924-c641-496e-8e6b-d6e1c1453702",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d364193a-b198-4bcb-a99c-fd9828728804",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "6af918c3-6490-4b33-8d60-9b191b223714",
        "cursor": {
          "ref": "91adb10c-df0b-4ac8-b57d-da510244901b",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f9309a57-74eb-43bb-8c3b-7e0ee01e8938"
        },
        "item": {
          "id": "6af918c3-6490-4b33-8d60-9b191b223714",
          "name": "did_json"
        },
        "response": {
          "id": "09522a81-3441-439d-ab8f-58e88bb6b4d7",
          "status": "OK",
          "code": 200,
          "responseTime": 474,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef57a88a-7b6a-43e3-9cc8-1e72e90745df",
        "cursor": {
          "ref": "a2ea16f7-4b23-45ac-899e-fc3c5c48114b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "060ad488-f959-4132-9a99-29fa6af13786"
        },
        "item": {
          "id": "ef57a88a-7b6a-43e3-9cc8-1e72e90745df",
          "name": "did:invalid"
        },
        "response": {
          "id": "580c1504-2358-49af-b71d-8fd861ce663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef57a88a-7b6a-43e3-9cc8-1e72e90745df",
        "cursor": {
          "ref": "a2ea16f7-4b23-45ac-899e-fc3c5c48114b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "060ad488-f959-4132-9a99-29fa6af13786"
        },
        "item": {
          "id": "ef57a88a-7b6a-43e3-9cc8-1e72e90745df",
          "name": "did:invalid"
        },
        "response": {
          "id": "580c1504-2358-49af-b71d-8fd861ce663e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee87c45-fe68-4e77-a4cb-adad12bc7458",
        "cursor": {
          "ref": "026cbd29-2374-4c2c-a540-39c4fc609ecc",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1c06a265-5480-4460-b08b-9a0d8c59be18"
        },
        "item": {
          "id": "1ee87c45-fe68-4e77-a4cb-adad12bc7458",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2f7fb7e1-bf03-4196-93c8-394d5ad4281a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f5c0d7-a5b5-4901-9914-5cfdd68dc33b",
        "cursor": {
          "ref": "9c924017-5aeb-4ef1-886b-5fff36b093f9",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ec1b3a0c-cf30-421a-bab6-fd24f58d5992"
        },
        "item": {
          "id": "48f5c0d7-a5b5-4901-9914-5cfdd68dc33b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "28785749-8425-4b7c-a04e-eecef179016f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3784922-9b54-4fd2-b906-8564eeb2686f",
        "cursor": {
          "ref": "e47d9b16-7220-40db-bbd3-69673f560795",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d86bbf94-1cde-4195-a355-a717a6fbee1e"
        },
        "item": {
          "id": "a3784922-9b54-4fd2-b906-8564eeb2686f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e4b3616a-0b0f-4961-9ea7-ba346cd6a744",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c9e38f-e659-4dfc-b588-6d3cd764774a",
        "cursor": {
          "ref": "d6293459-fe0d-4b72-be52-a04e9ef21c3a",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a34bd37f-a9c1-4080-9ee5-ae8812b6bef0"
        },
        "item": {
          "id": "37c9e38f-e659-4dfc-b588-6d3cd764774a",
          "name": "identifiers"
        },
        "response": {
          "id": "5120492e-a822-4356-83e2-7ddce765fae8",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e05b3dd-f766-47e9-8eac-e7e94b02ebfb",
        "cursor": {
          "ref": "959e2033-a107-4160-b7ad-06f91b40fd85",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "3564519f-de39-4598-af44-de96c26b462c"
        },
        "item": {
          "id": "4e05b3dd-f766-47e9-8eac-e7e94b02ebfb",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d5fd6e6-77fb-4f81-917e-19198248b308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823c4274-b700-4830-8102-8ad84c7e6615",
        "cursor": {
          "ref": "c6ea2f39-507a-4d4d-995d-7d12984b5b49",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8ef9b17e-6b3f-4864-b98e-031d8dc08b1d"
        },
        "item": {
          "id": "823c4274-b700-4830-8102-8ad84c7e6615",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1a97925e-284c-4b44-8771-938c2b1203a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a8923b-bc1a-41e4-a947-7e7aac94e1e5",
        "cursor": {
          "ref": "0890dd11-a10a-4f21-bc15-5b6a4d474ec7",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f95f5826-39e4-410c-9594-37926805bf36"
        },
        "item": {
          "id": "b4a8923b-bc1a-41e4-a947-7e7aac94e1e5",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bcdb5386-3f6e-48c1-8d74-13a01905df09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa51461-bd76-44af-92dc-1cf2cb674b12",
        "cursor": {
          "ref": "89135ab9-3359-490a-9b95-2fd0f962f750",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c478e4be-12b7-497d-8364-2c9c3ce661c8"
        },
        "item": {
          "id": "7fa51461-bd76-44af-92dc-1cf2cb674b12",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b997e476-96fa-4477-a58a-f43ed8643929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cce180-f43b-4569-81bb-341a210ac669",
        "cursor": {
          "ref": "68036a25-f7f8-48e6-975a-2695a8632501",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c4d8bf69-044a-4602-9af8-e04a81db963d"
        },
        "item": {
          "id": "b2cce180-f43b-4569-81bb-341a210ac669",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d4a7ebf0-cbe3-4d12-ac03-3a5b4783f459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "812da7c9-006a-4132-b563-3d0cae940830",
        "cursor": {
          "ref": "b7d98f5a-5631-4e40-9787-abe5591bace3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dc19afd4-013c-45e1-a21f-1952ed0cf736"
        },
        "item": {
          "id": "812da7c9-006a-4132-b563-3d0cae940830",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "230a28df-28b4-4324-a49a-fd7b8957ebee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32055009-dbb9-4130-9807-2dc2ce7dd524",
        "cursor": {
          "ref": "82214021-9a91-43c3-8677-093d40c50b2c",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "47594e66-1e30-4be9-b5d0-bcb9af99dc68"
        },
        "item": {
          "id": "32055009-dbb9-4130-9807-2dc2ce7dd524",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1540f4f0-65d1-47c2-9a1f-032181daf6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf2a939-e5d1-41fe-958f-00200b1cd336",
        "cursor": {
          "ref": "a8ebec31-3ba9-4c62-92c4-1e726fdad0fb",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "aaa19aee-5b3a-4146-9353-30d21b9e51f1"
        },
        "item": {
          "id": "6cf2a939-e5d1-41fe-958f-00200b1cd336",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f407a933-2048-454d-8509-9cfa058847ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccbbc49-6893-4112-8443-3eee3aa798c9",
        "cursor": {
          "ref": "45050194-f1fb-44d9-8a30-11a3e992e135",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9be3323d-b79b-4363-a4b4-3f2ba18c9568"
        },
        "item": {
          "id": "eccbbc49-6893-4112-8443-3eee3aa798c9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8b374231-cc8a-4328-9144-b1bd0c59debe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06acda20-41df-4122-b165-9a5bcbcc73da",
        "cursor": {
          "ref": "6ae8283c-1487-42c2-8a49-2108dc6d8e87",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "becac1cd-e769-4f60-8309-b29516e18ea4"
        },
        "item": {
          "id": "06acda20-41df-4122-b165-9a5bcbcc73da",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "36866169-15e5-473d-b504-78600a7cff59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f895163-6fa0-4316-8b0c-a23da66f19d3",
        "cursor": {
          "ref": "f6e5f36b-67d1-4a07-9bfe-401ab8613c69",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1e0305e1-675e-417f-a42b-11879134695f"
        },
        "item": {
          "id": "7f895163-6fa0-4316-8b0c-a23da66f19d3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7bf09b3c-4557-409d-81e0-e6b4d2335fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d1c8a15-d28f-41cf-939f-d66a62992db3",
        "cursor": {
          "ref": "42db6fb7-9a09-40bc-b10a-4652ef8b299d",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8daa77d1-9364-42a9-b586-07addb57f807"
        },
        "item": {
          "id": "2d1c8a15-d28f-41cf-939f-d66a62992db3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b330911d-2db5-49e1-98a7-0a9f51a48a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1921a680-9108-4f77-a836-40789a7c0264",
        "cursor": {
          "ref": "4c70408b-3234-4c1c-8401-b6278d1edf7c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6ab95c96-a385-4494-8a24-6d73494de4bc"
        },
        "item": {
          "id": "1921a680-9108-4f77-a836-40789a7c0264",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b26a4b6e-96b7-4846-b894-d31508fc7964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4e161a-2789-4597-9f3a-7474a78ff65a",
        "cursor": {
          "ref": "453e798d-a0d0-4414-848f-ad8caced0ec1",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "36b9c004-54a0-464e-91ae-a1de0908fd32"
        },
        "item": {
          "id": "ac4e161a-2789-4597-9f3a-7474a78ff65a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0a992c0d-849f-4175-a53a-53b6ef399079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f94289-0bfd-42f8-ae14-ea12d5a55cfc",
        "cursor": {
          "ref": "43d0d03f-56b4-40a4-a454-bacbf84bdd1c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dd52c6aa-f478-47c6-9008-37b842acae38"
        },
        "item": {
          "id": "b9f94289-0bfd-42f8-ae14-ea12d5a55cfc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "97215b21-d528-4c65-a73c-d5d0b40a380a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd2726d8-40a1-4d21-92d2-ef1eb2756b0f",
        "cursor": {
          "ref": "d54cfd15-ea99-40af-884f-7d414ca57e76",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "60c38db5-7313-4d32-983d-909b2bd506a9"
        },
        "item": {
          "id": "bd2726d8-40a1-4d21-92d2-ef1eb2756b0f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "159e1fcc-3124-45b9-b870-64511fd983a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fef2ddc-9641-4354-b714-d3842dc610cc",
        "cursor": {
          "ref": "13bb1fde-ae39-439f-a8f1-a8fd3d8b8636",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "704bbb1b-3cc6-481c-a3a4-a5508e301cf9"
        },
        "item": {
          "id": "5fef2ddc-9641-4354-b714-d3842dc610cc",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e28d9826-325f-47bb-888d-a70ac854253d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f400987e-4048-451d-82ad-8ea143bdab9a",
        "cursor": {
          "ref": "d35547a9-4808-42c4-8ec3-cf35bed68222",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "76f7822f-13db-440d-b5fc-e54134923ef7"
        },
        "item": {
          "id": "f400987e-4048-451d-82ad-8ea143bdab9a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e736d620-b0c8-4fbf-8abd-8b9ab3a934a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fb40b6-c5b9-4efd-acdc-a3dffeec97fe",
        "cursor": {
          "ref": "d9280461-6144-4259-b38e-bab9c7efb88c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c73e9c6a-bd77-4226-905f-3659b153d3a8"
        },
        "item": {
          "id": "63fb40b6-c5b9-4efd-acdc-a3dffeec97fe",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0307f497-8a88-4542-a10f-e89c03abefd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb69252-0b45-410e-8c65-40bc0a7e6639",
        "cursor": {
          "ref": "9cafd1dd-c5d6-4afb-9f98-98989bdde622",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1aea2ca8-4e64-4d78-b82a-a807e9ed0110"
        },
        "item": {
          "id": "7eb69252-0b45-410e-8c65-40bc0a7e6639",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8c904fd6-f3f4-4204-a9ce-68ff049107f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97e8d31-7c20-4c71-8181-e86bb0525026",
        "cursor": {
          "ref": "a787de18-f82e-4817-94a6-a58f2d8065b2",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cd53f15c-d77a-4453-b818-98d2d773fc78"
        },
        "item": {
          "id": "a97e8d31-7c20-4c71-8181-e86bb0525026",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7abd31d3-e344-4df9-8a87-60c2651f0c35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0af2bf-8fde-46ef-b745-74b86d58f0af",
        "cursor": {
          "ref": "5ea90793-d87c-457f-8ab8-9f6eaa0b9bb8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "02c97c01-e601-4d40-a2c3-f09cd70416e8"
        },
        "item": {
          "id": "df0af2bf-8fde-46ef-b745-74b86d58f0af",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f4cd1e14-3cd4-4f03-a452-add8418ceacf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a9731c-215b-4e97-9b74-294be14df0c3",
        "cursor": {
          "ref": "6fbdfb7f-89b9-4c47-954b-7dc443f79168",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "424f00e6-b3c7-427e-b775-d3e6f15848bf"
        },
        "item": {
          "id": "50a9731c-215b-4e97-9b74-294be14df0c3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d211c7a7-dc73-474d-8ec6-04893aed1b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef144ac-07d3-43f2-bb7f-eb45ff0af293",
        "cursor": {
          "ref": "dff15e55-981e-4e5b-8058-f10bdf470817",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d0310f5f-ae86-40df-847d-ed55b4394d9b"
        },
        "item": {
          "id": "8ef144ac-07d3-43f2-bb7f-eb45ff0af293",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "713b9d34-84f7-46ba-9e22-7fc4f89bc571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2766dd-c75e-4754-a369-94acc19c8767",
        "cursor": {
          "ref": "746e8937-b31a-429b-82ae-9646f97d33ae",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e86aa4b9-9d23-40ee-9b4e-a521761dcc1f"
        },
        "item": {
          "id": "3e2766dd-c75e-4754-a369-94acc19c8767",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "dd7ff02c-51ff-4cf1-b60e-8613393bf91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07e8f2b-2476-4224-aa9a-72c54f0f87b7",
        "cursor": {
          "ref": "c8aa319a-51c4-4756-b695-71700ce59e57",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f0c2e25b-345d-4792-98fe-68c228d8553f"
        },
        "item": {
          "id": "e07e8f2b-2476-4224-aa9a-72c54f0f87b7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "974b00d2-4efc-4633-9611-ead64ea58400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf882ad-70b9-4c47-bfea-e33745210e54",
        "cursor": {
          "ref": "3b4febbf-e59e-4850-889b-182a5a808240",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a2d10dff-f816-4c48-a507-54746d1557e0"
        },
        "item": {
          "id": "bbf882ad-70b9-4c47-bfea-e33745210e54",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "538c73af-723d-4f25-ba97-311a6fc19e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad9ef7b-4585-498c-909b-cf0032e82e83",
        "cursor": {
          "ref": "a1d2422f-b920-4930-8e7f-23b6b1c28657",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "90b82d12-acaa-46bf-92a5-ed0df80e911d"
        },
        "item": {
          "id": "8ad9ef7b-4585-498c-909b-cf0032e82e83",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "96498a52-25b9-41af-b00a-42cc1975f982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a65440a-8c95-4dee-9842-984abcc1e319",
        "cursor": {
          "ref": "63688f01-2499-449b-954b-cbe6027c8a6b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "302ed5f2-a00a-4da5-a841-7f97f40798a2"
        },
        "item": {
          "id": "5a65440a-8c95-4dee-9842-984abcc1e319",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1c897b3e-aa95-4f6e-93bf-8c7da01b11c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fc0975-a70e-473c-ac0e-073a0d5724b6",
        "cursor": {
          "ref": "14866b62-29e2-40e0-b18c-70e8b25a991f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "20cf07d9-8c8c-4a1a-8b7c-fbea8553349a"
        },
        "item": {
          "id": "10fc0975-a70e-473c-ac0e-073a0d5724b6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "028cdca7-8489-4133-af20-2a6eb66057ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a585b938-2d6f-4013-9df8-1f0324858a65",
        "cursor": {
          "ref": "c2c242b6-9da6-463c-884b-f119126d7a17",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e0cc581a-d408-4621-9cc8-e993930a423b"
        },
        "item": {
          "id": "a585b938-2d6f-4013-9df8-1f0324858a65",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4375d77d-8182-495c-a114-96120de8eaaa",
          "status": "Created",
          "code": 201,
          "responseTime": 606,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d29d727e-6b29-4e5f-9637-c61af19ecdb6",
        "cursor": {
          "ref": "3ff7329b-1386-4cbb-81f7-76faf2d8001f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7ea0af11-eecb-45fe-afa1-02240167f3c1"
        },
        "item": {
          "id": "d29d727e-6b29-4e5f-9637-c61af19ecdb6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b801d654-dae6-49df-8c38-f06aee2559a6",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bcfebaac-0fc1-4986-849c-c01fa7b81cb0",
        "cursor": {
          "ref": "bcb0257f-29fe-4591-bb02-7f2a48c5a8c7",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ac0a9305-f015-423d-ba9c-45af345a8381"
        },
        "item": {
          "id": "bcfebaac-0fc1-4986-849c-c01fa7b81cb0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7159b946-820b-44dd-8b84-f32708e044c1",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "20a6e7c4-1185-4dfd-a237-8dd494a1a630",
        "cursor": {
          "ref": "b8d92ec8-0d72-4dc8-9cd1-08e378062c46",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7705f9bd-14d5-48b1-9481-ff6072b45bf3"
        },
        "item": {
          "id": "20a6e7c4-1185-4dfd-a237-8dd494a1a630",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8ed23c26-2755-4252-a32c-7bcf10b3f8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df67ab16-37a7-4c58-9405-e92bcd4d42de",
        "cursor": {
          "ref": "b2c45299-f4fd-4c67-b2ef-c129d6e7e24d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0a5acd7b-6fc6-411c-a21b-1299be71e2f7"
        },
        "item": {
          "id": "df67ab16-37a7-4c58-9405-e92bcd4d42de",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "7121bc01-d0a2-4f77-83d4-4f04741ab044",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "72b6314e-3f62-4422-aef8-39a5c394661e",
        "cursor": {
          "ref": "c7d6579b-2cdf-4e0c-ade0-d32e6af42edc",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a39a76b7-c43b-405b-897d-6ec9cdedf9fb"
        },
        "item": {
          "id": "72b6314e-3f62-4422-aef8-39a5c394661e",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c0949529-ed1f-4c1a-b569-7f91ee3d2abb",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2e4656bd-cfff-4323-801e-ee99a2b7b84f",
        "cursor": {
          "ref": "751f2821-34fc-4dcc-a16a-958f5734ba1c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8b5e41e4-8268-4534-9cf9-94e98f177584"
        },
        "item": {
          "id": "2e4656bd-cfff-4323-801e-ee99a2b7b84f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "39a74651-fd17-49ac-b860-cb246ebefa15",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "623be582-24b2-42b3-831d-089113cc96e5",
        "cursor": {
          "ref": "89eba56c-b7fc-4f2c-bb4c-3ce715c93a5a",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8452ec4c-d3fd-4ad0-8164-74d642b15d5c"
        },
        "item": {
          "id": "623be582-24b2-42b3-831d-089113cc96e5",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "194b1e85-7936-4895-a12b-9cffcd90cb0a",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ff295cdb-c24e-43ce-8576-7362cf38b292",
        "cursor": {
          "ref": "8a6f9694-bf6d-41b7-a144-d9ba61c14005",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2c051781-4c4b-4928-998b-c49ab02de2de"
        },
        "item": {
          "id": "ff295cdb-c24e-43ce-8576-7362cf38b292",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e336b4d4-2997-482e-8003-8f6ffcadf204",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "290f6d46-ca21-4ec4-b1fc-2fa819e72bfc",
        "cursor": {
          "ref": "a96d41c8-9383-47a6-b066-8f0631a43139",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "024d50aa-c48c-4949-bd3e-5381daad399f"
        },
        "item": {
          "id": "290f6d46-ca21-4ec4-b1fc-2fa819e72bfc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c8016809-215e-40cb-b343-22f64af7e917",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "afab82f9-342c-402a-a331-81229677d2a6",
        "cursor": {
          "ref": "b5480427-b340-4ef6-b08d-d239a7244cd4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8189aa5c-be97-44f0-b10d-af9082afe521"
        },
        "item": {
          "id": "afab82f9-342c-402a-a331-81229677d2a6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9198b91b-0050-4392-a50d-27eb6bf9d472",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d4be544e-6052-4fa9-ac0a-09011d7be3c7",
        "cursor": {
          "ref": "9c073ba8-4357-4620-810f-11f7ba68fb50",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8e54f2d6-e0de-4a34-95bf-8fd2bf178790"
        },
        "item": {
          "id": "d4be544e-6052-4fa9-ac0a-09011d7be3c7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8509f437-df53-40a3-81c8-695bd87cf752",
          "status": "Created",
          "code": 201,
          "responseTime": 481,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "27fa40aa-c0f9-4906-9e7f-e71149813c5a",
        "cursor": {
          "ref": "c82a9763-b964-42c8-be0f-012749559d98",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2cbe712d-db3a-4065-a97d-29fc05f982b3"
        },
        "item": {
          "id": "27fa40aa-c0f9-4906-9e7f-e71149813c5a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "73199071-ab3f-4bd6-8b74-7d0bae440719",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "90087a37-0b5b-4451-abad-3c6cc4b01c0f",
        "cursor": {
          "ref": "351ee414-dc93-42fb-ad09-3b7b621ef7fe",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ee5bd886-d126-4055-bece-a8bd6a34577e"
        },
        "item": {
          "id": "90087a37-0b5b-4451-abad-3c6cc4b01c0f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "65f88932-39d1-4c01-9e6a-35396f49cc53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c62015-effd-407d-833c-c3527e035269",
        "cursor": {
          "ref": "97eeced5-b428-4c79-bca6-c141b2203635",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d62e5ff2-76e4-4434-a5f7-366e02f4c439"
        },
        "item": {
          "id": "c1c62015-effd-407d-833c-c3527e035269",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "16f2326f-1b04-42d2-8c00-f388a18998ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66edec1-3aa8-4eb4-8df5-222fca8d8ecf",
        "cursor": {
          "ref": "2d40b32b-de3f-4ae1-aa0a-75d8e31d7b29",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f5a17edb-272e-4657-99b2-8a58b99f43fa"
        },
        "item": {
          "id": "b66edec1-3aa8-4eb4-8df5-222fca8d8ecf",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e809878a-be00-4d8b-88a3-15986be19fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e10c133-7f7d-48f0-8fcc-b711b579aae0",
        "cursor": {
          "ref": "b997ba23-cae7-48e0-a0c8-a36cb3ec4872",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e1a40b18-9573-4253-8e43-ce915d276cc3"
        },
        "item": {
          "id": "5e10c133-7f7d-48f0-8fcc-b711b579aae0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3c4d7d57-e9e5-4a9a-ab76-d9bca6aa254e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ccbf57-92b4-48d4-9bd1-6ea2a51abb8c",
        "cursor": {
          "ref": "d7433339-9a14-4cb4-86bf-a5170b14415d",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "68c67aed-7de8-4de9-9945-2159238866e3"
        },
        "item": {
          "id": "00ccbf57-92b4-48d4-9bd1-6ea2a51abb8c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9af2b86c-569c-48ef-a587-8db0b233417e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "967fb146-e3a2-4f1f-9398-de74b2c0c7dd",
        "cursor": {
          "ref": "d33ac4c2-580b-4326-8b96-52be4e14f983",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "06125133-b45f-4e81-8b18-81f7edd3e908"
        },
        "item": {
          "id": "967fb146-e3a2-4f1f-9398-de74b2c0c7dd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4b83df25-c530-4559-8341-42f40ced578d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecee082-f36c-4f0d-a6dd-f4303b4479b8",
        "cursor": {
          "ref": "0b6254df-9bbe-40f9-89c4-5dec460a3d95",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "372f74c2-37ba-4233-bb92-1d6217189a09"
        },
        "item": {
          "id": "cecee082-f36c-4f0d-a6dd-f4303b4479b8",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "25b3d4f1-1a93-4fb6-83a8-bf854ddd47c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23417a3-0db3-4b43-8dbc-518c7afff651",
        "cursor": {
          "ref": "9fd5b235-8f84-4795-acae-c21ae4af1d18",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "277cf3b2-28e9-4fd5-96ae-8c68600868e6"
        },
        "item": {
          "id": "d23417a3-0db3-4b43-8dbc-518c7afff651",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3ab3d953-e8bf-4acd-b49f-48d39f9edaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6274ddd4-ae42-46fe-aa70-a8eeab1e096a",
        "cursor": {
          "ref": "3c0b1369-f682-49f8-bb98-aaf2a075fbe9",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a37cee9b-9e73-42b6-8fc9-87a32f31f8ec"
        },
        "item": {
          "id": "6274ddd4-ae42-46fe-aa70-a8eeab1e096a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "26f04d63-8023-4a24-aa75-e8ee3a93be61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a94be5-b830-4002-a4f4-fff9f5a11ec9",
        "cursor": {
          "ref": "e184e4f3-e24f-406d-bf2a-6625eab01fac",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7ce7960b-984c-46d7-b246-d8a7ecf7c1aa"
        },
        "item": {
          "id": "31a94be5-b830-4002-a4f4-fff9f5a11ec9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "67ed98c0-959e-41b1-856e-dd8b36c8ed8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68309454-1fca-4987-8a7e-0cf99fe82055",
        "cursor": {
          "ref": "4db4f8cb-3310-4786-9340-1a7ccc2e5235",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "405834e2-da8b-432b-bb11-f2ccb4f14a89"
        },
        "item": {
          "id": "68309454-1fca-4987-8a7e-0cf99fe82055",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dcbe7962-a0b0-4880-a21c-0b1ba4a51195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad45294a-d34c-4f75-8a60-c9c47d0754fa",
        "cursor": {
          "ref": "6761ea9d-d2ae-4b30-a962-96dff958eed1",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "dedfac3a-f6f6-49c2-a598-5b80bda72d93"
        },
        "item": {
          "id": "ad45294a-d34c-4f75-8a60-c9c47d0754fa",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f0a776ea-947a-4646-b2b7-3044c8fd3c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3b9092a-b6a4-432a-a5ba-61c1ebb59a4c",
        "cursor": {
          "ref": "5a805213-4202-4a90-968a-37c128841e83",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "696e00af-22e9-4d29-80ad-cc4e7fbd30e2"
        },
        "item": {
          "id": "d3b9092a-b6a4-432a-a5ba-61c1ebb59a4c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2bb26fb8-8d90-4ffd-ada7-da3ec0e57688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf56883-461b-4ec3-8cc3-86f5d3312046",
        "cursor": {
          "ref": "5e671567-5646-4b76-8ca9-ab03e5088a56",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "50864391-8fb0-489c-b8d6-8a1e5f733003"
        },
        "item": {
          "id": "ecf56883-461b-4ec3-8cc3-86f5d3312046",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7854d4fc-49b6-4cb1-9fba-4746345f070c",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c7192532-6730-48a5-a1d8-292363a96cac",
        "cursor": {
          "ref": "fea9af2a-15e3-4cea-8188-007d5af7a2e9",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "68786500-41fb-464f-8ec9-007b9d9e1ba7"
        },
        "item": {
          "id": "c7192532-6730-48a5-a1d8-292363a96cac",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6b2e3c9a-8714-42b9-8e5a-59ea9761b81e",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "dfc039e5-38f0-4e60-93d9-797b6f26d145",
        "cursor": {
          "ref": "8a86a410-1593-4943-a026-ef4c41cb2f9b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "64b98ad7-a14d-4ff0-b667-03320ae93b3b"
        },
        "item": {
          "id": "dfc039e5-38f0-4e60-93d9-797b6f26d145",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "13382792-c29e-4534-a00c-7c1e45bc31f8",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "92ac048e-6178-4b74-8c47-d3b1b1438fef",
        "cursor": {
          "ref": "e9a678e3-2f67-441e-9235-9f60aa1387ba",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e6365bf3-e223-4974-9423-6a5ff9460a45"
        },
        "item": {
          "id": "92ac048e-6178-4b74-8c47-d3b1b1438fef",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fa414d41-55c4-458f-a77c-557b4c610065",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "18e1c210-0fdf-44fa-9f30-c079032fc837",
        "cursor": {
          "ref": "e4354207-fc56-4b1b-880c-8f2ae9acab99",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e56a9975-267c-4524-9c33-4d03edd70e3e"
        },
        "item": {
          "id": "18e1c210-0fdf-44fa-9f30-c079032fc837",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "026a8c8f-0fef-42a5-8659-01b8420fed72",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bbf96ea6-2393-4488-b4d8-d81a3b9862c5",
        "cursor": {
          "ref": "f1c80593-a788-482d-b04c-383ac73a046b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ec01a142-6528-4fe6-8ede-171de5d9f367"
        },
        "item": {
          "id": "bbf96ea6-2393-4488-b4d8-d81a3b9862c5",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "61b744b2-63cb-4a4d-a3ab-930af7360139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b103e208-c95f-4fed-9650-90c89496e952",
        "cursor": {
          "ref": "3176bdde-30ef-4e93-a067-a8c633ae74b3",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "4c8502c2-4a5d-4c43-82a8-8ef94afe3d68"
        },
        "item": {
          "id": "b103e208-c95f-4fed-9650-90c89496e952",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "dffa1ca5-f90b-46e3-b363-63b8a25961ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0153ec5-5150-474a-b43d-a17dd948c81a",
        "cursor": {
          "ref": "200da128-5d9b-4a6e-8181-e08d9d9474bf",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cd8ea30c-3694-4d2f-8fab-0e113094db3f"
        },
        "item": {
          "id": "a0153ec5-5150-474a-b43d-a17dd948c81a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "881a9787-76aa-4013-a533-fe97de3c646f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db547831-917f-4603-82ff-0b1717105fcf",
        "cursor": {
          "ref": "0b2d48dd-de46-4abb-8286-038c5be45a6c",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bf78f420-3c65-40eb-bba6-0dbed19acaad"
        },
        "item": {
          "id": "db547831-917f-4603-82ff-0b1717105fcf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3be0cf47-20a3-4fc1-a2c6-32f4fd380877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6936822a-7874-4b17-ac8f-3aa6521b21b6",
        "cursor": {
          "ref": "3d370d97-d1e5-4781-8874-78b21e5fa36b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "dd43f626-6ff3-4733-9b18-c89852366671"
        },
        "item": {
          "id": "6936822a-7874-4b17-ac8f-3aa6521b21b6",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1ec5a097-91ab-4801-a7ee-6a0d1f5e4783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fd4c7b-d2e7-45fc-a8d0-0e0085cee23b",
        "cursor": {
          "ref": "80d3f4a7-8bd2-4d1d-808a-518934be682f",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1d144c8a-3d64-4f1d-9c31-8626ae7cd577"
        },
        "item": {
          "id": "03fd4c7b-d2e7-45fc-a8d0-0e0085cee23b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "011bf8e6-367f-4a09-8d52-49a3cf707281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477cad3f-dfe0-46d8-9bbf-05d0e2ffdf7b",
        "cursor": {
          "ref": "d064ef89-6e66-4edd-86ad-4d20eccd2426",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7276369b-b351-4b79-9d88-266dd9bba4c4"
        },
        "item": {
          "id": "477cad3f-dfe0-46d8-9bbf-05d0e2ffdf7b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "65a85b3e-0f96-4d16-8be3-947334f2312c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f253feb-1c7d-4da8-9a0c-77ef70e4ed5b",
        "cursor": {
          "ref": "5bebc0e0-fe50-42c9-90f8-d1af11338845",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d36834fa-f0e6-4e71-8e6e-8e54aad17d8d"
        },
        "item": {
          "id": "3f253feb-1c7d-4da8-9a0c-77ef70e4ed5b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "94fcc12e-89c6-4e27-b78a-952e733dacb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3b219f-d091-4141-8dfb-bec8b34102da",
        "cursor": {
          "ref": "c42e1462-fbd0-47b5-a4b1-7356ad4ba7a7",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9c02fd5c-6866-42a5-ac6a-be49909eb6ce"
        },
        "item": {
          "id": "bb3b219f-d091-4141-8dfb-bec8b34102da",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03d3e75a-db19-4597-a7f3-ed910c8f2f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1ec90d-1d77-457e-ac56-56284eaf073f",
        "cursor": {
          "ref": "401e8c52-bd27-4493-a2ec-0a4a9c9dce75",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6339dfaf-73bc-4e49-855c-6e4f9de60aae"
        },
        "item": {
          "id": "fc1ec90d-1d77-457e-ac56-56284eaf073f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "792602fe-9f5b-492d-82f9-d6e8b5f3c9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8639ef-2cd4-4d68-9c26-959cba225548",
        "cursor": {
          "ref": "0ec88683-7e80-466e-a01a-5b8e4c1aa9fc",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2becb993-d63a-4277-8a73-3dbf7fd5c066"
        },
        "item": {
          "id": "dc8639ef-2cd4-4d68-9c26-959cba225548",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "6759edf7-9b92-40a1-b488-3b32c541f0ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f631460-b15e-4dbe-b75b-74daccd60ac2",
        "cursor": {
          "ref": "b17d1d2c-67db-4f54-8a92-34e50897a61d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bbc85c43-9983-48cb-ad4f-f00605e4b48e"
        },
        "item": {
          "id": "3f631460-b15e-4dbe-b75b-74daccd60ac2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "28afcb4c-edc1-45df-bf08-02990ac9575c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a243bf-60d1-41e4-a855-24e060a79ad5",
        "cursor": {
          "ref": "65ac4fc1-5013-4892-ba0a-5825f3666b85",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b00e344c-ed21-4cbb-b64d-d8208a6180e2"
        },
        "item": {
          "id": "55a243bf-60d1-41e4-a855-24e060a79ad5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "627c346b-5970-4d46-9679-e8452d3dc037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b03383d-bb16-48f3-a45e-796f73601490",
        "cursor": {
          "ref": "7dd77bff-db02-4555-b7cf-f352cc6b84fc",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "65d799f6-7f2d-4eb9-96ef-30f6489089b3"
        },
        "item": {
          "id": "2b03383d-bb16-48f3-a45e-796f73601490",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f0757a19-2f0d-4434-8678-9221c3878f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655d37cc-8ff2-42c9-91cb-a3d603e05f44",
        "cursor": {
          "ref": "0d07dc52-dfaf-49ba-a0be-963d3d2d3a53",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b9718589-282d-469e-97d7-e336cd9f0098"
        },
        "item": {
          "id": "655d37cc-8ff2-42c9-91cb-a3d603e05f44",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7fd9c056-385a-4b72-aaeb-8762dce5294e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeda565a-2582-4ee0-a3e8-3537d8be1f98",
        "cursor": {
          "ref": "3275dd63-3edf-4f6d-9fa4-dfe651513dd7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9aa71e21-8ea4-419f-a4b5-16d07f308f7b"
        },
        "item": {
          "id": "eeda565a-2582-4ee0-a3e8-3537d8be1f98",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6283197d-81db-4583-bea7-d9015fef8ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da08cda-8090-4c66-9904-e7eff59e17c0",
        "cursor": {
          "ref": "feaf79f6-7ad7-4128-b96d-32aabbfe06d3",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "adbea5db-21e3-4da3-a8cc-f0f575502c37"
        },
        "item": {
          "id": "5da08cda-8090-4c66-9904-e7eff59e17c0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c4a0d28e-4015-4846-be2f-b4d899cff67a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0730f7c3-144a-40f1-921f-a4b66a7256ef",
        "cursor": {
          "ref": "475fc55d-7cd3-42a7-9180-9d771dddff90",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4834cb1e-399e-42fa-9d3f-079a7c55e4f3"
        },
        "item": {
          "id": "0730f7c3-144a-40f1-921f-a4b66a7256ef",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "911252de-41df-46d6-884a-4506bf06f580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed9460c-dac1-406f-b02d-8a4578994785",
        "cursor": {
          "ref": "24e3292a-7acf-4dc6-80c0-9f554380f6fb",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "af7d100a-85fa-40e0-b6ac-75fc0334339d"
        },
        "item": {
          "id": "bed9460c-dac1-406f-b02d-8a4578994785",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eff470e9-7431-4323-a75b-9e2932aef0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa3a86b-4b65-4de5-8e10-db6f3d793b2b",
        "cursor": {
          "ref": "6b6686bc-cc44-4402-9026-03b21216a387",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "228747a5-3923-496a-bffd-4a3b4c6c92bc"
        },
        "item": {
          "id": "6aa3a86b-4b65-4de5-8e10-db6f3d793b2b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5e8cb499-fd58-48a6-b2cd-63bbf909f802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929f00bf-a795-473e-b0cf-40b36b063ed5",
        "cursor": {
          "ref": "db541b27-037a-409a-a922-a61e1fd84939",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7003c7ad-0aac-41ee-ac87-bc0094e1b170"
        },
        "item": {
          "id": "929f00bf-a795-473e-b0cf-40b36b063ed5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a33447c9-af83-4c77-b8e2-6d9d5aeee204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5b540d-4fc4-4098-bf1f-882e120ef9f2",
        "cursor": {
          "ref": "629a6a4f-bdbf-4ffc-ac54-6898f1cd3c38",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ab0d4dfa-9ef3-452a-81d0-ad9edbc5284b"
        },
        "item": {
          "id": "ae5b540d-4fc4-4098-bf1f-882e120ef9f2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5e64e14b-ab3f-4185-a8e9-16316dd53858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f60e8c-b515-4c99-ad90-bd41cc5a975e",
        "cursor": {
          "ref": "7d69e2d8-c7dd-43b6-95c3-f29275643651",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0335d890-fde1-4649-94a3-d4924b50516b"
        },
        "item": {
          "id": "f8f60e8c-b515-4c99-ad90-bd41cc5a975e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "50fea5f5-a1d5-494f-9008-2da8cb7f07a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860eb700-20ce-43cb-94b5-e47081c339b1",
        "cursor": {
          "ref": "c74a80f4-f9dc-4a09-8662-715f2e8b390c",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "af8e420b-8909-4aa0-9a2c-b833e85c1518"
        },
        "item": {
          "id": "860eb700-20ce-43cb-94b5-e47081c339b1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "174f2047-72ba-4468-a5fa-aa3650fdc649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae59b04-ca93-4a79-bc25-80026bfa1662",
        "cursor": {
          "ref": "1c7249f7-f9a1-4747-bb47-5aa3be8a41f3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "bf9c58d8-4e65-484a-87fe-ca67b8817d16"
        },
        "item": {
          "id": "7ae59b04-ca93-4a79-bc25-80026bfa1662",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9a5d5f82-b1e2-4292-b33a-2e0ddd63238a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3be550-848b-485d-a847-e3ff4b20955f",
        "cursor": {
          "ref": "977c935c-b4b5-429d-8f24-600e09e44fa6",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d35bade9-48e7-4867-932f-454a33b1e3c9"
        },
        "item": {
          "id": "7d3be550-848b-485d-a847-e3ff4b20955f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "82d06905-4be0-45cd-a82b-d33f7b6dcfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb9d98d-4b30-4dd4-b2ee-de1011b6e5ed",
        "cursor": {
          "ref": "0707a937-1fe5-4734-9700-17bdfcbc780f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "490c83fb-e8b8-490a-b71e-ea5c6d113a18"
        },
        "item": {
          "id": "1cb9d98d-4b30-4dd4-b2ee-de1011b6e5ed",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "28e56939-62d1-411c-be98-47cd227b71ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f442eb6-eec9-4cb4-b92d-ba6e95e2234b",
        "cursor": {
          "ref": "362bb40a-a358-45be-9d2b-a444d790d05c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "18b55c56-94a5-4fe0-8798-13cefd9feefe"
        },
        "item": {
          "id": "5f442eb6-eec9-4cb4-b92d-ba6e95e2234b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a2095e2-42c5-4bf0-9b52-20fde0bb2124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdc469e-3a36-4448-827d-cb77869b246b",
        "cursor": {
          "ref": "799b5c85-e405-46db-b484-aa579b26248d",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ac11147e-c582-4bb2-88b6-ac9c0c013306"
        },
        "item": {
          "id": "4fdc469e-3a36-4448-827d-cb77869b246b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "00d6ce9c-cb73-4060-a6ec-8b6ac3c8ef0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14462488-0d32-424e-acef-d117e28666cb",
        "cursor": {
          "ref": "56e88a1f-4c20-4e1c-af0f-6f461eff1a99",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4633be66-fb32-4db8-835c-1f01303b9080"
        },
        "item": {
          "id": "14462488-0d32-424e-acef-d117e28666cb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "bde5a5ea-804d-480a-ac6d-658b7b711ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b9205a0-68c5-4e54-a010-a498a2a3da42",
        "cursor": {
          "ref": "f09ec1ef-1762-4174-b119-2c75d1958359",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "25879668-9fc1-41f3-bdbb-8a642c372f3a"
        },
        "item": {
          "id": "3b9205a0-68c5-4e54-a010-a498a2a3da42",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "aed75bbc-294a-459d-98f9-fa7e8d7d62e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326eb7b4-dc36-4879-9026-0f1712320f4d",
        "cursor": {
          "ref": "26c2ec3f-b39b-4343-9695-d4453068a32c",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "0a9bc201-a35a-4027-a10c-7cd604ccc2cc"
        },
        "item": {
          "id": "326eb7b4-dc36-4879-9026-0f1712320f4d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "03cd1c1e-f0a9-4368-a608-d68ea3deee4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ce2aa5-306c-4f1f-b34c-4e7650617ff6",
        "cursor": {
          "ref": "e1fbfbc9-ce39-4fe5-bdf5-5eb90c370545",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "214a081a-f39a-4827-a51e-27c4e6682fc2"
        },
        "item": {
          "id": "94ce2aa5-306c-4f1f-b34c-4e7650617ff6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "779c64a6-8297-4d43-b970-e501fb9b3ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "95bb26e2-c1cc-44d8-8553-8c51fa959932",
        "cursor": {
          "ref": "5d181e3e-fea9-4a21-8bae-76d9c7f6c330",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "96d865a4-769a-40a2-a57a-f668b4df497b"
        },
        "item": {
          "id": "95bb26e2-c1cc-44d8-8553-8c51fa959932",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2bcb3644-2455-46b8-a06c-ff35d4573266",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1a3ce3-c081-4915-a6ce-250ac88f3ab4",
        "cursor": {
          "ref": "73a700f3-509c-4a1c-a845-ff596ffba3e6",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3137bdcb-f4c5-4da5-8eac-900e53be5d04"
        },
        "item": {
          "id": "2e1a3ce3-c081-4915-a6ce-250ac88f3ab4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ce328f07-1723-4b32-8026-00a6dde29324",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a389915-cb77-4c84-82b9-a974b3776bcf",
        "cursor": {
          "ref": "1bc8cf3f-89e8-4eee-b0d9-674301755fa2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7e8ab010-b36b-464b-968c-d2d8d5211811"
        },
        "item": {
          "id": "1a389915-cb77-4c84-82b9-a974b3776bcf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "71fab5f2-4c59-4d73-82a3-ddc39b604885",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdebe12-eb66-4493-b5b2-d419b73804c8",
        "cursor": {
          "ref": "11f2ce74-5274-4049-8eaa-5ee594303ba1",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "76293e6a-5a75-402b-8739-14b42890a58b"
        },
        "item": {
          "id": "4fdebe12-eb66-4493-b5b2-d419b73804c8",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5800ef34-ce24-4e00-bc3b-09541acea577",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a39877-7cbf-4484-b056-c5cd71f979d1",
        "cursor": {
          "ref": "96abe0e5-174e-4248-8141-113385ce344a",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cbd25b81-aafe-460c-8088-909aa881b0f7"
        },
        "item": {
          "id": "a6a39877-7cbf-4484-b056-c5cd71f979d1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "85a967f6-9ea9-4c9b-a6f4-5496fdd7bb5f",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-03T00:35:30.629Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-03T00:35:30.629Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "f773bbc5-c840-435b-b114-9a0c64cf11d9",
        "cursor": {
          "ref": "473d0b7f-1b46-42d2-8bc6-4068ee858db7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "fbd0928f-467f-4c83-b0b7-3ffb11b3f50c"
        },
        "item": {
          "id": "f773bbc5-c840-435b-b114-9a0c64cf11d9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c306aa8f-4021-49a2-8040-fa2df0e71763",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f8525f-4ae2-43d3-a43a-b523f5a37a21",
        "cursor": {
          "ref": "6b62052f-d2e8-43d4-8cb6-648cf9112b98",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c104ef6-c58a-48fb-ac69-e2ad9530bafa"
        },
        "item": {
          "id": "87f8525f-4ae2-43d3-a43a-b523f5a37a21",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "46c0a81a-4707-4907-a689-98a7d1b568a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e37553-263e-4d61-a6a7-a27bc080dae0",
        "cursor": {
          "ref": "d7af6309-fbdb-46b0-801c-8054fb8ba63e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2161d3ec-c23a-4891-adae-a908b59255b1"
        },
        "item": {
          "id": "a7e37553-263e-4d61-a6a7-a27bc080dae0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8548545b-59c6-40a0-a89a-82d623943abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949bc472-a299-4054-9843-8623c405b8b1",
        "cursor": {
          "ref": "1f424553-4a7c-44b5-b2bf-b7b6cb455dfd",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8c61f56e-8b35-4a68-9e96-cf86449ca221"
        },
        "item": {
          "id": "949bc472-a299-4054-9843-8623c405b8b1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "445ee209-634c-46d1-a537-7bbdb075aae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e44c84-0549-43eb-a778-5bfbd5b7cd72",
        "cursor": {
          "ref": "ef3e3cbb-83fc-42f9-ac94-afb67572a0eb",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0ad98cd5-676a-4521-85b2-5fddd5f335ea"
        },
        "item": {
          "id": "a3e44c84-0549-43eb-a778-5bfbd5b7cd72",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f036dad1-7389-4a55-8f9c-219ed86fe36c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b449a8-da2a-4f2c-8e77-55c37f07de2d",
        "cursor": {
          "ref": "dd6bd970-2e3f-4e9b-a64d-ebcd02b0e173",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "bee82c1b-a78b-48a1-a939-5dc7bf441bba"
        },
        "item": {
          "id": "68b449a8-da2a-4f2c-8e77-55c37f07de2d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7f2d9ce3-9a80-4d07-8d7d-b9c667470339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306e4850-f42b-433f-a813-3d8219d29c6b",
        "cursor": {
          "ref": "cf481d6f-f004-445c-a974-0117ae8130d8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c5a5a8d9-722d-4170-94d9-0c6a8c715871"
        },
        "item": {
          "id": "306e4850-f42b-433f-a813-3d8219d29c6b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f42e62d3-cec4-4cdc-bb5f-2ed2e04e00f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fb4b45-1c92-4ca9-a2eb-91d49b586bca",
        "cursor": {
          "ref": "25056bb6-2601-455f-a8fc-67bf7e25f121",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4d0c3b48-766b-4853-88ca-ecf495e53f09"
        },
        "item": {
          "id": "86fb4b45-1c92-4ca9-a2eb-91d49b586bca",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e843ea97-2fcc-4487-9d22-1926256c9c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb901af6-278c-4018-88c8-a9f4469c7541",
        "cursor": {
          "ref": "6dbe2a30-6fb2-444b-8b4f-c304b8addb2d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ac18b573-36c3-438a-9278-01f714c1453c"
        },
        "item": {
          "id": "fb901af6-278c-4018-88c8-a9f4469c7541",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "743e1c0f-b790-4e1c-a339-5ec24f599e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8acfd2d-086c-4868-8f00-2d5ad24b2a76",
        "cursor": {
          "ref": "d4939759-1b92-485c-96ed-de1fde4408f7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1e1698ea-a6cb-42c4-8202-d5eab43b0f7b"
        },
        "item": {
          "id": "e8acfd2d-086c-4868-8f00-2d5ad24b2a76",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dab6a05e-f7dd-4b67-a72a-4d5bf23c7c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde1d784-dad2-4253-9d00-4bfc81b869aa",
        "cursor": {
          "ref": "9f6cb80f-3dcd-4312-b5ca-ec45ac2f942f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "899b9706-0335-4395-9bd2-c4c781ac9dd1"
        },
        "item": {
          "id": "dde1d784-dad2-4253-9d00-4bfc81b869aa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f5e32814-e1e3-4d91-acc2-ae89cc6b59cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461f0f06-5ff8-4f83-a69c-da52dbab4880",
        "cursor": {
          "ref": "10c2e35c-6149-417e-90d0-25d28c107a77",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a4a02677-aefd-43d3-8a1f-6f94888276df"
        },
        "item": {
          "id": "461f0f06-5ff8-4f83-a69c-da52dbab4880",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22f12b9b-189b-4493-a44f-73b00e0d7d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d5474cc-d5c8-4754-b441-4537658dee87",
        "cursor": {
          "ref": "81e6c9f0-e907-4875-9a4d-a3573fffdd0a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "97db24a8-bc64-4a60-bd65-02c6efe44415"
        },
        "item": {
          "id": "4d5474cc-d5c8-4754-b441-4537658dee87",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "93d817d3-0710-48d5-96b2-ff9d40adfff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb2e31e-26ea-497c-9e92-9a6e44459ed4",
        "cursor": {
          "ref": "24cc622c-ee26-4038-a4cb-ea294484250f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "94a4fe97-ceee-418b-b970-070024b767fc"
        },
        "item": {
          "id": "ffb2e31e-26ea-497c-9e92-9a6e44459ed4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "04fd0fe8-7881-4d1f-b7fd-343a11a78ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0126ff0-38a0-4245-89c7-ef70bc929cf3",
        "cursor": {
          "ref": "5893ad6e-c341-4064-bfef-e8fd023714f1",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7e2e9378-3de0-4bec-be65-90c7c532cd82"
        },
        "item": {
          "id": "a0126ff0-38a0-4245-89c7-ef70bc929cf3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "68918829-cbfd-46c2-846b-05a2a24b962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1677b539-8f37-45c2-be8f-623db03adfb9",
        "cursor": {
          "ref": "89c9f282-f8cf-4030-85d4-dcafefbe7f93",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "941306c5-ffba-45e1-b120-d6ce71ff9be6"
        },
        "item": {
          "id": "1677b539-8f37-45c2-be8f-623db03adfb9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0c25b08d-a724-4200-8ca3-4f7df68fbd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d817eb2-4841-42bb-a796-d524a200ec40",
        "cursor": {
          "ref": "1b99c2f9-621a-4c12-8465-cd0f36ae72ef",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "291181a3-56d0-474f-9d4b-90c3589d5cec"
        },
        "item": {
          "id": "5d817eb2-4841-42bb-a796-d524a200ec40",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d8dccd22-d4da-4b4e-9682-50d11efd5299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81c64ac-7bfe-4d83-a3f6-01b08f45f95e",
        "cursor": {
          "ref": "3403c20e-633e-4eb5-8f46-4479921308e7",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a39ac523-bbbc-4940-a08e-e3b7a41dbdce"
        },
        "item": {
          "id": "c81c64ac-7bfe-4d83-a3f6-01b08f45f95e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "811f2880-4c44-4a3f-ab02-174d52198d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03250c22-50a7-425c-bde4-536ced2e19fc",
        "cursor": {
          "ref": "814b01e3-468e-4932-a246-8825623da377",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c3655048-ee48-4b13-a89b-cc19eb0e38c3"
        },
        "item": {
          "id": "03250c22-50a7-425c-bde4-536ced2e19fc",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "116e0a10-487e-4c94-bd03-46ed4357ce0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846a4b18-f104-43db-929f-9bab30e0521b",
        "cursor": {
          "ref": "7f805da4-30af-48cc-ab7f-578e3745ad2e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3dbd8f10-77ea-4270-858b-f87bf17b456a"
        },
        "item": {
          "id": "846a4b18-f104-43db-929f-9bab30e0521b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "be8a003a-fda9-45ab-99b1-d01698dc70d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc021ea5-946b-4dfc-9a12-5e2ea88d8fc3",
        "cursor": {
          "ref": "a5a51445-5af8-44ad-81a6-37d38780bb66",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4bfaa291-26f5-421e-a4d8-5c62437417a6"
        },
        "item": {
          "id": "fc021ea5-946b-4dfc-9a12-5e2ea88d8fc3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b3dc7f28-a9d9-4bd6-93e9-f5e3b95b7313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7cf9b0-287d-47d0-90fc-6add22671211",
        "cursor": {
          "ref": "6f0cb8d4-74bb-4689-825b-23023caab777",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "533eca18-e5ff-47be-93a7-7b24c51ef2ef"
        },
        "item": {
          "id": "4a7cf9b0-287d-47d0-90fc-6add22671211",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9838e6b0-9493-4f2b-8687-6d93f83088d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0c1825-891b-4e1b-9e2d-6c62582a8a66",
        "cursor": {
          "ref": "3dbb488e-2611-4246-948f-99e6809f9d43",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "46c96b9a-309c-41f0-bb6a-54488415a26c"
        },
        "item": {
          "id": "6c0c1825-891b-4e1b-9e2d-6c62582a8a66",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7dd710f7-4a0d-40c6-adc9-113c0000cad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "102d5972-579d-4780-ba12-0aa73a327cc7",
        "cursor": {
          "ref": "e5032b51-6656-4e16-b1e2-4cf828fa8e53",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "59a8b0da-8056-468f-8f65-3693b9545135"
        },
        "item": {
          "id": "102d5972-579d-4780-ba12-0aa73a327cc7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a1c0c960-8609-4e05-bc17-1e3daafc337e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbf953f4-8957-4e1f-b52b-5123cd4b5e42",
        "cursor": {
          "ref": "bfb06ce7-e364-4423-9ef7-a48daa46953f",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "34a6dc7a-c51e-491e-9e1d-e62c203d34be"
        },
        "item": {
          "id": "fbf953f4-8957-4e1f-b52b-5123cd4b5e42",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "21d48441-28ac-4d9c-9999-68207a6f7ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f576bcad-b568-406b-8dc0-0fd80769b1de",
        "cursor": {
          "ref": "4b85d776-04be-4d09-803f-63dbb09c6cf5",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "edc8478c-f550-485d-abf3-37edc86165ab"
        },
        "item": {
          "id": "f576bcad-b568-406b-8dc0-0fd80769b1de",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8bd42734-4c9e-4922-8adc-8e151599de0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82606d16-7517-4cf8-9bba-4d2799df4ce5",
        "cursor": {
          "ref": "b071f8c7-1e25-4b1c-9648-568b3ecfa489",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9d3c859f-58eb-4592-a395-d65ab469f8ff"
        },
        "item": {
          "id": "82606d16-7517-4cf8-9bba-4d2799df4ce5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f13ff06d-867a-4832-9b5f-223da9dc2bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88786a80-2656-4e7d-8e8a-e8250868ec62",
        "cursor": {
          "ref": "5f2b07c5-29b3-4d8a-a4ab-317d54469205",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "85066e5b-311b-485a-a562-c5c9025fc3e9"
        },
        "item": {
          "id": "88786a80-2656-4e7d-8e8a-e8250868ec62",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4219af68-ae33-43fe-9e3f-91f5efba1d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa7489b-4486-4808-945f-27a1f3a01ed6",
        "cursor": {
          "ref": "226d0a3c-3ab8-44aa-8696-8116b1952b70",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9dc3a9b1-0d32-48d8-a170-fd4b56e5479c"
        },
        "item": {
          "id": "2aa7489b-4486-4808-945f-27a1f3a01ed6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c040d447-159a-405c-802e-faa2181fea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a3f8bf-bc7f-4d73-acdf-402a4b227945",
        "cursor": {
          "ref": "55a9364f-4188-4194-935f-938e5b812186",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "76c7ecc3-2d40-4e56-b0eb-9f03b6746d9a"
        },
        "item": {
          "id": "03a3f8bf-bc7f-4d73-acdf-402a4b227945",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "aa3c4a21-60ba-48c6-894c-b05e63468be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5642f5c9-56ca-4e2c-9000-d3fcf99f55f1",
        "cursor": {
          "ref": "86d3358b-7c2f-4639-b0a5-47774aa2dc10",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6eaa4d3a-6525-4306-a959-d40477558e0c"
        },
        "item": {
          "id": "5642f5c9-56ca-4e2c-9000-d3fcf99f55f1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d467bcc0-25a2-4614-b2f3-715017faf7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98893617-9052-4989-b27e-b0b80959f24c",
        "cursor": {
          "ref": "ddc0e269-08be-4865-9c4d-f7c311eefb8b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "72bfc201-9330-4177-a39f-c497d5f4a82c"
        },
        "item": {
          "id": "98893617-9052-4989-b27e-b0b80959f24c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "48d26577-4140-4f95-9cf8-b864949a697e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2f696b-fb03-4790-811d-bc2e9156a23e",
        "cursor": {
          "ref": "396c28c2-23c1-4ae6-b406-c965a9ee1fc3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7b111b9e-920d-48db-ab09-ce968f6ed4d7"
        },
        "item": {
          "id": "cc2f696b-fb03-4790-811d-bc2e9156a23e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4c257244-29a9-487d-8324-30dcba2c2b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9936db8d-e317-4296-b575-60f08b9b991f",
        "cursor": {
          "ref": "2ef93d4b-8c37-4e6e-ab9a-7d63f3a48da7",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1a404544-3b92-4fc5-bebf-a07d4a9d6976"
        },
        "item": {
          "id": "9936db8d-e317-4296-b575-60f08b9b991f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f45c6e53-1d71-4e7f-8323-952c6621fdcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e08c30-10af-4628-8169-5ada86606600",
        "cursor": {
          "ref": "5223ec64-bd93-4a91-ad74-42170bf014fd",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "65590466-2e15-4acf-81eb-09118b68267e"
        },
        "item": {
          "id": "10e08c30-10af-4628-8169-5ada86606600",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1982f419-aa9c-4297-8023-3628443d0e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f8c62f-c7fb-43aa-bc3d-d5fe3afc3ce3",
        "cursor": {
          "ref": "c5e2df6f-33d2-4c2c-a56f-41d7871a53c4",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "85b2be28-8c7a-4a31-b9cd-cf9da4350c94"
        },
        "item": {
          "id": "18f8c62f-c7fb-43aa-bc3d-d5fe3afc3ce3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "977d576a-14df-43b6-adfd-80e81700726b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10ef6480-97be-4afb-8e2c-6854d01a295b",
        "cursor": {
          "ref": "03dd4234-9422-4540-a65e-b13bb8473f08",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f940dddd-c93a-4cc0-b0be-723aaa99b2ca"
        },
        "item": {
          "id": "10ef6480-97be-4afb-8e2c-6854d01a295b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d94750ec-5ca2-4112-9341-f502ef21d666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1540793f-012f-4016-98c1-46dc027adc9e",
        "cursor": {
          "ref": "709831f2-1f35-47b5-b448-52c524646ff8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "2d7b2daa-a837-4694-b4a2-52c9c7ae5b9f"
        },
        "item": {
          "id": "1540793f-012f-4016-98c1-46dc027adc9e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b1b8fc03-23b2-4d23-b1ce-c6f4c60939f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2685ad83-3c0e-45f9-8f33-97540f0ff5b0",
        "cursor": {
          "ref": "66820a16-b82c-4a34-b28b-cba1977654c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "038ded48-8eb6-4f81-a51a-337ab25be293"
        },
        "item": {
          "id": "2685ad83-3c0e-45f9-8f33-97540f0ff5b0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "950de830-7cdc-448b-bc04-e776a9b29422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69d70c6-71f4-4de3-b7a0-233c802d29d6",
        "cursor": {
          "ref": "29e01061-4c43-4883-8227-12a0d794485a",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f2a7542b-0c6c-441c-815b-7b7c861ffa7b"
        },
        "item": {
          "id": "a69d70c6-71f4-4de3-b7a0-233c802d29d6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b2784d0a-1905-454d-b703-9e931e939e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274f2929-4f2a-4aac-a32d-a00d6215be39",
        "cursor": {
          "ref": "f47a5a52-2da6-44ec-a029-da32a36641c5",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c4068b81-e3cf-4160-b16e-5894a3bbecd4"
        },
        "item": {
          "id": "274f2929-4f2a-4aac-a32d-a00d6215be39",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "784cced7-a989-4025-8006-aa538bde23df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c186c83f-e65e-4b82-9c02-e039c72ecc22",
        "cursor": {
          "ref": "7c47e25d-f33c-49aa-af38-80fd5bb2eef1",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dbb141f1-8e85-4eac-91b2-7264f7fbaa4c"
        },
        "item": {
          "id": "c186c83f-e65e-4b82-9c02-e039c72ecc22",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "13f1e7eb-1e1b-479d-a01a-ccc23306017f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e153caf-9508-4858-be0a-0c508ad06a94",
        "cursor": {
          "ref": "34a44daa-e4ac-4287-b1ef-4cd985454c2d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ad14bf5f-cb0c-424b-b63f-ce30cfc3cce9"
        },
        "item": {
          "id": "7e153caf-9508-4858-be0a-0c508ad06a94",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "82c21302-c47e-464f-853f-4b72bbf874b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ca5616-7dc8-4977-a548-324f61530300",
        "cursor": {
          "ref": "5270a491-a013-498d-9829-c6d42d4f0221",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "49c35c89-096b-4625-9db9-f0ed4c795e86"
        },
        "item": {
          "id": "b0ca5616-7dc8-4977-a548-324f61530300",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1dac662e-5759-4dc8-896b-5a8e72a86fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e7c0dd-eca0-4486-a133-ddfdce3f694d",
        "cursor": {
          "ref": "9a580743-7a45-4894-8284-7378761b7d62",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "543df176-2ad8-418b-88c1-fd551b69cb41"
        },
        "item": {
          "id": "33e7c0dd-eca0-4486-a133-ddfdce3f694d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99256eb4-f84c-4d79-a02c-dc289cc9ab01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2f3054-ea83-48c5-919f-62786cc41835",
        "cursor": {
          "ref": "51e5cb01-54bf-4016-bd8c-dbb66b0540d1",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b2328111-8e8a-4d33-b303-e59c653ef995"
        },
        "item": {
          "id": "9b2f3054-ea83-48c5-919f-62786cc41835",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "126c8744-c64b-4be1-b350-e4819ab7c163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0128180-81c8-4697-9e8e-ec48c27e67ed",
        "cursor": {
          "ref": "af64877b-f764-4ff5-a657-a0ef7272142d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c85248be-7282-4dc6-a50e-348adcc28f93"
        },
        "item": {
          "id": "b0128180-81c8-4697-9e8e-ec48c27e67ed",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dc5532c6-ef30-4d71-8179-effcb250f6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1bad18-757e-43d2-99aa-bdbdf4630f74",
        "cursor": {
          "ref": "f3d8b22a-3907-4e7d-99a2-52ebb0a9a07b",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b7182af5-0c7e-4b34-a09d-e839ff91dbe3"
        },
        "item": {
          "id": "ec1bad18-757e-43d2-99aa-bdbdf4630f74",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c98147d7-b90e-4674-9368-b8c9eeb377c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1a2a2b-144f-49de-99f6-7026d77a6109",
        "cursor": {
          "ref": "b3770d48-0c99-4a7f-9630-6620013128f5",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "9282cacf-2acb-4e0a-948d-79112186392f"
        },
        "item": {
          "id": "dd1a2a2b-144f-49de-99f6-7026d77a6109",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b1562403-381c-4d01-add9-98bad5a2d0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6050a8cd-08bc-4ded-950c-b640f4e35457",
        "cursor": {
          "ref": "347c1772-36a0-4abd-b98b-99a580901581",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ce3fbde7-35f1-46b0-b028-f5f7513ffe94"
        },
        "item": {
          "id": "6050a8cd-08bc-4ded-950c-b640f4e35457",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "cb276e1f-0343-46b7-8ef4-1d4e7569be88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733e84bd-c884-4f6a-9a4d-fb652795582f",
        "cursor": {
          "ref": "c02a7137-b696-4f3c-9031-d79db62b8be5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3acaa4d6-81cf-4681-ac9d-852727643f4f"
        },
        "item": {
          "id": "733e84bd-c884-4f6a-9a4d-fb652795582f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bdd08bbc-f4f3-45d0-9ec4-659d007695e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2cf51c-82de-42af-8b90-e2b72526223f",
        "cursor": {
          "ref": "ad88e37d-8be2-486f-a2ac-cf6a82093abd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "dfa71889-2690-4828-91de-77faae1e7044"
        },
        "item": {
          "id": "1d2cf51c-82de-42af-8b90-e2b72526223f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "57f81a17-9676-43d5-bcbb-a15b6f9003c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4a2c44-13fe-4258-aaae-7235c3582a4a",
        "cursor": {
          "ref": "737d607b-598d-481c-8970-7b8bcb1995d6",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "96c2326f-a0c0-4aac-aba2-94bdfc87981c"
        },
        "item": {
          "id": "ec4a2c44-13fe-4258-aaae-7235c3582a4a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e5c51689-bdbd-44c2-ba81-3ae4b1144444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42881d47-cf10-467c-ba70-2e5afbb21be6",
        "cursor": {
          "ref": "fd2d3a7a-6053-40ce-869e-99394b9a7ec8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4065d298-73ba-4e24-bc97-32bae1186a5a"
        },
        "item": {
          "id": "42881d47-cf10-467c-ba70-2e5afbb21be6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "152f51bc-82a0-4503-ac76-5530c648ede5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887bb9d3-2721-4c93-8b3e-cd2d4f4a91f5",
        "cursor": {
          "ref": "e241c375-dbe1-4393-b032-fa07860bccc5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7df3b9b8-306c-4d4a-9167-2b7e5a760304"
        },
        "item": {
          "id": "887bb9d3-2721-4c93-8b3e-cd2d4f4a91f5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf7f6b74-4397-41c6-8366-a5295ac05da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae2d1e8-0e93-4967-812a-3aea2d719287",
        "cursor": {
          "ref": "ae5867a1-8174-4046-bc85-d31c0deaf293",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1722c8d7-b87d-41c5-851d-8374e5eabb9d"
        },
        "item": {
          "id": "4ae2d1e8-0e93-4967-812a-3aea2d719287",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5f4c55b6-8c26-4ca3-82ee-2b22c85a6278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9028520-4bd3-44d8-adab-9d5d3704ba02",
        "cursor": {
          "ref": "b9b01fd8-6d91-445b-9db9-d80cce1953a3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "094e3e83-4fc5-43b5-bafc-9feb6a73840b"
        },
        "item": {
          "id": "c9028520-4bd3-44d8-adab-9d5d3704ba02",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "256bb91b-00fe-4f6b-9807-fcdcd27baa6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd8cde9-b455-4019-b011-be851ff27031",
        "cursor": {
          "ref": "c6b649f2-3383-4712-943b-9d6afd471d9e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5faa9dd0-2b7c-4647-a460-28c668f18df4"
        },
        "item": {
          "id": "0dd8cde9-b455-4019-b011-be851ff27031",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8fed3640-4744-4e2a-82ef-9e70d10b3972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bcb710-c889-4462-b565-efc9ffa74e78",
        "cursor": {
          "ref": "b7230262-1290-4016-8c6a-ec3dc62a2c53",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "1c05c7d2-82b2-4b7d-988c-bd6ad338876b"
        },
        "item": {
          "id": "52bcb710-c889-4462-b565-efc9ffa74e78",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a1119ad5-3bb2-4459-8313-fd711d6e9d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e3d868-3e4b-4eb5-bbd6-23a166746dac",
        "cursor": {
          "ref": "4e7e2173-2273-408d-8a0b-c13a9d89f63b",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "f88d2e72-8f61-4421-8324-2b4e6a1339b1"
        },
        "item": {
          "id": "b0e3d868-3e4b-4eb5-bbd6-23a166746dac",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "55c5eb03-30ca-408e-8131-f0836d58d660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b1a2c8-a0fd-4edf-8051-64f0791bf0d2",
        "cursor": {
          "ref": "60e8460d-d203-4977-b101-957aaa1da1f4",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "10693897-edbf-4507-b160-406fbdff8193"
        },
        "item": {
          "id": "60b1a2c8-a0fd-4edf-8051-64f0791bf0d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c95da8be-c38e-46c1-9c9c-793684754c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a94ce4b-a9f8-491e-baeb-a636c64ac3da",
        "cursor": {
          "ref": "bb76582d-7fb3-4b85-87b2-5b392f64cac0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "07391a7b-f153-4957-8db4-622722e2abe5"
        },
        "item": {
          "id": "9a94ce4b-a9f8-491e-baeb-a636c64ac3da",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "517250b2-376a-4939-a0e9-3dbc87fe40d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad239f4-a7f3-47ac-906f-a13c6471f26d",
        "cursor": {
          "ref": "89003c4b-199a-4dcb-99fe-419b6f81cfb2",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c6498724-feb8-47d7-b46b-82e722f5f51a"
        },
        "item": {
          "id": "5ad239f4-a7f3-47ac-906f-a13c6471f26d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5146b2b2-1f51-4c6e-9d7b-d3172f627ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b421f2-f9e6-4289-b10d-500006bbb02d",
        "cursor": {
          "ref": "76d201c2-500a-422a-84a7-aa57038951e3",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e210a434-4516-4a18-9fc0-2ba497760708"
        },
        "item": {
          "id": "a2b421f2-f9e6-4289-b10d-500006bbb02d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "660145bb-3d46-47b3-b3a6-c5121c1ada21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d29b4f-acbc-474c-938a-bd13a967a1ac",
        "cursor": {
          "ref": "4809ef5c-0bd0-4b22-99c4-8a4305dfa9dd",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ab68e079-821f-4b2b-9da6-60bda0eb7ee7"
        },
        "item": {
          "id": "69d29b4f-acbc-474c-938a-bd13a967a1ac",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "fa70e2ec-b190-4adc-88ca-483cb4b41059",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b029b4-7c9a-46e9-87fc-842d09d15c99",
        "cursor": {
          "ref": "3d33cda5-0cbc-4794-83a6-442a832e6b54",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "29a0649b-fa42-4046-86f1-ea468b485657"
        },
        "item": {
          "id": "a6b029b4-7c9a-46e9-87fc-842d09d15c99",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "f6cac586-1c4e-4d9f-895c-08c323f13465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a39a517-b5aa-4be6-8037-580cd9a2c8f1",
        "cursor": {
          "ref": "5ae20d27-8dee-4a3a-b99a-3e603a7544d2",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5be98990-c2ca-419a-b8fd-f0f2336e875f"
        },
        "item": {
          "id": "6a39a517-b5aa-4be6-8037-580cd9a2c8f1",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8ef747e4-9dc1-4f9e-8a19-99f9b9e6b230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bede4481-689a-4ef6-bf5b-e8c128aec168",
        "cursor": {
          "ref": "69231f33-fe47-4937-9044-ed5a05c6813b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "48716017-b7e6-4bc8-a8aa-34431462b9eb"
        },
        "item": {
          "id": "bede4481-689a-4ef6-bf5b-e8c128aec168",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "701fc49e-330c-493d-ae94-7ba695c2fc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a478580d-46c3-43e3-b8d8-c606d733da25",
        "cursor": {
          "ref": "ae148f19-6e82-479d-ab45-02180c189fea",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e2f4c483-f513-4a50-9766-d04abd64801d"
        },
        "item": {
          "id": "a478580d-46c3-43e3-b8d8-c606d733da25",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "96448154-9ff7-4377-bebd-9d56e4a0930f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0a60bd-bb5f-4593-885a-a5b3e0d26932",
        "cursor": {
          "ref": "bbc71686-15e5-430e-a389-dbb5e6bf6979",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "65c1cf69-d741-4ad6-9ae3-92b7883ea223"
        },
        "item": {
          "id": "8a0a60bd-bb5f-4593-885a-a5b3e0d26932",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "bc672402-4f17-4710-81c2-05ffa532dc92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ac32316-aaa0-4d21-83e6-60b9daae811b",
        "cursor": {
          "ref": "d492c960-fc43-43b3-abba-a1421f44c4e8",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "0864524f-652b-474b-b54c-e39215ae55e4"
        },
        "item": {
          "id": "4ac32316-aaa0-4d21-83e6-60b9daae811b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3b398a9b-a7fc-4953-b900-5cfad6694b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f364eb85-e118-4ed4-991d-ede00deb117a",
        "cursor": {
          "ref": "bc500d90-34ed-41e0-97af-8c9f8593a6fe",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "eb862834-5e3f-4061-bf1b-776a5f3572de"
        },
        "item": {
          "id": "f364eb85-e118-4ed4-991d-ede00deb117a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "071246d3-72dc-4f01-b68c-d3288a0586e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6097543a-c72a-4502-a085-7bd4e38082ef",
        "cursor": {
          "ref": "b88285c6-9638-4461-b623-9d3911832813",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7d0f6784-10fe-4189-83d8-08cc473c626a"
        },
        "item": {
          "id": "6097543a-c72a-4502-a085-7bd4e38082ef",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ee40ca2f-60b1-4b1b-9757-96adc11d7225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3541aca-3096-4566-a115-3bedcfdd728d",
        "cursor": {
          "ref": "fa91cd6d-f96a-498a-b8d4-0be287f07592",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "41145d11-9d39-491e-9f6a-4d61d0f866ef"
        },
        "item": {
          "id": "b3541aca-3096-4566-a115-3bedcfdd728d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "38172790-dfc6-4eee-80fb-ba1248974f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c18bd19-7576-4fc6-ae51-8b85fef33bcc",
        "cursor": {
          "ref": "54392f05-03b4-4a42-ac8e-d25cff7e8c0e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7c7201de-3d51-484a-91cc-14128b0aafac"
        },
        "item": {
          "id": "1c18bd19-7576-4fc6-ae51-8b85fef33bcc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9bd34988-e88a-4cae-96b3-d62ee5d1dfa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263c82eb-64ef-4205-a69d-c67e9530d5fc",
        "cursor": {
          "ref": "83f1ee07-41fe-44ae-a219-3ce9b7d4842d",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "136cbd92-81f5-4bad-b5a3-e30cbdaf6885"
        },
        "item": {
          "id": "263c82eb-64ef-4205-a69d-c67e9530d5fc",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ee679c58-fecf-4c80-b88c-15ae7c1401c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5f19b9-5b6a-467e-b2e0-b9bb9f3dea8c",
        "cursor": {
          "ref": "2cee6ba9-fd6c-4a90-a7d4-133b8db94970",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d04faeed-93db-431e-9bcd-49dc1c911067"
        },
        "item": {
          "id": "9e5f19b9-5b6a-467e-b2e0-b9bb9f3dea8c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "37f749a1-7863-4269-a551-c98620c19fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6094de9f-cd1b-48bf-8f1e-b18aba735ef2",
        "cursor": {
          "ref": "af8ee3c7-44b3-47cf-82a9-71f0b62b3297",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b6eee8c3-22fb-40f6-9330-d869bedb2b83"
        },
        "item": {
          "id": "6094de9f-cd1b-48bf-8f1e-b18aba735ef2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a5162657-69cd-4069-895f-e53d2009dee8",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a5184642-aeda-4688-b788-423657d5e5f6",
        "cursor": {
          "ref": "0a671dc7-9765-4080-8899-89fc578492df",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ccd29d1d-6ebd-4b56-9099-bf937de4d4ec"
        },
        "item": {
          "id": "a5184642-aeda-4688-b788-423657d5e5f6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9461a799-c82d-4ed5-81c3-de1d68dd2cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d74969df-f915-4ad8-aca1-53b371d70567",
        "cursor": {
          "ref": "85c27741-5723-4b3f-9a12-3a1f438c66bc",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cc7e4045-cdb3-4e2f-85e2-a1bd913eabba"
        },
        "item": {
          "id": "d74969df-f915-4ad8-aca1-53b371d70567",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8532e1bd-555c-4482-9297-57758f15cb8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cc47387-89e8-431d-b35a-0842f99013fa",
        "cursor": {
          "ref": "808f685b-88d0-4f70-b257-e701b33e5acc",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bbc4316d-3b49-4a5e-a3cf-3f2d0470e5cd"
        },
        "item": {
          "id": "4cc47387-89e8-431d-b35a-0842f99013fa",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d3d739f7-a555-42a5-8248-c7360d878fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fdfb74-74a8-485c-90aa-d59fadc7bacd",
        "cursor": {
          "ref": "14df7839-642c-486b-8b75-f36d7d9caae3",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aeb13d7c-a26f-4d37-9313-5c0d9af044f5"
        },
        "item": {
          "id": "10fdfb74-74a8-485c-90aa-d59fadc7bacd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "24349cdd-d31a-4e9c-93fc-c92fada921ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c348cf90-eb0b-43d8-b1b4-24ea0fb17a68",
        "cursor": {
          "ref": "effeb3f6-2c5f-4627-b492-78f035eebea2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "36bac0d2-8964-46a7-975a-127ad309ae5d"
        },
        "item": {
          "id": "c348cf90-eb0b-43d8-b1b4-24ea0fb17a68",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d9427a74-4e7c-4001-8b59-e6b4a4fc6aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c5fbcc-4681-4893-8482-89aa4d30ea1a",
        "cursor": {
          "ref": "ebe0ba86-0862-44bf-a497-a9ffa0b57294",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bdd7affd-b9b7-4459-bfdd-377bd0926c07"
        },
        "item": {
          "id": "20c5fbcc-4681-4893-8482-89aa4d30ea1a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6ae42097-519a-4839-a807-71a66443fb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2577caa-b91a-48bd-baf7-101b3a1ef958",
        "cursor": {
          "ref": "c8c283a2-0997-4140-a6b2-742a870f36ea",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "acd6b787-c690-4d07-83b3-5d7366434bc4"
        },
        "item": {
          "id": "b2577caa-b91a-48bd-baf7-101b3a1ef958",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d0dc06ae-f83e-457c-9dca-89bbf16443c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cefcd8a-cceb-4f56-80b4-f03563b60035",
        "cursor": {
          "ref": "c2f96f7e-bd72-4ff4-8f36-ebcaf274de3e",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5206143f-6fe4-41cb-8ab0-45c58715bccb"
        },
        "item": {
          "id": "3cefcd8a-cceb-4f56-80b4-f03563b60035",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "acb7ba25-b1d0-4e2a-809f-5e468ed3813b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9285c65-4e37-49ac-94cb-c4216f8941ab",
        "cursor": {
          "ref": "ef2e2f3f-ee55-451b-ba65-9f14b5ee034f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d534516e-77d2-4d9a-9287-9f75c8d6c9e6"
        },
        "item": {
          "id": "d9285c65-4e37-49ac-94cb-c4216f8941ab",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "57b5ff2e-62eb-48c2-b7b4-ee6370344f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7be2bf1-9962-484a-9e88-31172f8d3ae6",
        "cursor": {
          "ref": "e4734aae-cfc0-4d38-83f8-d3fb5fa91235",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f2bda2e4-6e91-48a5-a94b-6e0ab07fb588"
        },
        "item": {
          "id": "f7be2bf1-9962-484a-9e88-31172f8d3ae6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6a947af2-c826-4219-b636-fd1877525a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3117f87b-8642-470e-afdb-9e18e9560898",
        "cursor": {
          "ref": "6cedc361-a4cb-484f-8d81-ab41d6e36c32",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3c20b9bc-6fa7-4c29-892a-f0787898201b"
        },
        "item": {
          "id": "3117f87b-8642-470e-afdb-9e18e9560898",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3d129147-f580-4ddb-b6ef-9a738b9f943d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff0e4f1e-9d12-481e-b96b-ab5a809768a5",
        "cursor": {
          "ref": "8c9d271e-201e-4856-8142-84d29787f2b1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a454e198-2ae0-4472-b08c-a681dc551a42"
        },
        "item": {
          "id": "ff0e4f1e-9d12-481e-b96b-ab5a809768a5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c362f0b2-9128-4ccc-a381-61e99e7cf60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d5cbb7-408b-49a4-81e1-f9838b5a9e66",
        "cursor": {
          "ref": "b0e169df-b14b-4831-90d6-18fccfbb2beb",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8bba8867-7179-4425-bd89-c19ae386ef10"
        },
        "item": {
          "id": "32d5cbb7-408b-49a4-81e1-f9838b5a9e66",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "dceac9dd-4a8b-4be9-a857-fbe2111f9d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e56e9a-a731-4b8e-b22a-49dc145f5609",
        "cursor": {
          "ref": "9cd4ebb0-b4b7-4274-bfa7-998626a766a0",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2d98fbe2-2402-4e34-9e87-2ce5777db3aa"
        },
        "item": {
          "id": "37e56e9a-a731-4b8e-b22a-49dc145f5609",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "60004ef5-06f4-415e-a811-48735efedc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001d1f08-905c-4a25-883d-7bc6ceecee0c",
        "cursor": {
          "ref": "77d21b56-a179-4110-9a75-890cdf338a16",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "cd79d2dc-68af-4628-9f88-65872942d612"
        },
        "item": {
          "id": "001d1f08-905c-4a25-883d-7bc6ceecee0c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1fa41469-66c7-4087-aa53-dc5125c8c423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c14286-9a6e-4073-b99f-efd0760720c0",
        "cursor": {
          "ref": "8ff87648-984a-4fef-99f9-c7c71e5ac66c",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8da5341a-1f10-448d-93a2-49176d3c5a34"
        },
        "item": {
          "id": "91c14286-9a6e-4073-b99f-efd0760720c0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "971e5422-a886-4325-9d0f-144fff007434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a471823-ff32-460a-bf27-1ca0174869af",
        "cursor": {
          "ref": "6bf2ceba-102b-4833-b67c-a7fc02007126",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7f5cf740-29b9-4904-a37e-a1d390e0e986"
        },
        "item": {
          "id": "7a471823-ff32-460a-bf27-1ca0174869af",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "132464a2-62ba-48db-a106-6f1013cab205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f928a0-b7c5-418c-91a3-2bd2445ae10f",
        "cursor": {
          "ref": "4477cfd2-ddae-4a40-8923-c788c931d883",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "755492a1-3111-4464-8351-d66886f2512a"
        },
        "item": {
          "id": "75f928a0-b7c5-418c-91a3-2bd2445ae10f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7d2b4df5-e59d-4a86-abbe-731b8e62e1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4223cf02-5e76-4dfa-be88-59a7d26ec6ed",
        "cursor": {
          "ref": "67806f9a-84ce-433c-9a6e-5c41a4c55244",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "bcb7c78f-7df1-49f0-a586-2ea3029c13e8"
        },
        "item": {
          "id": "4223cf02-5e76-4dfa-be88-59a7d26ec6ed",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cf08f02a-7a62-4632-8d76-0e203b6c0dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aac09498-9a0c-4114-b0ee-231ec40f163e",
        "cursor": {
          "ref": "4587e9e3-715b-442f-ad2a-15742feec579",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "8a7fc1aa-7284-48f2-af06-d6a9fb01a1f8"
        },
        "item": {
          "id": "aac09498-9a0c-4114-b0ee-231ec40f163e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "22036445-a85b-44ee-a43e-c1db0e8ae11d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595a0b74-fb7d-4eb4-8ec6-c00aee57c13a",
        "cursor": {
          "ref": "ee67547e-ea2f-401d-a1ad-cd98e565a309",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1978eb96-a108-4901-8128-df2fb09f7e76"
        },
        "item": {
          "id": "595a0b74-fb7d-4eb4-8ec6-c00aee57c13a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1f7f03dd-4864-4a60-9e91-e8d63d787fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dd677f-37ea-4142-a4db-2b307d0e20fd",
        "cursor": {
          "ref": "fa5863c9-5cb6-4d64-931c-83cff85acb1c",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8fb27c45-6a0e-4516-b8e7-23ff972921dd"
        },
        "item": {
          "id": "48dd677f-37ea-4142-a4db-2b307d0e20fd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b935ce07-bdf3-43c5-bd5e-e2f64bd615e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ede1ed-9134-4c1d-81c8-57fd6b1f63fe",
        "cursor": {
          "ref": "c1f07b6a-4f94-4b01-8506-c3f2b0cf777b",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "3e24f39b-2598-416b-9993-042a99dc8854"
        },
        "item": {
          "id": "95ede1ed-9134-4c1d-81c8-57fd6b1f63fe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1e81d71c-9ca9-4490-9854-57bd534f2be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9080135b-6bc0-4e49-b386-be2fe3be228f",
        "cursor": {
          "ref": "ae6f79a6-05a7-4d78-9828-04eeda717471",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "faa5ee40-4e53-400c-8867-752d85ea587d"
        },
        "item": {
          "id": "9080135b-6bc0-4e49-b386-be2fe3be228f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ed16005c-8e2f-4bca-b2d1-8bb266bb86ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba0e116-4483-4edd-a84d-6d21f89f02fa",
        "cursor": {
          "ref": "d093ab47-8125-441a-a1ff-d7d1f12977a9",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d9e84d0f-4172-4fd1-85f0-ae7148ac5c08"
        },
        "item": {
          "id": "4ba0e116-4483-4edd-a84d-6d21f89f02fa",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "91eb2297-f4be-40ff-825c-21c10c625187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3789c3ae-689a-47d0-a1a8-0108739efb16",
        "cursor": {
          "ref": "c1307165-47b4-4a5a-8732-30217cd8e091",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2da2778f-3bfc-49e1-b916-907e52e3da47"
        },
        "item": {
          "id": "3789c3ae-689a-47d0-a1a8-0108739efb16",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f16170a6-6379-4b38-a6bc-d3d9207a8ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9949e2-ba26-411a-b2fc-0ba70019a90f",
        "cursor": {
          "ref": "553815fd-d428-4b22-a087-eaeee56affdd",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0549d05c-25a2-403b-bace-606b6cc35000"
        },
        "item": {
          "id": "6e9949e2-ba26-411a-b2fc-0ba70019a90f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a729a55b-a646-4816-bb55-1c6af7da9e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55e47076-f1b9-4394-8d18-b4f73f5de560",
        "cursor": {
          "ref": "776dce5f-48ee-4387-91ba-f95b7ee27b18",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0d9124aa-dbe6-4c0c-b981-ca6d8ea62b74"
        },
        "item": {
          "id": "55e47076-f1b9-4394-8d18-b4f73f5de560",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ef0b86f4-bd2d-4392-a7b6-98900474eac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f29a703-3d8a-4eb0-b007-8f4f0ab75f0a",
        "cursor": {
          "ref": "c07c7ed0-f78b-4c7a-9544-e7bfb334adc9",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "45811b52-f8bc-4f24-99d9-9e241bd7bc55"
        },
        "item": {
          "id": "4f29a703-3d8a-4eb0-b007-8f4f0ab75f0a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "09afb83f-f00c-40a1-81b1-8a75a5f33441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20788ada-9b3e-4fa9-9fa8-c0c5460af54b",
        "cursor": {
          "ref": "46aac71d-82f3-440a-add0-bb67f4193a19",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0da5ab38-2715-441a-8c65-71a14052a085"
        },
        "item": {
          "id": "20788ada-9b3e-4fa9-9fa8-c0c5460af54b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f95e61a-04be-4577-9b2f-17e571ac7372",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c5b5f1b2-0e9c-4230-a0a1-c3a01c8ad7aa",
        "cursor": {
          "ref": "1cc6f38c-37c1-4bba-88df-5adf115b8593",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6005d889-9f8f-4d7c-a686-7f849d4a8dbe"
        },
        "item": {
          "id": "c5b5f1b2-0e9c-4230-a0a1-c3a01c8ad7aa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d2041336-2e4d-4da1-8c5b-a0335658ae37",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "92600533-4843-4623-a87b-f539335a85ca",
        "cursor": {
          "ref": "530f61f3-3481-431d-bbeb-1fec15b83798",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4695ae2a-9cb7-45e2-b68d-5c03a996a46f"
        },
        "item": {
          "id": "92600533-4843-4623-a87b-f539335a85ca",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a175c912-816f-46f9-b704-097265d6b89f",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e8960097-030f-41b8-8f5a-f268b7379c9a",
        "cursor": {
          "ref": "e826f8f6-81a4-4352-995d-a9c277683f72",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bca5aab5-fad8-45f7-a008-ac3fc264d4c4"
        },
        "item": {
          "id": "e8960097-030f-41b8-8f5a-f268b7379c9a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "4de7e52c-e9cc-4354-92e5-278fcd5886e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "225a7c74-ecd6-4568-ae3e-2bf499eb50a8",
        "cursor": {
          "ref": "dd921200-042d-4d12-9be8-4c01e3bf8ee0",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "334129e7-f3a9-4660-b8fc-5f326f413516"
        },
        "item": {
          "id": "225a7c74-ecd6-4568-ae3e-2bf499eb50a8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1a919137-874a-4c81-8508-2ee0958fa838",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0cdd7cdf-fa25-4052-986b-d507ff750ca1",
        "cursor": {
          "ref": "e1b012c8-7524-445d-9317-b474f5df05c1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "49195558-22fa-4750-b1f6-47b3b760bc52"
        },
        "item": {
          "id": "0cdd7cdf-fa25-4052-986b-d507ff750ca1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "27b99130-fe60-4e3f-b3ef-12dca2197829",
          "status": "OK",
          "code": 200,
          "responseTime": 223,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9f22a023-94db-4409-ae80-941b07bb76d0",
        "cursor": {
          "ref": "4422f184-8ca4-4025-8796-4cacb5cf5361",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5923ba35-1fdd-46cb-b559-21f1939e1cee"
        },
        "item": {
          "id": "9f22a023-94db-4409-ae80-941b07bb76d0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8f9f0b75-ccdf-42d4-9b8c-d5acea9f1c64",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "4124ddb3-9fe8-4b77-8c0e-1a2ddd4d76a6",
        "cursor": {
          "ref": "d21163a4-036c-49a8-919b-1918a0bb4c34",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "97e18e06-3fe3-401b-8229-e0d1ccf156bd"
        },
        "item": {
          "id": "4124ddb3-9fe8-4b77-8c0e-1a2ddd4d76a6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ab53038e-488e-4bbe-85f9-bb8ac43591ed",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b83fc709-2ac1-4c7d-8124-95afea8bc3a6",
        "cursor": {
          "ref": "9a485f66-d9d3-42cb-9770-72a772187ac1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "da5498bb-df16-4c4c-abd2-3830889c60de"
        },
        "item": {
          "id": "b83fc709-2ac1-4c7d-8124-95afea8bc3a6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8682b3e5-da55-4785-9f0c-d674aa87834e",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "01118fe1-1d4c-43a5-982d-e61938d73673",
        "cursor": {
          "ref": "11c93a6c-458c-43fd-af79-a62dcb916a8d",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b1fbf0b2-cfd0-43bf-b36e-5a648aa902ae"
        },
        "item": {
          "id": "01118fe1-1d4c-43a5-982d-e61938d73673",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "05469122-46b0-4e69-baa7-d0e4ba236865",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3a7bb001-3361-46f6-b9bf-fdf64e959470",
        "cursor": {
          "ref": "b4666264-0d62-43a1-8ae6-461167266323",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f1d6e2a1-b6fa-48a9-8daa-b2b47bce4366"
        },
        "item": {
          "id": "3a7bb001-3361-46f6-b9bf-fdf64e959470",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c39dd647-9a7d-42ff-a900-5721e573b50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b13efa6-b88f-473a-bf54-356a06c65d50",
        "cursor": {
          "ref": "b7cf0eab-03d5-4f4b-b6a3-b209c342259a",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4776ad2d-2d10-439d-acaa-838229e458ba"
        },
        "item": {
          "id": "6b13efa6-b88f-473a-bf54-356a06c65d50",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "13586fe9-db2c-4703-9000-1195a7076d32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579a7d49-4c42-4775-8e40-0b98a96c871a",
        "cursor": {
          "ref": "7c5676f3-4b53-454c-8469-d620d41795fa",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e08c5301-5fdb-451b-a8a7-a81610bc8ac3"
        },
        "item": {
          "id": "579a7d49-4c42-4775-8e40-0b98a96c871a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9dd2ee60-e2b2-48f0-b4b3-4c5536ff5d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f725aca-8605-4107-8712-8ed995f8d850",
        "cursor": {
          "ref": "20a28433-984b-4500-b95c-7d1f4f8d5e56",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "af60d129-1ee8-445e-93ef-63246a45935b"
        },
        "item": {
          "id": "7f725aca-8605-4107-8712-8ed995f8d850",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0cb50b78-ca10-4138-83b4-8904a371de19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c4ce9f-bb06-4d6d-af33-df113fbda008",
        "cursor": {
          "ref": "a0f93778-69f0-4ac0-b246-f634a2dbdc1d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "850a9b58-8231-4aa8-89a9-62f9d72ff22b"
        },
        "item": {
          "id": "b4c4ce9f-bb06-4d6d-af33-df113fbda008",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "536defca-ec3f-4023-861f-a22cd9bf94b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da8e6ca-2357-40f0-a98e-74f373c15590",
        "cursor": {
          "ref": "463e5cf2-d547-45e0-bdd1-51ccd56cc89a",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "eead3fb4-ca47-4da2-963e-7b8396b8bf73"
        },
        "item": {
          "id": "0da8e6ca-2357-40f0-a98e-74f373c15590",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "db3b97c0-eba5-4b2c-a47e-dfd5d6a0818e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eb2b1c-4ad1-4016-88b7-1ddeefe1f415",
        "cursor": {
          "ref": "74c8cd01-5864-415b-8267-8a7a50272f53",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "c0325d57-13c0-4f72-a460-2cc9b796c504"
        },
        "item": {
          "id": "67eb2b1c-4ad1-4016-88b7-1ddeefe1f415",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e9d9d4a1-c146-4d24-8940-b42021d993be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29bf6e0a-17a9-4893-9ab6-7b61226f033f",
        "cursor": {
          "ref": "5a20961d-02ea-4c99-bc24-59bc12f8b2a7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8bf47b43-7437-453d-82ed-997dbd7b9745"
        },
        "item": {
          "id": "29bf6e0a-17a9-4893-9ab6-7b61226f033f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "424ca48c-a5fd-4369-b109-249f01a2cbc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3d491a-bbc8-4e9d-8f20-6b74e0abe8f7",
        "cursor": {
          "ref": "5cf4bc93-a704-49db-8815-fc1ae0713769",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "51517f2f-d2ca-4b33-acbf-e9588f3c2dfc"
        },
        "item": {
          "id": "1f3d491a-bbc8-4e9d-8f20-6b74e0abe8f7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "2e70357e-0769-43c1-bef4-89d12ab9da3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3e1947-afdd-4f6e-b6fb-0cb7e1b008d9",
        "cursor": {
          "ref": "9ce0e521-cc9f-4879-8f11-6693eeca4f96",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d7e5b08c-1c5e-4687-ace2-1bc841bb6262"
        },
        "item": {
          "id": "0a3e1947-afdd-4f6e-b6fb-0cb7e1b008d9",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e7c7af59-c55f-4ac0-883d-20278b378bd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e80018-7610-438a-bcf6-7b48032b9c8f",
        "cursor": {
          "ref": "d871b88a-a92b-4a5b-afe5-24b00e35b2cf",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d4993e6d-b72c-4817-9ed0-83751ba6f2ed"
        },
        "item": {
          "id": "d3e80018-7610-438a-bcf6-7b48032b9c8f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3194a83d-27ed-44d9-9343-8ccaacd6501b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c81a56-ad55-40e7-ac7b-503c4cb16d38",
        "cursor": {
          "ref": "4353d7d4-1c0f-4d64-83ce-90b755ff8f5f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "67dd8646-c6de-4ca2-b02e-1b87cf377b15"
        },
        "item": {
          "id": "39c81a56-ad55-40e7-ac7b-503c4cb16d38",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "02e7353b-fbe3-4cf2-8704-b8dcb7cc7ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6841d153-934e-4e4e-ae4f-220ac14d88f2",
        "cursor": {
          "ref": "e7bfc49a-74bd-41fa-a03a-9a773ce0b032",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "63f603d7-4327-4dd7-9b0b-28a57b3fb800"
        },
        "item": {
          "id": "6841d153-934e-4e4e-ae4f-220ac14d88f2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8a38a63e-cc7f-4f6b-b813-0ff3a9516a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8598a831-329b-444d-a368-514f8d4f4be5",
        "cursor": {
          "ref": "7ee8d00f-a964-4e41-a11f-043ba413792b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "92fb0c18-1e24-4dec-8d05-625e97a4fb5c"
        },
        "item": {
          "id": "8598a831-329b-444d-a368-514f8d4f4be5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1c1455c5-bcc1-4bb1-aefb-2eef74164a0d",
          "status": "OK",
          "code": 200,
          "responseTime": 334,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "bef820d2-21dc-4568-8b74-0da37c27d34c",
        "cursor": {
          "ref": "9c084ed0-cd18-4ca3-bac2-556a579c3ca6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9b7a6d1-506e-422f-a0ea-fa4b984e062d"
        },
        "item": {
          "id": "bef820d2-21dc-4568-8b74-0da37c27d34c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2e004d2f-7084-4b0f-a3fe-a9e00990e75a",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9a4727b6-ef63-4869-9be4-b7d1b934cb6e",
        "cursor": {
          "ref": "a3dc3750-b612-4858-912d-1ef036efe382",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "51da7861-7460-487c-8bdb-541072afa8f5"
        },
        "item": {
          "id": "9a4727b6-ef63-4869-9be4-b7d1b934cb6e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "18b44a88-375e-481a-8cc8-fec0a17c3eaa",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e834cf55-9108-4944-87e2-406460e2b5ff",
        "cursor": {
          "ref": "2a124e62-773b-4942-bd50-367254115013",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8442d862-3dcc-461d-a2d5-459ca4bb1d6a"
        },
        "item": {
          "id": "e834cf55-9108-4944-87e2-406460e2b5ff",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "636d4d21-0ec4-447a-8a05-37d2793a4876",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "b8323354-28b5-4d14-bec3-d3446c09bdbc",
        "cursor": {
          "ref": "4896aed5-e85e-4e3b-9bbf-719bb1efbe4c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e944a81d-9a16-438c-83d8-c6898fe4b4f8"
        },
        "item": {
          "id": "b8323354-28b5-4d14-bec3-d3446c09bdbc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8ab10caf-2d04-446e-90e8-70106464e301",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "4b78998e-a346-478d-b7b0-43bf37d9c4ed",
        "cursor": {
          "ref": "203e3146-0ba9-46fb-b67c-944ca27079ea",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1a921427-3ce5-4238-b25a-be1f9ba902cd"
        },
        "item": {
          "id": "4b78998e-a346-478d-b7b0-43bf37d9c4ed",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "00fff1a1-4a68-4cca-bf1f-39a8cadccee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c30fd97-12be-412d-8770-271d415068d1",
        "cursor": {
          "ref": "4f74ba02-f00a-478f-8d5d-ccd620adf3a1",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "14fb3d8e-57f0-4cc9-b416-8bda88f04583"
        },
        "item": {
          "id": "6c30fd97-12be-412d-8770-271d415068d1",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f2913ebe-a7f5-4e4f-909f-fa5c15f3db6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b251f3a-e39e-42c3-97a5-467475a09fde",
        "cursor": {
          "ref": "dd2fa5a4-9bd8-4cf6-96f8-0065d14aecd9",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "927a57a6-ba9e-4dc5-930f-45f1f08eabab"
        },
        "item": {
          "id": "2b251f3a-e39e-42c3-97a5-467475a09fde",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d016ce7-e317-4a97-a685-4603f3c05e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1729516a-70cb-4901-9dc7-d3fd860eb1a3",
        "cursor": {
          "ref": "1e4336e0-6a50-4ab6-97d3-e06868bb618c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d567a169-f496-4e1b-bfc1-4103d15688b5"
        },
        "item": {
          "id": "1729516a-70cb-4901-9dc7-d3fd860eb1a3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f00657f-1c76-4984-95b1-8121c8f123fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be21ef5-d8bb-4c53-82f5-414972ba4718",
        "cursor": {
          "ref": "1c34244c-7f74-4690-ba30-c5853f7f2380",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1c0790a1-e39d-4702-b23a-4bdd909265a3"
        },
        "item": {
          "id": "5be21ef5-d8bb-4c53-82f5-414972ba4718",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "71d078e7-28e6-45e6-80d0-c8e6b507580f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e978c17-a718-44b7-80ec-e0d7ec0757c9",
        "cursor": {
          "ref": "4e20af0f-bcf1-414c-9cb1-fa1549ba6ad0",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2807ba4f-16c5-4f31-99c8-a76db0341c61"
        },
        "item": {
          "id": "6e978c17-a718-44b7-80ec-e0d7ec0757c9",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "38a7fcc6-1c99-47fe-bc10-471cbd626f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1055097f-ae7c-4110-84fe-d5d900e881da",
        "cursor": {
          "ref": "157a57f8-b10d-4bef-b32f-8bf0a6385a40",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f6105b9f-510b-46f2-8368-234eab09ee2a"
        },
        "item": {
          "id": "1055097f-ae7c-4110-84fe-d5d900e881da",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "5a502e2b-d6ef-415c-ba17-e2047c967430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704bf597-e715-4ed5-a0d3-9705de34dae2",
        "cursor": {
          "ref": "f37e8a46-a764-4b02-88a0-f585de6cf0a9",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "96cbec4b-fd2b-47d3-bb4b-5a7ea0698828"
        },
        "item": {
          "id": "704bf597-e715-4ed5-a0d3-9705de34dae2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3abcc27b-b9d2-4673-b955-689ed9b31357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2969b4c5-4c57-40a2-8a64-eb9ef321e5cb",
        "cursor": {
          "ref": "bc9f8eda-8c7a-4677-8303-c2bd18abe218",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "24ea5c13-35ba-448e-84dd-62bef83aa62a"
        },
        "item": {
          "id": "2969b4c5-4c57-40a2-8a64-eb9ef321e5cb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0dddf7b6-56e5-4970-8a8e-84ee1e1cc48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad4ea6c-cc55-4a4e-8f4b-4e786a8b9ad5",
        "cursor": {
          "ref": "cdf24b89-3f7e-4851-b2ea-3710ecf21fe5",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7aeeb37e-6ee4-4274-aaf9-105f3d927c45"
        },
        "item": {
          "id": "5ad4ea6c-cc55-4a4e-8f4b-4e786a8b9ad5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "14681564-fc07-439a-8aff-ef33389e00f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d274e2e5-366b-40fa-bb2e-3d2bfd96adb4",
        "cursor": {
          "ref": "e0822e31-4705-4262-be35-3563567cbda4",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "945d54b8-2eec-4da4-bdfd-6b6e37fdab58"
        },
        "item": {
          "id": "d274e2e5-366b-40fa-bb2e-3d2bfd96adb4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "be1b5757-b42b-4c3a-8c8f-8a821df31c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c60f2bf-0ebe-40da-a3e5-ea8e8404c1b5",
        "cursor": {
          "ref": "cc8698ab-4f2f-4f98-a282-f4284046978e",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9108f95f-7b94-49d5-a741-f993f0254706"
        },
        "item": {
          "id": "7c60f2bf-0ebe-40da-a3e5-ea8e8404c1b5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d4469494-7cab-45f9-b2b3-0bc495a8259c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c33aa8-824f-4524-94d6-3242ee889670",
        "cursor": {
          "ref": "f038cbb0-0031-4bb6-bf85-eb6e4669c53b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "92e62179-9c55-4a59-8127-a6acc3aba58a"
        },
        "item": {
          "id": "f6c33aa8-824f-4524-94d6-3242ee889670",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5200046e-3acb-4ad9-8f58-22301def10ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c57941-10c8-438c-bbfa-125e0f4ff30d",
        "cursor": {
          "ref": "1aab2cdd-e487-437c-b250-85ff958fbce2",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4c126064-c054-49d5-8319-b0fb13888aee"
        },
        "item": {
          "id": "57c57941-10c8-438c-bbfa-125e0f4ff30d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "190797c6-3601-41b9-b1b0-81ab6927375a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32476524-5852-4881-9c74-357036dc5c42",
        "cursor": {
          "ref": "85c41108-6dbf-44a2-8688-8b9ba48ec436",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d916513a-84fd-40ee-9c13-891ea8c748aa"
        },
        "item": {
          "id": "32476524-5852-4881-9c74-357036dc5c42",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7f768eb6-bc34-4986-9af9-1c7f0da75e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b2e85b-0a95-4365-bfea-641446c9c099",
        "cursor": {
          "ref": "de936067-6146-4ac8-a588-e8fcdfcca035",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ed12a959-5438-4fdd-800f-2c62d63fc0be"
        },
        "item": {
          "id": "d7b2e85b-0a95-4365-bfea-641446c9c099",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3824efd4-5144-412d-b509-7e9db4ba6248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8830bcaa-58b8-408d-84bd-fbc78b2b4813",
        "cursor": {
          "ref": "954e29ce-cbdf-4842-88e2-b1580472e3aa",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "97a2108c-0085-4f56-9e82-56aee461a455"
        },
        "item": {
          "id": "8830bcaa-58b8-408d-84bd-fbc78b2b4813",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "18193019-f935-47ae-831e-327e49694e4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c85bfdc-5269-4f29-9ef8-597d6ae9235f",
        "cursor": {
          "ref": "b2e028a6-5870-4d20-926d-f0e1eba9e87e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "afc11f31-089f-4d45-8b7e-8c978d0d3ade"
        },
        "item": {
          "id": "9c85bfdc-5269-4f29-9ef8-597d6ae9235f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f63853a8-c28c-4de2-bd94-e77301784db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cff71-37fc-4b05-b7db-160d07e4a41e",
        "cursor": {
          "ref": "5d504ac4-498a-423c-98b1-003bdbabf41b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3f065476-cd92-45c5-8226-235d92da49a8"
        },
        "item": {
          "id": "e18cff71-37fc-4b05-b7db-160d07e4a41e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9b1451b3-2aaa-4484-9427-1abbdbf9412d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3191e4-ca3a-42fb-bb41-1f19b1d7a047",
        "cursor": {
          "ref": "aa1c14c6-5a5a-4080-b6f4-368ef8f658d3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "225c78e9-3cdc-4559-8220-03ca29bc3308"
        },
        "item": {
          "id": "2e3191e4-ca3a-42fb-bb41-1f19b1d7a047",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "73698d5a-6c14-418e-9825-30c4845f023b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d74fd7d-c4ea-4d49-a0ab-24df9b334d8e",
        "cursor": {
          "ref": "4fb60a7f-02e0-48db-ade7-81082479bd58",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "022f3042-e5f3-4962-82ca-143bd006b83f"
        },
        "item": {
          "id": "2d74fd7d-c4ea-4d49-a0ab-24df9b334d8e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "48e8ddaf-7b22-4565-bbbc-b80679c925a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca32542c-1211-437c-8fd2-a11fef7da87a",
        "cursor": {
          "ref": "f0a6d46f-8bb8-459d-8465-c98c0ec668f6",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5f6d91b8-c96c-4375-a8fc-e8456392db86"
        },
        "item": {
          "id": "ca32542c-1211-437c-8fd2-a11fef7da87a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "41c5e7c4-3f42-4133-aa74-6e791531a765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ec2abc-8161-493f-a4a1-10c79a18e744",
        "cursor": {
          "ref": "f13e9df0-7c2f-4989-a9d4-7093b141f475",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9f0d68fa-f3cc-4a98-a832-30a3fb3f7025"
        },
        "item": {
          "id": "b7ec2abc-8161-493f-a4a1-10c79a18e744",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b3b550a9-6169-4472-b803-e53ff850fe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "380d5899-71f0-4187-9500-f8e429ad6765",
        "cursor": {
          "ref": "c43feed8-afe8-4803-90d5-46f6199c8bca",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "72bfb6f3-608d-4de6-b708-e7bda6e408b1"
        },
        "item": {
          "id": "380d5899-71f0-4187-9500-f8e429ad6765",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7020272d-3e6f-4b28-aabc-faf66d232e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b936eb-5df6-473d-b94c-3de1b5984d98",
        "cursor": {
          "ref": "aa884e69-97a8-4ce2-bdad-9b10b5656df1",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f3961df6-8ba9-4ea1-b0a0-263bbae564f7"
        },
        "item": {
          "id": "c1b936eb-5df6-473d-b94c-3de1b5984d98",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5036abad-d4ce-452a-9992-8fb5b1cf33a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c04c17-e229-4404-9ee1-d423ceb6f239",
        "cursor": {
          "ref": "0ec39895-cf77-44db-bcf5-85316e3ee4fd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b1f29121-1a6d-4379-ac73-c500822accbd"
        },
        "item": {
          "id": "f5c04c17-e229-4404-9ee1-d423ceb6f239",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6a6539b4-0ef6-4ba4-8456-4d73703c637c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016aa7db-6741-4585-877e-8b1762a776ca",
        "cursor": {
          "ref": "6d29cce7-af2d-4ff5-87a4-d45422ea0f00",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "8855b698-3892-441d-895d-4e1fd580c9c2"
        },
        "item": {
          "id": "016aa7db-6741-4585-877e-8b1762a776ca",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d9422c5e-4536-4638-805b-461e2bcc7e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f921167f-e759-4a22-9237-580358324261",
        "cursor": {
          "ref": "b9c21947-a214-4d43-82c5-4af0834902df",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "837f0201-4570-4e62-b816-f24705772126"
        },
        "item": {
          "id": "f921167f-e759-4a22-9237-580358324261",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "0f0de13d-e0b2-47b9-9d8d-9741f29f9cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dc577b-14b1-4bbb-8848-03dc6aca7d49",
        "cursor": {
          "ref": "f530d6dc-716d-4a43-a0d6-4beb245d2c69",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "e57c3026-12cf-4bb5-b3f8-b340eee8dd3e"
        },
        "item": {
          "id": "b6dc577b-14b1-4bbb-8848-03dc6aca7d49",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "63e58daa-84a5-4ba9-97e5-78925a911445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "872f89d0-2df5-4764-9a10-aa8ec13c2f03",
        "cursor": {
          "ref": "707c5f34-7c9d-44dd-b8d1-037d86860c86",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6ae3f9c1-cf68-4984-9eb4-fef51cc44dff"
        },
        "item": {
          "id": "872f89d0-2df5-4764-9a10-aa8ec13c2f03",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e41f240d-01dd-414d-9ab0-b6bfc391f90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c8c6e22-a70c-4967-95b0-2264af38804f",
        "cursor": {
          "ref": "ab9f9854-1d28-4572-86a2-abab74f130b5",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "94c5209f-1bd9-45bf-8c3d-c716ec0598b6"
        },
        "item": {
          "id": "3c8c6e22-a70c-4967-95b0-2264af38804f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "60a859c2-9aac-4447-8353-39f581f2354b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a69b63-ef57-4e14-a80c-8bcf6afd895e",
        "cursor": {
          "ref": "fdee70c3-2dc5-433c-bfa8-071861d90217",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d2834598-f913-4d61-9ac8-d1afe2c6f1eb"
        },
        "item": {
          "id": "34a69b63-ef57-4e14-a80c-8bcf6afd895e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "10ecc755-5d1c-4c2b-8854-9acdbe57ede9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72eb011a-f50c-41ca-a219-3cde55842b3b",
        "cursor": {
          "ref": "81c2ea6a-ea2d-4e6c-b5a1-fa2f0a4f1724",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "60fa4099-7231-4f52-8655-427ef2688d5e"
        },
        "item": {
          "id": "72eb011a-f50c-41ca-a219-3cde55842b3b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e2c0ccac-cfce-4035-8645-fe0aeae998ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aec65c3-cec3-40c7-bf0c-72adafbd8466",
        "cursor": {
          "ref": "186c7db4-8e59-4dc7-8918-bd7008d120d4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ef32741b-8379-44ad-ace9-56487328133c"
        },
        "item": {
          "id": "1aec65c3-cec3-40c7-bf0c-72adafbd8466",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8e416f6a-561f-407e-a41e-eb107a12afaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcfe3e3-47f6-4462-9f8c-9a1969ea6198",
        "cursor": {
          "ref": "616bb111-ce98-4717-933b-09cae783b8b8",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "5579556a-20e1-4498-ac38-71ddeb5ec0ef"
        },
        "item": {
          "id": "6bcfe3e3-47f6-4462-9f8c-9a1969ea6198",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2a766609-e66c-4f88-9a44-39c5957fcf7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935c33a8-c18b-4e50-a856-6733b7642238",
        "cursor": {
          "ref": "ab6e28f2-ee33-41d4-b8ff-8a0b0c3de64a",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "c8633445-3403-4884-afa2-bad5a12c6a37"
        },
        "item": {
          "id": "935c33a8-c18b-4e50-a856-6733b7642238",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "03fadc32-9797-4e86-8b3d-d286daaaec12",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a4d5394f-6b1c-4a4c-be86-b4c60b0588bc",
        "cursor": {
          "ref": "dc72d64d-fb9b-4d23-8e7d-827e0a89e7a7",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "77e23440-90a3-412f-aa7e-dd9dc3ea0b19"
        },
        "item": {
          "id": "a4d5394f-6b1c-4a4c-be86-b4c60b0588bc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "bcff7c62-59fe-4b5a-9fd2-260788361598",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e143ab52-dff5-44df-8c34-7bd4e4e30ceb",
        "cursor": {
          "ref": "ad6b7e2d-cfaa-40d7-9d16-ccacd52a649d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "8e301550-9039-48dd-a7a4-733946a2e4e4"
        },
        "item": {
          "id": "e143ab52-dff5-44df-8c34-7bd4e4e30ceb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4e6cd0d3-8ea0-4623-9d54-d28ae22017bb",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "864c2e78-88f4-428d-a075-a2e84f6bfb8c",
        "cursor": {
          "ref": "7c01b5a6-02d9-487a-b822-f9dd4d3e0937",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7cbe7e2e-4572-42c1-a14e-91f6fc5fbefa"
        },
        "item": {
          "id": "864c2e78-88f4-428d-a075-a2e84f6bfb8c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6873c1bd-e36d-4033-86d0-11ac033875c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864c2e78-88f4-428d-a075-a2e84f6bfb8c",
        "cursor": {
          "ref": "7c01b5a6-02d9-487a-b822-f9dd4d3e0937",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "7cbe7e2e-4572-42c1-a14e-91f6fc5fbefa"
        },
        "item": {
          "id": "864c2e78-88f4-428d-a075-a2e84f6bfb8c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6873c1bd-e36d-4033-86d0-11ac033875c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda5ff12-e0d5-4a24-9f06-8db4fba66069",
        "cursor": {
          "ref": "e4a81fcf-0bd4-42e5-b936-63ecb11e7f25",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6c7c67ff-e458-4f4a-937b-5b1ebfca8bdd"
        },
        "item": {
          "id": "eda5ff12-e0d5-4a24-9f06-8db4fba66069",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "83e5091d-17e1-4286-befc-b35c574643a3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdbf901-e726-49db-afe2-f22ceb0320ec",
        "cursor": {
          "ref": "9887a2f7-c211-4c8b-a807-bd903b2900fb",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "92d44bb2-e3e2-47ce-98c6-864d0edb9262"
        },
        "item": {
          "id": "1fdbf901-e726-49db-afe2-f22ceb0320ec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "5e64f18f-f144-43a5-91a2-581cabc79ac5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}