{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fa2cce8c-6b75-4b73-a87d-78e45cb41ea2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "5ef2de48-d4f6-4c36-8a94-7280ca92b2b8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e634ad27-b001-4c8a-aa8d-b0d46619ea47",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a68fd28b-ecac-4835-9a0e-d940cc42e8d5"
                }
              }
            ]
          },
          {
            "id": "20a59050-c160-4206-86b6-dd479ae73c3a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b9b6e2b-57b8-4aae-9561-89336a208b9f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "40769460-e0e3-4d30-98d2-33139c7dbc83"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "23d908f1-c72c-4d3e-877b-ca1cf5898f0a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8a97a1ac-6bd2-45ba-8099-fb6cfb5ce534",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e96a597-e193-4ede-bb02-70dad318a239",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "847a976a-6f13-4b54-ada8-a8016d52b982",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ff2a8495-8dd4-4873-9236-82b9b9b73f22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef5ac157-0b9e-4141-a4e6-16ef1e3219da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab1fbc1e-3481-4747-8d6b-675b146ea8cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0be722bd-6866-4162-adfe-c2a20f5e4bd7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "37a9d9c4-da7e-40f2-9653-d87b8a9cdf97"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96d78d4b-5920-4af2-ad9a-3d543279da4d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "955fa39f-9a13-481d-9b9b-00e36fc688cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9409733f-8e5c-4266-9f96-e75394c2d6a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "990b461f-e245-40b9-89cb-447e07570910"
            }
          }
        ]
      },
      {
        "id": "591f3d6a-acf6-4f53-b8c3-71c7e77fcc1a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cf45e94c-c5f0-47e8-b2b2-a0a1b4f57661",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a98ff43e-5c0f-40c2-b825-2d4750e0319f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fd0b0187-306a-463c-a6b7-379c6b6870be",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91f2880-aab4-48a8-a2f7-df88f5bf2f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a65a7f26-e05d-4424-8833-43c9142da935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410c33ce-7f32-438f-b4be-6b4ec6fd37f5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ad63f6-adc8-4cf9-972e-f0034dc580db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0636bfe5-8ee5-4f7d-9b1f-2fcadadeee9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae068c5-2c15-43c4-a762-dceb686b5eff",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d422866f-4a83-481f-a370-786507bc4333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e494e3c9-1075-4cd6-8146-cab3aa96d1c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e89da7a0-3137-4100-84ce-223314f0e2f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9aacb2dd-3576-47af-b9f3-f23629d80599",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a16cdf9-5a39-4004-b610-a76b681ec4af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d39798c-5670-4dde-b650-1f688a02620a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f41e6e-7159-4d4e-a374-f47512178392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788bf6b6-37fc-407f-8194-5cc50dc1305e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d944a3f3-c34d-4d40-9140-17b7b1656d03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1579bb8-75e1-417d-824e-dbb76bda2cb8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07f0b5aa-171d-47c3-b39d-794c592cf684",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3a5a7db6-da84-4174-8e7e-ac5c2695d3a0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2a7480d-686d-49f8-b069-9b94519ee65d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e5660d8f-6c95-4437-b963-2f4f645bd9c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8efad014-2b38-47f1-94dd-abade1dbb713",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce2bf474-bcf3-4e92-96be-1a1e0a128778"
            }
          }
        ]
      },
      {
        "id": "eaf5937a-eb8b-4791-a241-9db0c0482cc1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "695648f0-2997-4694-88be-a8b1712a1023",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d949b72-3d9c-4c65-bfe0-23a2aaaa24bf",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d884280a-8f41-49d6-a752-6524d27e9276",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9ba0e2-baec-4810-8abe-73bfd8f67280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3fac1e5-820a-40de-bddb-0667e6b3a3d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0912b3b-0d5a-47ce-a3f5-cc56d67053e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c8caeab-5eab-40a5-9429-11c8684649bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48803e6-c077-4c12-8b55-48a02cb202da",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c17d36-f5dd-4b85-9b64-4c2a65b5bf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75f1458-8862-45cc-a5fc-26af7602c355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f9cb06-f42a-4675-995d-c3a20d08e259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "268e8592-d882-404b-9eeb-b68f3cbb6973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf54739-7e3f-48b8-a8ca-e541d71dbcc3",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc25b24a-213e-4c15-bd0f-05e7c702e762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2803859e-e9c3-4336-be78-bca24c6f440c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b673a6b5-6006-412d-8df7-69c1763f4d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ae8cbb8-b410-44ed-b823-a1c96e5b78c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8202365d-d325-4cd5-8c24-c8fc06ebf835",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2081b1-cf3d-47ee-bf98-17819ae19b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87398e2-0db6-4340-aa6a-37727154fb34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbfb84a-ebed-4180-8bc9-5f81ee16abf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee791b77-7678-4105-b780-035f29328aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3185e22-bb10-4ed3-9748-886855db9cd1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7fa1dec-775a-4708-838c-8e3705b6314a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7c71f2-2a08-478e-9ddd-6b2ff63f20a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aad40de-7c8f-400e-9c63-5077ae2b9d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aad7d8e-d512-4630-b6aa-3512ac911612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "327d32fa-a65a-4440-9bea-16a47538a12b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2febef8d-2f4e-4e40-85de-7e3d2b28197c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c49b03d-3595-4da3-a783-8454e4fc64ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9483d9a6-c7b3-483b-8470-efe993af678e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e6d4b53-fefa-4cf9-bb55-3b257765e2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "356e58f9-e4d5-4da4-bd8f-76887c42e50e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d751517-3af5-4621-aa29-54aa6904fa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e64c07a-5735-4416-98f5-65785093a7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64273bd3-0703-4892-a60f-57e82341e27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9314b010-92d2-40a7-860c-cedada64e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76a607e-cb81-45e6-bb0b-763889241462",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63a32ab-4f83-4c3b-b7e3-641097fe9b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44757af8-41a4-4da3-b7a6-4d41de3f5fac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3ae4b7-a117-4347-a65b-5db14befaf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d56bc2b-e9da-493f-b3a8-3c18cdbcbe7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53269306-0431-47f0-8dca-25afdabb5d0d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab260187-e247-4d21-89a5-c8f17f994e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5ef342-cb64-47ed-9eb0-761637da0a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2deeedcf-1497-4600-bc23-447cecc71b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31923dac-c8cc-47b1-9f0a-1dae4e10f784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7509a9b0-1720-4c73-a7f4-0846961cd801",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbaf120d-537c-43cf-abad-0a94e5e6de7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd3fb35-6b08-414c-8900-84668471d0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f2f1da-281c-4906-987a-08bc9ddb90b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4806688-0335-4da9-abcb-e01810594696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78622db0-b9d1-4c36-89c1-449d57547b49",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d894a3b8-f1ee-4d04-bbcc-79782e9a3031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754d6681-a9f6-4204-be55-0d403a95d068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51bd1a4-4de2-4aa2-9a90-44ad0492b82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d53bc9a3-ca6a-4d37-9762-b7c62c2c8b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a8ff69-a955-4c53-a87c-380f65ea9311",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493f7e2c-adb5-444e-a18a-166c23ac07cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef17b4ae-6af5-4344-9613-0e27aa2a3855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6999b96-faa3-4255-a9e9-29e4885f5d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac1dc08a-8358-4058-9d00-643611366f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac21305-ffc5-4369-9a2c-c9dbcb34ea0b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790d8ae3-c9f5-4260-b116-ea64391513c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d929373a-fe28-4100-b26b-b11a0bbc2653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a3420e-79a7-445f-a2c5-dc7c1e710e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41ce3d2d-e599-4087-92b8-4c22826f2e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1fdcf5-bdfd-49da-a606-442958af08b8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff73633-8755-4fd9-bbf2-1843019d6aed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3958672-0554-462a-8652-81adfa58bd18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5ab60a-9573-4868-b466-0421bf3f947b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bce827d0-9054-408d-8448-48c93ac82035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce420288-e199-41e9-ad58-91a67a1dbfb9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484b1ef9-eadf-44d6-a35b-b2295788b86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73ca236-d155-422d-9765-0984d8a4bad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c9dccb-ae1e-4a91-a4e2-b29a5835a919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5bf2859-03a8-463e-9395-8a041a8e3ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaa5344-9797-4e22-a001-c629df8fd09c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095b9b89-8355-4f88-879d-d3c443f88274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d256aa9d-f74c-480b-8d7f-0158ae4d14f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088910f0-c6e3-445c-9e0a-569590faec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc645403-4580-4fbb-b432-ca1022e7027d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3a2899-7652-4d5e-a290-b8a45ca34a7b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0467532d-b7b3-4ce1-9b7f-afcbc108a153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd6bc8b3-326b-4401-a083-2ac0d4d2fa6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405362db-f064-44ac-9bab-0db85bc036f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f044b461-6881-4027-893e-0fb3018f638b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3855947f-9723-4896-bae1-fbcabdf84018",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111a4871-d14d-495f-8881-334634915dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58aafed-8000-4176-bb8f-a30b4f32e73f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6bf4c1-e392-4aa9-8fee-8d357962cf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f039e11d-8350-4602-b6a3-bbdef041b517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e60aa6-4cf9-4e9d-bdd9-8e3523438005",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92be1e3d-2bee-492e-958a-f7632443017f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272a8ba1-b49f-4ad1-93e0-bda064e74821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a56c173-3769-4112-b7bf-20eb73331a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "14d912b8-97a3-422b-9c7d-78df1c99fe72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9b9558-8a61-42bc-9aae-2625996ffa4d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fa3c11-876d-4314-b10f-c29d71f287e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0031538c-4c4e-441d-a1e8-696689e7f10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22540865-24c8-4301-aee7-140ec8dae914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b26e0510-7798-479f-8ffd-01c27622b695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9717b1b9-dcee-46e8-a83f-3f8ddbb74432",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49d8494-1bef-4955-b567-2145228fea22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1de9077-a98e-4c49-a969-c0824e84ed19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f0791-fea9-483a-b758-29804318ff73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a11c88b9-22b2-40d4-a1bb-1ddd88563b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d46198-fa40-4af4-8593-21278db07175",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9435c8-9ac5-48cf-8ee0-c1859d5db945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13300b69-bf00-4949-babd-cf24d9efda71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bdbeb2-9542-4d00-9368-ba2d0cd2ba89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fcb895-e56a-4480-9f6f-49de1641f24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4842d042-5656-4514-a672-9144955cd4f6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351069de-b3b3-426c-b357-e88b8747a90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4acfb194-9989-4363-8796-bcaf1a51799a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624c2ebe-372c-436c-a407-a8887ed11c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "329b23bd-2892-401a-9ad2-f22d147b9dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8092cfd9-5e44-4271-87db-89e1d99fcde4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bcf8a0-d848-44dc-823b-aaa2db034055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57abee3-a8e8-4279-aaa4-4f109729e751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a488709a-1deb-48b3-8cbb-ced0f4df56c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c2dbab9-f588-4fa1-902d-394c232a69a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84bf4807-ac0d-4b36-a4f1-9eb3ad102f7c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371f245e-9660-43a2-8a6f-0f0e499c8019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63842e24-139c-4008-9647-062a19e8246f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dd533c-01dc-4d48-8870-f669091cdf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab1191c-d3c2-4676-abee-ff1d16140299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed05c84c-a182-423c-ae20-54b3e91babe0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9904b1fb-07a7-4be8-9fc3-4f804b485c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e445d8f3-fa94-4d26-b50b-673b1422aaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c1a1e8-9c7d-4af0-8df2-3ab1e794ab22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0516aafd-30d6-4012-a78c-c8112f71e6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eceaa9-f983-45c1-95ab-0d4916b695fd",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd22163-1141-45fe-b14e-45f5b1959b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b882b28b-245d-47b2-92df-766c5af2cae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7cedfbc-cfa5-4421-b24d-08e86681598e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88e6f1a4-9426-4a70-9572-3824d6b703b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090c8936-fa07-4831-940e-49c52de1cc32",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493584bf-159f-4aa8-b677-28211488b536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ce7db3-9971-4aa2-89c5-56af050df98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5024689-c71f-43df-8f91-8489b8f6b366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb5ea297-0c17-449d-b127-35addd42dc68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45045b04-e764-455f-9135-e6a60c1a79af",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29e3b70-dc98-4ea1-aabe-8ed08d9ea5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e0c336-8732-48e0-a06b-0f210b2f7419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9ec837-eb59-4504-a61b-42a0a581ff2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cb424b-10ed-418c-8f56-c9e638d3fafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f89477-2707-4443-92fc-cb1076d862a4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ce7f05-4f34-4b5a-9c20-7dbf3daecb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfded0c2-4561-497c-98ba-03bb799e3b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c2a48f-7049-4263-9f8d-d28ca2218eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "878272e8-577c-4b95-a66a-a55e9f6c252f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c375a07d-141f-4912-bd86-6562c881cb3a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee4a7cd-6d94-4657-b2e6-af8b3e2bd757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a8ad5a-9a28-4549-b099-26487c59ace5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b663d19-ddac-4531-9366-6e4a4b5a5f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "661b85a4-f8b1-4c44-a59d-4926a3337887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe7a7a-a2fd-4b1f-99d2-048904eb0bb3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31f965b-12a9-4812-9b5b-3059c04230d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5439dbbb-319c-40f1-b575-09f1222d6864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe7a9a-bb33-4c05-a879-72df9890e7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d43bb31e-18d5-4fa4-a0e1-050f9cb6c668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494287fc-31eb-4edb-b057-ce6da742e259",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84e446a-e7ae-4119-a48b-9f3773526243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecb039d6-0f20-4a67-8ebb-1fbac50b4c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6884b83e-78e0-48a1-9150-d36b31ac6d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e5b549-c0fe-4a8d-bb9e-2002821cb3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0de5811f-1d5f-4909-ac99-c1c91076e952",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee0c750-4f8d-438d-afcb-c83fa7672b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03c47e4-fe13-4448-97ea-32132a1c094f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb29ccd7-6400-4cfa-b1fd-1df2f34b5faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a705b5-7513-4e92-8fb1-6166e4ab38b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1566dde9-adde-4a6a-9ca9-e5bd119d01ea",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa6ed7e-8f4d-4202-81da-1a584b202dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eb24cc9-b9e4-4c77-9557-b31ec8ba881e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a185fd2-dfa9-4fac-ba16-7dfda8c5ad6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d5eb24dd-f092-4228-bcae-2ee3bc4be448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494430b0-2ca6-44d7-be16-4f0877c0a351",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c989d592-07d8-413d-8dd2-d87c34d826ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16405d4a-1570-45ad-9951-0251b1b95614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587af2b3-4a2d-4595-9158-a57ba0144e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70b1e8bb-e179-483f-bb4c-88094e2bd5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b02069-679b-45aa-89a6-3c4c4bbd6f84",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d356707-23ce-46f4-9d5c-57c2ce75f4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e754dc6e-0134-42a9-89a0-27e180c2ee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7341b7c-08bd-4119-8dc4-4a3b31e1ab94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7adc48-599f-4c9c-ade5-1a2a5a612514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c35ffc4-3c3a-4007-b38d-64b2ddef7f2b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bac80e-94e4-4acb-8dcc-619a9c5eaa02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41187286-04c5-4914-9064-8b0963ac35e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d3c60f-7a8a-48e9-a4bc-741c3f42c577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b322edf8-434a-45c5-96fa-c6ecce639a67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48174c4-13e0-4178-a262-429f65747d86",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97eb370-387a-4ae3-a873-2e0184d0a339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4debb6e-abb4-476f-8a95-0e3ac91ba7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304ba296-041e-443f-b0b1-ae31d97f8394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9485274-de6b-484c-bd45-356e47720246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f9d68f-ee7c-4454-a4fc-8a5467e89366",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff749a15-92b5-41af-8ebc-40da1bcefa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29f8d29-a4a2-423d-9c65-d61dd621b78a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dc060f-699a-45a3-825d-b8f302dd403c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "575d00d5-6815-4e83-bb36-977bd8a52089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff14c1f-4fb6-4216-928e-f5ad7f6ce88c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080af424-67d1-4c64-b0de-6df1ef4f7d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "017fb16a-8373-4d0c-91fb-3c5996aa81ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063e6446-e7a2-464d-933f-c21a37b27f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "489c15a2-8a3b-4b37-ae4d-1b93677d24ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbdad64-26ac-470b-a1a2-b03136b496a8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1a4fe9c-c6b0-4aa7-814f-32cd3540d7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b128371-8d77-4de6-9bb9-7858dbbd4bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac75c41-185f-40ed-8c77-5bcb143342b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "52d73019-05e5-4eb2-9a9d-d5e3f86df4c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0743f5cc-1b7b-4f76-86fc-37b25cd4a31c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91cde3-b8e6-439c-b73f-dcafb580dda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9dc57f-552b-4e21-91c1-9b0d7683c3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76328d84-fb28-4c97-bc18-8fe784349d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "43ddddb7-7bad-4736-8f8b-47eadfa0c834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb565dca-81b6-4add-bf18-8d4bbd8a9f3d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b2a264-4052-46eb-9545-b96711fca1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6cf8af1-64a3-4793-8151-7144d1f407dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540afe6f-9bbc-4baf-8266-44fd370f536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d590ce-b2c7-4d31-8927-486c92b9556e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae16d415-6a77-417c-a413-d40d06b8a9cd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f1b6d9-1f06-4a1a-bbc8-ac94fe2474f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f30076-bd28-4446-acff-b6cbd8b77329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ef2bad-15e7-4c47-a127-48037265fd08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "891dd195-b9da-4aed-bc80-4b5a811a6d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ff6140-2892-4b6c-b59e-e99c764b7645",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669d9e4e-9ff7-4536-83aa-813cf2592ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "540d1108-6f97-4376-8e07-b3dba7f42dca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974a9fcf-89ce-4e64-b3ee-aa51b49163e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a221b25c-64a9-466b-aa27-602ffb8e72b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a7ae4a-7a80-4b6b-a2fd-fb835c429428",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2648ec0-a1e4-4009-b143-ceea5306aab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80234e2-fc6f-4e2b-949b-b7b8d4aa9e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45b34e3-be48-4ea9-b81e-6a932e0e905c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10449480-7f67-489f-92b6-1c28045d86b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b394feb-d98a-47ec-b967-5e9ec5daf1b0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1033c13-b115-4d87-9351-87b2b2f5973d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d606cc2-f9be-4b37-b61d-042b938e5be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fcf605-3567-493e-8241-9b211f12f9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "726361be-084f-4994-8cc8-afd8860af056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f50fb2-bc98-452b-b042-1d01f70a20b4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cb49b5-2c99-4121-af5e-fd6a051041f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556639c9-45e2-498a-a41c-a367180b1c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8a7a3e-572e-4ffa-b414-8401a922824e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e39cf8b4-f7bd-46b4-a563-b2de2e6f66ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f753932-311c-4c9e-962f-a58b4a377600",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1d540b-55f3-419d-bc82-77fa77048a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458fd314-ae90-4cec-8892-52b060670a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f65cf-ecb7-466f-9505-a4e54d7b21df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "226cea27-f5e5-4532-97e3-eef1babf7680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d2135f-7c70-4a26-bbdd-8cb6a69afeed",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d5530d-317d-43a5-b47e-964709da382a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cb2cbf8-6e6e-440a-b7c0-da9d548738a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68cb480a-ed20-422c-ac8c-0addeff0a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "485ce9d9-6b11-4823-a410-13383a48da75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe847cb-f1a3-4cef-8972-133ef99edd40",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf92606-c503-4b61-a335-59da8c8e2750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230168d0-b86a-4534-9f7e-524314008931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe0503b-0374-4866-ab23-1e713f22ce17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae96d387-b538-44bf-94d3-65191b25c41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f9e011-0acc-42b7-ae1b-eaecbc3015f0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29b1f4c-6a64-4782-8106-c91149c415fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e48008-2362-4207-804f-e3bda9823fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6259739c-a5d8-4178-9250-5e5042d59ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3d5d292-c8e0-4132-94dc-c314f44a62f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9697b431-a600-4530-87d1-b8697b8c9a23",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba04404-ae6c-41e4-b92f-ee77305b8f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bee4590e-9491-43a3-a85d-2eb314fc56d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e086fe-adaf-45d6-a8bb-1a0ad79b8183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f74a2e-5f3f-44ff-a902-0187021de52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ffcc65-f92e-4eca-ac21-84cc59992ab0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcca2cd2-fd07-4b90-93da-ae21d4cb9289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cf7f9f-ef31-4cb5-82c5-ddc6ec03781c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b717cedc-c97f-4ed7-8944-87f348aa4bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d42ea44f-4e7b-4a64-86c7-44d689778a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b84e6c7e-5286-4894-a467-46490a52d79a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928cf3fb-2fc7-4e8c-b8f9-a67724e5b122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44815e8a-c95e-471a-b3e3-f2e8c83e4d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21bd95b5-d939-4bbf-9f38-a05b26a4a551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fc79bd30-c8e9-4b43-b9c7-7bf67f22bbbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ae8eab-63fe-47b9-a369-2c5e9ee2ff24",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499baa9f-e954-4df2-b47a-7a75eede6dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dc4336-89cf-4695-b633-93c2c0a9cd8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4514f2-a440-4195-8873-56e62e66c891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "addd8000-a612-4179-87d5-e6564ce5bbc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2f5122-4862-4a04-bcd0-968b7651ea8d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579a2f1e-4e7d-43d1-99ed-55c01abd55f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87968c1a-c398-485a-b613-6a1e6927201c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03bea71e-7d29-4725-a4d7-35050e9ffc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a111cd00-dc62-4b7f-bbc4-9a84bb847083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef783965-9d1d-44ac-b27d-66ba8db52ada",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef31022-8c4b-47cb-8591-070d43ea3c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361afc14-a659-42ab-bbed-67088b050c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7aca5d-55c4-4928-a9c2-1423de784e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef01d5b5-e245-4228-b44b-8585796e183d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07674111-ad51-4c33-98b8-b03bee05f11c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8183b005-9b0b-41db-b332-9b18880bd868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26444de1-4442-489f-90a3-6f497e77b6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd1be1db-affb-4aa0-98ed-1ff23c739958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "85cb6ce6-1d74-466d-8ca3-37e256728d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29496db6-3168-4b35-b037-a4831c2a75e5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "294930ec-a571-48c9-8f44-ae1f4fae22c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154ba5c3-afdf-4ffd-bc28-0d5f54a442ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720429df-e0ac-4311-9ce1-58a668f18e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "491fb909-b55e-4cb8-87bf-db5ece2303bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fc1aa2-e96b-4db0-a072-965917f25722",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16fb3936-64c2-4e67-b7d6-c06158980bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2110e14-16dc-4108-80fc-95b2ca7869e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b10b56cb-2f4e-4a24-89ea-b983974385d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "38120312-28df-4da0-8188-8e057d32e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef2d596-8a1d-4660-8ebb-e0eba3b371cb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7462600-8a6a-4e03-8cab-b60d86e10ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272d6859-e36a-474c-83be-7e09e4ac0a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd332e5d-66a1-4a58-bfba-723bf4f4e5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d429eeb-19cd-4d86-9620-fa6b2c22bd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c092c84-bff8-43de-b87d-6e2db8b2a545",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1185c993-f7c7-49c9-8d42-30c60078d42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d6bc05-57e9-463c-a2af-eaed4711d7e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75daa2b-df17-40a0-8119-ad37c6292b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b24aa8b1-e339-4ecc-b9ce-436df05eb66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4884ce-41ed-429a-8ae8-e67ae7c216dd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe43b67-e535-4db9-8fcb-296e7ef4ba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa9640d-ce31-4e04-926c-eba5e8ed4f5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "414dcc16-f675-4548-b46b-54b210925f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "96da1ff0-7ada-4de1-92bb-c70b6b76deca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687edd4a-2e9f-4738-8f17-bd9d5b36a19e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b87ea7-757f-41b4-9737-cfa1ec248ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db0c2c2-f1b4-4fef-8f31-d168f2d7ec70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a074ff7-a68f-47dd-9ecc-ac4c7db3ca05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c000c38-386a-4dbb-aef6-f2775eeb8f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de18ab8e-28e0-4335-9eaa-ad74aff9fcaf",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef926e8-3d2f-4c3d-abc7-c407b7c49e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdbed6a-3161-4b0e-861a-943d498a6454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d173697-bb96-4d8a-aa96-4120e43c3028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a832365a-4af4-44c1-b034-0c78d918b78d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf9d76a-5f81-452c-a08f-3ca69ddf6897",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff53f5a-1608-4552-b978-a329518531e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cfdd37-f7a2-485a-a7c2-482be8fc66d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50212fdc-a874-4dca-870d-9366fe2fa920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "faa7935b-d19c-419c-8b53-0407faf123d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c032c3d6-b032-4279-b479-caca1fb2a9ea",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48439de-696f-474d-bb7e-34ede5668fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f83aecb-2464-43d4-8a5f-016abee8e5a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b78a29-af99-4487-ae9b-96df757ce5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "20e345c3-93f9-49c3-90e7-14773c0e71a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a323794-7ff6-48cf-bc33-ef1a579d72d3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f017612-3435-4a6a-bb4a-2e124c4e6943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50bda7b-9e85-438d-be5a-bde3ab4860db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6557c52-f55a-497b-9b0f-503f84c63e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d822501-a660-40cc-80a1-79c5c5cd6d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5f37a3-040a-4b33-ace5-4451e34413e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5640b0-7529-4a45-a57d-6960990e54fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33d21372-c6b3-434f-b43c-fcd43c951f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e5337c-3e29-4edc-88dd-90b2f5b2d7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea30a27-9400-4212-942d-4d57c0458de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1500457b-3241-4483-9ff8-1aa5a5c154ab",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3e9c99-3a50-4286-a552-cb6ca5a6ef88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f16240-3541-4d10-809f-e9f54e1b0a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447b1e39-22d0-42d8-b109-60b12207deed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce88a574-48ec-4fd0-bc75-415e9a064869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff94470-046a-4eb0-836f-1f672623f2cb",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18d81b7-f7c4-496e-9e9f-92e63b65f021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9838e1ce-f387-4e7c-a2df-5e8d33493065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbe5033-c280-45fb-b67d-7503ba2ee081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc16d07b-0d2f-4e9b-bbf6-3c6165625899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a188210d-6f9b-4943-8c63-9059ccdc75fb",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee27dbb-06bb-4679-87e0-36a577e470ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3b4985-9ef2-45c1-ac48-a526d09d3b8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5261ff83-b52b-4a2e-89f4-0194f934ecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "693c4577-4988-4e0f-b389-6e5f6bf836b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e300ddf8-d7bb-46b9-acd6-4763d3960630",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61994aea-c5f4-4553-b960-c21a68e467f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a02569-9371-4375-aefb-8ea3b27c9fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a1d132-53ff-40ed-b718-37aee5249057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "808c5fe7-e167-46f3-aebb-5b4cc659c8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd6b7a7-f210-4a14-9bc2-7920fd132bf2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c796cd2-ddf2-4a34-9b0b-1daaf4800d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37cb9687-f355-49fd-a0b8-90770288fcdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f5c921-a0c8-4908-8129-c16bf20778a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb44d64-e943-4887-b056-c01456aec79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42069ed1-d2ad-4230-adad-3671f24407d3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cb1846-5ea0-4085-ac82-3341f13ea8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51400cf8-51cf-483a-95e8-75193905f844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c8fa65-b20b-49e1-aab0-a4b3ac3fe2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "95dec3f2-c4dc-4f71-908e-5f42e5b133a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a88808-1926-4692-aee0-cbf9c8c4c217",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d8b576-6460-481b-a398-b022f473412d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38f987b-3daa-42ad-a46d-2ab31a1f2d4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cffdf4-c085-4e59-b00d-6c2eef4df3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b187ddee-44e8-4fbe-9ddf-c39377367097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9567b5-eaeb-45ac-85c5-2259aeaf4473",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0548a45d-2884-4ccc-a7e8-313091e29c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "565e538c-2956-47a2-9398-3e01890fc238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2413531c-62fc-4d19-8d2b-38057c30b0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "55daf20e-9621-40f1-a001-341a28b44c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c978c741-4c68-4127-b42d-49f843b8f781",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64e2b7e-89a4-4d46-a611-97f9fc552eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de8b42d-d3fe-439a-94ec-57c9f7a46f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc296d4a-4a11-42fd-9b22-fed90ec99855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d31cd971-e5db-49d5-8df4-e9bdc9edcc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47be1f8-f6cb-41c9-8945-6859b29f1534",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3f21eb-afdf-4d93-b4b8-b27b168d6d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a40432-92fc-4f45-a9b6-ccec8d03f706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c598c7b-2859-406a-bbfd-08897c9b199d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "865df264-c75c-4f14-86f5-0dda6a5c81af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77a5ab4-b600-4b4f-94d7-4b1abe4a64c7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56990cb0-6571-4951-b417-24c017b0754e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66f7363-0a3f-41c9-8dbb-7f815bad8227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982c0f3e-1b33-4524-82ba-d35d741a7ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7af042f-ebdc-4241-858c-b7f7e88a3d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246d228d-fe91-43b7-9fee-86a00f86b5a5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1473daee-fada-47a9-a1d4-f06fcbc6f595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dfef7a-5902-45ef-8704-2566f7196b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2896355-d234-4808-a2a9-5a257d11e0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75bc8029-b677-4460-896a-5dd7e649a6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b66d6a5-8ad0-44dc-8a15-b4c517b018b5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4d2e2e-ecef-481e-995f-e1b9dd2bc7be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437f5e0d-f758-4c19-a796-bd223c4ce312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e685a87-01f2-46c9-9a05-79e21493a646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bb184e5-6b7c-4e6f-9ff0-f2e39590ea51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bbed8f9-491c-4cc2-aa2d-faedfc38cb1e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33339244-ae53-4139-8c35-9835bb06902a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56628c65-14f5-4e04-9da5-5cc45fc77d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854a0440-fd6a-4288-b6c2-6dcf3c2570b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19894eb1-d3e3-42c7-8e9c-9db892bf1354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3230312-4881-4763-b94e-f5597f7a2884",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb68090-26a8-497a-8c3c-2c1a0fb7ae09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfc5d011-afcf-45c3-97b0-e707c9b40048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585602b3-aa83-4fba-9dd3-9ea5253c40cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "137d2e7b-c46c-4d82-be72-925a883f199b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a1fc6c-09bb-4e84-ab49-aacb96489e91",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38e1b38-3af4-4d57-9404-02328f5f3fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ffd90f-6889-4937-b843-d8c3803eecaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811462d7-047f-45fc-acf4-1655d3d3e967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5de206a-4639-450c-9e4b-7a5e614680eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5ae2bb7-88c9-44d0-914c-405413db1e50",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c7e410-a113-4560-a8db-9a2cf3e471a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf616c16-3c32-4b07-b768-928715cd26cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e44f82-e982-4e08-a2b2-0557ab6c3fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4914a86e-c7e7-4863-b494-0939cf0d5e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a9a464-579f-4279-8941-1a63ab0cdc22",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c559b534-d3a7-480d-879f-a1f5145d7d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a305a6b8-880d-4492-9489-86717a15c351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d73ce07-47b3-4ee3-8ef7-2608b76db9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f345bd-d397-4500-9aa6-76bb469a0ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a9355d-c284-4212-8e5b-8933d987d483",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14052e40-21d8-49f4-8d09-c788da687bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6954491-3d20-4987-8b4e-f12cc380c1d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb924b56-8e4e-49a7-b955-9d704a63e182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "37c69997-7c80-4c00-b937-601d0ef8edfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f938b83c-0614-45b3-a81f-96b261445bc6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17437d0-c809-4fb9-bda6-16dd536a5caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67d34b9-5349-46aa-821b-ed15670a62a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acd894f-d8ff-472f-a5c1-76e9a0977dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b6d60e-00ae-4991-8d61-2a246586bacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5ffe1a-d7fd-4e3b-b314-d4af44e88a29",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0a398d-7d22-45e0-95d1-ea322711b64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "822f4a85-9f5d-4061-aa12-609fdad96e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48662f4-e9d3-498f-befb-5b298943174e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c51dcd95-c8cb-4501-a770-2d8205fb736b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a457a42-fa58-4f55-9d2f-2a9295ec2176",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5c8929eb-6142-4584-b829-9e7c88dc2008",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcadad4-f7a2-4f9b-950f-e5d36cf45481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab50263f-b379-4560-9953-0e88b9b038fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52623426-e6cf-4917-b904-b02e8f8507ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "debcf02f-0923-43ef-b40c-a43014462e7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6871d6b5-95e6-4ff1-b9b8-b056de6aa427",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a460795-1191-4616-b9f9-d393b949674d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d71b6c1c-dd3e-493c-b88b-62b2e4d80701",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef0a4c5c-d14a-44f0-90e0-b075816c2bd1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "acae7d53-f1a5-4003-9e9e-e53f4e9b073c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "58de3588-f4f3-4232-851c-8d60dc7c8fb7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3637c370-3388-4309-b1fe-4f02cd6dd217",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dbeed0a6-bb7e-4e26-ab48-3df9ac9383c5"
                }
              }
            ]
          },
          {
            "id": "e1279880-4c19-4be0-9e79-1ae19c7469ef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8dc75be-e0b0-4fff-8a83-4ae969e14c38",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d2786bec-d614-4c75-a4da-f511aabf63e5",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50a8597-fcdb-41c5-8b9c-2967a0de9285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b99493ed-b31f-4df2-b801-6ef84a4f31ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5df5e33a-2331-4708-812c-71617c95c647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad579d7d-5dc1-42f9-8a91-67d03bfd7326"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "68792b53-8c0e-4bf9-a5fd-4d26ae92a817",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5aa477f7-c503-4396-80ca-1ee4517ae517",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de3f5610-9bbc-48d8-82b1-a6a3fa7e9ea8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b075f3d-e89c-4e80-948b-7fd8acf5705b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1b28ca60-9a46-41eb-85c5-1670dcad42a1"
                    }
                  }
                ]
              },
              {
                "id": "f6328a64-5606-4c6c-a9df-6fe7cc4f59e2",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40cb8203-23a2-4a1e-a098-dd3f42fb38d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf58e936-e5db-40ee-ad56-bf484825051d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc8fbb12-c078-499a-998d-2ab4d8006f1f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0c450d2c-138c-4960-9f5c-59b2f1def814"
                    }
                  }
                ]
              },
              {
                "id": "f4154ef4-aa2f-4cf8-b514-6169b07fc02a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2e78c79-aa11-491d-ac7c-5d2cea2b212b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13e9aa0c-cb48-45e1-b396-7af6ff4b2d21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c2a1aa0-ba33-4741-b92f-f019ae3eca05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9a607de0-287f-480f-8226-ec7bcd8d9e81"
                    }
                  }
                ]
              },
              {
                "id": "3e173acd-3970-4e16-953e-4d09d4ec0b67",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b67e57bf-1192-406a-abaa-efbe2db873d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b40255ae-e447-47b9-809c-09680e46c795"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "96c2b62b-252a-4b0f-b7ec-7a456e1acc1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "113ae790-357c-4080-ae76-500924afb1ff"
                    }
                  }
                ]
              },
              {
                "id": "10fbf5db-9b7d-421d-bca1-6bdb4519181c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbd26ad6-c873-4a8c-b646-1c145c95f237",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5233fa1-6c2e-4aab-a75b-5b5f6af9d9da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "191c7813-b3d1-4b38-a984-e203eb6bbe69",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "db009701-87fe-4a34-aca9-67757b5f92bf"
                    }
                  }
                ]
              },
              {
                "id": "165a9848-2db9-42c3-9b76-182dff026bb7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc0fd130-0468-405e-b0fb-5d439596e520",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0014b977-e8d7-4fce-9139-5fa3cb9014d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "004a18c2-3a15-47e4-8707-b7a0d74cf735",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2ffe0090-e6e6-4ef2-bdce-2d7cdbc6a201"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f254af9-88cc-4057-ade5-cad4a87dbb68",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20bc0de7-5f3a-4074-9dc3-3ea1cc8126d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "941fdc98-78e9-400a-87d4-870d9b5825bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fdca06b4-bc3d-497c-9a2b-a1502a648099"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80013121-3fd6-441a-935e-842e0caa2e61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4cc8d6ea-cf61-43f8-8e36-9f3efa259205"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78d33d98-c11c-487f-ad12-270a095e1455",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59022dea-0798-43ae-921c-a8fab19e371b"
            }
          }
        ]
      },
      {
        "id": "8be03065-7f78-4b28-b340-a1dcdddcbf54",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c2c925e3-e2be-471f-bc23-efb36233f184",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fcd21831-095c-4f71-9b20-3d0be2e0dbec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "be22a6c9-9444-42d5-bd5b-314914ad3f30",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c5ddb8-9fcf-4053-8895-b9a5622be3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b012310-a61f-4827-9398-4de37a160c1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52fe90c-731e-4d30-b7cc-0be5473250da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0b70e76-ec7f-4b3c-b2c8-b6620d52c16f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b13c7e3-81e4-47ea-8fbc-01e29385825d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4225381c-a698-4cfa-9de0-666e92ccb056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0abdd077-99d5-42c6-9362-c759c0ea0d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6c52a5-f08f-4baa-8247-e440bd604954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84e62a2c-192b-468d-a691-b43099931d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4866d0c7-da04-4e8e-8e4a-74a8ebab84bf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbd480d-1865-43fe-a22f-24a76b50b467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042409bd-94cf-4a2d-9eef-b8ce01a03a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c3f0b0-781c-43ab-a999-4e0a7b65d6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23bdf86c-8faf-411c-b281-f0128f0f53c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d70b40-145e-4069-9e35-f2b25543bc57",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5685f5-fe72-42e0-a443-ec4a031fa30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f2c4ae9-9693-4891-bd29-faaa0075b0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb3a5a9-37a9-4b78-8de3-07c9fd47fc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3634f3-4ac1-4b75-a592-9d8c5a72261e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960a41c6-ba9e-46a8-ab05-07a0a2ad194b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20af1098-510c-4b5b-8341-9e9ebc3a1bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c46dfecd-d56e-4866-b2f5-8132686a8069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f1b1a6b-c79a-46cb-8017-dd3f5dc4f955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "30e9cdb1-da0a-4071-a156-ce23d06998c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f339cc-b816-4faa-9854-e63c6bee94bf",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2649e443-bbe5-4a53-a578-ce61f1ac3153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea234db-a804-451e-b83e-04ad255a2dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480e1e71-3db2-49e6-8721-ba68e7e6a5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8b54af-28f3-4610-8288-0fe33e4b2997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d363d5c-33aa-4dac-b28e-3739d852951b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "786e87ab-c956-4b6b-af7e-23b1f18fc84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efbf7eb-04b4-4577-8975-8882db1fe804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c37bfa2-2c99-4a77-9fa1-0a7435ab8c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "46c93574-eb0e-4306-b2c9-cee92ffff5b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27e389b-fc16-40aa-a96b-15b28edebf6d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee5454f-84c0-40b1-b3d8-09b458001576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac77db4-42cc-4e75-9dd3-0314153e89f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac68e9c-2486-477d-b9f2-f3de94a0b3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "628291bc-b612-4797-829c-6de03471692f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a69de80-bd14-42fa-b5ec-fbdf1e8f80cc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28140cde-c696-4637-a154-76d9b57ce334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c249e868-a99c-4929-88ad-827ae4af44c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1de4411-6c86-4db7-b12a-d8ff1fd9a4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a160b22-5b55-4de0-b893-e29d8a0b7bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc0cf0a9-5a41-46df-ba97-a96c52c9392b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b31e167-a03d-4e56-9a96-3b74527c50d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0389a66e-2488-4ac7-badc-39284ccc76b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e990a44-91e2-4de8-be56-2e864871ead3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "392294b6-e502-46c1-a93b-5988bf428136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde532d9-f251-4cb3-9bff-c7b90e3a9a6d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6960ee-e872-4461-b86d-c5f12d140b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "332e3c7e-f808-4046-b38f-5f45606ced69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82010ffe-3b49-427f-af4d-aabcb6c62920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b30079-7678-4f5d-b00b-f817c8681ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55417e9-4f1b-4f74-b54a-2bf30ca18074",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aee3c5f-54a9-4e00-ab07-da3a60c0a576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8aeffcb-7cd1-4e0d-b5c7-10dedc95513f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7907fb-f5e4-42c4-b403-df36ee42e88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2db80979-823c-44cd-8dac-f4108d6c2c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36edcb33-14c9-4cc8-aadd-fbc23b1448e1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dd9a27-1064-4933-b9ee-9411bfa304f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3b91fa-5f8b-48f0-846d-85acf8f3131b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba6687c-e672-4ce0-8e6c-b7f4d8a898e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce264cbe-7d56-4362-92b1-a7efd674a82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e0a6ea-cdc8-4590-8a1b-516f8aba7be4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2110d58b-5cb9-41f9-9491-0fc3749d5987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e2b2f0-a22c-4045-a7bb-3babbb904660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874aa70a-af99-4e0c-afcb-1a96614f18a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e03950f8-4041-43ed-b3a4-add500ce72cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a647fc-be93-45b3-ac95-3dcb03e45128",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37852c5a-4368-4d8e-9f46-2d728a83e9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97916f9-d1a7-4086-aa40-58ca8a9c6263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1030f3-d02e-4c0a-91e2-d9e3023b337c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6a869c-469d-4353-960f-fdbb511a2983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64a808fe-65b3-4c31-bac0-8061ebb491b8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bd83ef-e91d-4c0c-a322-3b2ff228d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dee113e-6a0d-4566-b08e-9e64d0078c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef7077d-7608-47bd-89fc-6fcd52fd43ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eac06467-8b4a-4ab4-adaa-b7c5f72e5b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051e3c28-e4c2-4944-a72b-45f7931ff58e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d8f0ee-f620-4f96-b462-d4881a46b4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3951ec97-0e6f-42f9-a073-7fd66d4f34c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1664dc9-1fba-46a8-aa77-6162d6da7149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b47f1287-244e-4af2-b7df-ce6a0b619758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac24c292-8121-4cf1-a42b-d191df2fd1f5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba9b5f8-4288-4846-b10f-2f841265e179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5d2404-14de-4c37-894b-a499ec5eacde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3693570-dcad-47dc-bee7-572ef38572a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7cdaa2-26d9-4565-bca9-4c455c5125fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9603ac1d-39a3-4783-b2bd-719f8f3ad4cb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c0c71a-a8d3-4e8a-a285-f62d38502978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbd041a-028f-45c0-a994-95e4adf358e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7206c4-5add-4883-adc8-9fa39ffa0df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f20f51-3fe3-4b33-aa55-9969b994df95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5f24fc-83e9-423d-87c3-5011fcb3591b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf064388-9c0a-40a8-af6d-848ba67c2922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3250f66-5426-4376-b510-09334dbf081c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3ecb67-ab5a-4a0f-8ec0-e7ee4a594e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "362b6e56-d487-4c8b-b6ec-05f6101b0a51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fc53d0-05e7-4d5b-8d96-a0c104000054",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02badbbe-dba5-4ccb-ace7-7486ca249ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52709dbf-f0c5-4bd0-81c2-fbaabb040f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec3dbad9-4367-40db-8c8e-955391f510fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "838d877d-be86-4a67-a336-e94d4a0d7031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45378e3-7388-4932-834f-a4619a12d921",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb9b0a9-19a2-4f18-b43b-1b1decb42227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2bfa3d-0da7-46e6-a1c4-04996e838e5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4ed922-b411-4984-a49a-a4275f8fcf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f82a9cb7-7094-41e4-bffc-b660384a870e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e2acc2-2cf4-4ef4-9d0b-bf76aaa55260",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09278ef-f467-4ccd-b5a0-9988b8e551a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d0dd3e-143a-41b6-9fe0-205e0499a6d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870b18e8-156d-4328-a61d-1246567410ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef338403-e1c7-43d1-9d74-0803a7b652f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e4ddda-8756-4aed-aa3c-d939b30ca18f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe404657-aa56-4627-a25d-35034a32c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1226209e-9baa-4443-84c7-64fea2570308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e65038-120a-4303-a5fe-7c264c8c3af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ffc755-85c2-435b-857a-12aba51290b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9aa0209-c64f-47b8-9710-5ccdcc5c0d0b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa9c5f7-073a-4bad-a416-681bdb7d494c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed9783eb-ecba-48bd-b60a-84a15fae16c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b87e8bd-8a23-46cd-b1a3-40b7aea29429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e79b9381-49cc-4ecc-b161-53be4281e0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcfe1ff-8d0c-4a8c-b707-d1cc1bb8269a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455b16bf-6b6b-47fe-9a3b-e067a54edeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1860d628-4e89-47fc-aa3e-44600af97570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852bdfa9-24a2-4fc3-bb81-4d67fceadb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f1fadc-5d8d-4c17-ba61-57fee421d9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16bdc00-7283-41e4-9c96-75a75953548f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9f60f-d360-4379-8597-b7f0a9967ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf01f45-9c2e-492c-bd19-004e47517b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db073b5c-0f73-47ec-aae1-f69f936134a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d13ad9c9-63cb-42e9-b02c-f53a6540724e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13476b1-b01b-465e-9686-a017cb576afb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72d719a-c5ec-4084-a2ac-57a1ea77aed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8734f2-5bb4-4a7f-88cf-cb382bc4fceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b593d509-07db-495c-9e1d-9d565dc49c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02c3baca-a526-43ec-8bb7-3400e82a0541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1230e0f-7467-41eb-99bf-1261c7c8c46a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe53d6e-5b1b-4097-bba5-677494d0ac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf4c14f-4d2e-4efc-b9b8-25172785348d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33aba35f-b73c-4cc7-bbc1-62a4ed19819c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0db731-b884-4cf4-899e-3b3962fba004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86701b5-62d5-4148-96de-289f8e39faaa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fe771a-0e74-4fa1-8c7f-e2dab4fa7761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90c86ff-4c58-4812-b273-780de8009ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a84057-b5e6-4dd2-a78b-ed62a6216707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "920fcaee-e1a1-4517-ace6-a5d88ab7f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733171d0-1a54-4852-9d01-31b7ad583067",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781cceb4-4d5e-428a-aedb-03a785f8e85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1983530b-8d8e-461f-8924-6e0769221d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a7538a-9fa7-4cef-b0a3-793df5908069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86f2bf4f-e39b-40fa-bf73-b82b9fc5253d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50760429-9224-447f-bbbb-562cd96d15e0",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622fa24f-a222-4e04-8725-3f151409734c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caba7825-663b-4b9d-b66d-1a8b0b793b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30199de7-fcfa-4753-8303-adc4f87721ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d6e9802-7130-4400-bd8b-24d8f86c920f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e25d35eb-b3c7-4ea2-acda-014d06ae4470",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9a183255-1064-4da6-98f2-76412bd6c38d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03a3ded-3898-4819-b24a-8451e88c15bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c5705968-7330-4778-af59-23245618e8fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c51401da-a9ba-4e56-b1f6-eeb9134ba090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c581367-dfa1-433c-b9e4-3f87f3d366fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30979b37-ef3e-48ca-944c-658137333f79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0f7aa53-3cc1-4002-9e70-4991fefb947f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35cc195f-70a6-40c1-afa4-b8cac499be5d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ccd4c9dc-2c21-453f-b6c3-abcf8a1fd762"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b38fe651-fa5e-46e5-8997-13ec6c3b3716",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4afe98f5-5756-4fa9-92ed-be37ab7acb68"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1e12aa2-7a15-40e1-9eb1-9af8aa2fc420",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "59dbcca6-d1c0-4ef6-bc5e-bb702380c032"
            }
          }
        ]
      },
      {
        "id": "27d62209-9578-43a0-9091-0bd7eaf0ab30",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5047b650-79b3-43c5-9bc1-25956be0e033",
            "name": "Negative Testing",
            "item": [
              {
                "id": "820c00ac-feef-48c3-927e-ee3e8527b9dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "011c1fa8-c543-4910-8502-a58c8d1b6153",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb5af17c-91fb-4140-bf7e-b07e1854b274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1907965e-0f2a-41cf-a982-a6321198ea95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ef1423-495b-46c5-873b-9ae9914df233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "866db537-f20b-4408-81f9-1ea7e97756ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b04edc-2236-41dc-9bb1-3ac1c6256930",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf3e5f8-7f6c-4ad3-87e3-30f1499b7f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aeb3bf9-94d0-4ee1-91a9-74175793c5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6ff232-f0af-43b0-86d6-baa3d7331f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8098320-500c-4ee6-942a-d1d424f3fbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995dc26b-0ea3-4acb-9348-ca9e664866ee",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6043fa-b09b-4a2a-a09f-59506b4e3201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600e5737-7387-46b8-90f5-1e199754f1e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6952dd85-a769-4155-b3b1-c4bd9faea96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a551ae5-1594-4c2b-9dc4-6d9b104badbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee9c337-4437-401b-b22a-c1a11b69937a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a9df839-31da-4943-9ce3-f5fc17088ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e493752-3067-49ca-a889-40fa403d750f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5edd1125-0edd-42cd-920b-0bd7825bf740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89062cb9-09a4-4db8-9541-835a2153a1b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31751dcf-853d-459e-97cd-234d34ae0c8b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5a82d9-069c-40ed-9514-b1070d57c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78ad852-f1e6-4064-9446-dc6673fa751a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4c3a40-eadd-4085-b533-ed9601239c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0855523-6230-4ac6-8336-ea3603986798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24e1ca0-4838-4453-a6ac-02d29308c054",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed08d2e-264d-4638-a213-b3bfb620bfcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7621fefd-3317-47c5-b328-c7224c40762b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ebfe72-1654-4f3c-b655-d906f5dea6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "462a7e35-38e4-4f07-a139-75683d4c3556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a51094-88a6-47f9-bbd8-ea108fc08986",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "155f402c-e600-46c4-a751-0712bd6115d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb8ca72-a7ef-4da1-925a-12462b44ecc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1b17e7-1870-4148-bbba-f08ada9d57a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac23ab83-404c-444b-a475-198bc69473d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a16dee-8d5a-4b3c-9c4a-af97f7af5b9b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c546d0-cc66-4afa-b3d9-7d128df6e18b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a971e0-e0b8-452e-ab09-689dcfb5894e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb37202-c0c3-46e8-a6b8-0bbe1b12a239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2343ee73-fefe-4f3e-877e-c146e97a416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6dc3d9-a525-4514-a33e-8dc2a64ca9c3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6123a47e-97fe-4d0d-aeb2-53abf216103d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e0423c8-c8d3-40fe-ae2f-0315498f09c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efe12c5-2f67-4394-ba9b-acbcc1de6569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9475638-f6ef-4587-87aa-10cebb3430fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e96a0a-2173-4bcf-87b2-d8b8ea3dc74f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac7a567-b733-4de2-acf7-ff34a5008b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d31403-7664-4bd1-9df1-198431fb74c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3553a314-8010-46ec-8cc7-84e8b707b3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6971f9f-3a4f-4e13-8093-fb66579224c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838760d8-284e-4db0-abbe-d8be4fba3b09",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc2f578-db90-4dd2-a9cb-6f85d25f2de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28b3fbe-e014-42c1-b1f5-c1e39bd07028"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614d69ed-caa6-43ca-8ff6-8a40312b5abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8e54c6-56c7-44f8-a143-3badf0e62867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22a60aae-a8a3-45cb-9ce0-8ab8e24e4d38",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200e72b8-5b47-4989-9569-9ae5f5524fb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cdf93c-9b33-40af-8d5f-9b3ffbc8ac7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcd7c13-a3e0-4799-a1b6-9cd96f5cd51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1e026ff-b850-4922-8a8a-b8401a517556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bfdf9a-4211-40a0-85e6-af03bb3ee25f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1c6340-2469-4b2d-a4cf-0c16acde2054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51b2013-de4b-4051-8bbf-4c7b426f379d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3061d9e-5560-42cd-91a9-15613450a148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75feab51-f8bb-4dcd-9edf-90afc590c2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702b7d1e-0d70-415d-94e9-80c48f01989f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2bc4391-3018-4f5a-89fa-ff30f1180005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc590e87-113b-459a-87f6-9b26bf0d7494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a6fa63-7063-4f4a-81b1-cf768685f70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "975404bc-3c1a-4608-921f-8912b48a8b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca8a23e-c62e-4318-9175-57ea16b3d62f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b9e416-e39c-416d-9465-84fa79caf7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0368ac5-a03d-4e67-afc4-0aea6a4171ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432b90fe-c661-41de-b1fd-ea7f6fdf4ab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "dada37e7-0d55-4daa-b671-eeb1c015097f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa786b39-6237-4536-9449-54daf1c6b94c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cfafaa4-0f28-4f12-a2e7-64890c43fb07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2303410b-46eb-45e6-98a9-49cab346bf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f91feb6-c497-424d-9dce-70a9307adfd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dca8202-a25c-438a-af90-5983e53d8659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f7a3e1-a2fe-4ec3-923d-e414c4383b2b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc473a3-ca14-47b9-9b2c-19baec1e11c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0a5102-1c93-4321-9285-3bd5906ec237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7823d76b-44f6-4a7d-943a-51660ceaf60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbe6641-8594-4c5a-bd4d-3f9ceb629c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5c4e48-342e-4b7e-b1df-c0bf6ab86317",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087c8eef-99bc-4bef-af9e-a2afe7e96d60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51be1b04-d56e-4112-ac4b-0b9e28405e2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37c053f-1309-4cd5-a16d-db37edf68aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7d8d71-c5db-415e-8367-6f9d382677a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018525ed-4bcf-4e3c-9aba-e1ac6d75d371",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9150af3a-86e5-437e-8b6f-b86e5bf5f9c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a05ba48-6ec0-415b-aa2a-bb3dca314d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1239317d-824e-4109-a56c-93f9700ab3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb8dd12-3a77-46bb-8fa9-36d5cabf09b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b234254-5c9a-434a-9e9b-8b02283010ad",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a65af7-7f56-4c48-aba0-c1570d05b344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995e7ba4-7c1c-4b85-aa0f-10dc1e657305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852ff523-4696-4003-8a11-5d9f32051983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc1d917-5707-4cb1-a57e-df47f833c722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b236e25-5eb3-49c2-94a7-9a98b343199b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d11c0306-01d3-4ecd-a8f9-25153840c864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e9702b-f9f9-4490-9c55-2a9571a683b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20de2b40-7713-4b29-8a80-63b069d03f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a003ec4-2f9b-45d0-89ab-422130679b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d68456a-8bfc-472c-99ca-ffae8316191f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fe6f2c-5137-4884-9bb1-567c80cd3be0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0d1bf7a-5595-42a9-a538-55485fff2cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6b10a2-9c50-4396-9b8d-830340cab840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acda42c2-666c-4c7e-ad70-70695c49f6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4838015c-1283-4eed-9773-1c1b1e0db92a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ae35a-a73a-4e3a-9bef-61b4a57b02c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2daddb23-c65d-400f-8bc7-7a4ef395b7c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3364652-ce52-44f5-8d08-29948cd8b3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7018782e-1f3e-474d-a4ae-7ffd24f6da81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98643ab-290d-4353-958e-6c4c13fcd25a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ba7d6d-fb15-4cf5-89b2-ca79f5c9003e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87509084-a72f-40bd-8f55-05550719dd5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72338c1-3915-4a13-8890-b603bc921cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d3a1d9-b564-444a-8512-55faddfebe4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecdf8f1-80e0-4b9e-b8cd-12e94a0852cf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb2478b-098d-485e-829b-6afb275db00b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f58a2e5a-b94e-4989-95f5-01ce46aa0379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a90e524-dc28-443a-9f58-c20b28d041f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b13608c1-0610-4362-93a3-3cc93165792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ecdc04-2edc-41c5-be54-edf21904a073",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a27062-158f-423a-9543-e081bc21f081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5636a3-37ee-46b6-ada2-3cd829145218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2c65fc-bbc0-42dc-8e04-8688567ede61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a5b04f-dd20-4156-bcfc-1974d508ad8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d169fa-4b51-42be-905f-b50feda5b8f6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "964e44a1-7b32-40a1-be37-50e501dc5cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66f0b6fe-462f-42ae-9e17-3a035c5e30da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da21093-f69a-42c3-9c5c-86eeb4a01f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aac283dd-7cec-4854-9936-c6406bacd69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a83725e-42e9-4834-a920-4812efa191c1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9415c9c-4ef4-4dd0-930e-bdc726369938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5152bfa7-2238-4588-b813-63852dad4de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8bf068-b85e-4558-855b-6fb526fa543f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79dcb5c6-0135-44e6-bab1-2595d63aeb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c41f8c-5b97-41c9-8c74-9c40d95b105e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cf36a9-10dd-44cd-840c-2eec42843a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ec89ed-00f5-4a9e-a4fc-5ba7d3f998ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39ed76c-eb43-4cbe-8912-cfd44e911f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39c8c3b1-bb3a-421e-9242-24a97e05202a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c348ca8-014f-4d38-8525-425571fe51d8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f755eb3-df4b-4b4c-ad24-1095f4e44517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fd381f-8df2-435d-bcb4-46105e76c5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8186eb2-1464-44ea-a0f5-d890b8736dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66384c9b-cc36-4201-9d43-13d7ebf09b0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae76a9c-5758-4812-8e1e-79b01f8342bc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f56a79-a8d5-42de-9de6-3eaa3a9d1527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55bb85e4-03bc-4323-870d-611cd8daedae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85960e9-770d-41da-993c-90d191c0ef5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d87e5e1-5dd2-4575-8f41-fdbd989c6d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b24bb06-48ed-4b49-9f87-e7c8fff4f0fe",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d8746f-2165-4881-8b9c-df40487992ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5eedead-d829-45ee-b909-875027bc164d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8873151-cba9-46bb-b437-44aef20b0025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ac4e7e-522d-4b8c-ada3-a3814d5b845c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82d52ee-3511-416c-bec1-2b9307f38206",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac9e6ba1-912e-4eed-bd46-97babb94fa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82baf55b-7e4a-4919-8bd0-1454d6b93c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dba9088-7813-44b5-92ea-cfa2f9a2587c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da11693-c029-489b-bde2-0ecd193f3010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "858796f7-d2b5-41bf-961a-e4fe39517c2a",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aca87f8-3be2-4009-8ba1-a0ff8f60d5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919b5cc8-9b36-4091-883c-bee16232f691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4988a53-8de6-456d-9be7-30524b4aa912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6cc58f4-d129-4be3-a62c-bbdcdc22de6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25eb97a9-0c4f-437c-aa40-6a5bb5c10a12",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f149bc-a115-42c3-a0f5-e09f57e4bac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "337c71ce-ce3f-4044-bdbf-32e3a6d14011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d0fcce-22ea-4fb2-abee-40b2d3d2ce16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5d291b-7034-49e9-8e3b-9d28943178e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c861c-0669-434e-880e-bebf8c51a289",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64948613-0cda-4c05-9df7-ef395075f1b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f113bd1-3fc3-4a80-a916-767ff72ed56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c44564d-ef57-44de-b32e-03244d794831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80deb076-5daf-4e0c-bf9f-acf4e8306a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bddeb8-8e44-4169-908d-f45f0fad4894",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9dff354-c434-410c-9b49-9a9abb37c32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063d2c71-c663-457b-b5fd-017fc11e1ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520544cb-73cf-4785-bf46-91425982f631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e2362b5-d59e-41da-a0d7-6a8f80a6c02e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "51efbea1-7d8b-4bff-bb3c-461ec569c91b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8106197-27ac-4106-ad8d-3e012d2f2d4a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e40502c-1e21-411f-911f-3031cf28b751",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "95965878-394f-4f4a-a4d3-88ac77659c88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798accf1-99e4-438b-9dfd-c70c16133a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bf5b96c-2d77-4c3a-b4b3-f7ca548c3cfa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b5f1c1dd-8feb-4699-a351-8e8f08a4c908",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c46e8c7e-948f-4675-8318-979e51fbb13f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e389bb35-3679-4787-a214-f80ea59f5099",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e68bb093-0fdb-4e3f-9280-dfecee825220"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c357a4f6-2987-4fbf-91fe-9773f4addc0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "532d7537-2c5b-49cf-9fbe-593bc726d5e6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7865fbb-d2d6-4ddf-af3d-1e91628b1899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f63e66cc-8623-4092-8ca9-69c1c74ed568"
            }
          }
        ]
      },
      {
        "id": "f33c5e9f-bda1-40f7-b735-8248c31f024c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cef4f47e-d4a4-4ae1-b20f-b80d27492f26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41a161fa-260e-4321-9eed-24dc6c85c7f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9508c4ed-2992-43cd-9d96-23a8460ce57c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba00ccc-a9f6-4ddc-b423-0602a0c47d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8f88fe-1f71-42cf-92e7-e2b197b8373e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7771ce5-141c-432c-a654-dbdea5d46608",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0a502d-2523-4236-ba64-c0136d0fba33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f72035-56bb-400b-9231-16bc70ac7b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85097b7f-92ea-491e-9977-e17fd733c08e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04609aa3-7f04-4312-8cb4-00aeec8686dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8df651ef-eb76-441c-be04-ad23b25d94d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc8a696-54d9-49e9-9f6f-5bc9c33513e9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e578d7-715b-4af8-8795-c2dd809ab4be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9d8e21e-08ee-4366-a77a-33bc9abad7cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01316a22-e4b6-4a0c-9116-ea4c96013d3d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3813f783-08dd-4f3e-85bb-fc39d99311ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e0f8877-4d58-498f-8d29-316dbb0c69e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25823c69-34c1-4bc6-af63-4ddfe9d88a8d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409dc9a7-dc63-40b3-a499-984359d076ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f819bc59-0b29-426e-a27c-78a8c81f780c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa2c457-50de-47bb-acc5-4b32ff93e96e",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf2ecc7b-2e54-49b9-a651-24786a9dd34a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8400d03f-eed4-4d05-9c4e-378bce919e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d66dd8-c53e-47a2-8e7c-1aab67645f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a54079-d9bf-43c0-93ad-054f08bd9be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f8c81a7-eb98-48a2-b7f2-0469154392c4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73d5774-a615-421a-8d94-e25d3f6a2fda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34fd2ea-89a0-4759-a6e1-46f64f648898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ac633b-a2e9-4eb4-81a5-b7c7608cc30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d639385-0e3c-4144-85a2-9087b67cdfb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5932ef-5295-42b9-aa87-de91f7dc92eb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1c3417-651b-455f-a47b-f85acda96095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c51f31a-5015-4897-99b1-950c7948e6f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7139e7-b2a9-40fc-b5d1-3591340a3bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eeaad05-facf-40c0-8f02-d74e14a01196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f46bbce-c687-4715-9052-8b23417846d0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605729b4-5237-4c39-8bd3-b5bd67d79abc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f50d7a-71de-409d-abf5-1311a134f08b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877aedc4-df21-4a37-bcc9-2112cdb785c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75182b3-8ea0-46f4-bd0c-63295e0f307e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc457d47-d0de-406d-9548-451c7ebd21f9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72c9e64-fbf5-420d-b5db-68a8a2ef3d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a14650e-b94d-484a-9b22-76d541f99642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd836e6-5e07-4f7f-8aee-aaecdf2d2c82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cddbc61-ceba-422c-b0d4-ea3357e07a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89b4862-aa44-457e-a767-c91d7f12692b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed67a23b-c6b8-438a-8daa-61819ff86f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d0bd2d7-fd52-46ed-a0f4-7f5c735b1232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ffce3f-4dce-46d0-95da-0549f3caaaba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c17d3da-b74b-4569-ab66-a3551e7823cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e410491e-4b20-4b02-b78f-8e7c57e55333",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60d32a2-fdf2-4ca8-8561-db3de994c9b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c758ab49-327d-4489-aded-91a5197554df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4044422-5c04-48ea-a0bd-4e86df9e7f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc8dd8b-f9e6-43ff-bc64-62cacc17cb93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a4d253-adc3-483c-aced-9d1ca1045e08",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35695eea-4eb2-4200-a884-f7e4334582f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3603d541-23e8-4e48-9ca3-a81323d83fc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3454185e-5ede-40df-a8fc-cb579c73bcca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceabecdd-e1cc-471d-982d-33bdcbb1d04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c5ff7e-b606-4dc6-b020-cd900b9d5930",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c9afd8-6d21-4a8c-b337-97597f541e76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ce2579-110f-4dd2-a8e0-653812bf9f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a475ae26-be8d-4809-b82d-7518b74bfffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f2cd23-8c9d-4c87-aa37-d7b56c368423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbf2440-8aad-4112-925a-02966dfcc8c5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f81701-86a0-4944-946b-c0326d133a6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b19cb15c-e020-48e7-b358-5120b8b0ddd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07d5bea-ec9b-4b75-9f4f-8a60f1f39950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c1400f-8729-46df-a053-97a41cadc125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70c07ed-cbb8-4949-9c09-82ac6d691b6a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da46b9e4-e9c2-47e6-9dd5-5355dbf83dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2353c97-9104-407e-af14-3b74cc3d47c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f570e7-aca8-44ba-b02e-9bde80049194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a7d67d5-ff14-4ca6-b41b-742f0e576c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8664b699-199a-4b56-83d7-d15dc3849278",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e734253-a25d-4e5e-95fe-09291824ae64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcd85e9-4e42-460e-8350-6f788a0f5ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae9b7b1-57cb-41a6-b0fc-3002193f0833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "946af2b0-3a23-44be-a92e-6963353e922f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca0cfcf-1d11-4c79-a94d-431d61d67b85",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3315d1b5-7d46-45a4-8f29-23b1caa7d466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3212c67e-b4bd-4340-8565-6be109368131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30c6c6c-6686-46bb-93ae-3a34ad1075c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e90b94-bae0-48bc-8744-4a090c492fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c974993-bd32-417d-81e8-cdcd4699136a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de5eaa7-5c15-49f4-b0fc-782e757bd533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0c3cc1-4dcb-4d49-a48e-3bf2087f7bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd2fe85-abb5-45ec-929d-6d55e6d76f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a9d44c-e124-4f53-9a18-d11f7aa4ec7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04fbc80-50e1-4442-9d69-d47c2d06a2ea",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33933e8b-fc02-4170-8875-1904b0f14047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63d7eac-a31f-4dd9-97ca-3ccffdc3c46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7ca5fb-729e-4745-9df1-60f5d4454fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f36bfc-965d-4251-b520-d9a780547bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e300006d-8f43-47ff-b0ed-4334e184463c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd61b291-66e3-40f0-9977-967a5e5ec454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7172b9-b1a4-4fc0-8423-63d52ed0da09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6439dc9b-38c5-4121-b230-b8a20454a1e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5960fef-6827-4710-9e6d-a5dcae229c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca48b98-7493-4243-afeb-e3e2c46dcc37",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c204607-da81-4b14-b469-44fc00c5dc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a03ae1-7304-4494-825f-46d91cf0ccfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c83d7e-b15b-4112-9d0b-c76577bd3259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3716d9-81d1-49c7-a12d-8d3f8580d400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30170a0a-2e5c-454a-88e7-e5f26a8b9854",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00084bd-1afd-4824-b775-35b498661534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c8e591-1cee-40e1-89b6-1676da009e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc56e817-cd1e-4bcc-9e56-9fb484cbb009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca2d8fa-9c01-4733-9e3d-37bd83a874e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0febda64-ae43-4fe7-8b42-214344be9be3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f10e98f-fe35-49ef-8e93-e9552dbbd8c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3c4a13b-a873-455b-a4d6-d2b2174ed837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09eaaa23-caa9-4bed-b9f0-3ff1baf979ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535e1b8f-dbc9-4991-9a3f-45c5c22e2b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec10df4-682c-43c4-a167-e5991dbaafa6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9949d9a6-340f-4000-91ce-b6639df3fc4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5913fd72-8a39-4c86-b5e3-0066d9338db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dc7e37-a221-42ad-9eae-05eb5e9dcd64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67053a0c-155b-4ca8-aa69-52dc3ef602da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce3b5b9-1917-4e47-b887-f35a4d5c8c60",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627a065f-90d4-4b32-81bc-b680c92924ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adcfe0b8-fa99-4db4-8eb4-edeea8287375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f3c1de-8ac8-4ab3-a289-4435f69bdd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bfa49f-d3d8-46e1-b45a-da57c9818ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d4f930-8528-4d52-b7b1-1784c9ccc544",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6263774d-5262-4c19-adb2-28796d0fd9bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "551619ce-865c-4aec-8466-58cf5e479a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be7cd7f-877b-4abf-901d-78fe6eda7047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4454a7-d695-4576-95e4-647e50a3fde0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "861f7701-830e-4d33-b2da-8d0a31309847",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f31ee8c-4016-4fab-b830-d63fcfed6ea8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f6672e-99f3-490f-8cb1-84d1d214cbe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76912726-24ce-4da6-b867-75475ca46160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7f4fa5-4b15-4e12-9ef2-083b827d29b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305fe5f8-a78b-4fe0-829a-751025b96d0d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e16a4ff-9a56-475c-90e7-42139d94e51f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae2b80c7-e10a-4382-9d82-81576720f43d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a15548-fe18-4632-adb8-b4057dd7d58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83a1bc5-71bd-4c39-a795-784912b1f827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651fd0b2-5e61-4df0-947c-7957066a5f96",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f7ee86-31bc-4b83-858b-bf2c1bdf63a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c12089-10e0-49ea-9eac-63b4d4e31ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0b831d-c939-41bf-8e13-032b1cdc85c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284d0e5e-bf08-4e21-b048-3010e2e0060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72bf9d4-f150-4f97-a69f-1e7923d502e8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523f0364-2229-4721-b5e5-eeed2b8728af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63189ff2-94e9-4682-8356-55cf6c045c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a936ea2-6f67-4986-9cf8-a6723ba9e5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbafbf2f-ee28-4485-a827-84f526da5028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a9bf57-9bc0-410f-ba8e-66b3421cfd2b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac591a1-d4d5-4030-bb2a-d4a3b0ca0119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4895b371-c6d9-4178-a18c-a63d9901ecb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069621fd-9c20-422b-9928-eaa5c9f138f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c4fc7e-a999-4c1e-9cac-9e711c71e8e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4bf3fc6-cf1a-42ff-8d09-1f15afa0a28c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0ae08a-7282-483c-a84b-7fbf50f3396e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d7c74ec-3987-4117-a380-dab3b520b47b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000ba9c2-3458-4a8a-93b2-27e76a06bb24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671240b7-19af-4d01-ad75-d2d0d5afb0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1178f156-ed92-4079-8c55-b0f38b1a9285",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c7a521-4592-46a1-8135-ccdf9e4b4127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc24d55-64b5-4bbf-a232-f62d26de6cc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d09159f-4a43-4363-8d90-6b874a1ff728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b2cdf4-3646-4b9b-a35f-ac2e64a64d61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "982ab198-c90c-4d71-a1ae-874c52ab4264",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef28202c-a283-4fe9-9735-01b6d168f6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e3c9ec-416d-48a6-b20c-3e12c2fba4ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f212e0e-65d2-417d-b1dc-a281cb8bc29b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95e3b61-ac8e-44b5-8c71-6234b2b48afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c753a3f-1aaa-41e7-960b-02bcf79deda3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde2d2f4-2698-47c3-8185-2e327cdf0846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b4e07a-d2d2-4c3b-819a-95dd22955b2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41859bc4-2eaf-4253-a761-e9953cc20aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05525202-7b2b-402a-935d-e893247d2b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0d653a-617b-4d05-a19b-4d6615489e39",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc2eaac-ffb8-441f-8708-c4fde8a3e435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c250d73e-cf1c-4c84-a070-8a70ca8a8266"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41777c8d-3176-48db-9ab7-0b2d444eab5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf11bd8-d935-4e95-a978-e3226249314c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9836c1cf-7a8c-4004-aec0-76a394906f87",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4123356-21bd-4e58-9d43-f59552237bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53c7231-d618-47e2-83a0-d35cf5096e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824aaad4-3fcc-4cfc-b9a6-b24053efc1b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c51f7d-af34-4844-8854-f00b631c2fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edeaa5b2-8da9-4512-a178-723dbd94ae42",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f8f954-47a8-49d6-9683-2dad16a91ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6379cc-fb69-4300-84a7-3bb9d36a8339"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8d840c-f4b9-43b9-90cf-e69028f72a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534b2fb7-9879-493b-b68e-333c1636f718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5473431-3928-4357-a2e4-af642b6849e6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b965b7b-71bf-44ff-b876-e0e5afd02b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256fcbd6-3fdb-4c35-9ef9-b886dd630a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba8b0b1-2fb8-4e66-93ae-7551d06b047a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fc9eda-936d-46ef-b24c-0c2604a91c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7c81eb-fb86-4077-a538-74c7f6eb8ad5",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f498f69e-6468-4112-94da-9a55b0827e5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0656b4-757d-47e9-8031-1085527fabf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bedf7f0c-a9bb-411b-909e-aef83fcd34aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2857031d-c019-47d0-8b8f-9d8186da4227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3145be2f-593b-40ea-a7e2-c364ace9d0ec",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cf218d-f5a4-44aa-a4f6-f7afc6073235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938da24e-fa9c-40ac-a125-77ba6b69fde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8796e2-8f8c-49c0-ae6e-959af001cc7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183972a8-9057-4e41-901a-8ce7e4fc38a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fff6ba-e63f-4a0d-a852-c923cc54a1fb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eaf1ba-d09f-42d8-ae63-eafa6798fd18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f641aa54-ce40-45f3-95ba-e81e87a41ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9f5c53-f470-42b9-aff8-d47744a6383e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cff7e31-cdf4-48b9-abbb-13f7ce23d358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e50d23e-ee40-4436-9be9-a9a8858d040b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627c0b23-d174-4b72-b560-724c2d902feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c219027b-448f-427d-b087-c98ac252318a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca8704d-d67a-42d1-ab54-ecc885d5e5e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57cac7f3-c408-4143-9131-af482bf9fbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f199ff-0404-423a-a475-454b38f7a3fb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33b7f57-01e7-47e4-ad2f-37383e9edb2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f2a0d8-ee79-4c8d-b3cd-f6f4ebc8791d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17dd9af-adcc-424d-b7b3-23f462e1dd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21ba497-5ea0-4752-9605-128e8f73bc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ab43b7-ff11-4829-9cdd-ea53c1a6dfda",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575549dc-efc3-4463-b7be-ad9852791633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6994fda-7d1b-45e3-8c5d-565dce46ce8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89337651-bbff-4539-98ba-5ffb5072597d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822a9b0a-116b-4d5e-a71c-816148a81187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e17de4-7c67-4b97-a363-bc999f2eda61",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70716240-7c2c-46c8-8f74-9c52aa5923b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbeff011-25eb-438a-a4ac-fc9e04056c5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc8f32f-f9f6-421f-a6dc-adda49d0f12d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45833b92-cf89-492d-b5d8-23554b47c2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0bdbeff-b077-4811-b536-29671f7374a3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911e7b49-0396-47b0-bbb4-b77f174b193c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da3e7ef-c188-4174-86a2-324085ba5ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b6bead-ceaa-4bf0-ba3f-3ebfd05f75f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131f2ca0-2bc2-4a96-8e44-17145e7215ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11c410e-f219-4526-8755-3ca8c1c3cdf9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a20596-aa22-4c2d-9307-e16c30cebf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8838a01-d160-4f61-898a-007c559cf513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1432db-bbc6-4b6f-b349-23204e799451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5036c39b-2ea2-4e4b-a67a-e7782e98848c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b484a9-07fc-4307-a336-b5697576afca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f27600-0075-4a59-ad7a-e74226ea244f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd967be-da14-4aa3-9600-739819219770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436f3955-651d-4625-b805-94e5dc6b2cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5397a5c0-d2a6-476b-908e-77460165e507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580795e4-4f16-4405-8be1-2287c5168829",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ac3360-4649-4892-b5a5-2bad07966f76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827ba546-e16d-4768-8d7b-fd0133ec8ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f1ffa5-8704-4756-8836-12cf0bfff82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47887148-6ecc-408c-9ea5-6094dffc2024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2f4ef0-7252-4ef9-bdf2-58fa7290679c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7d0829-2fc3-48f7-a9d3-e9e04030cc29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad17175-f36f-4a56-b853-eea1043658cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441057ca-fc67-4b06-9162-d2f60d1fd827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07fdad9a-f50e-42ce-bd85-b9bde45d6377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a7d82-b155-4cb3-bebe-e11d0bac33b4",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f35e86a-98dc-4152-813d-99285f4c673e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f54ceb8-0df5-4d57-b35b-1c018633003c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4076ea-f924-4587-b0cd-f28c7951a658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78e8a8a-f059-4c6a-91b7-b39573978ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cceca731-f12e-4229-957e-e8ceee28a388",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab1d90a0-c7fa-4487-aafd-37f831cc5740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029bacf5-e0f9-4d52-82d8-9baff7604bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325a4a25-833c-4945-a007-1401db485c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5916d670-532e-4ab3-aead-009c7f29df53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f19b7a8-2b8a-4616-9db0-34d943b3e41f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08cae4fa-550a-4f5b-8b1a-a74f11614ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de8e801-1687-418a-a0bb-cc903f8d502c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25ed5b0-4c76-47f0-a907-986aedd103eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f26e20-317d-40c9-8b20-9aa9ce290ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3286f8ed-a9b9-4a96-aa10-7282a70db6f8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630101d2-600b-4634-8a2e-1008659474e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d45826-881b-471a-b9c3-8264cfafb8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba39c131-c82e-4ae1-a5dd-413b18ae88d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71381b26-739a-4459-b400-90390c8d619d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fae748-0f87-4b08-a231-50c33dcda662",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abe1c11-17c2-470a-8b74-3b0a5edec040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6373e7-48a7-444b-a25e-0aab74a90919"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ae6141-6a51-482b-87ba-61a6ec07122b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e039bf3a-43c3-40db-ae73-9b72e10d8567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fffddb-3ab7-40d9-bf5a-fc09c3d1fb71",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b587bc22-9fe3-4fb3-a1e5-861a4e9fc3d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b15f7f8-3075-45e1-8eab-65f8deba006a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cef39e-1f6b-4371-b98a-ff7b784a1a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43eee943-c48c-4036-ae02-3e3b7d4be048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cecd890-1171-40bd-9901-3faaafe611d5",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a20f0a-c6ce-44fd-946d-db1d16a8a77d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8289fc-a3e4-4e70-bd51-9f8be695a63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec032c48-97b6-461a-a14d-3cc14467babd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4978dd-1a89-4863-a758-355291024bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d999076f-4de5-4c72-a60f-0a45e7fae601",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59194367-5242-469c-84bb-61bfc3f9cf8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f6b7ed-a275-4538-96cd-3508d9925ea0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2dfc17a-80b3-4fca-83f2-c41ee324b41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8255d6-d014-498f-899c-19b835ad8091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9f5153-4fa9-4367-bbca-4d356fdfc9df",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9fced3-557e-4257-b91b-53708e714f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee8324f-2ea8-4b26-8ac7-3a16d92b0ffb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabcbea3-b0f0-448f-8a03-bb46a1d3043f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ce6cc0-6c4f-428f-a2f8-075322822f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117b6de3-9d78-42ed-9d65-f101cd5868db",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9220e000-0c98-4657-a243-c6da78a3fd56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5812e547-7a6b-4091-b16f-c6a993f2c140"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8748c19-4fe3-4c9c-9c89-b3ca37ba4fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf86cf5-5722-4fa5-9b42-63e9949f4755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c12a68-5331-4c4b-bc17-e902a304fb29",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58188ba-8a64-45e8-97a0-4bd85a6064c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0f0cff9-9457-4283-ab6a-51212eaf6eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e523ac95-2998-4237-9b87-28175ec64ad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb028816-9d3d-44e5-aaa5-8e0f0c85cc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160472ab-1fd2-45ed-b2f9-40a236c053f6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f3106a-f7fe-4189-aa4d-2bb627eecbe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1ec8070-932c-4641-88c4-e75096eb6800"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2d2ccc-720f-47e0-9d86-cc98becc74ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e360f4-7fda-4522-ad5f-87249dcd3758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8660c77b-5783-4c8c-a531-ff6842461bc4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e4cefc-74b1-46bf-83e3-1b5d9cfcd46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66973bc5-4f1c-4ffc-b3d2-3d253d9fbcae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b7725e-3e25-434c-8aef-e68938a51b08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ece425a-16bc-42e2-a4f1-c88aad580f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8532177f-1f61-4cd6-8a86-942e1857db06",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc778212-9ab3-4e66-a60b-0bf896abbd5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49668ad1-3190-4d14-9eb1-db7225cf8b69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b89ee40-04bf-4047-bb42-d2f03cc53bd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b5adf9-df4a-4d4d-be2f-5de551aa0c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c2b40b-e733-4607-9c0d-9c07762211d7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf7cb18-69ea-4fc3-baa0-cf75e40a0a5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99afcf97-d072-4e54-ac08-1cc258bda0dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4862b97-2e95-4b13-90a0-cf0876efbe4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbd74e3-60c1-435d-a537-0609d1816e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0f0e7f-994f-4873-90b6-c20c1dd72b3b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe66c07-0017-48f3-b878-52205b25827c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0f3e29-1168-42d9-871a-239ea3f510c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff78a0e-801d-44a0-a955-8d98183bf9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9427c1-b1a8-4230-972a-f0be66750049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d670398-29d3-4133-b91e-70edb8d1ae26",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8b12fd-adf1-4ec2-ac36-5ee81defe1b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd0c80a3-4626-45e7-b4ea-23ba8e282e25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a30e00-9780-4d50-906b-e0dab5d0f28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f310cb8-342d-4cd9-aa12-c68e4644adfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61810d22-17a9-4de1-b96a-0b694b4926ce",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628dcb3e-1edd-4b87-a1bc-2cc48875d200",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "402ac486-09df-40d5-978b-e72479ce5d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f027a3ae-4eef-4bf8-9a9f-51a46354dd7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa558c8-7459-41f8-a951-81a04b3a1205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d94685-c02e-4d5f-b8a9-8356abb5d158",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f11ebea-54e0-4f2a-b108-85e8b99e8a64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1eee4c3-b6d6-4f39-8b77-a88e5f630b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6d6d1a-a825-45e4-bddb-acf5b3c051e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb98f559-e217-4b28-bac2-dbaab6b64532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2684ee29-ab6e-4c5d-b271-3221fabf505c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8214c9be-ba8b-4183-b66a-6875228c24eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c484286c-1124-4807-aefd-b80fd303985f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca23d57a-dd8b-4010-863d-1bb4f8437ba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38be17b-f439-4be5-ba26-cd7ca56e1214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0aea03c-52e6-4b82-9489-3feda46727ca",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6f91ad-03fe-4d66-add3-bba5fa8ef74c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc47369f-c3a6-4718-bf45-80f6e22edac7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e4ba01-3db8-452d-85b0-9e55d9c78dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97993d95-50bf-4c83-99ac-64af048cacb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664b3a0a-c5c6-4120-83db-fc3e4d8281d8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da02c7e-85a3-4a24-bc6f-edc8efc936d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3db15c8-9a1a-41d1-aa7a-115e7a793cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ab217f-d690-4a67-8e8d-0767f4d632fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f787318-a6d4-45ff-9a1e-763382b4544b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff876365-197e-4802-93c1-e2a9d5e96bf8",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d9f2eb8-e392-41ba-9ef6-9e5c21d31932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac3b248d-a4d5-4e21-a075-1df3af2c37d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bf90a9-9611-40eb-8690-c8e07986c4dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66a2310-3dfa-41ce-917f-4d05c656d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e742cb94-da35-4cc8-a0d2-24ab05c39c04",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5b577f-76eb-40e5-92d9-960ccd4f6cd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01e2d3b4-4f26-4e3b-bace-334554ac1776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea0f286-bf81-4c24-8e28-9fdc951a1d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d9bfd2b-d0c1-40fe-bb91-ea320e36e900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb55be7-0618-472e-b937-ab9a7b129491",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3665a06e-cabb-40d7-b24d-e963ba35fc3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5612cb2b-97e8-414d-bb99-8e1877f65e46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34adee8d-8a94-41ee-880f-0c50b661cab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aeacd23-4f5f-46e9-a29c-10a9114db603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc1a6f1-beab-4130-8ccd-35ca1bc72f4b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8d57c5-6643-48ea-b807-a2a989bc7eb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee224fbc-498a-4c54-acd0-58e3ca0491c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181f603f-9a1c-4ebc-8726-bc7a80919466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfb5b41a-672a-4740-b122-725703ad0201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee976f5-f806-4b14-bd30-1050680500e4",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917de860-61c2-40cb-800f-0203972462df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458a92ab-10bb-4118-b906-5528bbc4a445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c29e5fe4-0f7c-4940-bccf-7913a6b9486e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbcee4c-1117-4632-8b99-e0a43f06f00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be64454-a15b-4810-aabb-fc7a6e1ded6b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e837f77-5dd6-49f9-a962-b82973e7ffde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b13b6bb6-f6d5-4ee4-8daa-89fbacff7f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4422638-8a2a-4372-a648-ccb4667157d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b487ac-4c6e-4f28-971f-c3a78627fedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae480ca-7883-4ea5-b1dc-7b07e377a8aa",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96193e96-316c-4c36-b7c4-1cbbdd90e255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46ca4f25-7bdc-4e40-86b2-33de32e671fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0222f800-5c4f-4b50-9582-13e448a87ada",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ffe7033-f967-4e99-a53c-918accb1b65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10aac90a-4927-41dd-99a8-89309a3e262d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bba6dc-efef-4e80-9a3f-32d7ac1e1486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2379ee57-9747-487f-82b5-3e30ff6a47b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba4541f-f4d1-4e98-9552-ab61c5fe0b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677d9e83-9c17-4764-88a4-53e5fe2dbd19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dbe822-e953-49ee-874e-3bdf05ffef12",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60beca17-4429-4cdc-a763-9ae500e5c14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f09cc0e-2379-4de5-bf5f-ab7a414fd6d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a227539e-4bbb-419c-bbb4-401a9393edd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4d52eb5-9b7f-4cd8-8f7e-2fad558444a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4571526-dbb9-40f2-847e-c38b2cf5926b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56527d1-d86c-48ba-ac44-7d275413b7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4858681-1788-46a3-b429-1a5a1614ae97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4bce850-d900-40de-be09-f1bb11ab854f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9eb0698-cdcf-4539-8d8c-02e712f985bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca5231c-2361-43bf-b076-3895eb9144b8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a3cf79-f841-4a44-adb3-611e6f099dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c424fcf-8ee6-4418-aeff-a2e17b504a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53856ae-6c5c-459e-af6a-d97727aedb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b60911d-74d8-48e9-926b-6e24c7905a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c651a69c-9a2e-470a-b1b4-db998399e06a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484c253f-23d5-48a4-9cd5-61b3ba78e94f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a92b8fc9-7688-421b-bfc0-6dff0f7d7415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c60491-830c-40ba-9f91-3880442cc27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57637c88-0539-4255-acc3-d6af4bfd4c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d8cc5c-cb3c-4e72-82ef-9228d2837e9f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bade45-8916-4500-93ce-05c83cb2fcfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e288df67-acea-4902-9694-2794570814d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca003e42-b003-4fd8-9b32-db81a60d5703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e4cc4a-2694-4212-8417-d43f5993cac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba665ece-15e6-41d1-ae34-957423d11b84",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c10351-10c4-486f-bf2f-1007b7a78d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "811ddf3c-5eb7-4f0c-8a18-22da1fd70607"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913ca656-f1fe-40e5-acdf-1b84c992b99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cca263c-5425-48fd-b62d-5f7e49fb5f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4d2324-db76-4063-9d45-3c1f1beabafe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f282897f-f8b3-4261-bd96-fc2e507d66ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e8cc456-bbb1-4b69-9b5a-88a4ef16f908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebbb046-03aa-4e32-9f2a-df7bc386251c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b50310-3937-492e-bf42-5dab86be962f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ea7f77-4a07-45b5-97a4-1a1b58973713",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ee5db3-abf6-4879-b150-c70b16654a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b167edf-23f7-43b2-95f9-6f24c9e2463d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "553fc234-ceb2-4937-bb67-ba8f9bb33d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffeb170-3350-44cf-b796-2794754bee6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61a2854-fce8-4986-bcb6-160f6881c478",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca3cea2-c048-4163-99a5-1f948920f119",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "520fd275-3c7e-4a36-93f7-e30b26318fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fe470b-976f-4ef0-88d0-b0263bfe9684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9105deeb-f758-4522-9d9c-b87611e1db48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9e6d00-0938-4c97-ae7e-a0c5ed1123be",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cf8e32-aa2c-4c19-ab9a-7a4982735f4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e872f9-01f2-467b-bdbd-371a80e60dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9889db7c-0c51-43da-acdf-d6ea4c261a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541820cf-1c62-4ee1-9d1e-89784392fc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8621bbe-f366-4713-9283-091a947a966d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbaff189-a690-4774-ab05-686422cbe583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0085d1b5-dc11-45db-869b-03371e0a736c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3c11bbb-3f92-4252-91e7-9873bc71132f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f442a0c-72fa-422a-9032-cfa0429ffe3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "542d0d81-ff59-4455-a0e0-8a8733cd5779",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58c249c-dcec-4d4e-b1a1-471ae03cc928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62514119-9feb-4b5e-b7be-092b75ec56e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa7357-deb2-44bc-b506-0b5c9b15d758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2f030a-046e-416c-a634-0389a4766eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9656914-79f0-4a03-b0f7-da546472f07a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac15fddd-f83d-4f46-8f85-83cd7048ff54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "860d20d9-3571-465f-8dbf-495f371a35e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ed3aca-5a42-43e2-bdc6-69703540dc9e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7030867-8aae-4f4f-9028-724289c4c20d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7753f454-5b5b-41da-b894-9ede40185c5e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60a6558-7ccb-4371-8e48-d31a119c1e45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bb4ee52-ee5d-40ac-8155-5a96c7eec319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e2877b-1f75-4c8d-a5a7-98acf8d4dae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae66ba0a-b372-4120-abbf-40f7662ac307"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dfe2676-c286-4248-88f4-58c2c9f9ed0b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb872849-9de3-4c99-b5bd-eab4558bb821"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "167ac0e6-2d30-4987-b1f3-de8c4420f764",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8917ae7e-bf66-4b20-af86-75f66661d9c7"
                    }
                  }
                ]
              },
              {
                "id": "d449b8d6-d3a7-4073-868d-515997aa5006",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bf47b6c-7c1d-46e1-8053-3b7009e92c50",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a6c9d5-e58b-4b38-a971-b5b0fc90edda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "69b86670-c491-447b-a86e-c7b83714da0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b092fa0f-45b1-43e3-a229-92188ac7ab85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a18a4f9-3f57-4589-b521-2abc25bb8a23"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9675efe4-9d7a-4168-9626-610ba6064154",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3cfee2c6-7d08-4fe2-947f-2602ce345f78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb16fc9f-203b-4ce5-9c4c-ec5e63774727",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "993b3dcc-94ee-4774-8866-eecf5a8f113c"
                    }
                  }
                ]
              },
              {
                "id": "f9d6a6a3-3b41-45b0-8bc4-5b1f3bbd1c8e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "de5eeae0-d4ef-4289-9528-33fd8425bf1b",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06416ab3-5dc1-4635-b880-2d92d59bce73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "21eba281-80c8-4226-8941-6e2002a31238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a9e765-c8ce-4cdc-a138-a90f46b86a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e68f5d-0dc2-48e6-b1a9-8d485e838e59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4ea71848-b0b0-4eaf-b90e-151d8f0b5484",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8aea1ab-2365-4152-b0e0-c83a4c8e9871",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78ed2183-2975-4f3a-b98a-936838fc8edc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab87b361-090f-4357-a4aa-fe497ab183c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93650822-7c03-4d12-bcdb-72d4c40727c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46be8840-f82b-4aea-b734-a9a1171d9ddb"
                    }
                  }
                ]
              },
              {
                "id": "fb088cd6-0eb1-46dd-a240-9e85ccd3af76",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722fcb29-4cef-45be-b529-cead4489e5fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "26e6ea21-f4b8-4dd2-8cd1-145b3de8a5bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5ee0803-17f1-4b14-9f7b-014d5ee3fdf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3457f163-c0c7-4524-b4d3-b61cf3daf377"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e477eb5-ed5a-4d91-8ca9-62c6bc9f9cf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d982193d-12da-436e-b2ed-b1256b000c0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc1f79aa-3167-4c4b-b7ce-4222c3f1a1a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27f9820b-08d4-46c3-ba9a-b8050e3901a9"
            }
          }
        ]
      },
      {
        "id": "a9e27a07-3b2c-4dfe-a9f3-28bec9776ab3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5e115a08-3d4f-4bbc-8f14-8d93d059624d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "88d0882b-0554-4157-9034-fea82763cbec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e169d74e-c602-47b8-92fb-4add4e99dd75",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "822a233b-b59f-4f3e-8bf3-512c967be33d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a84f25f-e8e1-4f01-b6d1-488a3898bde6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffbedc20-4f57-4369-b4d3-bb4b5f564f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4015015d-216b-49d6-97f0-1cfd2349efe4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb52ac72-807f-4b62-876e-2ba25f718170",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a29c34ce-b72b-44d6-bd23-af6638a73f5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fac42c5d-4b83-48a2-ac3a-72cdc20409fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c0f05c6-f056-4e42-87a5-754513d51ad5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "604ec584-5599-4962-bba8-b097b3de57a0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6e4e3a6c-c00e-44ff-855f-0f5b45dfab8d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92b40b30-ec82-40df-8d13-a1d5360531f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85129fe8-c408-4047-8fba-1c2eb6707448"
            }
          }
        ]
      },
      {
        "id": "4f0f814c-b35a-4ca7-baea-a323d20c7e70",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f5982d4d-9d5e-4617-bec0-06f97ed332cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a1c35f2b-2d5c-47ae-a388-f473d582b889",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3fae415e-cffa-44c2-a43e-044c49ee6f10",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca7602f-1583-45d8-a0ba-2d826fb34ce1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b416026-796a-4b96-a65a-6340f26d62e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "688794c2-fb3d-4d34-9442-3f46d8c5a93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4999883-e18c-4caf-a10a-e5b59c135b90"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f48b21f8-6ffa-4033-aef8-43f08a9279c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2dfca05b-b965-42f2-b403-d8fc47015bdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "af5447bb-5baa-49a0-98c3-f7e38ab5af65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30b88c45-fed5-45c9-878e-b7854660df21"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0647e8be-4e73-4c2d-b54c-35b95c1cecd2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d761a32b-b116-4304-b34a-981e2e34a08a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39702863-8713-4df8-a0db-4b56144487df",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8cfc4f50-0adf-4eab-afa2-e6962ece1427"
            }
          }
        ]
      },
      {
        "id": "fe039b58-cd53-45e2-a34a-6ea3c807fccf",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4455459b-405c-4992-a96a-b8f07aef5437",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c138337d-73af-4e66-ab1c-c10d57473fac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0222482a-f237-4b09-b392-ed0dfbd9bc6a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a9c20a-ea4d-4b9e-80fb-df7b47af4d93",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ef50d1e-c843-41d6-9ff0-0559c6f78f73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bd943d-f303-41e9-a11b-5b3f45dc59ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "87908a68-c11f-4601-9b40-489c659268da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a4e850b-5a87-49ba-bdf9-dd2e2c8707d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ecb18cb6-f802-491e-a271-ea552fe1c68f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fd224cc-97e3-4950-8a29-84c87cdbb91e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4f2aacd-2926-4a57-80da-41cb78521e15"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7bb274c1-5ff4-4394-8fe9-03eca9125934",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6bd86912-de84-4e1a-9540-0975ba5b7a8f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22460f3f-797c-4109-a77e-df89cdc7322b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35b4a2bc-144b-4080-b751-4cdfaf048454"
            }
          }
        ]
      },
      {
        "id": "56548a18-e1ad-4929-bc4b-6c7f98f87c16",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a367417a-c178-4d23-986f-1cd0bfd7a978",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33aa8ce9-269e-4308-a1c2-4686a093c5a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "05047525-8913-4174-8936-f3cb090e7645",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af57b702-511a-42ed-9171-fbc1ab2c3f7d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49abccac-ead4-4dfa-b2d9-ee34456616d1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.97543859649118,
      "responseMin": 9,
      "responseMax": 516,
      "responseSd": 67.51313915187897,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701477276887,
      "completed": 1701477303588
    },
    "executions": [
      {
        "id": "5ef2de48-d4f6-4c36-8a94-7280ca92b2b8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4d56867e-1b48-4d7c-8982-2a28c9012ee2",
          "httpRequestId": "a486c752-3a78-44e6-a6b5-b3edb0cd8191"
        },
        "item": {
          "id": "5ef2de48-d4f6-4c36-8a94-7280ca92b2b8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "26b9a3a4-37aa-47ff-ab7f-c31e2d1e0ff0",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "20a59050-c160-4206-86b6-dd479ae73c3a",
        "cursor": {
          "ref": "d6c0d8b9-b993-4f3d-ab74-d3bd64f2ea1b",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5f143373-e740-4594-8a3e-51a2a2305a31"
        },
        "item": {
          "id": "20a59050-c160-4206-86b6-dd479ae73c3a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "02488138-d490-47e6-8824-7bb9dfbeb102",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "5e96a597-e193-4ede-bb02-70dad318a239",
        "cursor": {
          "ref": "63269a09-23fc-4c1f-b352-27c7774e5075",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fab4c7d6-49fe-4a72-80c4-1ba78b93e56d"
        },
        "item": {
          "id": "5e96a597-e193-4ede-bb02-70dad318a239",
          "name": "did_json"
        },
        "response": {
          "id": "1b3f73df-a509-4663-9356-5af82e5a4301",
          "status": "OK",
          "code": 200,
          "responseTime": 260,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0b0187-306a-463c-a6b7-379c6b6870be",
        "cursor": {
          "ref": "4a3e2edc-bcc3-4aef-92d3-9620bfbf832c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "55be3493-ec04-4905-86bb-7ce561685117"
        },
        "item": {
          "id": "fd0b0187-306a-463c-a6b7-379c6b6870be",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0cee9ae-8f7d-4c4b-841f-44fecc772bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0b0187-306a-463c-a6b7-379c6b6870be",
        "cursor": {
          "ref": "4a3e2edc-bcc3-4aef-92d3-9620bfbf832c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "55be3493-ec04-4905-86bb-7ce561685117"
        },
        "item": {
          "id": "fd0b0187-306a-463c-a6b7-379c6b6870be",
          "name": "did:invalid"
        },
        "response": {
          "id": "f0cee9ae-8f7d-4c4b-841f-44fecc772bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410c33ce-7f32-438f-b4be-6b4ec6fd37f5",
        "cursor": {
          "ref": "b1cdbaad-bc0e-4a9a-bb98-1950395bd5c8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "80b03ac3-c96c-45df-8d58-41fe78a1eec3"
        },
        "item": {
          "id": "410c33ce-7f32-438f-b4be-6b4ec6fd37f5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c967a024-9ba7-4816-8e8c-bd46b2ba308d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae068c5-2c15-43c4-a762-dceb686b5eff",
        "cursor": {
          "ref": "bd82c863-3527-4d41-b3c0-297e96f2b162",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "029d2b49-5812-4ddb-97a7-ec6489b7ef25"
        },
        "item": {
          "id": "2ae068c5-2c15-43c4-a762-dceb686b5eff",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "58521031-7771-4b51-b87f-17937cd3efce",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aacb2dd-3576-47af-b9f3-f23629d80599",
        "cursor": {
          "ref": "6b1ea762-de6b-4398-b5bc-5c8d5b27b65f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "334870de-17b5-4ccf-97d2-16728997f431"
        },
        "item": {
          "id": "9aacb2dd-3576-47af-b9f3-f23629d80599",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "449c957e-c069-439a-a6d1-c8ad98ee8c80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1579bb8-75e1-417d-824e-dbb76bda2cb8",
        "cursor": {
          "ref": "6dce7da8-192a-43f1-bc13-f177ed6daa7b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6cac3daf-1073-460b-b821-cc50e0c67d74"
        },
        "item": {
          "id": "d1579bb8-75e1-417d-824e-dbb76bda2cb8",
          "name": "identifiers"
        },
        "response": {
          "id": "69e800b5-63c2-4d6c-ab6d-6063524e9254",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d884280a-8f41-49d6-a752-6524d27e9276",
        "cursor": {
          "ref": "07e54f46-e744-44be-a62a-3d23c9cba9db",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a3cc6908-df32-445e-bc62-902665e2afc7"
        },
        "item": {
          "id": "d884280a-8f41-49d6-a752-6524d27e9276",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "244bb9ad-31df-4206-b0be-1f856d2ccdfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48803e6-c077-4c12-8b55-48a02cb202da",
        "cursor": {
          "ref": "b84a1cf7-c1ff-4595-a49b-95c8b82a2a41",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "68ff8448-02d4-4036-96d8-7dac2da6ce2c"
        },
        "item": {
          "id": "f48803e6-c077-4c12-8b55-48a02cb202da",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0b0367a5-4b3b-47c2-b48f-cfaf7330e462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf54739-7e3f-48b8-a8ca-e541d71dbcc3",
        "cursor": {
          "ref": "a1511305-07fb-431c-9431-1bb89cf533a1",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b1b174cc-e68e-4558-bafb-e916c2faee38"
        },
        "item": {
          "id": "2bf54739-7e3f-48b8-a8ca-e541d71dbcc3",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dc4c6280-9df1-4f35-ba7e-47f5d70d6a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8202365d-d325-4cd5-8c24-c8fc06ebf835",
        "cursor": {
          "ref": "016f7c17-9173-44d0-b827-edbde3326c32",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "52ddbc78-63d4-4467-8c7a-898f7b9df031"
        },
        "item": {
          "id": "8202365d-d325-4cd5-8c24-c8fc06ebf835",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "222d3ce8-714c-4064-823a-79bbe576c6a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3185e22-bb10-4ed3-9748-886855db9cd1",
        "cursor": {
          "ref": "6bcbc9b0-1ee3-4716-8fb8-615043b520d6",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8243feb4-f16f-41b7-8f91-655644ff0b1a"
        },
        "item": {
          "id": "e3185e22-bb10-4ed3-9748-886855db9cd1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "f64674a7-b158-442e-bcc9-9323249f8ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "327d32fa-a65a-4440-9bea-16a47538a12b",
        "cursor": {
          "ref": "0e2d23f2-9589-41b0-9c68-cbbd0d223592",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2cfbcbc6-aa2b-4971-81a1-aecfb162ed59"
        },
        "item": {
          "id": "327d32fa-a65a-4440-9bea-16a47538a12b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dd671e79-56c2-4167-a879-bcc21c2cf98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "356e58f9-e4d5-4da4-bd8f-76887c42e50e",
        "cursor": {
          "ref": "2790989b-41cc-4a0f-9052-3192bbe0cb65",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6cfe3653-35c6-4571-a63a-e3582dfd76fd"
        },
        "item": {
          "id": "356e58f9-e4d5-4da4-bd8f-76887c42e50e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9db5a06a-4828-4b80-8d4a-d129f58891af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76a607e-cb81-45e6-bb0b-763889241462",
        "cursor": {
          "ref": "9ffa5425-44b7-4cc4-a66c-c4f9f96d2f8b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "481ee1e7-d787-4fc2-9440-dde174e70aa4"
        },
        "item": {
          "id": "c76a607e-cb81-45e6-bb0b-763889241462",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "14b7327f-d946-4b38-9099-fcb3cb7b33e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53269306-0431-47f0-8dca-25afdabb5d0d",
        "cursor": {
          "ref": "0f4bc138-7217-4114-8f07-4df0f951757f",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0f7b22f7-0f21-4dc0-bb79-eaca5f45b5c8"
        },
        "item": {
          "id": "53269306-0431-47f0-8dca-25afdabb5d0d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "76900b5c-b898-4c6a-a983-ae563e1c9a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7509a9b0-1720-4c73-a7f4-0846961cd801",
        "cursor": {
          "ref": "26b529c3-1dad-4d41-8f09-4b684a500a9c",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "23436e51-33ed-477f-8e79-4c64151986f0"
        },
        "item": {
          "id": "7509a9b0-1720-4c73-a7f4-0846961cd801",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "4e51cd0c-caf9-45ac-9a4d-a9aec7a1ff4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78622db0-b9d1-4c36-89c1-449d57547b49",
        "cursor": {
          "ref": "e503df03-052a-41c5-b7b1-9ac874b74575",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cbc83f1d-45e3-4235-acf6-27b5f35fec5f"
        },
        "item": {
          "id": "78622db0-b9d1-4c36-89c1-449d57547b49",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "706366b4-2ab2-44ad-8466-853518e1226c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a8ff69-a955-4c53-a87c-380f65ea9311",
        "cursor": {
          "ref": "b72be665-e47d-4f10-a944-101bd5a540ed",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ee43d11e-050e-4397-a274-10da279e75c4"
        },
        "item": {
          "id": "12a8ff69-a955-4c53-a87c-380f65ea9311",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a3b52112-0535-4d48-acef-9e99b8275e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac21305-ffc5-4369-9a2c-c9dbcb34ea0b",
        "cursor": {
          "ref": "52741191-e3d9-4771-abcf-f54d958c7c0a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f11e3ac4-de90-4a7e-81d4-c94e53fcb006"
        },
        "item": {
          "id": "cac21305-ffc5-4369-9a2c-c9dbcb34ea0b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "57519958-15ac-408a-a4c1-36c4b23c957a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1fdcf5-bdfd-49da-a606-442958af08b8",
        "cursor": {
          "ref": "54baa0f0-8f70-4212-a86b-d5eac91432ca",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9931d411-e385-4584-a21f-6292d2d4209c"
        },
        "item": {
          "id": "fa1fdcf5-bdfd-49da-a606-442958af08b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "45a0252d-c365-417e-9dc2-b1e15cc757d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce420288-e199-41e9-ad58-91a67a1dbfb9",
        "cursor": {
          "ref": "9e9d81a8-86d7-44fd-bb34-dce34e86ff34",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fb4c9f76-e532-466b-8d58-96b4777283ac"
        },
        "item": {
          "id": "ce420288-e199-41e9-ad58-91a67a1dbfb9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5f989651-9440-48c5-ac74-72cd3b835efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaa5344-9797-4e22-a001-c629df8fd09c",
        "cursor": {
          "ref": "0f6a5d61-30f4-4afc-855d-d69116369aaf",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3cfc70df-811e-42a0-8e26-7506a3fa915d"
        },
        "item": {
          "id": "ddaa5344-9797-4e22-a001-c629df8fd09c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "908239fb-1325-48fb-a45b-de90eadf4d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3a2899-7652-4d5e-a290-b8a45ca34a7b",
        "cursor": {
          "ref": "673be37d-0179-420c-b2e6-ba2a4dbd0a63",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e0210762-defa-45dc-bf53-6203dcde887b"
        },
        "item": {
          "id": "bc3a2899-7652-4d5e-a290-b8a45ca34a7b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1b1eccfd-e2be-4fbb-9a40-ac14af14740c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3855947f-9723-4896-bae1-fbcabdf84018",
        "cursor": {
          "ref": "7a5b964f-8921-4f06-99ab-7aa6257619ad",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a38d6fd1-87af-4b13-80ca-8e561f28241c"
        },
        "item": {
          "id": "3855947f-9723-4896-bae1-fbcabdf84018",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0824cad0-f13f-4989-bcc8-b7fef33c1855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e60aa6-4cf9-4e9d-bdd9-8e3523438005",
        "cursor": {
          "ref": "df77b94e-1f70-4738-89bb-e83b6cc57f5c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2179a51b-42c4-4099-a351-508f85cb25d7"
        },
        "item": {
          "id": "37e60aa6-4cf9-4e9d-bdd9-8e3523438005",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6153d797-1632-46cf-b648-66b147db3460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9b9558-8a61-42bc-9aae-2625996ffa4d",
        "cursor": {
          "ref": "453774f4-f9c2-4efd-b010-2a3649febd63",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e19d7635-f26b-4d4f-8d53-934278e894d1"
        },
        "item": {
          "id": "9a9b9558-8a61-42bc-9aae-2625996ffa4d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "3067f67a-23b0-48c4-baf8-c3cba84bf3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9717b1b9-dcee-46e8-a83f-3f8ddbb74432",
        "cursor": {
          "ref": "fbe78bf0-6c65-49c9-9584-f0f5302522f8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e6e523d8-866a-4343-8497-85ebe6577f89"
        },
        "item": {
          "id": "9717b1b9-dcee-46e8-a83f-3f8ddbb74432",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "dd85e177-be08-42a9-bfdc-ba34709c551e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d46198-fa40-4af4-8593-21278db07175",
        "cursor": {
          "ref": "5f749189-6a00-4945-9192-cb54c9a7c96e",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9aff6513-ed7f-4f80-9a00-30de98787653"
        },
        "item": {
          "id": "55d46198-fa40-4af4-8593-21278db07175",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d8477047-3896-4124-bfdb-6c2bab1cc7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4842d042-5656-4514-a672-9144955cd4f6",
        "cursor": {
          "ref": "8c674778-365e-44ea-a04f-657e7962fe70",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "692a3afb-88b4-4dcc-b40d-78571c68087b"
        },
        "item": {
          "id": "4842d042-5656-4514-a672-9144955cd4f6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3ea9528e-741c-4313-9618-2fdb05ce14e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8092cfd9-5e44-4271-87db-89e1d99fcde4",
        "cursor": {
          "ref": "178ff05b-0713-4001-87ae-96b255fc763f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "650ec6d9-e8e8-435e-8166-37c8a41d1a74"
        },
        "item": {
          "id": "8092cfd9-5e44-4271-87db-89e1d99fcde4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6420ec6b-da8a-4480-ae38-b57ecab8b85f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84bf4807-ac0d-4b36-a4f1-9eb3ad102f7c",
        "cursor": {
          "ref": "13fc1a69-ae87-4e8d-bd40-590e2b62e4b5",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e3a2c778-48bd-4036-b069-17a91ea9db3f"
        },
        "item": {
          "id": "84bf4807-ac0d-4b36-a4f1-9eb3ad102f7c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5af52130-ccad-4806-b163-abc32414a29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed05c84c-a182-423c-ae20-54b3e91babe0",
        "cursor": {
          "ref": "c85de875-39f3-4fb6-9c1c-c60892a3768e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "41f19ddb-93a9-4dde-9aa7-ed607186e23d"
        },
        "item": {
          "id": "ed05c84c-a182-423c-ae20-54b3e91babe0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "eae9e390-8b9c-4901-8845-d1bcde926f60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60eceaa9-f983-45c1-95ab-0d4916b695fd",
        "cursor": {
          "ref": "6936cd51-73aa-49a1-9282-f852f4b3eb4b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "996395cb-8e6a-4db3-b742-2cedaaf6a6ac"
        },
        "item": {
          "id": "60eceaa9-f983-45c1-95ab-0d4916b695fd",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8dcd7257-2bba-4c0f-b1e6-116f49cab8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090c8936-fa07-4831-940e-49c52de1cc32",
        "cursor": {
          "ref": "37fd6907-db0c-4320-ae0f-f2e8bfccbe6b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2dd4e180-0d04-48a2-92d6-8e6bd5216b73"
        },
        "item": {
          "id": "090c8936-fa07-4831-940e-49c52de1cc32",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4f4b9d73-458f-4a98-ac0c-e26142cbf210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45045b04-e764-455f-9135-e6a60c1a79af",
        "cursor": {
          "ref": "6b94a067-b281-4040-9646-102b0eab7721",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cb929ec1-531e-4f29-a250-344fe4371122"
        },
        "item": {
          "id": "45045b04-e764-455f-9135-e6a60c1a79af",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "648c5a84-e8d5-4436-af37-0a828247fc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27f89477-2707-4443-92fc-cb1076d862a4",
        "cursor": {
          "ref": "23069433-765c-4d18-8d84-c952514cb570",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e0dbe5c5-a0c9-4b47-a4cc-f1ede2bb7c09"
        },
        "item": {
          "id": "27f89477-2707-4443-92fc-cb1076d862a4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e1542798-a6fb-460a-8453-745e3bb82a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c375a07d-141f-4912-bd86-6562c881cb3a",
        "cursor": {
          "ref": "4fcad7a4-9787-4a46-814d-f29d4c30bd53",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d99bd2c5-e35a-4fd2-baf2-26f5fa15d8b7"
        },
        "item": {
          "id": "c375a07d-141f-4912-bd86-6562c881cb3a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dda14e43-fae7-4094-8f33-98a3ad9199b1",
          "status": "Created",
          "code": 201,
          "responseTime": 516,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "80fe7a7a-a2fd-4b1f-99d2-048904eb0bb3",
        "cursor": {
          "ref": "b8862236-2a7f-45f6-8c3a-920b2ac0d1ec",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d5ebab1b-c97b-4600-a449-8641a2692aab"
        },
        "item": {
          "id": "80fe7a7a-a2fd-4b1f-99d2-048904eb0bb3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "33e48683-49e1-4e63-a496-f36dff166184",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "494287fc-31eb-4edb-b057-ce6da742e259",
        "cursor": {
          "ref": "d890d16b-f28f-4e13-9371-0460a06039a9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d385513c-3b23-47bc-91bf-ef518ed6b4ca"
        },
        "item": {
          "id": "494287fc-31eb-4edb-b057-ce6da742e259",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f666509c-f8cc-4ca6-b7d2-0b7f41ee4500",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0de5811f-1d5f-4909-ac99-c1c91076e952",
        "cursor": {
          "ref": "ca432350-7c3c-455b-aea5-d761ac1f30f0",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9ee3839a-2e0d-4147-8256-566a12f75a70"
        },
        "item": {
          "id": "0de5811f-1d5f-4909-ac99-c1c91076e952",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1a0aa1de-99a9-4b66-b94f-a2b776f395de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1566dde9-adde-4a6a-9ca9-e5bd119d01ea",
        "cursor": {
          "ref": "435eceee-af2a-4932-a0df-447363388274",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "9d819c12-f0c3-4e72-89c0-d78ca1fc8dcc"
        },
        "item": {
          "id": "1566dde9-adde-4a6a-9ca9-e5bd119d01ea",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "03d1d953-cb82-4d17-99eb-af36fe5ea49e",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "494430b0-2ca6-44d7-be16-4f0877c0a351",
        "cursor": {
          "ref": "0f520400-709a-4c8c-9c26-51d3f1286ba6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "45c5b94f-53b8-472e-afb2-957def978d56"
        },
        "item": {
          "id": "494430b0-2ca6-44d7-be16-4f0877c0a351",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "03df5a9c-923f-4244-b2cb-13cd18ce957d",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b3b02069-679b-45aa-89a6-3c4c4bbd6f84",
        "cursor": {
          "ref": "fa623190-51bb-4b93-acc1-236c0a1df2e3",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6b6248db-c508-48de-a25d-6f97f87bea3e"
        },
        "item": {
          "id": "b3b02069-679b-45aa-89a6-3c4c4bbd6f84",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7b8338b6-3700-4e18-abd5-12edbd3be561",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6c35ffc4-3c3a-4007-b38d-64b2ddef7f2b",
        "cursor": {
          "ref": "4aadc69c-f9ed-483f-bc06-ccbf09fc057f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9a78401b-708a-4f7d-a38e-16c2b0527c88"
        },
        "item": {
          "id": "6c35ffc4-3c3a-4007-b38d-64b2ddef7f2b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c3536db4-e493-4833-ad05-0705b50f43aa",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f48174c4-13e0-4178-a262-429f65747d86",
        "cursor": {
          "ref": "b088c3f9-f13e-40e4-8c8a-9a3098932035",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "eb0a6dfe-50a0-42df-bbeb-9204846d868b"
        },
        "item": {
          "id": "f48174c4-13e0-4178-a262-429f65747d86",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a0f6b181-76b1-449a-8df0-7e92d1442ea0",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "70f9d68f-ee7c-4454-a4fc-8a5467e89366",
        "cursor": {
          "ref": "5791aa32-031a-4ebc-a090-54c24a0e6536",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3c027bf8-9bb1-451d-8bb8-311716ba7e51"
        },
        "item": {
          "id": "70f9d68f-ee7c-4454-a4fc-8a5467e89366",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "55db5dbc-3cf2-4ac2-896e-a7c711e470b8",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7ff14c1f-4fb6-4216-928e-f5ad7f6ce88c",
        "cursor": {
          "ref": "70c4f81e-44c4-42e1-8278-f9f3f728ed88",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6b7248c4-e02c-4431-87cb-2a2b33775ef3"
        },
        "item": {
          "id": "7ff14c1f-4fb6-4216-928e-f5ad7f6ce88c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "da4abaf6-a439-40cf-b59b-de5976b1ae46",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7dbdad64-26ac-470b-a1a2-b03136b496a8",
        "cursor": {
          "ref": "7d63ede4-646c-4bc4-93da-16265f06d0ac",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9efa9b2b-c6e7-43d2-8cc2-277fb8dcc2ed"
        },
        "item": {
          "id": "7dbdad64-26ac-470b-a1a2-b03136b496a8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "59b2b83c-78ba-43b8-a295-abc4eff5b472",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0743f5cc-1b7b-4f76-86fc-37b25cd4a31c",
        "cursor": {
          "ref": "e4d16db7-c91b-4757-bcc6-94e7357311ae",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dfa1b573-6e7a-4d07-9217-7cdabb949986"
        },
        "item": {
          "id": "0743f5cc-1b7b-4f76-86fc-37b25cd4a31c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f535bac1-ed91-4ff7-b9dc-ea460c264df0",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "eb565dca-81b6-4add-bf18-8d4bbd8a9f3d",
        "cursor": {
          "ref": "544bc15e-e810-486a-b157-00b22751c306",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "d49d9ece-a839-4fbb-ba5c-a8821468c5bf"
        },
        "item": {
          "id": "eb565dca-81b6-4add-bf18-8d4bbd8a9f3d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e42961ad-6593-4602-91ae-aefc966746ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae16d415-6a77-417c-a413-d40d06b8a9cd",
        "cursor": {
          "ref": "7da24fb3-9d88-49cb-85ca-4888726b746b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a8b13870-c047-4ebe-8e85-d042275b13c8"
        },
        "item": {
          "id": "ae16d415-6a77-417c-a413-d40d06b8a9cd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6da2a48a-36b9-4bcf-8ae1-8f7b87041546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ff6140-2892-4b6c-b59e-e99c764b7645",
        "cursor": {
          "ref": "29b3f157-518a-4a2b-ab2c-38ae13820934",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2fde0491-f407-42c3-aa84-e502cd6d1ed6"
        },
        "item": {
          "id": "96ff6140-2892-4b6c-b59e-e99c764b7645",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3c3b3346-dd6c-4aa0-a073-c3a9ded8ce97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a7ae4a-7a80-4b6b-a2fd-fb835c429428",
        "cursor": {
          "ref": "de98a432-13a3-475b-bc71-9e205107877d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "433a2bfe-6e6a-42af-a5ac-7d7bf5b4d4db"
        },
        "item": {
          "id": "49a7ae4a-7a80-4b6b-a2fd-fb835c429428",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e36851ef-7101-440f-b0ee-5e2e8b2a189f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b394feb-d98a-47ec-b967-5e9ec5daf1b0",
        "cursor": {
          "ref": "95f68b43-c04a-41b8-8a4b-0045475e793a",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "337f0c2a-2861-46db-83e8-111b06c0ec1d"
        },
        "item": {
          "id": "1b394feb-d98a-47ec-b967-5e9ec5daf1b0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5ba1a4ec-b1ca-449b-a8a5-547a570a0ee3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8f50fb2-bc98-452b-b042-1d01f70a20b4",
        "cursor": {
          "ref": "bbb782e7-c5a8-4358-92d0-6c2a5bf7420b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7b8fa6fe-2bc7-419f-94c0-c380530a3029"
        },
        "item": {
          "id": "c8f50fb2-bc98-452b-b042-1d01f70a20b4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "acb4fdb8-1470-4387-946f-8419c7a4d609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f753932-311c-4c9e-962f-a58b4a377600",
        "cursor": {
          "ref": "b4f2cc7c-54b5-4dea-912a-49e0f4e0e18a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "297aeeb2-a667-47ef-a887-702d4d7b00c6"
        },
        "item": {
          "id": "7f753932-311c-4c9e-962f-a58b4a377600",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e75bc588-50a9-484c-aa7f-3f7dc6d57230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d2135f-7c70-4a26-bbdd-8cb6a69afeed",
        "cursor": {
          "ref": "3424672d-460f-4cc2-9c3c-dd8db5039705",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "86e8245d-acb7-4747-884f-dc3256971fe2"
        },
        "item": {
          "id": "83d2135f-7c70-4a26-bbdd-8cb6a69afeed",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "56de0705-3b12-4659-a6f5-02296a0724ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe847cb-f1a3-4cef-8972-133ef99edd40",
        "cursor": {
          "ref": "c9e76bd8-db7a-4bf3-b591-d55c9c60b938",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3317a03f-7ae5-4f2f-a63c-39020a588881"
        },
        "item": {
          "id": "bbe847cb-f1a3-4cef-8972-133ef99edd40",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7ac59512-d174-4147-844c-d4280a97b47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f9e011-0acc-42b7-ae1b-eaecbc3015f0",
        "cursor": {
          "ref": "bac27056-b26d-4799-b108-4139a62aae31",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "57f93412-6337-4579-8a86-90e6a5b80566"
        },
        "item": {
          "id": "96f9e011-0acc-42b7-ae1b-eaecbc3015f0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ad651201-7853-4afb-8c93-d1a914e5f71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9697b431-a600-4530-87d1-b8697b8c9a23",
        "cursor": {
          "ref": "d6dd857d-b972-432c-8d2a-d61bbe820bc1",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "284f5336-93dd-433b-b5d9-aed68ea06a17"
        },
        "item": {
          "id": "9697b431-a600-4530-87d1-b8697b8c9a23",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "6b1fbdb9-0b6a-4dce-9c16-d5bae60667b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ffcc65-f92e-4eca-ac21-84cc59992ab0",
        "cursor": {
          "ref": "64c90032-d864-4356-a786-8625c5484c54",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "03404921-9ae7-418e-a9d3-db58449a5b12"
        },
        "item": {
          "id": "47ffcc65-f92e-4eca-ac21-84cc59992ab0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "1e4cba7c-cb36-41cc-8c27-68bf92087fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b84e6c7e-5286-4894-a467-46490a52d79a",
        "cursor": {
          "ref": "822c448a-0a8e-494a-ba99-bc541b42f685",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "398d0238-3bbe-45dd-a5e1-b0854c7bfe3b"
        },
        "item": {
          "id": "b84e6c7e-5286-4894-a467-46490a52d79a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "21b7bab6-dde4-4f25-9c57-51bd79c9d841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ae8eab-63fe-47b9-a369-2c5e9ee2ff24",
        "cursor": {
          "ref": "68f90460-be7b-4a52-8bbd-55ce2fe28cda",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6ca0fa97-eafb-45fc-ab4b-546fdf36b4b7"
        },
        "item": {
          "id": "37ae8eab-63fe-47b9-a369-2c5e9ee2ff24",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7db4a494-8751-4ea8-b20c-82805cf5c4cc",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6d2f5122-4862-4a04-bcd0-968b7651ea8d",
        "cursor": {
          "ref": "eb083112-7d8f-4ab8-a0cc-9be889e75650",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "49b7356f-c3af-4757-9e92-cb78a0639007"
        },
        "item": {
          "id": "6d2f5122-4862-4a04-bcd0-968b7651ea8d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e7c5507e-7d14-4783-9442-344bc2a9ae35",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ef783965-9d1d-44ac-b27d-66ba8db52ada",
        "cursor": {
          "ref": "75389ca8-dcbf-47ed-b832-0acf4f3877c1",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "05554de6-1e45-4e07-878f-23b79ae25988"
        },
        "item": {
          "id": "ef783965-9d1d-44ac-b27d-66ba8db52ada",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "9793bbed-6ec2-4658-a543-0ff22ed282ee",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "07674111-ad51-4c33-98b8-b03bee05f11c",
        "cursor": {
          "ref": "93f16671-d471-43e8-bb96-996bd5cf01d5",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "80c8cc66-481b-4a8a-b7d5-a711be3e8393"
        },
        "item": {
          "id": "07674111-ad51-4c33-98b8-b03bee05f11c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c38cb230-980f-4f2c-be0c-7b3555d11eb8",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "29496db6-3168-4b35-b037-a4831c2a75e5",
        "cursor": {
          "ref": "d8f8445a-3bb3-4e4e-8fa9-78c124caad28",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e6d3c735-0326-44f9-9d40-0374087ca482"
        },
        "item": {
          "id": "29496db6-3168-4b35-b037-a4831c2a75e5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4f4ca649-f11a-48d6-8f9d-fcdb5bda8340",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b4fc1aa2-e96b-4db0-a072-965917f25722",
        "cursor": {
          "ref": "e0dae258-1096-481a-afa6-3502f7afe24b",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8ae49c55-0624-47ea-b534-49755e6482d5"
        },
        "item": {
          "id": "b4fc1aa2-e96b-4db0-a072-965917f25722",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "262634d2-79d7-4d9a-89e3-ac4c3320a27e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef2d596-8a1d-4660-8ebb-e0eba3b371cb",
        "cursor": {
          "ref": "bf71f9da-e25b-473e-b678-1e767779a294",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f8bda098-9105-477b-ad6b-9172cf327f64"
        },
        "item": {
          "id": "8ef2d596-8a1d-4660-8ebb-e0eba3b371cb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1c4665ad-f275-429b-9d6f-c5f7c64d449b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c092c84-bff8-43de-b87d-6e2db8b2a545",
        "cursor": {
          "ref": "a9dd8289-e1e7-4fef-a4f9-fc68b1a9ace0",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cb2e3371-6197-48e9-bbb8-377b6e4c664f"
        },
        "item": {
          "id": "8c092c84-bff8-43de-b87d-6e2db8b2a545",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "bfbf590a-03ea-4e75-a188-fbd156f5086a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4884ce-41ed-429a-8ae8-e67ae7c216dd",
        "cursor": {
          "ref": "a900b4c4-b715-4471-bce0-a9d3e275a9d8",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "90497532-f85a-4bd8-935e-36a6d2955043"
        },
        "item": {
          "id": "0f4884ce-41ed-429a-8ae8-e67ae7c216dd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "90c3f3fa-e69f-4dd4-b6da-e0e400d22b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "687edd4a-2e9f-4738-8f17-bd9d5b36a19e",
        "cursor": {
          "ref": "7a20bb20-47f5-4200-a274-8a98b291f5f9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d7c0a3e3-604a-4960-b45e-d738e0aabeb1"
        },
        "item": {
          "id": "687edd4a-2e9f-4738-8f17-bd9d5b36a19e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "39d6df1e-02fe-4138-b9b1-1867cb299361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de18ab8e-28e0-4335-9eaa-ad74aff9fcaf",
        "cursor": {
          "ref": "019f4521-cb7e-4c2d-be14-e696083c1caa",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "83737d61-e1cd-4b52-9b98-6f6300998a77"
        },
        "item": {
          "id": "de18ab8e-28e0-4335-9eaa-ad74aff9fcaf",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ed05ff16-c73a-4990-833e-60f74cddb4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf9d76a-5f81-452c-a08f-3ca69ddf6897",
        "cursor": {
          "ref": "94f836f7-26cb-419e-a4d9-0da4ff541281",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "57d2e5bf-e54a-4fe1-bd75-c7aed75f1e52"
        },
        "item": {
          "id": "9cf9d76a-5f81-452c-a08f-3ca69ddf6897",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3e64f3db-d54c-4f03-9006-8b93d7b98acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c032c3d6-b032-4279-b479-caca1fb2a9ea",
        "cursor": {
          "ref": "5b3a0854-e5c5-4073-8d5d-5bb862740485",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cd566662-a45c-4c0c-b7a6-1446e1b84bcd"
        },
        "item": {
          "id": "c032c3d6-b032-4279-b479-caca1fb2a9ea",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fa1cc4e1-4c76-402b-97fb-54f6baa06b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a323794-7ff6-48cf-bc33-ef1a579d72d3",
        "cursor": {
          "ref": "ce33b8b9-1cb7-4bf7-99cc-82352c2821c3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6085934e-c394-4caf-a8cd-d7f4c174735d"
        },
        "item": {
          "id": "0a323794-7ff6-48cf-bc33-ef1a579d72d3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "827a4bae-0895-41db-bf00-704aa3010dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5f37a3-040a-4b33-ace5-4451e34413e0",
        "cursor": {
          "ref": "ad221ae4-9804-45c7-b015-b7a0b8e6069f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "943aa558-de06-4275-a12c-195e84cc5c38"
        },
        "item": {
          "id": "0a5f37a3-040a-4b33-ace5-4451e34413e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "54b0b4f1-004d-4ae1-9142-878f42da1d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1500457b-3241-4483-9ff8-1aa5a5c154ab",
        "cursor": {
          "ref": "8ee2eb4b-9f30-4ca6-bb02-24080afd93e9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a151e622-0b6e-4812-a446-f8b26a83cc8a"
        },
        "item": {
          "id": "1500457b-3241-4483-9ff8-1aa5a5c154ab",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "85391be9-7825-4242-a1ba-c5d3fda983b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff94470-046a-4eb0-836f-1f672623f2cb",
        "cursor": {
          "ref": "fd0f9bdb-d871-4c7f-9bad-a78e28f74e8b",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "43f8e00d-fa8f-4c19-b24a-70f348d202bf"
        },
        "item": {
          "id": "9ff94470-046a-4eb0-836f-1f672623f2cb",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e339d727-aa10-4da6-8555-b3bc43d840a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a188210d-6f9b-4943-8c63-9059ccdc75fb",
        "cursor": {
          "ref": "2a56bc6a-54f8-4b03-bc06-d74f93ed7fde",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "54861f3b-3c85-4d3c-99cd-3b2c7913641e"
        },
        "item": {
          "id": "a188210d-6f9b-4943-8c63-9059ccdc75fb",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b7077dc0-3d86-4c0f-ad44-09015cf876bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e300ddf8-d7bb-46b9-acd6-4763d3960630",
        "cursor": {
          "ref": "280a896a-dcb5-4dea-8fbd-8292967c6e87",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "49c7ef47-b6a8-4ab7-a8f1-79a15946ff06"
        },
        "item": {
          "id": "e300ddf8-d7bb-46b9-acd6-4763d3960630",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ffb0aad-1cea-42c7-9454-127d00327393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd6b7a7-f210-4a14-9bc2-7920fd132bf2",
        "cursor": {
          "ref": "f82b72d3-2a76-4fb5-b5b9-a058e9443a08",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fb0e3221-918f-4496-a6df-e9eb3096d8e3"
        },
        "item": {
          "id": "3fd6b7a7-f210-4a14-9bc2-7920fd132bf2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8da0c27b-f1cc-4894-bd32-7e1d3583d200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42069ed1-d2ad-4230-adad-3671f24407d3",
        "cursor": {
          "ref": "802c8b0d-5e5e-4054-b375-79cf39cf0abb",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "92bacc62-b4a1-4a0a-9f28-e916b618a307"
        },
        "item": {
          "id": "42069ed1-d2ad-4230-adad-3671f24407d3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e5b099df-685a-4cee-8fc6-997da1397b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a88808-1926-4692-aee0-cbf9c8c4c217",
        "cursor": {
          "ref": "2884aede-ace1-43f0-ad06-f7cf2e2f21a1",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "9239d73c-27cc-4b2a-bc81-4b0126116700"
        },
        "item": {
          "id": "12a88808-1926-4692-aee0-cbf9c8c4c217",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "422a1ec3-ae09-4cbe-af5c-5f87a5dbee58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9567b5-eaeb-45ac-85c5-2259aeaf4473",
        "cursor": {
          "ref": "22d3b5af-045d-42e4-b844-36f0041534ab",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "43013523-c0d0-480b-b56d-d4e680be5a49"
        },
        "item": {
          "id": "be9567b5-eaeb-45ac-85c5-2259aeaf4473",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bd33fbe0-8ce8-4a25-9e8f-524f84251297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c978c741-4c68-4127-b42d-49f843b8f781",
        "cursor": {
          "ref": "f7d3b7fa-8f9f-4b34-b281-6ca1e19e0c51",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "af1a54aa-316e-4e19-ab60-0d05f5aade9f"
        },
        "item": {
          "id": "c978c741-4c68-4127-b42d-49f843b8f781",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "72af4672-66f2-4b5c-b882-586e2b39d604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47be1f8-f6cb-41c9-8945-6859b29f1534",
        "cursor": {
          "ref": "36112fdc-ac2d-46d4-9eb5-02cb61f6eadc",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9dcfaaad-e27a-4fd0-8d1c-b236fda7be79"
        },
        "item": {
          "id": "b47be1f8-f6cb-41c9-8945-6859b29f1534",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "47894151-2e42-4dc1-acc2-28b4ebd96e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77a5ab4-b600-4b4f-94d7-4b1abe4a64c7",
        "cursor": {
          "ref": "67c5dff4-a032-4907-8a21-8685919d4639",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1bb66021-f948-4cf6-adef-6d6fc62d63d9"
        },
        "item": {
          "id": "a77a5ab4-b600-4b4f-94d7-4b1abe4a64c7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d4d5be56-0c99-4f6e-a0d6-62cf37bcb075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246d228d-fe91-43b7-9fee-86a00f86b5a5",
        "cursor": {
          "ref": "93ab2941-a064-472e-9109-07ae46a29027",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6312b111-b8d7-448d-9c2a-a9c3ab04e1d7"
        },
        "item": {
          "id": "246d228d-fe91-43b7-9fee-86a00f86b5a5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "04865aa4-1e85-48d6-b4db-6e09b45e47c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b66d6a5-8ad0-44dc-8a15-b4c517b018b5",
        "cursor": {
          "ref": "8bd6d799-fd2e-4bde-b5b4-67794ca8e744",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5fc6668c-400e-4760-ad2f-c547ad686a6d"
        },
        "item": {
          "id": "2b66d6a5-8ad0-44dc-8a15-b4c517b018b5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dab8f0f8-2887-4b54-a003-b1955e15261e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bbed8f9-491c-4cc2-aa2d-faedfc38cb1e",
        "cursor": {
          "ref": "03739ce8-4620-454f-a9a1-bc0e6fb46b15",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "54768875-895d-4187-bfb1-3e567b86f5a1"
        },
        "item": {
          "id": "9bbed8f9-491c-4cc2-aa2d-faedfc38cb1e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ccc320b6-3fed-44ce-aaed-1349f855afb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3230312-4881-4763-b94e-f5597f7a2884",
        "cursor": {
          "ref": "26da58aa-2c38-4dc2-99fb-e8094235cf53",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f1509eac-4183-4015-9c1f-70818ff63429"
        },
        "item": {
          "id": "c3230312-4881-4763-b94e-f5597f7a2884",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "704ebea4-5d8b-4208-b97b-3a3ad6d8ca5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a1fc6c-09bb-4e84-ab49-aacb96489e91",
        "cursor": {
          "ref": "11251acf-0d89-4a4d-a795-b35e55dd0fed",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "38383fd5-4420-40db-b050-05c542f62d9b"
        },
        "item": {
          "id": "96a1fc6c-09bb-4e84-ab49-aacb96489e91",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9461dcef-1523-4b08-ae09-3cf612ad1b3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ae2bb7-88c9-44d0-914c-405413db1e50",
        "cursor": {
          "ref": "014dedb9-d702-4431-a5d2-9bd6bcfe0d28",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a31b57b7-0748-46f6-9619-eb580b2a019b"
        },
        "item": {
          "id": "e5ae2bb7-88c9-44d0-914c-405413db1e50",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ce0c8489-e19a-440b-8bd3-8bf7b9fcb266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1a9a464-579f-4279-8941-1a63ab0cdc22",
        "cursor": {
          "ref": "30ed13ab-9837-41d5-b8f4-ab9ccc92c9b4",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f331bdae-1744-4b58-a558-efc47b7e651a"
        },
        "item": {
          "id": "e1a9a464-579f-4279-8941-1a63ab0cdc22",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "83ca6498-c2e7-47fe-93d2-9f0afda24b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a9355d-c284-4212-8e5b-8933d987d483",
        "cursor": {
          "ref": "606f8d80-34bb-4bd8-8246-d61acd98991f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7c16c1a9-a8ed-4e92-adae-220f6ec3be01"
        },
        "item": {
          "id": "62a9355d-c284-4212-8e5b-8933d987d483",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0eeb8785-ece4-4f8e-bd6f-5a086eaa2935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f938b83c-0614-45b3-a81f-96b261445bc6",
        "cursor": {
          "ref": "5f52935e-d929-4bb4-bcf0-aea127650f29",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b65ee73d-2541-424d-8ff5-7d8dd9051627"
        },
        "item": {
          "id": "f938b83c-0614-45b3-a81f-96b261445bc6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "fbe6cfa8-56bf-44bf-a480-e4b5ffce4519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5ffe1a-d7fd-4e3b-b314-d4af44e88a29",
        "cursor": {
          "ref": "3610925a-3643-4974-8326-bfe036dcaea9",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e35a1966-8a31-4c95-854f-4f5a6cbeb233"
        },
        "item": {
          "id": "6c5ffe1a-d7fd-4e3b-b314-d4af44e88a29",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c55d25bc-1d8d-4312-842d-377d9c0f7501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c8929eb-6142-4584-b829-9e7c88dc2008",
        "cursor": {
          "ref": "5ddfde58-8779-4e47-b5f9-bd5a110c5daa",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "701ca553-89e7-4a86-9ffb-9e6381013fa0"
        },
        "item": {
          "id": "5c8929eb-6142-4584-b829-9e7c88dc2008",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "97f0cbce-ee0d-4333-90a4-67496a74a30f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2786bec-d614-4c75-a4da-f511aabf63e5",
        "cursor": {
          "ref": "70e71743-6e58-40cf-b379-b35f400b01aa",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "87fc95d4-78e2-4269-b682-4b59d88b2f9d"
        },
        "item": {
          "id": "d2786bec-d614-4c75-a4da-f511aabf63e5",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "765aacdb-68ce-40c7-8125-f8e9b7d12bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "68792b53-8c0e-4bf9-a5fd-4d26ae92a817",
        "cursor": {
          "ref": "5d456708-a725-41af-b268-329db0f1e69d",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d1afdb63-921d-43e5-aa5d-1a3d72cf4699"
        },
        "item": {
          "id": "68792b53-8c0e-4bf9-a5fd-4d26ae92a817",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0d5a44f5-2ce3-4b14-8397-7ae79d4a4f2b",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6328a64-5606-4c6c-a9df-6fe7cc4f59e2",
        "cursor": {
          "ref": "afb8adc3-00aa-4d66-bcc2-707b3a698d8d",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "42cb4fa2-e268-4a42-829b-d15bc3280b11"
        },
        "item": {
          "id": "f6328a64-5606-4c6c-a9df-6fe7cc4f59e2",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "350be886-e78d-4ee9-9717-b753aac3b3a8",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4154ef4-aa2f-4cf8-b514-6169b07fc02a",
        "cursor": {
          "ref": "0cac6b31-e08b-404e-869b-cfdc09273b76",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0a504e14-f335-42a5-81b2-87c75ff8265f"
        },
        "item": {
          "id": "f4154ef4-aa2f-4cf8-b514-6169b07fc02a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ff5bf9d1-2207-4f10-9a18-8fd4857107b5",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e173acd-3970-4e16-953e-4d09d4ec0b67",
        "cursor": {
          "ref": "d0e9c7b7-94a0-4b62-894f-fd03bc223d4c",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b868b951-9542-49be-b1ac-ba0dfa3305d7"
        },
        "item": {
          "id": "3e173acd-3970-4e16-953e-4d09d4ec0b67",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "20e74f4a-abbc-4fe8-816c-6d44f01f3821",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fbf5db-9b7d-421d-bca1-6bdb4519181c",
        "cursor": {
          "ref": "fe531129-85e8-40fb-9737-fbe5984f4b56",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5c8874bc-cff6-413c-9dc7-ed5e7eba6801"
        },
        "item": {
          "id": "10fbf5db-9b7d-421d-bca1-6bdb4519181c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "785618df-3c71-43ee-806c-bb96d0cc14fd",
          "status": "Created",
          "code": 201,
          "responseTime": 390,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-02T00:34:50.267Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-02T00:34:50.267Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "165a9848-2db9-42c3-9b76-182dff026bb7",
        "cursor": {
          "ref": "6940d9dc-dec8-41f2-9383-75b746a74167",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5037aff5-e6d9-4947-9f74-bd5e01bd379e"
        },
        "item": {
          "id": "165a9848-2db9-42c3-9b76-182dff026bb7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "17f89e98-ef5c-4a27-a7ec-44ddc9ee50cf",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be22a6c9-9444-42d5-bd5b-314914ad3f30",
        "cursor": {
          "ref": "2889dd2f-89af-41dc-b090-1c7ae91ab1c5",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "dad07f63-b5a0-42bf-bd98-7d70da7ee1da"
        },
        "item": {
          "id": "be22a6c9-9444-42d5-bd5b-314914ad3f30",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "188227c5-76d3-47e6-a558-ea81b71600c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b13c7e3-81e4-47ea-8fbc-01e29385825d",
        "cursor": {
          "ref": "bbef0a28-5dde-41c9-9e52-5859bc6f3f48",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3292824e-2d26-4b35-b0b3-f4c7d91c3e2c"
        },
        "item": {
          "id": "3b13c7e3-81e4-47ea-8fbc-01e29385825d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "477105b1-446a-4f78-8ede-37697a48f21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4866d0c7-da04-4e8e-8e4a-74a8ebab84bf",
        "cursor": {
          "ref": "74001746-fa38-40ae-8b64-19d743ccf4f6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "468451f8-7d0d-43d9-bc9b-9ff617bcb3b7"
        },
        "item": {
          "id": "4866d0c7-da04-4e8e-8e4a-74a8ebab84bf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5ea5663b-c5ca-4612-8a23-9b4edf2d80e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d70b40-145e-4069-9e35-f2b25543bc57",
        "cursor": {
          "ref": "d508b7f8-f7c9-48d6-94dd-e30377c796f8",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "37df68e5-9ff5-47cf-8a09-8f458ed62f86"
        },
        "item": {
          "id": "72d70b40-145e-4069-9e35-f2b25543bc57",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "80c1af7e-7b7f-4b8f-8d2c-805a3da8a428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960a41c6-ba9e-46a8-ab05-07a0a2ad194b",
        "cursor": {
          "ref": "5182161b-1617-426e-8747-67f141854963",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "4152acd5-4bb7-4de4-8a41-2866c116b997"
        },
        "item": {
          "id": "960a41c6-ba9e-46a8-ab05-07a0a2ad194b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f2c92d15-b716-489d-98b8-81e99be91f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59f339cc-b816-4faa-9854-e63c6bee94bf",
        "cursor": {
          "ref": "023deb82-7333-4f13-b8e1-30a76dcc5c52",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fcdbc1fa-a6f0-4c3c-be29-f7ca20f5a25a"
        },
        "item": {
          "id": "59f339cc-b816-4faa-9854-e63c6bee94bf",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0570ab9c-5618-4bb1-af18-8d64d0bc500e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d363d5c-33aa-4dac-b28e-3739d852951b",
        "cursor": {
          "ref": "1bb45d4c-3728-4061-9e75-1f65d2f2fa67",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d7946731-fa6f-4147-b7fb-4c3290838dda"
        },
        "item": {
          "id": "2d363d5c-33aa-4dac-b28e-3739d852951b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "781801a1-dc83-4964-a8a7-940f242aba93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27e389b-fc16-40aa-a96b-15b28edebf6d",
        "cursor": {
          "ref": "6975ea41-ad9b-4870-8309-232b9ccc0873",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "02f6ead1-13f9-4db2-b6ba-c3a879fcbce8"
        },
        "item": {
          "id": "b27e389b-fc16-40aa-a96b-15b28edebf6d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f0fef4cf-6eca-4505-ab2b-89618d36b035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a69de80-bd14-42fa-b5ec-fbdf1e8f80cc",
        "cursor": {
          "ref": "991ab485-bfcb-470e-8424-cc83583cee05",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "471e1f68-d7c1-4956-b013-a3182e2c7c7c"
        },
        "item": {
          "id": "4a69de80-bd14-42fa-b5ec-fbdf1e8f80cc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1255f4a6-60ff-4649-8775-fcbabed8152c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc0cf0a9-5a41-46df-ba97-a96c52c9392b",
        "cursor": {
          "ref": "9e1edc76-fe92-4e7d-8ecb-058954441157",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "36729737-e3a8-4916-bbb8-2163423b8d93"
        },
        "item": {
          "id": "bc0cf0a9-5a41-46df-ba97-a96c52c9392b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e70e7362-f178-4795-8676-83af0b99e932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde532d9-f251-4cb3-9bff-c7b90e3a9a6d",
        "cursor": {
          "ref": "5c36e13d-f80b-4725-b4b2-236b39e651b7",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f1911e37-262b-4711-a975-0401c45731db"
        },
        "item": {
          "id": "dde532d9-f251-4cb3-9bff-c7b90e3a9a6d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "10705d06-0f03-41c2-b00b-32ca603da619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55417e9-4f1b-4f74-b54a-2bf30ca18074",
        "cursor": {
          "ref": "438cd855-e7ea-4335-a27c-abf2c2f9f801",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d44a0fad-e6c2-4175-8819-ffc35f189848"
        },
        "item": {
          "id": "f55417e9-4f1b-4f74-b54a-2bf30ca18074",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a3fc2ccd-d47a-4c4d-97bd-70c91aca7b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36edcb33-14c9-4cc8-aadd-fbc23b1448e1",
        "cursor": {
          "ref": "6cee1c81-4612-4fb2-ac31-f169f4cb67ba",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "be7a278e-891d-4738-9569-c57b93ed75ec"
        },
        "item": {
          "id": "36edcb33-14c9-4cc8-aadd-fbc23b1448e1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "edfc9dea-2e34-4da9-9d6e-6992d2e203b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e0a6ea-cdc8-4590-8a1b-516f8aba7be4",
        "cursor": {
          "ref": "c69c0763-1892-440a-ae50-5d33c912cff4",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ef07f45a-77b1-4396-a7fa-6a2eec8ba00b"
        },
        "item": {
          "id": "c7e0a6ea-cdc8-4590-8a1b-516f8aba7be4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "35f751a2-36a5-4df7-8c9d-50395d41a20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a647fc-be93-45b3-ac95-3dcb03e45128",
        "cursor": {
          "ref": "98055dd5-c7d4-4d63-a231-52f413b36424",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7ca47cef-9fd2-4280-b40f-e66eb964da06"
        },
        "item": {
          "id": "d3a647fc-be93-45b3-ac95-3dcb03e45128",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0ffd1448-55fd-478e-804b-b454ef44a498",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64a808fe-65b3-4c31-bac0-8061ebb491b8",
        "cursor": {
          "ref": "bfa8e8b1-2c72-4262-8ed4-42eb36aea074",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c6f31de4-928b-43bd-84b8-b1d031c223a0"
        },
        "item": {
          "id": "64a808fe-65b3-4c31-bac0-8061ebb491b8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f355051f-f7e0-407b-a06a-ac197f2564ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051e3c28-e4c2-4944-a72b-45f7931ff58e",
        "cursor": {
          "ref": "9496aa84-95c8-462e-a378-e34c07a6f1df",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5b6d8010-26d4-4118-9190-c51e19b7d1d2"
        },
        "item": {
          "id": "051e3c28-e4c2-4944-a72b-45f7931ff58e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07c08d08-62b5-412b-a6bb-a935bddaeac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac24c292-8121-4cf1-a42b-d191df2fd1f5",
        "cursor": {
          "ref": "be9a540f-172a-4a79-8fcc-e7a198008034",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f0b229a5-a0c8-449e-8956-f00027233a4c"
        },
        "item": {
          "id": "ac24c292-8121-4cf1-a42b-d191df2fd1f5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "6c1854de-2318-4343-82c1-b45583ca9e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9603ac1d-39a3-4783-b2bd-719f8f3ad4cb",
        "cursor": {
          "ref": "0f047bda-7013-405c-8edd-87a3ae11b41e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1ab39c81-e7b1-4893-b065-586a8b9e31c7"
        },
        "item": {
          "id": "9603ac1d-39a3-4783-b2bd-719f8f3ad4cb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f3c25fef-0587-4b0e-92d5-d946459ea86d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5f24fc-83e9-423d-87c3-5011fcb3591b",
        "cursor": {
          "ref": "d1cf1075-9f63-4aab-b65f-e54dc156449d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "062e8411-a6eb-4ad5-801f-359220efdae2"
        },
        "item": {
          "id": "bf5f24fc-83e9-423d-87c3-5011fcb3591b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ad88ae09-bdfc-4b6a-863c-7782dc218593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4fc53d0-05e7-4d5b-8d96-a0c104000054",
        "cursor": {
          "ref": "ac0cd371-9c1e-44a6-ac7c-2caabbe5b3eb",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e618dcfa-a2ed-477f-8f81-da0caaab8f10"
        },
        "item": {
          "id": "c4fc53d0-05e7-4d5b-8d96-a0c104000054",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "939cbfff-ad8c-4ee7-ad6d-9020fe75264e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45378e3-7388-4932-834f-a4619a12d921",
        "cursor": {
          "ref": "eb9b354c-184a-49cb-9670-e444909c50f9",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c6d3aa46-3ea7-4dec-810a-c260f773414f"
        },
        "item": {
          "id": "f45378e3-7388-4932-834f-a4619a12d921",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "777e678c-d746-4475-a2ff-6ee6fcd9cb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e2acc2-2cf4-4ef4-9d0b-bf76aaa55260",
        "cursor": {
          "ref": "0e72313e-83f2-49fe-ae5e-f008c5bb8ab4",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "2ff69285-7bec-4bda-aea5-42dcaef250b0"
        },
        "item": {
          "id": "72e2acc2-2cf4-4ef4-9d0b-bf76aaa55260",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "55f1946f-00b4-44af-adfe-02128be4b17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e4ddda-8756-4aed-aa3c-d939b30ca18f",
        "cursor": {
          "ref": "495c1bde-1dfd-41cf-82b6-4ebc368fec2b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f0da96a1-fdda-43f2-a5d4-d1c0a96ba33d"
        },
        "item": {
          "id": "18e4ddda-8756-4aed-aa3c-d939b30ca18f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e506115e-91c8-4de1-b7da-78746052cb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9aa0209-c64f-47b8-9710-5ccdcc5c0d0b",
        "cursor": {
          "ref": "36fbe286-7b19-48dd-9a80-29e11f892974",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1a12df6a-b538-4b12-b118-eb63f72caa2a"
        },
        "item": {
          "id": "c9aa0209-c64f-47b8-9710-5ccdcc5c0d0b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "264a551a-2171-4def-874a-33d456d5e3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcfe1ff-8d0c-4a8c-b707-d1cc1bb8269a",
        "cursor": {
          "ref": "b71a2a25-2baf-470e-a68b-3c7fe6aafba6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b256c1a2-3ba7-4f64-ab1c-e667df227ebb"
        },
        "item": {
          "id": "2bcfe1ff-8d0c-4a8c-b707-d1cc1bb8269a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ed078a01-fedb-4576-9f18-08b3e9c572cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16bdc00-7283-41e4-9c96-75a75953548f",
        "cursor": {
          "ref": "9c4156ca-ee47-46a8-a27d-bb576add498d",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1fbf4db4-92b1-486f-bd34-55737d7c3371"
        },
        "item": {
          "id": "e16bdc00-7283-41e4-9c96-75a75953548f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4e576d94-4a39-4b42-a6ef-8a87ef7874c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13476b1-b01b-465e-9686-a017cb576afb",
        "cursor": {
          "ref": "f4c26928-ecbf-4ea2-8d52-aaf9e1d8ff64",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "60de7f2e-bb6b-4895-9482-0e8cf750666f"
        },
        "item": {
          "id": "e13476b1-b01b-465e-9686-a017cb576afb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "db8453e7-1711-4aee-97cc-9d519985a4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1230e0f-7467-41eb-99bf-1261c7c8c46a",
        "cursor": {
          "ref": "61ccb4d2-e1db-41ab-9250-b054cad8b95e",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3d9ca50d-992b-47f7-a89a-0bdd9086e06d"
        },
        "item": {
          "id": "c1230e0f-7467-41eb-99bf-1261c7c8c46a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "61431879-a7e5-4f1f-9c55-019fd0265ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86701b5-62d5-4148-96de-289f8e39faaa",
        "cursor": {
          "ref": "7017f7d1-b406-4669-9141-937e6113029d",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1a3f53ba-28ae-4ef1-9fb8-e867c70420f8"
        },
        "item": {
          "id": "a86701b5-62d5-4148-96de-289f8e39faaa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5d5abd3b-d81f-46b9-8c57-55a705cd1ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733171d0-1a54-4852-9d01-31b7ad583067",
        "cursor": {
          "ref": "7000308c-4ed3-4d96-9466-62acdbdab14d",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0c3de255-5b56-4ffe-830d-da314280a702"
        },
        "item": {
          "id": "733171d0-1a54-4852-9d01-31b7ad583067",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "30919d50-017f-4922-90d3-aa0463c287e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50760429-9224-447f-bbbb-562cd96d15e0",
        "cursor": {
          "ref": "a7bd4499-6a5f-4471-8fa5-890806409983",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8d19482d-d663-4c61-93bc-387c21971e81"
        },
        "item": {
          "id": "50760429-9224-447f-bbbb-562cd96d15e0",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "454a7b1b-a8b2-4644-9f62-b7c64840b25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a183255-1064-4da6-98f2-76412bd6c38d",
        "cursor": {
          "ref": "1bb204fa-7264-490e-aa50-2c4b75a1dfa8",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "62264b60-7332-40bc-ada0-2641de232861"
        },
        "item": {
          "id": "9a183255-1064-4da6-98f2-76412bd6c38d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ebe68411-ead3-476b-81df-efa6feba5115",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011c1fa8-c543-4910-8502-a58c8d1b6153",
        "cursor": {
          "ref": "afb9f893-eae0-44fa-a6ad-8e249a5183f3",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8260ac4e-c21b-4c17-9443-cd5e82e25e46"
        },
        "item": {
          "id": "011c1fa8-c543-4910-8502-a58c8d1b6153",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3acafc2e-52f2-407b-8e01-95c3c34a5591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b04edc-2236-41dc-9bb1-3ac1c6256930",
        "cursor": {
          "ref": "46c20996-790f-421c-a068-a988068a147b",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "990a71a2-ffd7-4a23-8239-21b641787dee"
        },
        "item": {
          "id": "85b04edc-2236-41dc-9bb1-3ac1c6256930",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "56adf92d-1f8e-44ab-9b2b-94bcaec1b53f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995dc26b-0ea3-4acb-9348-ca9e664866ee",
        "cursor": {
          "ref": "5481f256-e8c3-480f-8704-ab758149a746",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2e5ad415-e07b-41e9-9d69-f871944ad4f1"
        },
        "item": {
          "id": "995dc26b-0ea3-4acb-9348-ca9e664866ee",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d92f3fc2-68ca-4c98-8d5d-33d48676a3fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee9c337-4437-401b-b22a-c1a11b69937a",
        "cursor": {
          "ref": "3b808283-4673-40ba-a995-1c93a7239534",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b428b2b0-a332-4d97-8205-539776457f81"
        },
        "item": {
          "id": "eee9c337-4437-401b-b22a-c1a11b69937a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "54e6e741-574b-40f1-8023-43b0e19deafb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31751dcf-853d-459e-97cd-234d34ae0c8b",
        "cursor": {
          "ref": "1805d246-7419-4162-983a-82617ab827eb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a7aca158-75b5-46a8-9875-d33c5cdbe932"
        },
        "item": {
          "id": "31751dcf-853d-459e-97cd-234d34ae0c8b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1ebbde30-1944-4a50-b8ac-0b5c3917a333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24e1ca0-4838-4453-a6ac-02d29308c054",
        "cursor": {
          "ref": "63086a2d-a85b-4b30-a72f-ac7b4ba917bb",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d65f1e23-96a4-480d-930f-292f3192ccf8"
        },
        "item": {
          "id": "e24e1ca0-4838-4453-a6ac-02d29308c054",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4500abe1-4101-4946-ab66-5b14e9134dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a51094-88a6-47f9-bbd8-ea108fc08986",
        "cursor": {
          "ref": "c311ac02-daf0-4054-8b74-261432b7a681",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "2545d239-e05c-4b34-83c1-35e24ad0da06"
        },
        "item": {
          "id": "00a51094-88a6-47f9-bbd8-ea108fc08986",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f36037d-6a26-461c-9c01-a1298c9ffa23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a16dee-8d5a-4b3c-9c4a-af97f7af5b9b",
        "cursor": {
          "ref": "2850d790-9166-4440-b55e-2f9d3ae05da2",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e0d7076f-4f7c-4ac7-9529-63d3068f1037"
        },
        "item": {
          "id": "66a16dee-8d5a-4b3c-9c4a-af97f7af5b9b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "17ee3aef-57fe-4a25-9712-7d5f001bd5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6dc3d9-a525-4514-a33e-8dc2a64ca9c3",
        "cursor": {
          "ref": "17afdd11-7fb1-4fbc-8bef-45510def60f1",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d42f465d-1d27-4e03-843f-068b29df2ba2"
        },
        "item": {
          "id": "cd6dc3d9-a525-4514-a33e-8dc2a64ca9c3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9124498e-24e9-45c0-aaf6-7570823d6375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e96a0a-2173-4bcf-87b2-d8b8ea3dc74f",
        "cursor": {
          "ref": "050fab09-d04c-47d5-8f4b-93b47f80c698",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "71d4482a-e7c8-45a2-b605-abdb9e52b90f"
        },
        "item": {
          "id": "60e96a0a-2173-4bcf-87b2-d8b8ea3dc74f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9744516b-a7eb-467c-aa8e-d22bfb315e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "838760d8-284e-4db0-abbe-d8be4fba3b09",
        "cursor": {
          "ref": "d1bab545-8594-4178-9d91-d467fea0eb02",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9eaf50ff-9b90-4857-8ada-9baceb932bbd"
        },
        "item": {
          "id": "838760d8-284e-4db0-abbe-d8be4fba3b09",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1a67bed2-f590-4953-b8a3-97bb47ebbd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22a60aae-a8a3-45cb-9ce0-8ab8e24e4d38",
        "cursor": {
          "ref": "3792133c-ad0d-4edc-b08f-799790355738",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2ef555e5-57a7-492d-bd68-35e9c675b9d6"
        },
        "item": {
          "id": "22a60aae-a8a3-45cb-9ce0-8ab8e24e4d38",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "95c94034-47ea-452f-b9d8-70f790e79d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bfdf9a-4211-40a0-85e6-af03bb3ee25f",
        "cursor": {
          "ref": "a610c9f8-5b55-4f5a-a047-50063fa287e0",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a9e9d67c-a69a-489d-a034-fd3c3c66a4ed"
        },
        "item": {
          "id": "c6bfdf9a-4211-40a0-85e6-af03bb3ee25f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fff3d51b-1b49-47b0-b853-2dca782952f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702b7d1e-0d70-415d-94e9-80c48f01989f",
        "cursor": {
          "ref": "d275822a-651c-48c4-ae3b-1ea931aac59d",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3d6aa162-925b-4492-beaa-0acec2a3e53a"
        },
        "item": {
          "id": "702b7d1e-0d70-415d-94e9-80c48f01989f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6ea79020-a671-4e6b-a4bf-6b2c0d8a1dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca8a23e-c62e-4318-9175-57ea16b3d62f",
        "cursor": {
          "ref": "07b71938-a097-4fb4-886a-1227a94840a0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "72a96119-e911-44c5-9106-6d6d48ab752e"
        },
        "item": {
          "id": "eca8a23e-c62e-4318-9175-57ea16b3d62f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "56ca9da5-15c8-4152-a15d-217040ce3c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa786b39-6237-4536-9449-54daf1c6b94c",
        "cursor": {
          "ref": "be29a159-a62d-4646-9467-a4ed8b63f6d8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "fc7fdd5f-8106-47c1-9328-ac14692f1fdf"
        },
        "item": {
          "id": "aa786b39-6237-4536-9449-54daf1c6b94c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e9ef6023-18e1-4009-a833-52ee30bc4b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45f7a3e1-a2fe-4ec3-923d-e414c4383b2b",
        "cursor": {
          "ref": "d0f5f2c3-eda8-4894-a436-d82ab6bb4f27",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "180851ac-c06e-47c0-bcc6-ef64dd4d4320"
        },
        "item": {
          "id": "45f7a3e1-a2fe-4ec3-923d-e414c4383b2b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "bcf99704-4055-4ba5-bc32-e3d3dad97a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5c4e48-342e-4b7e-b1df-c0bf6ab86317",
        "cursor": {
          "ref": "fdcda259-5148-4e76-9e49-56ee1e37fb05",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "135a10aa-da97-45fa-843a-2b219c4a5bc5"
        },
        "item": {
          "id": "1c5c4e48-342e-4b7e-b1df-c0bf6ab86317",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0fbf709a-cacb-46ad-9dd7-37520a3f1fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018525ed-4bcf-4e3c-9aba-e1ac6d75d371",
        "cursor": {
          "ref": "7a44ddc8-9974-4c00-9938-4207e14bf3be",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "703569d0-30ee-44f3-bbcb-94af3e8e3b46"
        },
        "item": {
          "id": "018525ed-4bcf-4e3c-9aba-e1ac6d75d371",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ce0c43b4-82ec-497f-9a2d-63fa5df28840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b234254-5c9a-434a-9e9b-8b02283010ad",
        "cursor": {
          "ref": "684267ad-fdc3-4ce8-9ca0-c7d76ea03fb0",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "333f12f0-3c9b-44b1-a6c3-486b007261a5"
        },
        "item": {
          "id": "0b234254-5c9a-434a-9e9b-8b02283010ad",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "134e3e14-20f8-4291-8c8f-d339c1f651f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b236e25-5eb3-49c2-94a7-9a98b343199b",
        "cursor": {
          "ref": "15750d2b-b32b-46e5-9e1f-95f27b0fc987",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "337be353-1cd2-49ab-a3f8-3d94e5cd2c4f"
        },
        "item": {
          "id": "0b236e25-5eb3-49c2-94a7-9a98b343199b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c27873d2-8c3a-4d6d-bd58-aab7d401fddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d68456a-8bfc-472c-99ca-ffae8316191f",
        "cursor": {
          "ref": "5b11399f-6786-44f5-b10b-b616bf934ae7",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1941d9d5-38e9-4c0d-8a4c-a78b13db1731"
        },
        "item": {
          "id": "2d68456a-8bfc-472c-99ca-ffae8316191f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "99d7e056-19b1-4d04-8f5a-dc0d167dcb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4838015c-1283-4eed-9773-1c1b1e0db92a",
        "cursor": {
          "ref": "0471e894-97af-4e2a-84fa-d155585eabea",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "64a972a0-527e-4ec6-b84d-449a196523b0"
        },
        "item": {
          "id": "4838015c-1283-4eed-9773-1c1b1e0db92a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6d0a0fde-96cf-41c4-8417-3acaa2c0356d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98643ab-290d-4353-958e-6c4c13fcd25a",
        "cursor": {
          "ref": "84f0914b-54b6-4cc6-a79e-7d570ffd1fcb",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d391e71f-2e47-48ba-8f41-b06047b880a8"
        },
        "item": {
          "id": "a98643ab-290d-4353-958e-6c4c13fcd25a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0a37405b-a69a-4880-820a-6a106072eab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecdf8f1-80e0-4b9e-b8cd-12e94a0852cf",
        "cursor": {
          "ref": "f80a0b79-b3f2-45b5-bfeb-d7fe439edac3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6569fa0d-27c1-4b9a-ab71-cc55cfab3408"
        },
        "item": {
          "id": "3ecdf8f1-80e0-4b9e-b8cd-12e94a0852cf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0f156d4a-d9bf-44ba-8377-14c2e76b40f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ecdc04-2edc-41c5-be54-edf21904a073",
        "cursor": {
          "ref": "21f93205-47d8-470d-8576-1b77b54cd65f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3d0c44c0-2386-49b6-a392-52b68f0f33a4"
        },
        "item": {
          "id": "59ecdc04-2edc-41c5-be54-edf21904a073",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cb3fc71c-7d17-44cc-ad4a-6306f9797ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d169fa-4b51-42be-905f-b50feda5b8f6",
        "cursor": {
          "ref": "7696d78f-5c33-4861-aacd-ec15ebcef116",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4a281015-6319-44a4-a4cd-f06278ed9f9d"
        },
        "item": {
          "id": "94d169fa-4b51-42be-905f-b50feda5b8f6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "abcc888d-d7df-40ab-8722-99a8d8774cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a83725e-42e9-4834-a920-4812efa191c1",
        "cursor": {
          "ref": "893a67fe-99da-4804-b2cf-92d7c7aeaa18",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2ad9320c-d973-4c21-82f6-c3bf2b099c53"
        },
        "item": {
          "id": "6a83725e-42e9-4834-a920-4812efa191c1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6234f5e1-e641-46a8-9eff-3d939631b67f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c41f8c-5b97-41c9-8c74-9c40d95b105e",
        "cursor": {
          "ref": "a0cc80ce-2ef7-4d95-8c49-6d89dc845be6",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "23b7ed8f-057c-48a5-b2ba-1a0128621523"
        },
        "item": {
          "id": "b8c41f8c-5b97-41c9-8c74-9c40d95b105e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b85aa328-f024-46b4-8b53-8231cb436e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c348ca8-014f-4d38-8525-425571fe51d8",
        "cursor": {
          "ref": "d1f80e64-8b82-4b9d-849e-d0664b67b4a0",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "42e37a18-bb90-44de-9ed4-a21257ad7a05"
        },
        "item": {
          "id": "7c348ca8-014f-4d38-8525-425571fe51d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "61227b1b-2958-44b5-a588-23c38e3aa1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae76a9c-5758-4812-8e1e-79b01f8342bc",
        "cursor": {
          "ref": "d0092bc5-1800-4a19-99fd-4446a83887e5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e065c78e-4537-43c8-9da4-22efd8deec8c"
        },
        "item": {
          "id": "9ae76a9c-5758-4812-8e1e-79b01f8342bc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ae34105d-0488-45b8-afcc-6f975bd4f64f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b24bb06-48ed-4b49-9f87-e7c8fff4f0fe",
        "cursor": {
          "ref": "d3b9c11c-cd0f-48c2-9be6-66de7e1d6dc6",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "de9fdb8e-139f-486f-a142-f35806363003"
        },
        "item": {
          "id": "1b24bb06-48ed-4b49-9f87-e7c8fff4f0fe",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "49c2485f-339f-4e6f-abde-6c9f9131d2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82d52ee-3511-416c-bec1-2b9307f38206",
        "cursor": {
          "ref": "f7c99a12-c43f-45e8-816b-b6c1d6c6c404",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b182b922-5bc5-49e4-add8-d5f81616a441"
        },
        "item": {
          "id": "f82d52ee-3511-416c-bec1-2b9307f38206",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9077520a-b3b8-4bba-af7e-ea0b7cd28348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "858796f7-d2b5-41bf-961a-e4fe39517c2a",
        "cursor": {
          "ref": "7d125fcc-8ed8-4dcd-b6fc-b84e6f9d4d66",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "bdd46125-47f8-49b3-9003-5213c74a1764"
        },
        "item": {
          "id": "858796f7-d2b5-41bf-961a-e4fe39517c2a",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f699e6e0-a647-4ae0-83c0-781ff806bb67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25eb97a9-0c4f-437c-aa40-6a5bb5c10a12",
        "cursor": {
          "ref": "d9fc8450-b201-43c5-9658-f98a1904648c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a840c077-e521-4dd6-b6fb-18f6fcc04857"
        },
        "item": {
          "id": "25eb97a9-0c4f-437c-aa40-6a5bb5c10a12",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7960b32f-5c93-4442-9db4-be61199b54b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918c861c-0669-434e-880e-bebf8c51a289",
        "cursor": {
          "ref": "15e3d399-4b61-46c1-a508-4416d3672ae7",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b287a2d2-e7e0-4e22-9c88-3ccb5549ffbf"
        },
        "item": {
          "id": "918c861c-0669-434e-880e-bebf8c51a289",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3b2cf998-2040-44b4-8348-a70a3f8acc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bddeb8-8e44-4169-908d-f45f0fad4894",
        "cursor": {
          "ref": "e6fe8cd6-b07e-4f42-a826-b02499eee593",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b5777d2e-cf89-4916-8a63-68fe61bc88d6"
        },
        "item": {
          "id": "54bddeb8-8e44-4169-908d-f45f0fad4894",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d36534b2-4c55-4a08-9d60-b8c1a95f9f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8106197-27ac-4106-ad8d-3e012d2f2d4a",
        "cursor": {
          "ref": "8a39cb27-b8b5-4dc5-8d3b-c65d618f9ae7",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ab472270-5fd9-4ee4-8056-118f353821cb"
        },
        "item": {
          "id": "e8106197-27ac-4106-ad8d-3e012d2f2d4a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "937b4a41-6295-4b51-8b4a-30f9ee78e7ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9508c4ed-2992-43cd-9d96-23a8460ce57c",
        "cursor": {
          "ref": "485ce31a-ba28-4a85-a3a9-f7ae054c05fe",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f2c366d2-0bb7-40fe-a1af-e76beffdf1a7"
        },
        "item": {
          "id": "9508c4ed-2992-43cd-9d96-23a8460ce57c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "88af76ca-988e-46e0-b5f2-24d09bf8b7a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7771ce5-141c-432c-a654-dbdea5d46608",
        "cursor": {
          "ref": "99d72c11-d630-40f0-97de-0ceded72c102",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b5ee9a1a-5382-468f-addc-28e1d1583a7d"
        },
        "item": {
          "id": "b7771ce5-141c-432c-a654-dbdea5d46608",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ff9ac8d8-f18d-4337-ba73-2f1cc8f69f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85097b7f-92ea-491e-9977-e17fd733c08e",
        "cursor": {
          "ref": "1d6d4b89-410a-4861-8673-4c647e8a72cc",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1250b44a-5a80-4603-b264-1d0607f3de16"
        },
        "item": {
          "id": "85097b7f-92ea-491e-9977-e17fd733c08e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "63c5b652-f86e-4ff2-b57d-87943d5ff531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc8a696-54d9-49e9-9f6f-5bc9c33513e9",
        "cursor": {
          "ref": "b169fa77-0900-4eac-8125-fd235029138b",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b5cc5c43-b830-4fd7-b520-d558472b8930"
        },
        "item": {
          "id": "acc8a696-54d9-49e9-9f6f-5bc9c33513e9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "176d608b-4015-4039-97c6-675a9fbf6537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01316a22-e4b6-4a0c-9116-ea4c96013d3d",
        "cursor": {
          "ref": "95aee0ee-d540-4ac3-9e74-cb2245935402",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4e7e8f32-f4ad-4763-bb03-c3ae9883595a"
        },
        "item": {
          "id": "01316a22-e4b6-4a0c-9116-ea4c96013d3d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b19d77fa-02ad-4f37-8be1-4671b96e298a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25823c69-34c1-4bc6-af63-4ddfe9d88a8d",
        "cursor": {
          "ref": "a8c5e365-c653-4b94-8499-d03271eaa5d1",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "71bd8abb-7bbf-4fee-9740-72e5648b2e5a"
        },
        "item": {
          "id": "25823c69-34c1-4bc6-af63-4ddfe9d88a8d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3366b5b1-e646-4572-9125-4f1b2b527e3d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "bfa2c457-50de-47bb-acc5-4b32ff93e96e",
        "cursor": {
          "ref": "6adc352e-5e95-48c0-a1da-e1915f68a3c4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "43a0a11f-895c-4100-be22-98caca09b083"
        },
        "item": {
          "id": "bfa2c457-50de-47bb-acc5-4b32ff93e96e",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "215a7ae5-74da-42d8-8b6f-10710eff7a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f8c81a7-eb98-48a2-b7f2-0469154392c4",
        "cursor": {
          "ref": "106c63e2-3c21-44e2-95cd-b1a7211f05f1",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1de8fd36-6efb-4f95-b4ae-087c671cc17a"
        },
        "item": {
          "id": "9f8c81a7-eb98-48a2-b7f2-0469154392c4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8d3f357e-040d-4715-8543-17f7cb56e7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed5932ef-5295-42b9-aa87-de91f7dc92eb",
        "cursor": {
          "ref": "79ec2f93-576f-4a8b-9ca6-384b14acc6ab",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fd1ea60d-1b54-46fb-813f-2fedc74cbade"
        },
        "item": {
          "id": "ed5932ef-5295-42b9-aa87-de91f7dc92eb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e8c89308-d9cb-485c-9cea-fa7ad6a6d09d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f46bbce-c687-4715-9052-8b23417846d0",
        "cursor": {
          "ref": "c9018b0e-687a-47cb-8af6-d458b381e049",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3051d74d-f760-4448-817f-f32f24b68b97"
        },
        "item": {
          "id": "8f46bbce-c687-4715-9052-8b23417846d0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3022321b-78da-4d06-917a-8dcad4088c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc457d47-d0de-406d-9548-451c7ebd21f9",
        "cursor": {
          "ref": "e9210a0a-241a-4a7a-b981-797fa96c72a1",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "06397d6f-7ddb-418e-ab5e-5f9b3d4db34e"
        },
        "item": {
          "id": "fc457d47-d0de-406d-9548-451c7ebd21f9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6143f717-505e-4f99-b776-7c6e6b2dd886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89b4862-aa44-457e-a767-c91d7f12692b",
        "cursor": {
          "ref": "cd740f8c-50af-48e4-9e7f-4632871ffb77",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9813be28-41ad-43b7-8e3d-5465a5cf7549"
        },
        "item": {
          "id": "f89b4862-aa44-457e-a767-c91d7f12692b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf6984f7-41f0-4579-a18e-ef549d4a902d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e410491e-4b20-4b02-b78f-8e7c57e55333",
        "cursor": {
          "ref": "05688e26-0183-4181-8605-11d7210b9d70",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9463c596-d524-49e8-a83a-cc31ba081c1e"
        },
        "item": {
          "id": "e410491e-4b20-4b02-b78f-8e7c57e55333",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "320e5443-723f-492a-87b8-c546e3486ed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a4d253-adc3-483c-aced-9d1ca1045e08",
        "cursor": {
          "ref": "f9d8634e-1adc-480b-9223-69389a19bfb6",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4d3d7e4e-0961-408a-8c88-e94acf781ae4"
        },
        "item": {
          "id": "c1a4d253-adc3-483c-aced-9d1ca1045e08",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "528c3086-0ade-4ec9-8e82-ea26b6c8fb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c5ff7e-b606-4dc6-b020-cd900b9d5930",
        "cursor": {
          "ref": "a7cd6bef-007f-4df7-90c2-e2ff59fefc2e",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4d1a5a68-97f0-4e31-9a31-1217ca14633a"
        },
        "item": {
          "id": "f6c5ff7e-b606-4dc6-b020-cd900b9d5930",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "922e4b46-81f2-4a8b-8dfc-438872af9048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbf2440-8aad-4112-925a-02966dfcc8c5",
        "cursor": {
          "ref": "92693a76-a5d5-40e5-82de-7d6468fd6d3c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "20854d40-3f12-4c1b-892d-a8ef0917c1b0"
        },
        "item": {
          "id": "efbf2440-8aad-4112-925a-02966dfcc8c5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f66b127e-174a-49ff-89a9-7325ffa1f1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70c07ed-cbb8-4949-9c09-82ac6d691b6a",
        "cursor": {
          "ref": "472e897f-cd41-4f09-9588-91a24b578fea",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "967e44ff-3d76-4213-b631-9b04935c60c6"
        },
        "item": {
          "id": "f70c07ed-cbb8-4949-9c09-82ac6d691b6a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7c01dd0f-a80d-42ac-8954-93ca551c7644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8664b699-199a-4b56-83d7-d15dc3849278",
        "cursor": {
          "ref": "ed409a2b-9bab-45de-beb1-5a1b714647a3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4fba7e67-b4a2-4c4c-9c49-b08099468759"
        },
        "item": {
          "id": "8664b699-199a-4b56-83d7-d15dc3849278",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4ce82218-0d98-4184-9a70-422ae7676db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca0cfcf-1d11-4c79-a94d-431d61d67b85",
        "cursor": {
          "ref": "5cbf7e66-6c5e-44f3-b6fe-845d97997b73",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3c95c837-e9a7-496e-9701-b4c70c0f381d"
        },
        "item": {
          "id": "1ca0cfcf-1d11-4c79-a94d-431d61d67b85",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8cf21a53-e9ef-493d-9510-1aacd52097cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c974993-bd32-417d-81e8-cdcd4699136a",
        "cursor": {
          "ref": "640474fc-70b0-4d21-9923-7f4a245141b7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "58eff257-a940-4d3f-af2d-4fbbf3e9be92"
        },
        "item": {
          "id": "6c974993-bd32-417d-81e8-cdcd4699136a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e2571ea5-2f48-4ea7-80b3-d0567f6e76f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04fbc80-50e1-4442-9d69-d47c2d06a2ea",
        "cursor": {
          "ref": "d7d53e0c-c4e0-49fc-8cb9-700c19670855",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1c6a645e-9725-4c1c-9b06-3bebbbc1c372"
        },
        "item": {
          "id": "e04fbc80-50e1-4442-9d69-d47c2d06a2ea",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6c4c7819-e72c-467e-83c7-8718e616c609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e300006d-8f43-47ff-b0ed-4334e184463c",
        "cursor": {
          "ref": "28a34090-265c-4730-b8a1-4ff716ee592e",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "17e8b016-c0f3-4fc8-814c-7cc70a9600cb"
        },
        "item": {
          "id": "e300006d-8f43-47ff-b0ed-4334e184463c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d29aea75-267b-4490-a601-07006d0cc56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca48b98-7493-4243-afeb-e3e2c46dcc37",
        "cursor": {
          "ref": "46d3b1d5-02af-482f-b897-621072ac8fdc",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "40458347-dd84-4620-96d2-e650ba26fc7c"
        },
        "item": {
          "id": "3ca48b98-7493-4243-afeb-e3e2c46dcc37",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "44180bb6-17be-4ed4-a60d-bce224e9d6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30170a0a-2e5c-454a-88e7-e5f26a8b9854",
        "cursor": {
          "ref": "9b837273-e1e4-45da-b4df-edcb80fc58d4",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "026c68f6-cf6c-49f0-9ce7-36f16430cea1"
        },
        "item": {
          "id": "30170a0a-2e5c-454a-88e7-e5f26a8b9854",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "46d65bc3-02a1-480b-8fd0-b7df69623adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0febda64-ae43-4fe7-8b42-214344be9be3",
        "cursor": {
          "ref": "8b4721e2-c6b0-4fcc-a96d-97822a916ce3",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d8911ac5-0a16-42d2-80bb-553733de33f4"
        },
        "item": {
          "id": "0febda64-ae43-4fe7-8b42-214344be9be3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "92c92f55-59d1-4837-9ff8-585be68d19a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec10df4-682c-43c4-a167-e5991dbaafa6",
        "cursor": {
          "ref": "177d2f8b-e697-470d-b875-f2a3fb27bd8a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "827e321a-3af6-4dae-a003-95f50d55a62e"
        },
        "item": {
          "id": "9ec10df4-682c-43c4-a167-e5991dbaafa6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f843ee99-cee3-4b05-9f5e-f4fe703e49d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce3b5b9-1917-4e47-b887-f35a4d5c8c60",
        "cursor": {
          "ref": "02bc1915-d0e3-4d62-b216-b9c3852433b7",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3b2bbe52-c075-4902-9996-213ce47b14af"
        },
        "item": {
          "id": "fce3b5b9-1917-4e47-b887-f35a4d5c8c60",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c03a3901-827d-40ea-b076-a4c66aa849a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d4f930-8528-4d52-b7b1-1784c9ccc544",
        "cursor": {
          "ref": "ae73d363-2b3a-4cf2-a992-e0b1558ee42b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "da56d7f0-f8f0-4e84-815e-f56a8333c2ea"
        },
        "item": {
          "id": "68d4f930-8528-4d52-b7b1-1784c9ccc544",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b6238197-85e2-4e1b-8911-13049293d885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "861f7701-830e-4d33-b2da-8d0a31309847",
        "cursor": {
          "ref": "522a5898-e794-4a25-b524-08b7bf9439e1",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "26dd29d0-6fc4-4340-8c11-d764b743525c"
        },
        "item": {
          "id": "861f7701-830e-4d33-b2da-8d0a31309847",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "eb1a9ac4-dcf7-4e36-abb9-1ac33e7cbe47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305fe5f8-a78b-4fe0-829a-751025b96d0d",
        "cursor": {
          "ref": "874497c5-61cf-41ac-bc45-79884ebcf640",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "69f7b044-4c37-4df5-915f-4d058fd5f8cc"
        },
        "item": {
          "id": "305fe5f8-a78b-4fe0-829a-751025b96d0d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f6c43ad3-a40a-4ad0-a737-c54786c5cc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651fd0b2-5e61-4df0-947c-7957066a5f96",
        "cursor": {
          "ref": "cc4b754e-a231-4ead-a558-6a7ccbc5801b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "b7bed452-8bfc-4717-8f3f-3d590f51cb7b"
        },
        "item": {
          "id": "651fd0b2-5e61-4df0-947c-7957066a5f96",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d6def95b-7426-4312-b532-5f7c1eac6f74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72bf9d4-f150-4f97-a69f-1e7923d502e8",
        "cursor": {
          "ref": "dc6eedcb-efe1-4b71-bb40-41e0f66ddf50",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0fd9abb3-020c-4818-94cb-41a54da1c125"
        },
        "item": {
          "id": "c72bf9d4-f150-4f97-a69f-1e7923d502e8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ff4c2f08-ed43-45dd-b596-64a4d1e460a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a9bf57-9bc0-410f-ba8e-66b3421cfd2b",
        "cursor": {
          "ref": "4ce190bc-b974-4422-b4fa-b7a0a2b4e6e5",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9fbbea3a-cdc7-4da7-b72f-8cc8638966a9"
        },
        "item": {
          "id": "f9a9bf57-9bc0-410f-ba8e-66b3421cfd2b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d93b6675-86ec-4382-8cf3-d5ef5c1924d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4bf3fc6-cf1a-42ff-8d09-1f15afa0a28c",
        "cursor": {
          "ref": "d24292ea-bb1d-4a66-bdfa-bfee184a8b67",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0514ae17-c3db-47fd-ad42-93c4b5b089b5"
        },
        "item": {
          "id": "e4bf3fc6-cf1a-42ff-8d09-1f15afa0a28c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1763cffb-751f-42e1-bf50-111eeb676748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1178f156-ed92-4079-8c55-b0f38b1a9285",
        "cursor": {
          "ref": "c8cbd3bd-641d-4ed6-8055-29dfb2554be2",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9ad799d8-b796-40fe-997a-5c74f33c895f"
        },
        "item": {
          "id": "1178f156-ed92-4079-8c55-b0f38b1a9285",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "01dcd32e-97ce-4e35-9f7e-46cf5dcaf701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "982ab198-c90c-4d71-a1ae-874c52ab4264",
        "cursor": {
          "ref": "899f3068-3684-4a9d-a3a7-9d894c7960cc",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "205002d1-2ef1-4b76-b970-b636edab6a74"
        },
        "item": {
          "id": "982ab198-c90c-4d71-a1ae-874c52ab4264",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f6905816-1305-45d7-a471-5a56461897bb",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "0c753a3f-1aaa-41e7-960b-02bcf79deda3",
        "cursor": {
          "ref": "22730b31-307b-4669-9a04-9d0ac1ea299e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "333fc7c8-03f0-4df2-99c4-a75057566f50"
        },
        "item": {
          "id": "0c753a3f-1aaa-41e7-960b-02bcf79deda3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "603f838e-d42b-40ae-b2b9-7f367c8534a8",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4d0d653a-617b-4d05-a19b-4d6615489e39",
        "cursor": {
          "ref": "2bc06f25-2087-4377-84a7-7fd139a27051",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "99b848df-beb6-4d1f-af7a-79e25fe21e9f"
        },
        "item": {
          "id": "4d0d653a-617b-4d05-a19b-4d6615489e39",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9b7232c5-01d1-4452-bccb-8430b9e63e7d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9836c1cf-7a8c-4004-aec0-76a394906f87",
        "cursor": {
          "ref": "52b574cf-8d08-4484-8bb8-3bdb9cd3d694",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6ab87ac7-6d43-422d-a060-f488ced2c78f"
        },
        "item": {
          "id": "9836c1cf-7a8c-4004-aec0-76a394906f87",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "581768d7-6bde-43cb-ad65-793e9de00b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edeaa5b2-8da9-4512-a178-723dbd94ae42",
        "cursor": {
          "ref": "a57d3afb-d6b7-4d36-8bb8-3eeb4d69b740",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bc3faaa6-a1ca-4c50-a2b9-945ae81d507f"
        },
        "item": {
          "id": "edeaa5b2-8da9-4512-a178-723dbd94ae42",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "69aa3bd9-4733-4aa6-8b94-37e0fec8da4e",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d5473431-3928-4357-a2e4-af642b6849e6",
        "cursor": {
          "ref": "0412e8e5-4a67-43cb-8791-4a978a0dac57",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f18d43e7-75f1-450c-8c28-574d09a46c67"
        },
        "item": {
          "id": "d5473431-3928-4357-a2e4-af642b6849e6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "fee9977c-93d8-4504-aaf1-a3a90c5f1b3b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2b7c81eb-fb86-4077-a538-74c7f6eb8ad5",
        "cursor": {
          "ref": "a147f0a3-ea51-4e86-b6c5-e05b3194e570",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e6e0b078-e27b-43c6-a564-795e6164808e"
        },
        "item": {
          "id": "2b7c81eb-fb86-4077-a538-74c7f6eb8ad5",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "04f6f10e-7cb7-4c3d-8b68-4ce4e06a7413",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3145be2f-593b-40ea-a7e2-c364ace9d0ec",
        "cursor": {
          "ref": "96e64022-ab0c-4ea6-b934-f6143adc6cd2",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7284c3fc-9e3c-44c3-9b86-179097d4c0a6"
        },
        "item": {
          "id": "3145be2f-593b-40ea-a7e2-c364ace9d0ec",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "db6df68c-01d7-4837-9946-771f9584c00a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e4fff6ba-e63f-4a0d-a852-c923cc54a1fb",
        "cursor": {
          "ref": "78bf61ec-4a80-40dc-8492-f589299830dc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6eed809f-9e7e-44be-9b5c-071bf1b644e8"
        },
        "item": {
          "id": "e4fff6ba-e63f-4a0d-a852-c923cc54a1fb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dfa13d4a-e7ff-4b49-859a-d813ef0c67b2",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9e50d23e-ee40-4436-9be9-a9a8858d040b",
        "cursor": {
          "ref": "18c3af64-893e-43af-a2cd-2c0d5953aabb",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a5c3657f-c15c-43d4-b36e-4b8563d3da77"
        },
        "item": {
          "id": "9e50d23e-ee40-4436-9be9-a9a8858d040b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "79c465f7-9a22-40c3-97ff-abad97e9b86d",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "43f199ff-0404-423a-a475-454b38f7a3fb",
        "cursor": {
          "ref": "a0b94312-4e75-45b9-962d-179fe466a307",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "71d15a38-81eb-4fb4-b576-c898da1ef506"
        },
        "item": {
          "id": "43f199ff-0404-423a-a475-454b38f7a3fb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "181fa4fa-6d17-4436-8f49-9b97f5abd1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ab43b7-ff11-4829-9cdd-ea53c1a6dfda",
        "cursor": {
          "ref": "1cdb1f02-a7eb-4e7c-8a03-ab7f5f2ebaae",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b7a0a37d-53b5-4686-8b6c-556e90b5855c"
        },
        "item": {
          "id": "b8ab43b7-ff11-4829-9cdd-ea53c1a6dfda",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "089f8a4e-4b8e-48a8-aca2-0c290ef0888d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e17de4-7c67-4b97-a363-bc999f2eda61",
        "cursor": {
          "ref": "449c5534-84c1-4886-987a-a5918ac381e2",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "bbcde7e5-b49a-4447-8797-857fbbe0ad40"
        },
        "item": {
          "id": "35e17de4-7c67-4b97-a363-bc999f2eda61",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8d30c8ec-db56-4ab1-873b-97e55c1a5f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0bdbeff-b077-4811-b536-29671f7374a3",
        "cursor": {
          "ref": "8a34d9d3-d633-42e1-89b0-cebafcfbed52",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "6853020d-81be-4470-8051-5165d7374af6"
        },
        "item": {
          "id": "c0bdbeff-b077-4811-b536-29671f7374a3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b9d1cf7c-5478-49d7-8790-fec7ec91cfcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11c410e-f219-4526-8755-3ca8c1c3cdf9",
        "cursor": {
          "ref": "9dbab280-3df2-4b1d-b946-13f6f56d178a",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bbf2b96b-5cf0-4cb6-9764-9e9e24c84d6a"
        },
        "item": {
          "id": "b11c410e-f219-4526-8755-3ca8c1c3cdf9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c4b3de14-c27f-457f-85ab-b892c152c71b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b484a9-07fc-4307-a336-b5697576afca",
        "cursor": {
          "ref": "e95e8297-161c-45ca-81e2-fdf88f52a21e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a1da6e18-dd7e-407b-be63-9eb608416b03"
        },
        "item": {
          "id": "68b484a9-07fc-4307-a336-b5697576afca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bf67d4fb-d5d6-4f3f-a187-21ad689ff683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580795e4-4f16-4405-8be1-2287c5168829",
        "cursor": {
          "ref": "8c80a2a8-b295-4020-9a93-77924d263437",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d329caf7-7d3b-443b-b602-e0f3fe5bb89d"
        },
        "item": {
          "id": "580795e4-4f16-4405-8be1-2287c5168829",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ae671414-9224-4179-a5d6-2613268f491c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a2f4ef0-7252-4ef9-bdf2-58fa7290679c",
        "cursor": {
          "ref": "5ed866b4-bf4d-446f-80bb-c804f77c96a2",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3b3cc23a-bd11-4a3f-8ed9-25155b889229"
        },
        "item": {
          "id": "2a2f4ef0-7252-4ef9-bdf2-58fa7290679c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d798dc3d-069b-4662-b65f-cba9a501a174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483a7d82-b155-4cb3-bebe-e11d0bac33b4",
        "cursor": {
          "ref": "e4bb21f3-4483-4950-8b82-97ca99f318b4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "647cc2eb-705c-4777-bdab-befd0bd2e4b0"
        },
        "item": {
          "id": "483a7d82-b155-4cb3-bebe-e11d0bac33b4",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "88c14e53-c77a-45fd-888c-781f9b107e99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cceca731-f12e-4229-957e-e8ceee28a388",
        "cursor": {
          "ref": "43e27583-f417-4676-aada-6bf00ca55fdc",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "be02dc99-e07e-451f-919d-0855c9eea5a7"
        },
        "item": {
          "id": "cceca731-f12e-4229-957e-e8ceee28a388",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8ac948ae-ae13-49c5-82d4-f2776f12e50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f19b7a8-2b8a-4616-9db0-34d943b3e41f",
        "cursor": {
          "ref": "f31bbb17-2bc1-43b5-b403-f320939cd37a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e12a0df2-ece2-4152-a5e1-0012137dbc61"
        },
        "item": {
          "id": "8f19b7a8-2b8a-4616-9db0-34d943b3e41f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "19e914fb-62e5-426c-9611-d9bb9a9dc7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3286f8ed-a9b9-4a96-aa10-7282a70db6f8",
        "cursor": {
          "ref": "4b6bc361-989c-46bb-b8fe-26d9f44043e0",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4a73bd6c-2ef2-4ea0-a50c-1452e0883b50"
        },
        "item": {
          "id": "3286f8ed-a9b9-4a96-aa10-7282a70db6f8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bc042858-fbcd-424f-b637-271539cf47a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fae748-0f87-4b08-a231-50c33dcda662",
        "cursor": {
          "ref": "f409c0f3-2aec-422f-8261-5e12174e864b",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0eeef743-cdbf-462c-9efb-f5864e37f522"
        },
        "item": {
          "id": "72fae748-0f87-4b08-a231-50c33dcda662",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8b8c6b4d-7d9b-47c4-9912-a3f81a3701bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fffddb-3ab7-40d9-bf5a-fc09c3d1fb71",
        "cursor": {
          "ref": "3a0f2c6a-1e21-44b2-865a-ca6af323245c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fb2b2653-63ef-43a2-a306-e8e09a60cf85"
        },
        "item": {
          "id": "62fffddb-3ab7-40d9-bf5a-fc09c3d1fb71",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ebfd9803-4323-41ba-b720-cd757990070f",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8cecd890-1171-40bd-9901-3faaafe611d5",
        "cursor": {
          "ref": "f6ec1aa1-b856-43dc-9047-78359d871227",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "01181b50-14a5-4f7f-bf56-fa9f710aac10"
        },
        "item": {
          "id": "8cecd890-1171-40bd-9901-3faaafe611d5",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5f480fff-7c42-4de7-a250-b24517cc62f0",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d999076f-4de5-4c72-a60f-0a45e7fae601",
        "cursor": {
          "ref": "10d4489b-3e47-4c23-94e4-cad8aa4e7241",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d7383e7f-3a55-4d7f-8b24-590f2ca148b4"
        },
        "item": {
          "id": "d999076f-4de5-4c72-a60f-0a45e7fae601",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "7b4c58ce-4c29-4d70-903e-7dabeea22d9d",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0a9f5153-4fa9-4367-bbca-4d356fdfc9df",
        "cursor": {
          "ref": "6921d386-0c33-4096-be05-27628d974a74",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4b6b6e46-5255-498d-ae22-b9143928c738"
        },
        "item": {
          "id": "0a9f5153-4fa9-4367-bbca-4d356fdfc9df",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cae15a99-f7b8-45ae-9c97-2c6aa45d9a46",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "117b6de3-9d78-42ed-9d65-f101cd5868db",
        "cursor": {
          "ref": "e525daca-ddbd-4a24-b482-ba0d9961dd01",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "221a3cf4-aec2-43b8-a97d-a14fb1972430"
        },
        "item": {
          "id": "117b6de3-9d78-42ed-9d65-f101cd5868db",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "966ee0e9-7d7e-4db5-9b69-77bb5f689510",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "e4c12a68-5331-4c4b-bc17-e902a304fb29",
        "cursor": {
          "ref": "1ec50b88-9dea-4833-840b-9f3587408e6b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "63d52436-1552-474f-811e-aa8582f108f3"
        },
        "item": {
          "id": "e4c12a68-5331-4c4b-bc17-e902a304fb29",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eb2c0de4-7595-40bb-b8db-f0099f7ae3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160472ab-1fd2-45ed-b2f9-40a236c053f6",
        "cursor": {
          "ref": "1ab7a2be-1cf6-4e46-a70d-a91bd91a6f7c",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c2241574-9c02-460c-9fc9-4924410f812f"
        },
        "item": {
          "id": "160472ab-1fd2-45ed-b2f9-40a236c053f6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "090a1fcc-9470-4d0b-b592-215ca9292e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8660c77b-5783-4c8c-a531-ff6842461bc4",
        "cursor": {
          "ref": "087cfeed-f791-4191-a663-20650cbab53e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f37f0ac8-b67d-42a2-b4ca-7304b7b7f779"
        },
        "item": {
          "id": "8660c77b-5783-4c8c-a531-ff6842461bc4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b9f67d19-91b8-4db2-a7c1-4e72231c2622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8532177f-1f61-4cd6-8a86-942e1857db06",
        "cursor": {
          "ref": "8c3668b7-01f9-4bfe-82d0-c0aa254433df",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e206c4c-dd04-449c-9523-fd35879e282f"
        },
        "item": {
          "id": "8532177f-1f61-4cd6-8a86-942e1857db06",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "20948f97-b24e-4f9a-b2ce-a15d74619777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c2b40b-e733-4607-9c0d-9c07762211d7",
        "cursor": {
          "ref": "3eff567b-f285-4bd1-9ed4-b61b635af7dd",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b271844-0b99-44c8-a2ba-8de9b465c4f9"
        },
        "item": {
          "id": "d5c2b40b-e733-4607-9c0d-9c07762211d7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ba5d8cd2-0380-4d18-85f6-b6e48188f804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0f0e7f-994f-4873-90b6-c20c1dd72b3b",
        "cursor": {
          "ref": "fc125f33-00d0-4ad7-ab79-4988ff125834",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b65ecb57-05be-4aa0-9f03-6d5ce47cb9e4"
        },
        "item": {
          "id": "0c0f0e7f-994f-4873-90b6-c20c1dd72b3b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "65d28cec-380f-400f-bc96-2c453016fd72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d670398-29d3-4133-b91e-70edb8d1ae26",
        "cursor": {
          "ref": "b81e8c2f-c0a6-4038-bf96-00ecfe945894",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "33b8b3fc-751e-479c-94f3-bffcfdba48ee"
        },
        "item": {
          "id": "1d670398-29d3-4133-b91e-70edb8d1ae26",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2943b274-5f75-483a-ad9c-759679d999b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61810d22-17a9-4de1-b96a-0b694b4926ce",
        "cursor": {
          "ref": "e9f7764b-1a8a-468d-ac80-f76b4815ec51",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f86d5229-9679-48de-9237-d9d80b637db8"
        },
        "item": {
          "id": "61810d22-17a9-4de1-b96a-0b694b4926ce",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1bf1ae0a-6c23-45ab-aa58-d42e22c9ed06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d94685-c02e-4d5f-b8a9-8356abb5d158",
        "cursor": {
          "ref": "3dbaee79-21b4-4a28-848e-e8475f4e6e89",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7050eac8-6adb-4b5f-ab1a-81db2fef660b"
        },
        "item": {
          "id": "94d94685-c02e-4d5f-b8a9-8356abb5d158",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ca4275c7-8576-4aaf-820f-e4d92701a892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2684ee29-ab6e-4c5d-b271-3221fabf505c",
        "cursor": {
          "ref": "47cdcd6f-ecf4-4337-9df8-d1fd014c91c2",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "db473203-649c-4010-b8f6-3ff2d2d154c3"
        },
        "item": {
          "id": "2684ee29-ab6e-4c5d-b271-3221fabf505c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e0495ff6-0f9f-4e61-9a21-5cb355dd846a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0aea03c-52e6-4b82-9489-3feda46727ca",
        "cursor": {
          "ref": "7d29b595-58f4-4cc8-b95d-2099c8fe605a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "32b0ab20-e236-47bd-a4de-86bc4a624376"
        },
        "item": {
          "id": "b0aea03c-52e6-4b82-9489-3feda46727ca",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "94e399b7-730c-474a-89c9-c7952a3fc0fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664b3a0a-c5c6-4120-83db-fc3e4d8281d8",
        "cursor": {
          "ref": "e8a9c3a2-2424-44b9-9282-97129fd352fe",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8b315792-1bff-428a-9e91-2f64f3eb3847"
        },
        "item": {
          "id": "664b3a0a-c5c6-4120-83db-fc3e4d8281d8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4786c440-e455-4df2-a534-f9c6176a22ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff876365-197e-4802-93c1-e2a9d5e96bf8",
        "cursor": {
          "ref": "3813643d-50ea-48b9-b211-7ca76e4b3543",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fbc2cfe9-adbd-4d14-98ed-4e406604f439"
        },
        "item": {
          "id": "ff876365-197e-4802-93c1-e2a9d5e96bf8",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d38a670b-2702-4b1e-bab6-5c419020817e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e742cb94-da35-4cc8-a0d2-24ab05c39c04",
        "cursor": {
          "ref": "408077dd-782b-4c31-a324-dc36f9d46245",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "c064e84b-4feb-455e-9a38-4e4322f1b349"
        },
        "item": {
          "id": "e742cb94-da35-4cc8-a0d2-24ab05c39c04",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cd94091c-7ac2-4918-a2fa-2ba9634d3178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb55be7-0618-472e-b937-ab9a7b129491",
        "cursor": {
          "ref": "f23a2ff5-2f38-46d2-a6ce-2d49140b129f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "30c817f1-c67c-47fb-b0d2-4f3af0cc6c8b"
        },
        "item": {
          "id": "0eb55be7-0618-472e-b937-ab9a7b129491",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "aa6d3dad-0509-42cf-95e6-ff96d516617b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc1a6f1-beab-4130-8ccd-35ca1bc72f4b",
        "cursor": {
          "ref": "222e43e8-4a01-4b8a-be1e-09c5057c7115",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "639f0e5c-a6ab-4d3d-9848-8026761df9c4"
        },
        "item": {
          "id": "8fc1a6f1-beab-4130-8ccd-35ca1bc72f4b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "06128b38-de6f-45f2-8ee6-d3a85e918cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee976f5-f806-4b14-bd30-1050680500e4",
        "cursor": {
          "ref": "3cb919f2-80d1-428a-9817-76d144de1946",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6b011a11-4fb4-4195-9269-d78d3299e9d7"
        },
        "item": {
          "id": "4ee976f5-f806-4b14-bd30-1050680500e4",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "39b47388-18db-4ea2-8bc6-89845b897e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be64454-a15b-4810-aabb-fc7a6e1ded6b",
        "cursor": {
          "ref": "0ac2e096-d215-4c1d-a6b0-4ba521512d2a",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "97392b76-639e-40a7-8c1f-a958a2387b68"
        },
        "item": {
          "id": "5be64454-a15b-4810-aabb-fc7a6e1ded6b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e3266dd3-076d-4df9-8105-9ca39f2286f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae480ca-7883-4ea5-b1dc-7b07e377a8aa",
        "cursor": {
          "ref": "6f8341d1-0017-48be-bd39-62248b34a46a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "33accfcb-f0e8-4e8c-beba-4e966d47b666"
        },
        "item": {
          "id": "0ae480ca-7883-4ea5-b1dc-7b07e377a8aa",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "95a0222c-e88d-4b33-80ea-d59208a9e69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10aac90a-4927-41dd-99a8-89309a3e262d",
        "cursor": {
          "ref": "77c9da3b-6f5f-41ea-a726-2e2251555eb9",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2a2a12a5-c13c-41cd-8d48-b60b2eba536f"
        },
        "item": {
          "id": "10aac90a-4927-41dd-99a8-89309a3e262d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "beca0085-e9db-448e-a5e9-f414da5086fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dbe822-e953-49ee-874e-3bdf05ffef12",
        "cursor": {
          "ref": "23f91a76-964a-4ece-b477-a8ce8e56f40b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "de722afb-863c-40af-8b47-278d4092ba4d"
        },
        "item": {
          "id": "b1dbe822-e953-49ee-874e-3bdf05ffef12",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c7278b6e-2799-461a-a9e9-71578fc7ef28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4571526-dbb9-40f2-847e-c38b2cf5926b",
        "cursor": {
          "ref": "8faddf13-abbd-456f-9c16-84bde2e27ad3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3596b61b-a8b4-43e5-902e-81560869a57f"
        },
        "item": {
          "id": "e4571526-dbb9-40f2-847e-c38b2cf5926b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5afdbc7e-9d68-41ba-85f9-72530496c01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca5231c-2361-43bf-b076-3895eb9144b8",
        "cursor": {
          "ref": "7917359b-d570-4f56-83a8-02573a9536c7",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0219b8b2-ea0a-40e4-a5dc-25366502461e"
        },
        "item": {
          "id": "aca5231c-2361-43bf-b076-3895eb9144b8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6cb59565-9342-488a-b8f8-b22274cdf43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c651a69c-9a2e-470a-b1b4-db998399e06a",
        "cursor": {
          "ref": "0c0436ae-f806-4f9c-9bbe-994370c87b0e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "75c1f214-55c7-46bc-9d86-737ea33337b0"
        },
        "item": {
          "id": "c651a69c-9a2e-470a-b1b4-db998399e06a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "546410ca-526a-4702-8b69-853db2aedb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d8cc5c-cb3c-4e72-82ef-9228d2837e9f",
        "cursor": {
          "ref": "41f5bf1a-5cd5-4773-b870-a9fdf2d696be",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "27b0b67d-36a4-45f1-959b-42c63a09019a"
        },
        "item": {
          "id": "a8d8cc5c-cb3c-4e72-82ef-9228d2837e9f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "ab3c3910-5526-4a1e-96d1-b86b4860ab2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba665ece-15e6-41d1-ae34-957423d11b84",
        "cursor": {
          "ref": "8fc3cc48-e4c1-451b-848f-6e981eb99a26",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "abe4acba-1137-40f2-abf9-5ab765535e61"
        },
        "item": {
          "id": "ba665ece-15e6-41d1-ae34-957423d11b84",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ee48966-13cc-4684-ad03-c868bceb732e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4d2324-db76-4063-9d45-3c1f1beabafe",
        "cursor": {
          "ref": "b47a73c3-79af-4dcd-9024-06d2e01cd2c2",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "701c8a21-79a3-4207-b9ad-d7fd009bbb34"
        },
        "item": {
          "id": "8b4d2324-db76-4063-9d45-3c1f1beabafe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "61156094-0411-4766-b453-57e7f2e5e512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ea7f77-4a07-45b5-97a4-1a1b58973713",
        "cursor": {
          "ref": "19a0a718-4dac-4906-91a1-b30dbbd5fa16",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4b8ede2d-b925-4d89-aba6-95555fe141c5"
        },
        "item": {
          "id": "b6ea7f77-4a07-45b5-97a4-1a1b58973713",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5c4ceba6-3c07-437d-92bc-86e5f0409858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61a2854-fce8-4986-bcb6-160f6881c478",
        "cursor": {
          "ref": "ff8d5a16-a980-4943-84ed-c6c456b6c032",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "469b9741-7009-4c25-ada9-ad4a88cd9a7e"
        },
        "item": {
          "id": "b61a2854-fce8-4986-bcb6-160f6881c478",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8e9f848b-5332-434b-a72c-d1c011c80efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9e6d00-0938-4c97-ae7e-a0c5ed1123be",
        "cursor": {
          "ref": "047176ad-0a4c-433a-be7d-3350fb996b3d",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6c15fefa-9018-42cd-bd40-0caa3284c781"
        },
        "item": {
          "id": "4a9e6d00-0938-4c97-ae7e-a0c5ed1123be",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2f6f2d31-0bfb-49b2-ae3b-6d5e1f257427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8621bbe-f366-4713-9283-091a947a966d",
        "cursor": {
          "ref": "0082956e-7db9-4c59-ab9c-8f94af60246b",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d7a13e31-1717-41f5-99b3-56e0d603af85"
        },
        "item": {
          "id": "c8621bbe-f366-4713-9283-091a947a966d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ae3d8204-c83b-4473-8bbc-2ace6b6f655e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "542d0d81-ff59-4455-a0e0-8a8733cd5779",
        "cursor": {
          "ref": "5e5939b5-1edc-44ab-a5af-420da2de9ad2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "548fd3d7-ae96-4850-9eee-b2d59c3e9dc9"
        },
        "item": {
          "id": "542d0d81-ff59-4455-a0e0-8a8733cd5779",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "98c73865-2c43-4acc-9c51-c211dff0753d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9656914-79f0-4a03-b0f7-da546472f07a",
        "cursor": {
          "ref": "c1b0a563-c30f-4ceb-90da-a474e47ad17c",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "c8062322-9ab8-412c-a501-fe389186e9b0"
        },
        "item": {
          "id": "e9656914-79f0-4a03-b0f7-da546472f07a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4461f786-02e6-44bd-b5f9-6c905e81d57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7753f454-5b5b-41da-b894-9ede40185c5e",
        "cursor": {
          "ref": "ff997967-8583-4ab7-82ee-454e7f4684d4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "cf61db88-b204-4057-a498-5f58f122db74"
        },
        "item": {
          "id": "7753f454-5b5b-41da-b894-9ede40185c5e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ffecc28c-430b-403a-8f55-4d7de92d9fb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf47b6c-7c1d-46e1-8053-3b7009e92c50",
        "cursor": {
          "ref": "fc486b24-8ca1-4865-8818-92987889115e",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7c334f87-066e-4eb4-959c-0b64bc0ebf18"
        },
        "item": {
          "id": "4bf47b6c-7c1d-46e1-8053-3b7009e92c50",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6dc71c0b-f540-47b0-b468-461dd6d01745",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5eeae0-d4ef-4289-9528-33fd8425bf1b",
        "cursor": {
          "ref": "61443423-f4d9-4af2-b693-bfe4ff0786b9",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "14cf89e6-81cf-4642-ac74-30b4e6c0c5d8"
        },
        "item": {
          "id": "de5eeae0-d4ef-4289-9528-33fd8425bf1b",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aee6dd77-0b80-439b-8f13-1cc0f229f4a5",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "c8aea1ab-2365-4152-b0e0-c83a4c8e9871",
        "cursor": {
          "ref": "f3a6f26e-f2fe-4db2-8dae-aff1222203f0",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6e70445e-1b87-451d-877d-5542a921dca1"
        },
        "item": {
          "id": "c8aea1ab-2365-4152-b0e0-c83a4c8e9871",
          "name": "credentials_verify"
        },
        "response": {
          "id": "24ca6f35-cf95-4bf0-b387-f5d2de8ff143",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb088cd6-0eb1-46dd-a240-9e85ccd3af76",
        "cursor": {
          "ref": "25aadc32-bfaa-41c7-9e01-3ed2d7377c47",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a27a19d6-ebb1-47c4-8366-f6d12d906207"
        },
        "item": {
          "id": "fb088cd6-0eb1-46dd-a240-9e85ccd3af76",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d7e5bc5e-0fcf-4eb4-89cf-3f5d0c4dfdbd",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169d74e-c602-47b8-92fb-4add4e99dd75",
        "cursor": {
          "ref": "8bbaaebd-9f6a-426c-b38e-bc3f4b110a5d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3cdb33b0-4477-46f2-a498-6b42f3508d7c"
        },
        "item": {
          "id": "e169d74e-c602-47b8-92fb-4add4e99dd75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9d6b53d3-ceaa-471b-ac84-982e5a5385e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e169d74e-c602-47b8-92fb-4add4e99dd75",
        "cursor": {
          "ref": "8bbaaebd-9f6a-426c-b38e-bc3f4b110a5d",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3cdb33b0-4477-46f2-a498-6b42f3508d7c"
        },
        "item": {
          "id": "e169d74e-c602-47b8-92fb-4add4e99dd75",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "9d6b53d3-ceaa-471b-ac84-982e5a5385e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fae415e-cffa-44c2-a43e-044c49ee6f10",
        "cursor": {
          "ref": "d0099edc-c968-40b6-b4b7-4db8de984380",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "9103c968-eb89-4037-b521-231f87844f94"
        },
        "item": {
          "id": "3fae415e-cffa-44c2-a43e-044c49ee6f10",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "3f4dda7b-8c2b-4b2d-a973-60d2ff47e155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0222482a-f237-4b09-b392-ed0dfbd9bc6a",
        "cursor": {
          "ref": "b4fc59d5-92a7-4833-a136-56cbbc3b22d9",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "230dd056-9ccd-4ecd-b0b0-1f9f9afb97d7"
        },
        "item": {
          "id": "0222482a-f237-4b09-b392-ed0dfbd9bc6a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c9d93cd4-d87b-46ff-8bc1-a319937437ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}