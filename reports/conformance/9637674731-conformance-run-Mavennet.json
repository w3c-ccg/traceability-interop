{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a54573c2-8ebd-44bc-9c14-0dd8a0a4369d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3c6e7de3-7f85-45b9-b700-dff676c39253",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dcd6c173-fb4c-467a-b0d6-5cef4588842e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6acc6757-2411-4dd0-af58-a564cfd8c38d"
                }
              }
            ]
          },
          {
            "id": "ea911229-f3bd-40f8-ba1e-081bddc24fb1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6cc67c6d-db37-4c50-86c5-07058c0f61ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "31709022-7ae3-4484-9ff6-34370e94cc5f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3a862ba3-e742-42d3-919f-44e7b009cc42",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bbac2230-5d6c-4077-bb78-3c883cb6c7f9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82782ce8-934d-4ecf-8c8f-dc0aa7c14562",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29ad5db3-95de-4f4b-9988-8654b988c6a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fac27deb-6eaa-442c-b9d5-1b15c4724f2a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5fe06e73-6ae2-4392-b470-eb5b2596b110",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43abf8fb-bc39-427f-8a01-0288412e6cbc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9f49bbd8-d4b7-4d20-8c1d-72a3824bb7e4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a2f5f91e-b7ba-40b6-bf2f-10c38e279697"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9aa94895-a68a-4ef9-a03c-6246f3652ad2",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "00b4f5fa-8acf-497a-ac7b-651b55c81f21"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc6d4d71-6bc2-46c5-8e99-fb0e3109cff9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec0c81c0-5665-4f7e-9460-9273890c1b93"
            }
          }
        ]
      },
      {
        "id": "ac7731e5-68ac-434a-aa14-93f021721e0c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d41018ed-cf5a-4032-b9e3-48819853967b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f06369b-2ff8-49c7-856c-6a1e794e9d30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "401e98f8-5e56-4afa-9462-a5e649ff11c2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d06f096-1c4c-497d-b6ac-778c2a4e38e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f9db957-21bc-42fe-86be-9bee0382754e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a14f185-c784-4c79-bb7e-ab89bc3d57d5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c281cb25-229a-44f2-a32a-9db402088b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b551d17-4979-4357-9237-d10875b1352e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14153db-1e68-4f36-8654-8e9ac7e2cb54",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8861b550-90bf-4477-a1ac-238770bf3efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c228bf8-875b-4181-802c-2fca87b4344e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c1728413-0c47-4fb1-8a46-a70033c7919f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "927702df-3295-4fa5-9a3c-6f307a56143f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6ae873-426c-49ba-af9f-fae3940ad782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2f599f2-26f6-4ade-bbca-2a1f9ae77cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9a41ab-8695-4621-81c5-d67c75c37348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffd4747-3a83-4256-bce4-36b16b4ca55c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "efefa3f0-5a9e-45e0-a16b-7d2117e79b1a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "add030a8-4b76-45d5-9821-a46060fd5b52",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2722b30-0224-4e8e-bf86-1bd1e06fa3ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "3e060e59-b59a-46bf-8c69-e2650a708f7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f76c71b-3806-472f-856d-3a7c257decda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6cd7bf59-8e7c-4620-ab55-715fc7252b62"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e9418800-d045-4969-baaa-5e8a4c4fba4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dff5b905-89d7-41f4-842b-8a515909e2ce"
            }
          }
        ]
      },
      {
        "id": "23265a58-bd2b-4aec-895e-5f60961d5b85",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3793c1c1-9553-484d-b41d-aa5c7a1cdae6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63a4bc26-970b-4e46-9921-6485877ea6f6",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "dabbd736-f299-4332-ab20-f7805539921e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7959065-2fa2-4a55-b53b-c441f4352d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc2efb3-f39f-4df3-b250-b2c639f07cec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025669a9-4bd3-438c-bd31-674583407ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ad6ee07-8438-4ff2-82e9-e26c5083a903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e206ef-7f41-403c-ab62-374394e7f64f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52d92d3-7934-4e4d-895c-6efe1fcdb07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f4beac-5336-4cd8-a483-e730b22bb749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3136544c-5127-4ff9-90b3-ccc8a8ed84fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6aad46e3-41b8-436b-9564-61d42dee7dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dae0be-4a7f-4312-9fec-63df7e8a5de0",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689173c9-2971-427a-929b-1aaf6e76aff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecce4f44-5a62-4e81-a782-0525d45d206a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ea0fb8-d352-4cff-856e-aac9a49c8340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89848d18-1dee-4831-9214-78b39706f11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328b2ab4-a63a-4753-b271-6050743815dd",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fb13e5-a58c-403f-a31b-f629963ed623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3688bec6-7667-4a60-8603-9a553f616697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdc6f1a-c0f9-4c7a-ab63-16bd18ecfe01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6dff24d-aa38-4687-b829-b945f4c220f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31f58ab-4e88-4410-b9ae-8c9a4e92e059",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e635baa2-20d3-413f-91ec-1d03473708f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a732760-1aab-488f-b313-b589e2f9bc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb8bdfd-e9de-47c5-b22e-4306224b9c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e4ab63e-1089-4200-b377-90354457effe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa16bae8-a1c8-44ae-b417-5c258d9372fd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2516ed6d-94a1-4b45-9df9-5a4414a72766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf3eaa6-385b-4d23-9e03-b76e54f1b796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b245ce60-4a32-4e8f-8c4d-5ac8832886cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c3db9b9-85d1-4403-8119-32224d768ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056e393a-a550-45bb-8d7b-ede69809a9bf",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cfd8f9-6c12-4142-96fd-e9500fc370e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bce3c84-1229-4dd9-b33a-a09e344d3b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d06087-e042-41c4-a32b-6d2b6da3ec97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0121f4ce-5610-4c4f-a18c-86201597edf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b2c5ff-f2db-4083-a9e5-895ed44e0806",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0786cf9c-118c-4228-8e91-6f4953ee1f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20025bc3-62aa-4105-9029-f287f2d12bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d776ca1-ac6e-4f14-8fff-d869ba20a362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "739c6a9e-e357-4a88-93bd-9e47c79d45f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09bee733-c06b-4105-81d8-042d17d7108d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3900673-f032-45a4-b977-bccb7180143e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749d235c-fade-49dd-8468-4dc4b1b17c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84fe25b2-7e52-45a0-bdb0-ecfd9e8e2e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be0a5b3a-c52d-45dc-9278-fbabad34322b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cc8b4d-ac62-47e2-bdf2-f3c199e6d648",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffff215a-5c26-4de7-b3c0-111f7f3658c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de235e8c-93d7-4ec5-8352-2351224624ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232ada36-53cd-461c-b96b-b14ef65f278b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "047f261e-d17d-43e6-a9e7-44c7796fabc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa4074ec-9f9b-46c7-b964-6e213f042ed3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec5ba5b-612a-44a8-96db-d566aec0f041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "427d0802-8c0b-4216-8f84-ec6b1e188a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc4a3e2-5bf1-4588-936c-321e2165e130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "238df4fc-a155-47a7-b9ad-3adc29443580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5032aec9-1e00-47ee-a762-b6670c19ba53",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56af311-18da-43f7-9484-81edad6b4154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "537283f1-5df8-43e3-90ee-a5fd7a8b715d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf8c953-afe8-4255-8b66-bd3420511744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1dd00d3-6e29-4e71-aa49-5b5c9cf4816c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ec3638-f4d4-4012-96e5-19a67502d9b1",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff8baf4-38e2-48cd-8719-500bea822355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc542ff9-d527-4773-9b92-eb9b212c8e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f709895-eaaa-4a47-86d0-a8c5737f58e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b92fb5a8-bfca-4dca-95af-efc852648e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e132a5-e095-49cf-a5ce-d7896c8bfd40",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba2521e-1a32-40c6-9029-db05c5bd7264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5547fb5-68f2-4eca-97ab-b331d56f12c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b436ed-4d33-4514-8822-4a98d771741d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45605407-4c8e-4e32-9e01-c127495d2921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "296c4fb3-d75c-42b4-af01-64f535f7bb8d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25966f3-dc46-4b7b-9b4a-855f4c077336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22afb50a-051e-4a8b-9998-d53c6a6e9001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057e2a73-2ebb-454a-befc-a66af69b31b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48056917-9fd5-420c-8e09-9fe8546f7852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197ab0f1-a0f9-4818-9c72-72f4a8652d1b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecbfc51-7aad-4719-91f3-c87354f1ad25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be271370-9f33-4e04-b626-3ac3780c19af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de2d227-e9ec-4842-b89f-d114e0d7ef5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d0deb6b-7903-427d-a2c9-382042b3e6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4d5357-23e1-4811-8965-e9811a32f334",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4acf99-3113-4111-ba36-1f3b6b19813d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "674608ef-57ff-4884-a2ca-388acf5ae04c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ee9d1e-dbe6-47c1-bb83-5c0077ce3eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7cf4165c-b9c9-46d0-b65a-007e0097771c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feadc3cc-8d0e-469f-b83b-74dbc7ae1b3a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce5c262-1f95-490d-b595-8e48bd3a8a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee396f6-350f-484e-b333-cb5381e48c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89d76c8-ad9b-4ec9-875b-6589fb12ab6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7980e2-87de-41e9-9b97-a87819ce2b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f82d94-ac07-4c62-81ac-1212a4813255",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b5e06d-7867-4c67-9e87-278c503feb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f852849-f1bb-4128-b200-c1669ba526d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170424bc-bc8a-42f7-a0a8-97c460b7d861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38129afb-c2b9-4fd0-8cb8-4be3bcf3bf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0868c32-3b32-4db3-92cc-b557392fdb9e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e38995-2794-4331-93a5-c16efed3d08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d408ac-51ec-4d0e-a952-004b164f3209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a63cbc9-8e23-4dc1-bb2a-d716f7751de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a95086-82c7-46e8-b4f8-d48451a87932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1e8990-6b39-4763-86d9-382594be0048",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9926bf8-9208-4ec5-a27c-ce5880586ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf8b356-d995-4a9f-831e-98830b644843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472d99b8-372b-41cf-93f6-78f7a15692ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a331f47-a174-4d8c-927d-aa653efecc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acbbc1a-5ab0-4f08-a382-dac3c139a3ed",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "720e8cf5-a491-450a-8c17-f8f9871abb3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21144218-d851-4ae6-a558-309a160626b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4a085c-ecdf-4b1a-be7d-bd0d3699df3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe883863-dca0-4430-af3f-b30a9a1df321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3803b4e1-f1bb-49f8-89a5-32595e2c0860",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3b9971-76d2-4997-86d4-c6369e6c13fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed6a9ea7-ec46-4d2c-9c37-009325d218ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b1fb78-159b-48a0-93eb-1f92668a0aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15fa79b2-2ea7-4ca5-84a5-68d457c43fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1afaad-6914-48b1-88ba-05007b3892f5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd905bd8-9708-42a3-8766-cbb33e259739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2719c238-bd73-472c-b094-44104dfee3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bacbd31-7bca-45f4-9a6a-20828ddfb8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a690028-7abc-43b9-9653-46859e83180d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee44fa30-1223-4712-8514-67a26ce94cf0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6820df-947c-40b3-befd-64ab2a97c98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef21ea56-bbbb-4c1b-8fde-82d4092add29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2302e4-ecff-491c-850d-6263391eb585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d8ffd10-c39f-4aea-b170-40797a1a7dd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2280549c-b19d-4fa2-b757-47aa344b3cfb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1d686fb-9af0-44b3-bcd3-393a6afec8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964005f4-b0df-4332-af83-f3dd1e1e760e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2af5ea-2a8c-4db1-a321-95a01114b36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a6fec66-a5fc-418b-9c4f-738f4970ab3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5befbd2c-6fc5-4cd7-bd7a-04c69c1b89c4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2fee80-d1dc-4e8c-a92b-5b16e9f963bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b108096-0598-41f4-a1cc-fdf890516567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3984a2e9-d80a-425e-8160-386d157dff37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "88fd38c9-bd17-4e4d-bc7e-9b7a7e14666f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87666b7f-04cb-4adb-9a3d-a6061553b5e2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c4fb9c-7b50-4cb4-92f4-84d60aa4425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edee4cd-c5bf-4be2-ae37-9f755a421677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5814cb-485c-4e67-9cb5-427fc636de7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b67c2f0-9ca5-4c4b-b799-c856fce401ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bc9b1b-e2e6-4648-861c-aaa753523f0b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89d4d3ab-9bb9-4808-a9e9-51d54531b6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36a4189-5a2c-4fbb-a11d-3c776dae0ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25804651-f8f6-456e-a691-3c011f0e3ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be049dbf-05df-4a02-9e08-2907e174dfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7be8187-c49b-44bd-bb47-c169f8aba9c1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91552ab6-305c-43b1-916f-1a181b422798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f431f06d-33cb-49c7-b10f-4c5c4baf24e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd43bfd7-06b4-4124-b375-500a1ee9dea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "acf9368a-d088-4089-add6-7580655fdad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1240da-7a58-4462-994d-59b50e06ae3a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5461f6d5-6fb3-49d4-834b-8f96f8c0c3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11277c7b-5693-4834-b478-81a3fa886b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24442777-46d6-48e3-bf0a-6fecfc39e2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04e23532-1e9d-46f8-9439-2e1f07485038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c719f1fc-081e-40c3-a7e5-78a03a87da15",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7ac42c-aced-4c22-9db8-74062211ffd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079734aa-d45b-4704-a61c-1bceefd65511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a5d85a-989d-4403-9d12-9e216927a0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "963ab220-a0b8-4c89-974f-f6ef15beec67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd4b545-3e42-49d6-bca4-02bb635c264d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a2e7cd-f6cc-49fe-966b-2d3a9660b57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104616fe-15cc-4ef4-b320-e198332360ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c1d3f43-159b-4205-b1da-5e483c762e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85547c74-745f-4a34-9200-f7b7b8481ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881c5003-421f-4788-82c4-ba54c4a5a167",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e198d25e-6e59-421f-970a-735ddbb4cc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3c0bdf-aeaa-45c2-9489-dd7e8c94fc8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b158d461-bdf6-46e3-98dc-dccbdb072e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb99b584-82c4-4c8c-8488-3fdf6019177c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406b96cc-47c8-419f-a128-8343c7c34c40",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a27452f-4e7d-469f-bda2-b1efed4721cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a22e9b18-7b4e-47b3-bbf5-a99176a1c34b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f386b8-38b9-4f8b-bbdb-06de251d769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f2715646-3564-4180-808d-aafd82748b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad7388f-9bad-41d2-8303-6dd04ff01fb9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4b5870-b4c1-4241-ae5a-7bb90e94cc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "92a4ee43-98f7-4cdc-8d1e-fcc6a0b79254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172d5f62-db4e-4ce6-a028-48ce267e77e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0f3c3b-ff1d-4b01-b323-414d86ede3c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638e3cb4-0b67-4a2d-8e56-fdcd0a282e61",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c265e47d-9bb1-449b-b457-7977bf4c19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0ded0a-e881-4a8d-b8f1-4b89a3412335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02faa92b-a328-4a63-8999-aa4e53f5372b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89468c1c-9cf5-4999-b23e-20d2259b77b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d8c43a-e677-4d74-945f-1c45010567bf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8237ded5-6c15-4ac4-9aa2-570b3daf7913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b5ede0-9230-46ca-8270-0b96a40d3df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e214f12-af9a-46e7-b99d-dcc5d8f16ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45e90989-7ce3-42e8-a5b3-759805712cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daafe74-cbe9-4032-864d-c818fa24f05a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d455ac-fc9b-4e00-855f-38fbd4198ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438054ea-5484-4978-b3b4-d7cfad1f3a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6aa6965-2257-4152-b7e0-b050c45677a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b345a1ac-4c75-4ef3-862c-449783d037c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48791001-7be8-4bad-8ef2-568e3cb76613",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667492d3-7059-4bd1-b071-a74618f4b5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c3347a-cbc1-4772-8265-af43c5c87c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56df7217-5af9-4c47-9550-2c2b407cdf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "241819e5-1b51-4d04-9d45-b836ee62068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feff212c-afe4-43e3-9cff-eb719a5096fb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6a861b-4764-4893-a0af-9c05b84b5f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da663d17-99df-4c1f-bd40-e13a69907bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce3b6e4-7071-4355-ab3f-79df19517691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ded2f9b-385d-4683-ac3c-4b99082c22d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6c3e32-eb96-4451-a79d-f14126c9904a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81eaee3c-ee63-4869-84fe-6ec5fb18f3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f3b9c17-d76b-4b53-8afa-6286228fff4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e1dfc1-bd4d-47ba-93a8-01c3919ce0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "292727dc-dcb8-409f-8bb8-2b32190eac25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b82ddf6-feee-41f7-a453-9da6093ac71c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb011e3-3323-46eb-9718-593bad2a7523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb593dd-9574-405c-a4ab-6dada28a6d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4c908e-80ad-4e6c-acb7-b543c7d6974b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d3ea64-5931-4463-a8d5-3e7e6da21ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e1c228-13bb-4638-83b3-6b167286c490",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80579009-3947-42f6-9e52-1c5349a32ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a20194d-c201-4103-8a85-6932b34e48a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52c2571-ddf5-4083-a9b4-fdc28d612240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6104d5b-4edd-4313-a3d0-8dbad41c7c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c25c1d-89e2-4639-82cb-e30319112411",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce0f182-918b-4105-a295-c7634764f91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f2c31b-fe47-46d0-b918-bd2686743d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50862d9e-6e43-4998-a0d0-3ab212764e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "beda23cf-281d-4274-ba03-80895bef7ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183b3922-4a5a-4ff5-abb6-1a7a04900b6a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a3f3b1-ad4e-45a9-9729-4b687dc6cf6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f90bccfd-c93d-48a7-8455-898ce0579f0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2239b83-38bc-40cd-b07e-88fc2b6c58ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "409573ab-aa5f-490b-8498-d27ee01505a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dd495a-b4f7-462c-b81c-82f324650e93",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447d8507-0fd7-4b6a-bc0a-32ffaf96739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5baf94-bcf3-4de2-9520-42fb8fd9912f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1768e70-70f6-4dc7-bb87-e0ce6133f946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e04b938f-32b9-4d64-ba2f-246cb192f6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174871bd-0432-4504-808a-c9004309e69d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f90bdf-cea9-4d9a-a966-d6d53def7077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cea51f7-882a-43cc-8138-5ddbb90eb7a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb30753-4273-454d-a0dc-2d51cf2e113e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f83853ef-d89d-42f7-8d6b-90be74338178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aee9948d-fc5a-4bcc-803c-e8ea3f87ef80",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cdc2c5-d25a-40f1-9261-133c856cc153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a0e900-55f0-4c6c-8c73-26b16596c6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852a3a21-45e6-45f7-ac45-78ec51dccf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ade10479-d4db-49bb-80f4-d5dea3e9299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb184c2-eade-450e-b55c-7360bbb4c0b4",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e520d9bb-8f7a-4a77-9502-3db785cc5001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a76e2d4-a4bc-459b-9bc2-dcc76e14019d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a1bbf9-eda9-4052-bf4d-1075cb2e8f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c0acea1-994d-4ab3-82db-042de800e990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d589c5-7cc0-418d-b57b-9af41d560f02",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe0fb1b-c390-48e5-94d8-d84e604bb8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71a46de9-03c3-4c93-9bcb-32bc549827ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042a2266-6c11-465e-a95f-fa665c3c1777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6319319-2191-4940-acb2-24cb49152b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949b1bc1-d388-4950-a869-5ca7b97617ed",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4c070d-4c5f-4884-b0b9-902bfda6fab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdbc696f-1048-4407-bcfb-8bb318c4c5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df1b3a7d-d760-4606-a6d2-7becb86f8c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5366ebc2-a912-473f-965b-44a4690b84e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da62eb51-e2e4-4ae4-8ea7-4caa5d47f71d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb98781-b4c2-4e0f-a3e7-5fcc0d6308ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15ca5302-b6cf-46e5-801f-dc986d92e2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2276b9e2-b9a4-4c50-9b38-2d6922c66aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "177410f4-8833-42a3-8dcc-cbc1c4556519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f944de7-39ef-415b-b13e-795f2d63c242",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c199422-f41f-4666-9bda-17e4ca78fa3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64488966-e986-4b78-8246-6ac60708af48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91636c09-a5e0-49e6-88ac-d65fd965b138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e7b335d-8396-4a76-9c76-58ebbcb685e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c971d05d-8dc1-4e69-8271-78b910a68a85",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3185a023-bf5d-41c1-a546-e12d609f684a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "497623ee-eff3-43ca-9bb2-618f12466ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65bb56c-e48d-4f3e-b85c-aa4963ad8c63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc898ec4-e7c9-4db0-a827-750325f38a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191d0b94-df41-4170-ba46-d29ba56fec2c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54670b6-9244-4f64-9fdd-6a92901f48c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243a852c-220b-47fb-8a84-12cee9c66a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05aec9d-df6d-4b28-bf70-1b56687fe3e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "83c93df0-40c6-4405-8130-da2ec6f71165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41dd3e3-d5dc-4f33-867b-caa278fc0ba1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c054ddc9-8bf8-47b8-beda-612b7822bfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e5190e-5b07-4c05-b155-d662a97081ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d749de41-50a3-4c64-a433-663dd31f9436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90f4c2dc-cff1-404c-ba0f-b0471d6cb499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e778fb3c-b1d2-4e40-b5c3-7f3d3c0ff37c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ee6a00-5182-40cb-8e8d-bb4ecda1b71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54010fb1-fc0a-4f99-b030-ddd225628864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacc580e-ee44-44e4-b79d-97388d018edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5059dc-8425-4dd1-bac3-9e52f17c931c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ca76a9-88dd-4609-8334-05d3f5f72bdc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f548d8-276a-4535-b1e4-69eae1d8ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b28e561-9822-4ad7-bee9-409a29cdf2f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee1c385-557d-47c1-b763-2d6f511b5720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8264d41c-e275-4ff5-9558-82fd0bcd1e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee34c79-a42b-4e39-bcda-e593aa2d9d80",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe32278-5cb5-41a7-a0c2-1b515c9e795e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766767aa-7481-4edf-9d3e-e5f1f8e7b678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8515af79-cc01-4ab7-9deb-be9b19f1a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d124f2-5ff0-46b9-aa09-cef8dd29ed15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e2560-7c6e-4af7-9cd5-76105ef765da",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a028fb-a3a2-40f0-83b3-4c503af6fa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "673775ed-257e-4498-924c-49ff6d7e1a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a3f0cb-8c9d-4f35-be6a-1e69458e5bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "855dc09c-290a-49dc-b9e1-5f8f2e900c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6b5884-ef8c-4227-a5c7-c7fc0abf7834",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5378a0-4585-4c58-8efd-5dd5850d3cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b443aa-6a95-4dfa-85b5-f44cf7889920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c9bcb6-170e-402a-afc3-c12ba11564cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "33382f9f-1574-4fcc-9004-7cc4e7095cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b04bbd1d-5859-4b00-8b68-3564592e30ba",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c314c9-f0ff-4718-abd2-37089426d133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60be73e0-781d-4eaf-8237-d10154e8aff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bbd7ba-26b3-41c2-b035-b89deb1286ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b46edea6-f108-433b-93ea-43eb030b4e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9ef85c-cb1d-4fde-aafe-2cfb46c363dd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb70f66-6626-4eb7-9b0e-63b03effaeda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17381d54-2fa7-4e0a-ac0b-3b0f80ae4008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfccbb2c-73b0-4a7a-8bb7-fdecbf58f65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f98f460-2db3-4378-847e-ef0712a3d6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b4142e-cbc1-473a-bad4-84a982be0c95",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dea7534-2d42-4050-bffa-f1d514d1b26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d059508e-10b8-4877-a841-0d87a88cc208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b984747-6214-43a7-945e-d227988ca050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c61591-8888-4950-b777-1a89a0655556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e75794-581c-4edd-98c5-3d494ac61ede",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3b46aa-f1df-4c0e-a4e8-e78e1d7f6c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2dae3f5-2d3d-4d74-896e-fc8ecd41ea9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1da2165-e6cc-4a9c-8dac-495f81a8a4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5ec2a6-cd88-4e54-9593-e4830ab340ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b7e23f-a1d1-4306-9dda-aae9e1373009",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad81e9bc-d8e4-438c-9358-9e380278ab7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "171d00e2-c02d-4bbd-8c12-66416129e0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1765798-55aa-4c26-8ac2-bd32b5e30383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92b0dc8f-2add-4716-866f-44c0c3a6ae4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73466f9-0f4f-4d1c-a20f-ef19a37a0dbc",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f5040d-0dfe-4f78-8b13-62dc0fb0b302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a38d7ba-8b11-446c-9371-a9e91db1c9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c0b0d4-82c2-46bb-bcd2-7c9ac1cf9558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d51172c1-0982-4809-b13e-a5d6e541aa61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe69c26-a96b-42be-a48e-1ca76c80b0b0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b921810-b6c8-4b53-849f-3377feae72eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e340aa-5350-4b47-83fa-ff6d9469cf29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cdcf783-5632-4049-a9a5-f8e1aae62c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20a32e5-7736-4216-9a63-9c57b3712564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27744092-81ef-4cfe-bd37-bacc6e66aa1e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca8b1f1-9805-47bb-a43d-9d0ea59d5c49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3da7c1-8bfc-41a3-9fc4-86ecc3bb9e16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33f9c2c-9dea-428d-bb44-ac97460518f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "373484bb-4a89-4424-abaf-6f353a7bdd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fdcf068-0045-409f-9e67-c1ac8c86cf34",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d2927f-911f-4a43-ba7b-38568d263eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ef20c5-ece7-4955-9241-31a6e59c22b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51901e71-267e-46d2-9289-d506234f2ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "280b8b00-bcc7-4e40-bb14-a3b6ea0d105f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f6e2f6-b947-4c7e-a30a-9b091fbd33de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6fd5de-1e3a-4756-b1d1-e1e23f267b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3667f06a-2d86-446f-b12e-7eb264c1cbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6717a1d9-8979-4d4f-9151-0ca5564b5ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cbe2e7f-df5b-45e7-88c8-e36ecf840474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca0334d-9060-46cd-9d3f-1f07dab65fa0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65806c22-dcfb-402c-ac4e-e4ed706dd9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ed08d86-c8bc-4dbe-9f36-6a53f772d0e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584d281e-26ac-4a58-a409-d778b1dbb0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8de795f5-c39b-41f7-a1e2-cda4a9ae1e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8f3333-8969-4697-934e-f87abb3d4e42",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff14d05-ade8-471f-9eae-597ce041aeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f2aa1e-e165-4a0f-8455-79a2900bcafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d6fef9-ed1e-4130-816d-cbf69ce02b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "17c441e2-6aaa-4ea9-a8a4-00c240d32c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3b2d06-9474-4fb1-88ac-d21bb786195e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e0d62-833e-4b40-abdd-55d71e0ea17d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbf24ab-d764-4442-b12f-388bd0137da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ca4059-bd55-43f4-9c14-a5e228308a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ac3bcf1-3ccb-46f8-85c6-a74a226ee249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d89279-4b49-4731-8a88-6ace7158241d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d0a382-6493-4fbb-bb96-f2ae57f2cdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79f04363-20d9-4c68-904c-4edadf3a2421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3878c933-b297-46b5-94ff-b2d326347274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08d45bbb-6bf1-4ece-a757-9b42fd70c6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bea15d-9b51-4ecc-8f87-877abc151e1d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57787c3c-7da2-488b-9c07-4f4c2319c68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e964713a-57fa-4d81-9c56-a214039a086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b397fc2-d6d4-489a-8f0e-5cba38d4acdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc25eb8-f13e-469b-93e5-85eae0f6a297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7170fc7f-ad5c-47a8-9918-8cee999f3a97",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630bbd78-c73c-4013-962c-da9d9445a80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3b4b2b1-8a15-4577-920f-1f360515444f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c21fa97-a2f2-4259-8ced-fb49ccbb821d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65bfbbc8-63ae-4b7b-b31f-7729a5ac8fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c063222b-0192-49c5-9a11-d79176122997",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6710180a-712d-4e03-8e53-245857aa5015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92aea48f-7a4d-4075-92c7-51bfdecd173c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01325caf-1682-429b-a2d4-4c6914039f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f1d156-7771-42b7-97f0-4e9170c0c312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c7bb25-a29f-4795-a289-701a57bf9c88",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db70d774-e85a-4fae-90e6-09261d593da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba57294-4b38-4e46-b713-7e601451e4dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7837b2b-211d-4e3f-94da-4a8bbacbb379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "68b0cbe9-9c98-4034-94c2-46734ea40695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaa6c9a-b2ba-41fc-88ab-bc0cadbba758",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f52c0b-9ddb-4942-8fa1-e548b256ff07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59f5d980-3598-47ac-8ec2-322152cafa2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1282aeb1-8613-4360-94ce-dbe5852deae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "224ab2ef-f434-4108-a734-14fef620c8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47925137-6acd-4915-9c61-dec8a913935b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a737e0a-61ce-418d-b307-931323c0dabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2890b0bf-387f-4c38-9f77-92ee028c4dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd47dca8-11e2-4139-b0a6-38d169aca150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0ccdc92-e9f4-4868-b2ad-ac11a2d3a63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257cf4d1-ef79-4758-a2ba-cc3896fe2088",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b843c0a-3989-4ff0-a2fb-fef5ef7ad24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "167872e7-c569-4ff1-9c26-bcb43c3ba807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adc6ba9-6ff4-437c-ab32-448d5b0a17b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "608889b0-1559-437c-94c0-afb3018671fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4614b10-c61b-4718-92f0-538f27e2234f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac3c7ca-2f0a-4557-b174-e77b10258e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c0a31e2-7451-404f-af00-926165fde462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76d6357-52d6-40f7-8c22-cc1c7933747c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "046d582e-475b-491b-8850-fad4248e7e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da647ea-9196-4f37-9263-7dbcf5fb7240",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb16950-889f-419c-9a80-6a5b898af7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "740999ad-a679-4cd0-8b53-7fc277669019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52452a9b-e672-4149-8510-c33b420e0552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8b8c88-76ad-4d4d-8504-91c04cde128a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6830b2-a779-4b0e-b2b4-e7049daa3167",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e660c56a-10a9-4360-9198-17b33c2802bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bf2c51-53ab-4e57-833d-3e6a156b4372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6141cc-28fd-4a8e-b6d4-851a3840a598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f5e0d6-c852-4cc4-97bc-7fbc789b184a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58f85ca-4bbc-4e3c-b14f-76a910d5b854",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59664ed7-84f6-40ff-9fb1-483ef04dd717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d74beb2-e543-403b-8d00-43a679845b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748efb13-ee91-4c09-b5e2-a88c3328be5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0decd2a-3ba5-4c57-a3ff-b806eb921460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272be638-8fdb-4d81-af2b-594bca4b12fc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03377e27-6d28-4d38-ad39-fc3981cceda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9afedc0e-b915-4bc2-895c-395071215911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1138b0d7-e390-4653-b583-ee652c063b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7af348-e4b9-470c-bb6f-e58484ec2abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15bf2fd1-fb32-43f0-aa21-68741f03dbce",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14eff9c0-dbea-4a5f-9887-7a3ceecb2b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be89ecd0-d0e6-4d13-8260-c2a5013e4ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20d2bdb-744a-4dd1-82f3-09ff53b27cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6558a8e-8efc-4328-a6ee-ff3494bce0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a5e1ba-5d3b-4e20-b6cc-c3d32802c60f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde24d6-b4fe-4a1c-951f-422199b844a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1c2e0e-d1e6-45c7-8afd-3bcb11f2afe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b322bef3-7a95-45f5-b126-cb8eeb55421d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae205df1-e67f-40af-ae9a-b922f9e924a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcd814c-b0c3-467c-bf6b-0616a5f6d183",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03861b5-bc95-43e0-be02-109d052fe844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dcc5f7-3c2e-4f92-809f-e51b73aa1fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cd2ae8-904f-40a2-9292-64f943d3986c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c9e4f3-4749-49b4-b65e-bdeba92dc542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b96246d7-b301-4b91-9a2f-64c30bb882e7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9043d193-e5cd-4194-9ab1-86b181173a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dc879a82-d446-4487-b2d0-a07be7c70011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d667896c-d242-4ba0-a568-befcd3090c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bae5e41-911d-47da-8b17-5af498911647"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0cccdf04-d2eb-4a72-9d44-01175541218b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "187ba388-25f6-40e3-b78b-b0fea0f6c193",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ca9c3e-a1dc-46f8-8657-5ee667dacce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7aa63f2-346e-4e9e-9a24-e58701d87b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442f73d1-1dbd-4cb0-9455-c75bd8bf0001",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79ff1415-8387-4064-8419-5c478144f227"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "990b259d-aa7a-49c0-8916-cd66dd3c4e54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec1541fa-e7cf-40fe-b646-4ea2b5f7f570"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbe2b1d4-692b-4fc9-a665-c441f31ae6fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cd0e8be-e179-4349-8316-4b03ac6f71ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c8a3d5bd-8e53-4332-acc3-116f6efcc794",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2edac295-7f42-400c-814e-76a8ad6735af"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7643de0e-09f8-4701-8536-e1d561cff3b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95291d03-1a77-4d44-b2a3-45d7a9408f2b"
                }
              }
            ]
          },
          {
            "id": "6d9c7a09-3511-4d17-9204-3be1176e5e93",
            "name": "Positive Testing",
            "item": [
              {
                "id": "14a00f02-3ab3-4d12-b555-5654191758d5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a0db78ba-7b1b-4b6b-a491-68bce5e83020",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de46801d-832a-40f4-897b-d4be295f0070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "137fb537-9fe6-41ce-92b1-46a7bc291a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b20b4e-a249-4298-b633-976a450ff138",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b1240b-e19b-4411-8d8c-119d4d8affbb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9704f868-1656-4ee6-b3c9-b4fdd6a4950d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2faa8cbd-54b2-44eb-95c8-364b4767cd58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5445847d-ea09-459a-b1e1-db48b687e1a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c873439f-e56a-4e20-8430-9171d7284e32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8b138055-9d8c-4f95-9850-e511f0f43fe1"
                    }
                  }
                ]
              },
              {
                "id": "4dffc3a7-7ae0-469f-92e6-a040446a55e4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "964612cb-dd91-4aed-bd4a-9e91e221d502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "169b7b1e-bcbe-4e6d-af93-681bc4da0940"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8589960a-e8fe-46c2-8e84-49f1adf160ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "62431d6e-dbc5-45b2-b5cf-dda9141c15b9"
                    }
                  }
                ]
              },
              {
                "id": "49a6e696-c764-4b48-8483-45e094be447c",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ed44712-1c9d-460c-96e1-fbe7bb4c6cfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01ba543f-a016-4c9a-b651-d8e65dae74b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3dfc830-5151-4b2b-b540-6eb63e0539eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "69d8b54d-2ce2-4ca2-903c-7b3c00e7b162"
                    }
                  }
                ]
              },
              {
                "id": "05530d7e-8744-4373-a93f-810dba509548",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fd9733f-fd98-4d21-933f-3e298610fab6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edc60aa6-1d8d-4669-93ae-cab3804e3160"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb809c8b-90b1-42f3-ac6b-96bbf779424b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "80f51ad4-354e-433b-88f7-79e70833d1d8"
                    }
                  }
                ]
              },
              {
                "id": "7949d12b-28f5-4835-b30c-86fb3f8a20f6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a3f1df7-2c03-41ec-b8ca-cebf214decd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a36698a6-0966-4973-a155-6ac812cd4f4e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79a2ba50-3bf1-4fda-a3f8-e90db65665f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "dfb817bc-3afa-47a8-ac56-8fc21d2b03bf"
                    }
                  }
                ]
              },
              {
                "id": "fba7dfa5-9218-4b2c-bdaf-aa22ad039185",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8821fa53-a632-4a40-9c4d-1cf93f567caa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "af904511-1d92-4431-a8b6-9be5f92dd95d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca635e4f-1162-48b5-980a-fc4b152b8348",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "960e8a42-4d97-4c14-80b0-d717659768a2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07e46bdb-83d4-4e46-a051-8fbec01adc22",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce9097d5-ab40-401e-b037-b03173099e9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e0833b24-bd64-4322-a06c-a6b80dc89c17",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea3da82c-2892-4000-a187-c44fde461c3e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2f389bc-c226-43bc-9cdc-e9c767ed2000",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b309939e-39c2-454d-9ba1-874520801709"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98e00e21-62f0-455c-9088-cf4008b55817",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1d85a514-5bf6-4d95-9d66-94039154f079"
            }
          }
        ]
      },
      {
        "id": "b6d28f60-0e52-4187-b5a2-907b91a5cf2f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e9366316-0780-481e-b30f-a3284c3e1fff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7742c523-6ff4-4c39-8458-ef500333206c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3700dbf-f736-4331-8a93-0fcedab3b6b9",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec1e878-5bf5-4f14-8133-a9fae679e939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5374f6d-6ffa-4239-a2b8-811b9f3b2327"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b52563c7-af70-4bc8-88ca-3852bf7fe629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "475c9ba5-f990-4bb4-b969-d548082e1a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16d3cf5-a89a-4369-9e47-d816d599ca83",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "689fb769-879c-43ba-859c-5921b4281042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8559bc0-60d1-4b9e-aa11-810e9daabad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd6ac79-70bf-45c9-b970-df1cee324a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54ec2475-cfe5-4900-9e5d-d6dbfa61ca49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b983cf57-5004-4a02-8797-dd4cfb56bca0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10f924c-edb4-4b3b-896f-1768e8bf0b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb84bcc-519d-4474-aec3-5f4fda579e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe170672-929f-48de-ab62-215d5ad35baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df49cb08-6cf0-4244-95fc-f7acab369a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae8d82b-16f1-40ee-a3ea-a0d6c7aa95c0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "316176ee-e4e7-4afc-8b84-65d4b88da396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9aa9eac-8c85-4305-a064-649ccad3dc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d090fadf-7328-4c2f-94aa-5321a12c1b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf04d97-b1e5-45e7-b656-ed347ca0fbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be326ddb-320d-4e58-97ff-bd91369f7914",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd005d17-863a-4f87-a08d-d829fb8897eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3020a787-d6c3-4782-909a-6be6d83a9e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ff51ec-2117-41ca-b375-ad2c17b85f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "719975c0-6acd-4739-ac0c-4558886661af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a474af-d341-4e48-acc8-37edc330f082",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84bb3407-ffe4-4d37-8fdf-0df08db06a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfe3a027-9857-4bd2-937c-c39346cefa2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56908bd3-9f4f-4ed8-9d5d-3bb350dca8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "19faa862-5a2f-4d65-8857-12a426f524fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9045e8eb-7707-4a3a-a5d8-d3bfdc1ab421",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afeaa71b-9b20-46d6-96b3-0f22177c8b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f2bd72-2209-42d7-a3f2-36270c4e8050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0cc7ab-14a4-480f-b473-842bdbe28708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c03090-47b9-4baf-9e2c-c01449065af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1103ee-f118-4b69-9fd8-f6ee6bc86f08",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab79a81d-157b-4090-b591-63893476eae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41d838af-f8aa-41e3-9651-943a53278f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfa53ed-ac2e-4ed8-9e00-c93f643ef4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead619cf-cd77-4bfb-9145-6952afaa360e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fe50a2-7a69-449d-9cf7-fc53c64c0cd0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4ce317-71eb-4cba-8ccb-7a5b837ceba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e3c0a1-fde5-4c71-b246-57ca3a3cd6dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed113ab-2616-4200-b930-cf2d13e6d8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9e3aa7-7978-49a8-af40-595d0b3020c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24712dec-dbc7-4a10-aefc-10aa906b79a1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c770a025-19ad-4249-adc7-47a3caacf6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d04356-49c3-4d86-9686-75908da6a510"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35cb10b-86c2-49df-b5b9-432e4fcf1c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3297e30-1560-41c7-afd2-65abd5fef38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff1871fd-1ba6-4c3b-b3e9-c0f5312e227f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb67fbb2-8eaf-427d-803d-52ed643a3fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7db99f8-58f0-4bc8-a388-df8433ae17b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba1f07a-d77f-49d3-8e0e-89afe3f3836c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8f21c83f-1463-47fb-8879-c5e760dc971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c028c0f7-cf66-4b7b-8f9b-45dfe1b9d6d1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "482e69e5-1263-4067-bb73-8f5428738921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b31a601-27b1-461c-8c75-9c73f4122293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db406f91-228a-497b-92f6-3ff3abf2f2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "85ce0aef-3df0-43b7-9708-add5c23e6ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2ba9f6-78b5-4139-8825-6e5b08447cc8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0da929-7a0d-49b1-87bd-bc4b7873bb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b978effd-578e-4b3f-a1ab-52c86fc73ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550720e3-b391-4b5b-9195-1a8dc42fed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "742da04e-8249-4178-a3c4-a8acf8166dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db9b1ae-77b6-404b-9b7d-76cb9d78ba54",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84abcf15-f016-4c3a-ba11-88c20ea2bad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ce25fe1-3a31-4a8f-9398-1f7ba12a4baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747ea691-48d5-4eb1-8245-d168d9c9be77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "55550f2b-b806-4d9d-a0d6-2d0f195265ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972da1b7-0bed-481f-bcc8-39b965c595ff",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d635c2d6-9b2b-4340-81e5-e3ca6b9f4d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6b8e35-117d-4add-bac3-117df428e875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c801d-182b-48f9-9b70-6714e1032fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc87aaf-b123-4eaf-82e2-e88bb29d5841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e8d7bf-bd98-4d13-9fee-dc609271c948",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86015b48-c16d-4c9f-a5ed-250c539670f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eeb0d29-66c8-48ed-a065-b46658e9d9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a011c4-668f-4b66-915d-ee656b3b2724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d43629-3693-44e6-983e-8dda21071b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8e3f83-570a-4fe2-8a89-5b4dd2883dae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d30032e-f6d6-44b5-b0d3-5122472536b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "794dd157-0145-4877-842d-e06bb4b801ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329214cb-e298-4c56-9ec3-570bef3ca1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2679be1e-f29d-496f-a0b4-2b8184e4665a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db3e13-0566-49f9-8110-7ec979d8e96e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574f82ba-fd46-4e59-b9a7-50e45c4ebb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424e5afa-04ad-4dcd-b4a3-0f9bc66dc248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e3defd-ac0b-4288-8200-618bec055d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b3e7da-bc14-4b99-bf4b-a128fafe6ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f62bcd-fc37-4c8a-afad-b5b0d870d277",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5f22445-d7b2-498b-9e81-011d8248d19f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86947acc-1879-43c1-a3aa-afe902edb16d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dba1b50-445b-448a-8f30-34120a7d2e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24ed0a80-9656-430d-9884-1ea9813baa55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321902fe-7205-4e94-ae96-97267b205fc2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ee17b1b-d3e3-4943-b61c-468b26984756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdd90c4-89ef-43da-b805-c46b6b346b0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c72745-9483-4312-b5bd-97400f3e200a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fc9628d-3968-461a-8a1a-5e63c8b54696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82799eee-c77f-4907-84c9-860127020a9d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64279738-1f4a-4137-95c5-5530e331bced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf5f06f-8c45-4d9b-abe8-dc5b0457e183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4128651e-885c-44b1-aa01-4d26c3169d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7bab73-ed2b-433a-b697-c1fa65f45ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc85c39-8192-43cb-b914-140393914113",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116d4af6-5472-4a5d-99ee-3890fb2eec1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e080f52f-23da-4cfa-8672-aacfb01ce6e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f223e3d-86d4-4dde-b5ad-935da532c6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0cd95b-22e2-4195-a5e1-d2a1832071b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c6e6d0-419e-4f66-98db-e7123e5dc46c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87cda4b-fdf6-48fc-b9d2-dbedbc215fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48972eb5-9708-47ab-884c-bcb2f2f906a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e96ba4-7edc-41de-9bd8-6f88a0b46a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d29d57-31ee-420d-b067-53bf62498708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da794ff-94b5-448f-bf17-4439b2a933b7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e0d0ae-091f-4292-bc84-af0565582957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5f81d8-603a-421d-940a-28316fe76178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2a844b-5188-46f0-a5df-2d80d6871a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3dc5af-9833-4522-945e-a7f33f73b854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d673a5ad-001c-4271-953e-67e892029bba",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dd110f-3dd0-46fa-9319-2368d7925b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125c4093-d333-4e04-96f3-de3e2d0f7438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb81c8d-bbcd-4b0a-b842-8030d6615d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f45d87-2bf4-4804-ac04-7eb5b165871c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2ae0a4-df1a-486f-9b74-e3a4c08fbd5f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f88728-6bd7-4d7b-976f-8db6da3e26be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dc3713d-6c86-48f3-a081-28ca688e3751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce23f3c-2628-4d08-9af0-504309a14f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3213fd-171b-47a2-a9ec-7481af0e248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f0d6db-97b1-4f59-ae75-f9812e561f83",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6e198b-68a6-4255-b088-0e8687ac8ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b283e6-f7e4-4f89-ac18-032e7da598e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bd1bd3-0cfc-4df2-97d2-61ffaea34ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21d8bf88-70b5-40c5-bcc5-bc9c1472ec2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b05667d-bc8d-46ce-89c3-1e6a22578ef3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e58843-5813-437f-9c02-5937662a9dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa79f7e-0811-417a-881a-231229884b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cd9907-426d-4488-a9a6-a1a42422be39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ba72ec-67a8-4de7-af13-c344a37df9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8f387b-965a-4769-a394-d8e63dba573c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a9cb4f-1d6d-4adc-944e-cbfa107fd930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1727f9a5-578e-4376-92e3-a0aaf5d0ba31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7049db2-2d9d-444b-92e3-28e90ba44eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e55ff558-89bd-4a59-a51b-f222cb2f5ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec64f4ca-6795-44ed-b1a5-5e88b8ba4557",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1055e11b-96e1-4971-b57d-fb49bcf75ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a81b506-8a43-41fb-9f14-9158d3e94ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744945fb-8d3d-4ddf-a93d-7e95ec1e31fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf629d7-cd47-4682-9c2f-096685c3e134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b8e73ca-c17d-4666-89a2-86dfee835f09",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d3bdc4-cd67-4002-a245-d74631176539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd8aeab-a426-4cdb-a34e-92d65c90fe38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf80d290-5967-4c8e-ab19-f0a71897eefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40dbb553-3d3b-4c68-9223-5944671da638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646974ee-28ae-4f1d-8cde-33e698bf1339",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4755c10-e060-4f2a-88bd-051c4b0e7d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fc4fca-ff49-4567-b24f-973fd750b166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0364c134-c859-4547-868e-e1359e4ae1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d937c198-380c-4900-a59d-34979ade8ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea413127-a6d1-40d1-ada3-d138955cf75b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bd693e-35cf-469e-8020-cc0fd268fc41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dff9b92-c2d3-43f7-b354-5ef15c998d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b070825-2046-460f-8b14-52af9c9d9e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7022b7e5-b334-4848-a6de-849073c31446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c26a3c7-86ed-42a8-9860-cdc4e9055525",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab2013b4-e67c-4fbb-8ac2-7cf2836ca090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "972fc7fc-9cac-4368-b6aa-7231fb667fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e44d06-84f9-46ca-94f5-3b4e4076c2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff9a220-1c70-4487-8647-0bde4a1bf317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f84674ef-4141-4c5b-a9cd-8fd5833ae929",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5d2960-2e71-4954-9e84-a6fcb2a41196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a0dff3-abe1-4652-9718-7fa8e0da3f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10eafb0b-a8e0-4833-9ecb-8588bda02e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49dfc051-eff3-4e6b-aa71-d954409fcfca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4307fe46-3b61-4a59-a235-c8c5f737aade",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9a00d7-0434-4066-9f6f-52042aad290d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a3cfbb-0f7e-4989-8501-1429fea98334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42957621-2c69-4e2e-bbbc-e0bc5c1ee5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b76c9122-ee4c-40bb-aa66-00197b579ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0b69fb-3eeb-45c4-bc14-8b1481332ba2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a73446-9834-49df-819d-40d4c37c4d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcef0d6-e973-4a1d-89cd-cbc9f7eb0869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6410c6fe-32c1-4b10-8d17-125d869b2f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "84070b43-ebe3-4a2a-a948-c0fa84ecb51b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "73a6b90a-7910-48ac-af9d-f6d48b7340d9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e7facd6-6f82-4569-9055-f3e8ca83edf6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb72005-60b8-4ded-872f-769bdd1e6750",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4db2380c-296a-4103-9e7c-3ed0af6925f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8942418e-1d12-4cee-89a1-c7c516a96ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d681b9d5-edd0-491a-b784-cc290e5f05d0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e6b47c3-d757-4b2d-9109-69b99dc956e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8ec2c865-cd37-418a-b56a-f15eb395df94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ecc290-0d91-4c5a-845d-2b02002bbe64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd79880-b276-46ee-a7a5-84ca002b295a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3302d48d-526f-4adc-80db-f0144ed09113",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5ad0750c-fd63-41f1-907a-6c373d8eeaec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "173f15c3-9097-40d4-b388-d36704715fae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf4f593b-9a47-41b0-b178-dc33a2af1cda"
            }
          }
        ]
      },
      {
        "id": "71ad6819-4652-48c0-90d4-c4159b2e8f86",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "661ca14c-b813-4968-874e-3e44907b41e7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3066db7-4e3b-44d5-a012-38675697166b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88b22cfb-1ec0-4e6b-9e93-fcca2946eeb2",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bb9c7a-590c-4bbc-b2c4-43f2e2e05871",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aed77311-36af-4786-8ec3-c51ade6438ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dddf64e7-a83c-4dc3-bd4f-777920b17042",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4827795-fdc9-4452-9214-6eee8588dba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e91a95fa-c032-4050-80ea-d987e28d4ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e486b0b-2524-4d56-980f-552dfe643ad6",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35674d1-7c1d-42f3-b334-ecec8937e833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13d0529-c8c5-48a4-9217-ed4be9d7cd87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4761ecec-04ba-4838-9223-19bfce30a2eb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fe7f3b-aef5-4c87-9117-e84b65d46d48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b725e18c-ce67-45b8-98f4-608d1ece9fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c276a9a-4bfc-45a0-8eb4-d197c78b15b6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc276ab-9ac7-466c-b691-d3fb63fc1519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb3efae-d5e9-42ab-833b-ad212a1e2877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c747e0e-2879-42f7-9bda-9f4efb3fee5a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51eaf704-b04a-41d5-9c3a-c97f17136089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7d4814-4efb-4af3-b6fd-214f5e3bb188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030b2338-434c-4119-923c-8d473baa1eb2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c2b83e-2ba3-4de0-9114-473aa961b514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a084496d-8a58-41be-b6bf-7990d512a336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a496cec-f003-4c52-b574-36645fcc15f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82f3637-d4e7-4089-b10d-2e3f35af44b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2537de0c-e584-4528-b10d-51a1dc858fe0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed32755-d347-4991-ad8b-8bc04b5a7909",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004c2dfd-2eec-4889-a568-2f4d4cfd198c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "762461c0-4eaf-4787-838d-63f096db7867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9762fe2-ccfe-424c-a789-34bceb88da77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aea4e6-89da-4c8a-be99-691a1816180a",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafa4f5a-8a9b-432b-b141-3dff6fe8373e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ba33908-6f1e-4dc3-a5ad-9f3e12d25428"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1968ca1a-bd38-4cba-8b54-2ca24ed6eb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f906ae25-179b-495c-b693-7cb5ac1a82be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb45a03-e6f0-4081-83cf-3fd06967b5b5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e0099e-e087-4a6c-aece-1c23d23fa6b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f336aae0-a419-4791-a47d-59ee1ea29cc2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11f43d6-0bbf-4122-8867-0ba98ea2066c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a07568-6161-47b3-9877-a431f6cd590d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9819fc64-79fb-4719-8a4b-2bf3e80f4879",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e823d3-c1be-497f-9d0c-c0aced0506c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7384159-17b5-456e-902f-dcd19ecc1556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68026077-b9dc-4648-a997-80a2183e90cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89ddcb18-6fed-490a-ab14-c94c56d57a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5a06df-494d-4b44-ad9d-09ef7240837b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ddf8a9-eb77-41c7-8794-d8cc71692172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b42aa0-54fc-4abd-9498-0ffff498b6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3636d33a-20fb-4175-8d80-77cae9c88908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440a958b-26f3-4371-84fc-88915055054b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961a5740-9374-41fd-8b37-00defe89e390",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319faae8-ec21-4244-a247-2d88d7016de3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a70d0025-a2b5-4d8e-995f-6fb5148ee8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b96800-25de-463a-804a-f182f9ffb165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ea1ae4-84cb-4ecd-a57b-10046be6b8eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9f71bd-783a-4d84-b64d-13b2179a6fc7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae624bf-b9e6-4c31-bbad-2163717e4dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dca6bfd9-cb1f-47c9-85d4-df835521e969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a590a66-4c67-44db-9e2c-1f927f3678d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c507ac8-b701-4154-8fde-a217f363bfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c55287e-7789-4ebf-b849-9a7c72e3d7ea",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05241ef9-9094-49f6-993f-49d7417035b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1cc349b-3db9-4855-9487-8410ecf926d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b513cf6-3366-445e-930c-bb59b5f7c91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa43e02-b5f0-4dad-b3fc-5f72cd7eccb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3517bf1-bee9-40a6-b85c-65f8acf875ab",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9bc3e4-c58f-4d1b-a68f-a47b421b0480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a48e863-c1b6-44a1-87eb-4e029ecea683"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b523726-c8f3-40f1-9bfe-37ddd91dddc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa5f21f-487e-4460-90bf-5437a3bf0923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8568dc-92b1-4178-9deb-e451e3c05431",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bf4c98-2026-4cbd-b40f-e59274933b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124f69d1-e477-42fa-a322-60ee6d9e896e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49affa98-339f-4e08-990e-14e38944694c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d153ed-3734-45a8-aa04-2a88572eed21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "436190c4-89e8-42c4-afec-895d4f5db8b0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a444c32-b32d-4c5b-af21-5b302a224c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f0daf7e-4de0-4ef9-95ca-def5fdd6b14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf67f3c-7e85-4ebf-a396-d6dd3824b250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dbca86-33a0-4d32-bbe4-df6acfd6bbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7620fb72-8bab-4715-beb9-bd4e56340dd5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f9b641-4dbc-433d-833c-75170dbe2c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6276f726-d238-4b4f-9003-44b5edbdf1fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f9108c-1ef2-4859-bfd0-506757ae47f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9077100e-a9cf-42cf-9109-a120f8c31e23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7afe351-8e75-4bef-aeb7-119ea84f90cd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb68575-9a84-4b55-b5e4-a163cf9f438b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf014cf7-51b8-40d4-a2db-64b91da9f9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbb7962-f16d-412c-87d8-2eebba522b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c01453b2-ded9-4bd2-9fd6-7c4f46258780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d78487-4995-481e-bffd-c595cc008412",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9c5c8d-9163-4b45-a63c-84c49bbe8cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651fcd66-5281-404f-a664-3b212abcbb98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2fbc43-c20b-4673-9cbd-5d62ad9197c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50a6d948-78b1-4932-a6e4-479d4e55d451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0461ba91-310d-4b68-8d26-913a5c8af68f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1483bcda-2344-41ad-846f-f1cd0e0319b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a8028bd-31cf-40d2-85b8-86909011487a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e9c030-240d-4e60-9d85-b697dcd49fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9aba178-95b2-4bc8-b491-5811a711844e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c8889a-8276-455c-ac3d-e4b96593ca75",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814776c0-8697-4aca-9881-4fc0c9dd1684",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfda800d-c1fd-4b35-91ac-fe83aba9e7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131abd98-a37e-4288-ba65-58b7d613fdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cc0da1-78d1-4ad6-9b29-095800ea0b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b28e959-5151-4267-9981-4c5a3d60c04a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0a9cd9-e36f-4aa4-a1aa-92fd4714117a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce79580-dfea-4a29-9646-e16abaaaa941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6a75ba5-d9e1-41ab-80f5-27a5d91e5e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3997ff8-ea1e-4f9e-99ee-f870f86918d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cc401a-64af-4045-8759-f89f180bc652",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6d3535-e577-4433-b4ad-848e2640db0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "356504bf-3f3b-4573-a535-f6b81d698e70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a618485-7f0c-4790-9de0-88f832e87146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bf5df36-e9cb-49f3-a6a0-d85d94f6e837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d584d5-881d-497a-861d-63dba950869e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e003674c-bd0d-48eb-bab0-0f7b3b27355f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ae9eab-63a5-4b15-a7f1-5878cc172f0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bae2273-e509-4015-b749-ea62f9868e06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc26715-c01c-4d48-b96e-d715f491aa1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97012f1-415e-4e4e-ab77-3fbff48983dc",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3265a9f0-d5a0-4d29-8e35-3a9f2556ffe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "366e5557-ad17-452e-b2ed-d95cfb0c3e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093569f1-67c5-4ada-b642-f0284258abc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6314e9-f454-43f6-840a-8e2fac8bed82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aeb5aa0-81c9-4a54-8dc6-298a3608fa0c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2fa128-1979-4499-be23-23ab9100b965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebd3c36-cdbc-4a3c-886f-b28c11b0b0ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe27c46-a9e8-40b4-84f1-c0f5f1cf152e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3fe04d-e5ae-4fac-bfda-8d9c81ed793e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50b4545-222a-4650-816a-9e60593e6795",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16751ef8-becc-4615-89e9-c2776674eccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "032233b7-3a6c-4637-b897-be4ca5868f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b252214-7f92-4656-bcfb-365ec1e5464a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "511d0da0-9c7d-41ee-96bc-4318e19e6831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5c9540-bfea-4bf5-9c85-cd555bf291d6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43139921-5d7a-4a7f-8bac-8c4b46888a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9cb593f-c9df-4ee9-b707-b99114b50c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7d02f0-cdcf-40e7-9fc4-4272bbdb6cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49588bd-8452-4980-9b0e-3c08891aa3d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2daf90-72f7-446f-aebc-da907c96ae48",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0e15b2-ae07-4641-b413-177298190699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d92906-19ca-44b5-b529-f8c69f6ccb45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d5cedf-72e1-4cde-a7e3-6ef6527d6ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fc9dc8-ba50-48a5-ae75-e63d04dae1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f76a7c7-f707-4318-beab-0f58d81d44f9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65841ba1-4459-4187-baa7-d4119666d495",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51ab1f19-5c40-4239-ba72-fb01322fed95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0921fc-8a9a-4bb3-ad74-9e8f14a856f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe0153b-ecf8-4e92-88c7-a2f13b26c811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89757d47-031d-445d-95d4-0d47e05c9550",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cf665f-ddef-4018-bce5-fe97b9a6d488",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140f97d7-d068-4fd5-bad9-b426b74814df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2d97b0-96d3-4f6e-9ea9-9350c01bb919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12aea28a-bbfb-4ba7-ac41-41ea34b4cb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f398aca3-ae2e-4add-976a-5d0ae1f7bd90",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3367cc7-bf22-43f7-8eda-371d31cee441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b2c5b2d-d011-44cf-a3f1-f0aacd62dc3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61c68ea-0034-427c-9b59-e729921ef254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459cb085-695c-472e-bae1-891b17d69dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915bd0d8-51d6-43e6-88c9-ff41d9b8d152",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e272bf74-3ae3-4f5c-a1fb-011b9abc00a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ec2bc2-e091-49e9-a9f3-ebb8fd0f1cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1394a5-1bae-4462-83f6-7c4cd9560e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c2e65e-8971-4307-b50a-75564e922f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59b3737-2bce-4819-a7c4-c44fcb51f025",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01eec82e-d5b6-4e5f-8d14-ce1511ee9abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec42f0de-a026-4df1-99e0-6b8c57a05203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56a2ff3-43be-4ba1-9aa9-4cd8fc5aba37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a770fe-7fcb-4027-ad67-92a5a06362b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bbc218-96ab-4530-a3d8-d68134e46c67",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f8dacf-fbe7-4386-ad6a-8611ba2ec5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b484a7-637c-4d6f-a183-72f8e0ef18af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eaed176-46db-4fc7-8032-b21a200175a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0367de1-22fb-47a6-8480-9a8686ddd422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71f68c5-c047-473f-b347-6871492c6e11",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84cdb60-916f-406c-a1b1-299a31f2efe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82c3381-25a4-455d-97eb-56bf9a973436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d2b85a-7171-40e2-9500-e58e479fb993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b88ce58-6072-4a47-97d9-2fdac297001d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea7385c1-921a-4883-bd77-da3112b8a38b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c7f17f-4d5d-4489-81bb-ec42e1af4c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f87bdc6-5cce-445a-86b5-a01fb582593a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8ae733-b6bc-4dd7-9a15-73fb7ef40c41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a360348-913d-474e-85a4-6e15daaec40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3e328a-49ec-425b-9370-351d416e2af6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571a57ea-6735-4c81-9cde-4089d89bd12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303069f7-8f2a-4c08-842b-b10ba256ad28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8ab49f-0c43-465e-b6d5-5e6befc9f91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f40cc0b-788c-4ca3-a1aa-d91373dd2d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdcf77b-ca9d-439c-bf42-ef76806bc2a1",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e26e2a6-08e5-4650-9d3a-f79ffa4b9f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d8ac02-671a-46d7-a2aa-6e34ce5bfba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35608b2c-c424-44ae-8bba-8c7b66a72769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1739d1-6bbf-49b9-b83b-2ba7a0dae2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfe3da1-e928-47f0-879a-f73d0cd8ebcc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9a1307-f5e5-4280-84f6-7dd75d92c134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fae8deb-b0d9-4a26-9dfb-13565440ea7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07d5bee-070a-4b82-8024-5404d1e3d892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4259fdea-bc22-4ccc-b5b2-94e60de556bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15e3b525-a8ef-42e8-a9ca-e8325cd1aaa3",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf25ba4-2837-4cff-978c-31148595656c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd47a6e-6ad1-4627-9bbc-6c95bfb06000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d66e4b4-b592-47d7-951c-4d2c8f845bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99e4259-2e43-4067-93b9-9d0b1faac440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776a4968-f03c-412c-a799-0f29aa6b3bc1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ebf144d-7e2f-4949-96b9-29af59a16b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce9e8fae-a552-440e-8875-a707b4f0ca45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ff269e-ebd2-41ea-95ed-63f25a77ceee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea0a0a4-fb2b-43b2-88d0-76261cebc93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce265d73-87bd-4f7d-906e-ebe60005df1f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66476080-7b62-46df-a190-3128cd64a1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1b0280-1136-44fa-ac7b-9c0babab996b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96d7941-c61e-4a82-a33d-ed841e80d9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26d19d8-9b84-4543-b73c-1cf08d9d1e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a491b30-f6fa-4c05-9d93-6e6a9b2b8a15",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e05b21-1143-4d38-8923-fa5e30c3b9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cb0b36a-4791-4c84-b415-ac45fc471bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "373885f5-8054-4a5d-8662-1aa671fed441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6677df3d-f529-41ff-9999-dc7c5bfde04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5476e1-2134-47f7-ab90-5e789776eefd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7280b4-efdf-44b3-8e36-bd3c7e4eaa00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b53cdb1e-9fd2-4185-9680-ffdfd02db295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ac42da-49a3-4b27-8ac2-8def52592cb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59184896-5dff-4b2e-81d5-b39545538548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "869ec976-a10b-446e-b689-12c217bde5d8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3677ca7-0dd5-46de-a9e1-a277cc260d03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555b851a-d941-4627-9f5e-76e1047cb2be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cbb3b0-2a03-48e9-b81b-9b88ae829fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863db519-0eb0-48c7-8b06-1574e85fd48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00d90eb-c86e-4563-ad5b-f4d39267eb42",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dd1d5b-ab33-4760-bb40-4df18389040a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd5c166-6890-4a6c-a389-5f1db10a80c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270cf27c-fc58-48a8-98c3-61414f5ebea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "543932ea-7117-48a1-a451-444e05c3697c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4900ed7a-b5b5-4c13-9352-6a82d3239925",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2842f88f-e40d-413b-8cd4-06395812c56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08107c36-3b56-4db3-a6ea-7c7233a9e30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20a8752-35e7-40e2-b187-b00971f54d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4b8105e-b3ed-4e14-bbde-3ffd61a94095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e08900-bdbc-4e61-b7ab-61b5a2222120",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2a6648-b651-451b-93cf-1e39f6fcfbc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555cd30f-e16f-46d2-82bc-776fdb57d4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a977f26b-eef7-4466-a928-e27322d41a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0290e4-a20a-46ec-a82e-0996a2cd2964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd1878e-5121-458f-8fe8-046c386bc621",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169718f3-bdad-449a-94e7-bfcb7e4363e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bafc41ae-cced-4684-9fac-f2cb5d7ae491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d84e1f-167e-4046-8380-f3df770518a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b03a169-747a-4ded-ab20-d1e62b1581e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebfdccf5-c789-461c-8fe5-89a9dd82a877",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f683c5b0-7474-4c22-9a19-045bbb239ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09951344-feb3-49db-b799-aa4cc6ccae67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f15b2b-483b-4db1-a2e8-c1f9c0797de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e468761-c214-47a5-961f-f97d099f5316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a53c90-db3b-46e8-841a-a652b03e5586",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84d7c9f-df24-4256-9a83-89998bb44d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92c43a0c-5825-4cd1-b0c6-28742c94cda2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527b2570-05ec-4007-8d5c-e04113bf3ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fc3258-89b6-4944-b3ab-ca476cdb11ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c364d2-11ba-44ce-88b9-f46dd3814f3f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b61de90-ff88-47e1-be88-0cb6a5328e10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dc0bd2-3694-467a-8c48-b21b2c675c17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fe1c96-214e-4361-be91-8c5cb64fbd1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d395ea-9275-4783-80fa-12042f69fe4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dd9bcf-f2e7-4bee-a7f3-e1ef77db3f75",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1236c209-9850-4e6e-b64c-8736fdfa7b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2741864a-3d7b-4109-b29b-dc6123e7624a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe5ac3f-6f16-4492-8ade-35fb12f5c649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0942d08-a005-4b4f-836d-c8fdf5267fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a42378-aeaa-48c7-92f3-a54c3791339e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8302acc8-ff33-493d-9948-7c85561202a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b891ebc-fba2-498c-bde8-5b0de3c1f104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad355102-e9f3-4f60-9c69-4b91d81581b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55409c20-a2f9-4362-9e5a-777bc036247b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bee57bbc-4e0d-4790-8d42-237e8fbebac4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485cb153-4731-4ff5-bca5-7a0460737d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e4f8883-addc-46e4-801a-de703fcb5965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f27131-b328-4224-b110-8593692e15a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d9d3cdf-8438-4803-9790-4ba79b103454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95ee5f8-194f-4eaa-a9f3-edc7048f41cb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeb61b9-2a2a-4198-84aa-e06967f628f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46079011-63e3-479c-ac7b-d0d4bd49dac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bd6358f-316b-4510-a725-20b98bd3cd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb16359-224c-4079-b88b-ed63da2ce9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08959536-8f0f-45a2-9b54-70d9877ae5a1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e036e0a9-2a89-40c2-82cf-cafdf1cd6cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1157e43-38cc-4049-bf2d-7c8885412aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7107c0ad-cb30-4320-956d-8c501f9ff678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469bfc8a-8d51-43cc-9e57-68126099a66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d73550c-693f-494f-aa97-0a0e41586b99",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf265bc7-1a45-4f54-b631-b9e1e64187ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0600a0c0-800b-414c-b7f1-cd9bfae7de98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cdded1-cc70-41b9-9b9d-d43e207b2655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4541461d-02d7-4dc4-b26b-022d9cc06c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be43367-e39d-4717-a90e-ee3a0ae51fd1",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edbe43c-c2e9-4483-851a-0a1b4d46d99a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b63e85-4069-4fb3-be57-4634fe8bca93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e88c2-4998-45f7-a471-8aaa016e503a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e19a3a2-9dbd-4842-acf4-3aca5a0459e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1974add5-ab26-4282-bff8-9786708c63d1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49397796-f951-4539-934b-2e6ac1bf439d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf7daebf-0621-4152-b48c-3be114211afb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "387f7045-d2eb-447a-9d47-fbda5691476c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c40b101-17d9-415a-a0cb-b7c73f5abb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab350c0-73c0-4ec8-87b8-ed34c190a49b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037420a7-992f-4d11-a6cd-39edfc0af320",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f478cc-4d86-4dd5-aa23-d476cbc46cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e952faf6-66fb-4adf-b9f6-5b7652110081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cf6b467-3383-4693-81ea-2f847e908853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f4ce2b-4404-4d96-aaf5-db57efe3ba9e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef77a5c-b0a6-4bb9-8e38-eccbdba6a503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdeea31-a770-4f51-95ea-065d0f80b1e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846897fd-5281-46f3-82bf-68a2fa2212d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e95820-2b27-42b0-a627-1d378f08decb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18539718-3b4b-484a-82bd-9c03d7dbfb89",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8492e5-b0f5-485f-af6f-f09f7af47bf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0320e7b4-c3ef-40c1-8597-36d4a947471d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "441983ae-9d0f-4f47-b4c1-c10b61f44a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d09c09-bf6f-4072-acd2-2538cacd2466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64cf7bd1-cd88-4713-bbb1-0cd790f26799",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a7b228-c747-4b46-bc77-353fe003506f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2351e5d1-f1c1-48b6-b87e-1ec13a7f38fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c98e50c-bffa-4641-94b2-a4b9fdcf517b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17045787-6afc-45c6-99dc-aaee93f24515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0ae238-4a2b-4571-8bbc-a52f7bd3cdcc",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cbf0c9-b5c4-4cd6-b3b4-900bd97db304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f30c69-6508-480f-b45b-66f0d409bfd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a63d7f-61f4-4d58-8872-b6b877c0efdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9ffa3c3-277b-46ee-8612-c4e07852a68a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65765b1e-36f0-4345-9073-b8323a4db40f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee0c30c9-3b7c-4fa6-84fc-e85a55254af9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18216e6e-4eb0-476d-b44e-e78e38eacfd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fca7a2b-a1e4-4bf3-bfe8-85fd542a27dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b371bc-88f5-48cb-968b-f83fa65c658a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3e0ffa-ace2-40e4-a53a-81dc7f92b1f1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27e0f1b-bbda-471a-b323-54f3e359ad2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a48cad25-1668-46a7-ab93-3818e39546a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b5fab8-91fd-4b3c-b4a3-860453d6811b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2caec19-6de6-41d9-bcf4-777d4b73c536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce838e77-7893-4937-8a3f-31549187e020",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb75d17-b12f-4a78-818e-dd7621f03c81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eed679c-c2fb-4ebf-86ce-39befc723132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefa8ca7-6817-482d-9cc2-cae477d7a271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62344cd8-72aa-49d5-a8b6-509d57fcf72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3018bf2b-55e9-47ed-94ca-16b56354b2a1",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5698a590-79a8-4e0d-b685-b98805d630e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c826a89c-149c-49d5-9cef-3d9e8d52956a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14ffdce-c9a3-4fc5-af51-f48b1b8fa45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f579b2-4641-446e-b84a-30d49cef40fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bd758f-bbb9-42e3-9a10-47f216f97958",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2afd896-13f0-4e7b-a297-debce9d5a94c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd10f285-49d5-4c42-8973-f20949db23e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39cc0b7f-61a3-4150-9a72-b6803ef88801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a7f52b-3f67-43f4-9d8a-14065a73a09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0121bd1-dd7d-4260-9e46-72ea48757cd5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec11496b-eed8-4659-80af-7f27db2f22e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0fb14f6-7b90-41a7-8d22-1c8a618772b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494882f0-beac-49e4-9494-e73dfad7df8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a5f13c-f213-4552-b282-16c255d57923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca83a31a-f006-4f0a-891b-533307da8c45",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8a499a9-ed0d-46d5-a4bb-80c68fb0ef72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0622cd5c-3f4b-489b-8bb3-74424faca9f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb3d8f4-a655-4302-9faa-876fabfc0df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2f25b6-ead3-4fa5-adab-9bdbe9c3caaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033ec956-8e8f-489c-b0d2-7d9d7dd8ba22",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b49c3fc-b49e-4f87-bd92-0e3da24325cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b382c67-4769-4014-b49c-bde138bc5333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed8a0c6-1f30-49e3-bedb-8ee09b265e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44506a25-d4ed-469b-a77a-fa4ba8caaced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d095908c-7e9a-41c3-bba0-d604160e77c2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665d4ea1-0473-491e-a73a-0a53e79e7ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ab12ec4-2435-444d-837c-1eabd77325c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1942e759-5266-4158-bb98-959ae733fba7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe56ff06-18c0-49f8-ba12-542ba3164580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a91c4c-6146-4f39-9495-6ca12c5964c6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb06da44-3387-484b-be81-e7f2bccdc58a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc81f646-4d05-4da1-8d30-617853b4245f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d0d65f-473e-4544-a564-1ead24d8bad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e598ca-8962-4b9b-a273-fdbd720dfb36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af84a319-05a1-4e45-b2a9-ba2cfbd75362",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11d8469-13d3-4d39-8bcd-e7343996c787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3e8bab-d47f-410c-a4a3-24bbbf9ed634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f69314c-91ca-485c-8da0-153ec6f67a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "625cdc84-a443-45f1-bf67-99669a47345f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2841213a-0155-494d-9c53-268f49546c86",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886ea9d8-8eaf-4b8d-bed3-15846d022255",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e1299a0-9724-4ba6-95d5-67030eccc2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "976bfc6d-4759-4789-8d7f-04dea258e7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1fcee4-97e8-4b1b-96f7-6cb77aff222e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec78428b-4322-4bc4-bd7e-87ea75ec0628",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd1e6f3-af12-43a2-aac6-cba86aff6168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29c54c89-c495-4adc-80b6-8474dade691a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0970bbcd-415e-42d9-85fd-ca96f68ddce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958bcce5-0d2c-4de5-8e5e-cfbc54f25064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f75094a-029a-43a4-a9f7-a93a9fd7dc7f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ef5025-3e98-493b-9bf8-f92e7f87b365",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15c28e29-6077-4c8e-b5d7-f24aff0edebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8f10e44-c004-4caa-a3e2-931ec8c01812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4139ddc-d658-4897-a27d-8f43f7e1a704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37079900-f0bf-4ef8-9d0c-d6b8bdb99e9f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2864503c-a890-422d-9631-9b7e73060d99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcdb8d58-e5a0-4c5c-a7db-0028e44ba3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c253d95-1383-4f24-ba93-e7deabab67b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c52019f-de2e-4a09-b474-29715143b4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f761fd-4d3f-403e-9bf5-7eebf9aa2212",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f0dc19-2781-4806-9a12-2414e5252b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75c5313c-2582-43cd-876a-2eb1b472efbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d29863e-d399-45f6-a3a3-7761f7b64d4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ab4c8f-e216-4967-a7db-0a8d5f1c44d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e781a23-5108-4586-963c-c95794ffe13e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74546a9d-fdac-42fe-9f5d-2f81d912771a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaef1c3f-f907-4a7d-a78a-d062750c9a42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "949b27d4-7669-4c0e-9ea2-1a447a447c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30067d9c-2a59-41d9-b9aa-a2af573584e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c15c5a-bd48-497a-9871-5051d3ec45b0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46f64bd-923f-41f6-bc34-fac4bbc80f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a710a16-1900-406c-9c6c-64acb8bebc8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846a6021-0eb3-4a04-ad28-305f833b4f10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e95222-d663-47b1-bbde-a3e54e8091ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057b7e4d-8da2-4f16-b1cd-3bbea1876ae6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68780e89-f510-434e-94be-64b011345173",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e5223e2-ba20-46d9-a119-5bfad72b307a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cedca337-0d58-4171-af48-86cbedfe26e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfc9eec5-3faf-4115-b851-d647b4c8e994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "431ccd82-dd90-42d4-804b-59cab0faeab3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682bcd8f-5950-4538-8e6f-176e5b664b67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ce5a49a-f525-43f4-ac86-943eb77efbe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcdced9-eff6-4918-a0f8-74443e93a04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5c44ac-4b00-456e-93c6-af473439f86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ff0fb-784a-43fa-b9dc-5df5e065c3f4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12869dca-7714-48db-b301-0f9caf0aa06b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "742aeef7-5581-4982-ace7-f36d5c5b9584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31f7d94-bb90-4a67-8a73-9f3f42a823f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8bc85f-99ae-495e-9c63-3168f6b1689f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a517a1f-997d-4376-91c5-7f75e322e2a1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f52891d-402f-4b15-9255-04d1637d5f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63e37775-b382-4a80-9325-e9595318cdd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655ca2fa-dc01-4aad-859e-d5666c55e24a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e37cb6b-4f59-4576-9f48-c95df9ea90a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df91915-d3f4-4730-b0ea-b6d04e4a5aac",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379db067-68d7-4e47-bb2e-d2cc4bd6a086",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662bbfb2-97b6-4ad8-9b71-2d36fa50d54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f08d45be-245b-4e5a-960f-45a5588383f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45b3b84-e0e5-44f3-90fa-2809eb184989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb08d0c6-72a2-4fcc-9daf-88396c295e54",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d712f63c-73fb-4d6f-be5d-5814d60e73a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "956b54f8-c588-4220-8c07-bbcd161dbdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefbb144-1c10-4a2c-a019-a19f325dac4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0bd35d-252f-4ec6-b882-17e8e35e81f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6012083f-00d2-4846-9369-e05912881d74",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a594bbea-505a-45d8-ae90-9d0cf05666ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d644acfa-1829-4093-9481-39a25cd7bd54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73db91e9-ee60-4965-9d02-e99c461e9508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2aa0b1-1993-4c7a-95cf-1df5f25ca5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18954c10-546e-44e9-9ef7-c76ec0f2c0f3",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed57280-7bce-4c43-aee8-2b7cda90da7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1959071-176b-4736-9966-1f24e8f59eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ee836f-f677-451a-b93f-ff0bd5be44a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8fab820-1416-4bfe-be0e-2c0e5941e26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d83b67c-2360-44bb-aa14-798d2412d201",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b45bd7a-1c07-477d-b9ac-6e2ce84805e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c67de8ed-d1e2-4aa8-b534-292ba0101015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d44e3-17d4-4f0c-9665-51714e6988b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4bc566-531f-44d3-a64b-3a5badd2ed38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1d2e40-2e0b-47a0-ae7e-7daed0f105ef",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73ec1dd-7bcc-45f2-b45b-5e6ef6db5d43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "631f3fb9-c5f7-486b-9148-be5a1a201f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aba18f3-08f3-44b6-8072-38185e9c2156",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8cc4463-054a-40fc-a931-b06ce3a991f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7d6c03-7b26-4b0d-8b25-98992b9c495b",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec027bbe-27b0-47a0-a6cf-d26fe65e9ff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d468a2-0498-412c-99b0-33a7f9f3710e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5c5f95-f7a9-4e64-b373-7744efe8fbfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af4df16-a286-4ddc-beb3-3cfe1088ae5d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c295867a-d2d4-4cd2-a713-c164b23ec148",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e064b7e3-cac8-45eb-a6f1-ac36f3c7953d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f983505a-5f45-42f7-b27c-59b1c4b1178d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0251485f-64da-476a-91bc-e89fa674994a"
                    }
                  }
                ]
              },
              {
                "id": "31a385e3-c94d-448b-9fc5-2804c5b07fc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c01ae85-3ed9-44fc-800d-1e9c47d6c33a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054954df-3cfc-498d-b2fb-c1fd951ef25b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "72900e18-88e6-4996-968a-3b7bcc95fda5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f06c892-b6db-422c-a5d8-eb983e77a888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f51c138c-b813-4887-ae88-be852c5db94e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "254f9f34-7f58-4a3e-b710-4a633fa43332",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d34ed154-f8c2-4f13-aabd-7b1af6e949e6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3fd3f4e-f91d-44c3-b986-6fbee09b2f93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c46ccdff-2e67-4a27-826b-c9b78876db4b"
                    }
                  }
                ]
              },
              {
                "id": "b0a2e080-d660-41c8-b527-d0e2a23d1f5b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "493b3836-9c38-4ccd-8176-255b8360e4a4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15131d21-0d87-4a4f-b2b6-55baa798ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b6464517-16f7-4e07-bb15-b3a60c5c9ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a063292-f3c8-4816-8074-8a1f8486cb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbec9ee-a756-413f-99a7-0fb2b896d279"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b4058626-718b-4649-b1ff-e249b6f3b13f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6fdd02f9-b250-4b66-a8c9-56dc37d871a7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "948a5b9d-3b32-4d9a-a96a-1c0aa93419e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "21a6bde1-33fb-48da-8349-f96fe7ac1af1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1c499e6-62bb-4e63-8766-b877a4403742",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97eee2fc-73ab-496b-b525-615a8fc8ac18"
                    }
                  }
                ]
              },
              {
                "id": "513010cd-76d3-4169-884b-0633f4adf63f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8e49998-f15d-4b8b-9f8f-f6b2a4342934",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c3e645f2-e3f7-4f6f-a7b5-906244453fd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e61046ef-c1e2-4192-832d-281d57145bd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8318fde5-72f7-4a82-ba06-6d13b28ee336"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80547d15-bb37-46b5-96a9-b75d9df614e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7fc2e14a-b549-478d-8f3b-0d84f2e71ede"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "876c4d1d-e63f-491b-88a8-25c3f56c3637",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67486451-6cb2-4130-97b0-79406e2f7f5e"
            }
          }
        ]
      },
      {
        "id": "3a306458-3c12-47c2-8560-303daedd338c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "91aba686-bfbf-492d-a0a1-ea5092ec3ff3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "47111c49-29f3-4424-8621-c2e5ccc61877",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfb7a1a9-2b97-4077-8dcb-1f3c1ab6ff25",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7b16ad-1379-4271-944a-dc9b6dba2173",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7ab47cd7-ef89-4e44-80de-813980bd2113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0de68e4-be11-48e4-a08f-e58e0d5fcb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "851cbc62-fea4-4ea9-83f4-3ee8f0c4709f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d1d43de-4bb4-4d48-9e52-c21050f4214f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9af4e75-babe-4fe2-9855-daf92c78fe53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cadd895-bfcc-41be-92fb-a18735cc9f2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68f8ffc5-f108-47d9-80be-5a916e4e1926"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31e5effd-0c36-42c2-bce5-d22e13311876",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1dfd64c0-5f6f-4ab4-bcd2-8618529f98a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b43a1d61-a054-4025-a15b-514842086749",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd719888-0d94-48d0-83a2-9960183cfbe6"
            }
          }
        ]
      },
      {
        "id": "917adbd7-12a7-42d5-b8f6-670928453403",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fd554845-50d1-40fb-9b58-233cc7093396",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a77282da-9ba7-4b61-867f-e5a4f46aa7ca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13c7f235-7fa8-4eae-8848-8ec33ff56d30",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bc6d8c-8b42-4532-b781-5cd9aee15613",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f445e6f-aae7-49e8-bb1e-f3d85252ef62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63e3f64-3f16-4544-ab33-bc1dcb955295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96e1e99b-c492-475a-8511-bf56f4355c8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8607e39e-bba9-4d2f-938b-3ec7f17cc500",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4ab40ec-e071-4def-97a5-e735bc01ce13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b50265c8-e696-4305-8c59-5dfb0ec9d275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98fe366c-e16d-4020-89e4-ee74a980e647"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b965b350-1fc2-43af-ad82-9cbd1933efa0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e5bd3631-ddf1-4cee-bd4f-52582a06963b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21538af9-8001-4a3a-b30c-4e1e358b56c4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f23f77c-34b3-44c6-9e6c-9d3709d9c401"
            }
          }
        ]
      },
      {
        "id": "47f814b8-cf6d-4790-91f0-30c569ae3943",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3d8f55b5-f6b1-4d05-b5ab-21eb8e6c2a83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d19259e-65c8-4ffb-8d52-39736d464a0d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ada2e7f-efe8-4a94-8484-9b408a6df5ec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c1905a-cec7-46d3-9249-fab6c8bc80f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4237a9c-def7-4aec-863c-83e923bac689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b41fc3-e633-4bba-a850-c5e11957b2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38219a35-5c2d-4e96-a338-245922bae6c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b0b5b43-e07f-48a1-b665-b5ca7bf858da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2adee870-57eb-4ec6-a33b-95de125e87c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "75cd2e76-baea-4782-9c9d-ba11cdfed7b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f2569df-db00-4b9e-a652-248f543a519e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edb53c3c-1dc1-4833-b377-f708d894e90d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fa4a93b1-5861-45fc-a66e-41401a2cd878"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0445cfa-46bd-407f-9bfc-a6fe078763cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96e57c12-e8d7-461d-9bc9-3549dfd5710e"
            }
          }
        ]
      },
      {
        "id": "230b7666-6f04-448f-b846-175fc9b0ff89",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d72c2bcc-3c18-4c03-8307-ed8c248eb72e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2d2c2c7-be5d-4c4e-b9af-cbc41693aaf5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ed117051-f8f4-4656-be92-a5571ae83c2a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c99da76-fef1-4f0c-8e85-7ec71c313e7b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "397a301f-9160-43b0-83b3-592856ab5a23",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 127.72222222222229,
      "responseMin": 6,
      "responseMax": 839,
      "responseSd": 96.36608760090961,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1719189610258,
      "completed": 1719189650808
    },
    "executions": [
      {
        "id": "3c6e7de3-7f85-45b9-b700-dff676c39253",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d929b893-0954-4f6f-b03e-43b4253ba465",
          "httpRequestId": "c53aeafe-1882-4014-88c9-d0415bcd6154"
        },
        "item": {
          "id": "3c6e7de3-7f85-45b9-b700-dff676c39253",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b9e0f818-7667-4c85-be8a-7ecaab3cc359",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "ea911229-f3bd-40f8-ba1e-081bddc24fb1",
        "cursor": {
          "ref": "85407d4d-f7ac-4d39-b4fa-30252ef1aa0b",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ceb3adc4-7641-4efa-9159-9328acb97b39"
        },
        "item": {
          "id": "ea911229-f3bd-40f8-ba1e-081bddc24fb1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "56f5669c-dd09-458d-a4e8-dc175339bf6d",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "82782ce8-934d-4ecf-8c8f-dc0aa7c14562",
        "cursor": {
          "ref": "08cc685f-999d-4c7e-ac32-464ebf37f524",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "abc74c53-a076-499e-b053-72dd03c6bd8a"
        },
        "item": {
          "id": "82782ce8-934d-4ecf-8c8f-dc0aa7c14562",
          "name": "did_json"
        },
        "response": {
          "id": "f5274895-d62e-4e0f-bb40-40cea42182cb",
          "status": "OK",
          "code": 200,
          "responseTime": 384,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401e98f8-5e56-4afa-9462-a5e649ff11c2",
        "cursor": {
          "ref": "134ffa2b-8b5e-44f0-b6d9-1450c9ff0eb7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83c39d61-794b-403a-b015-ab3da84ddc77"
        },
        "item": {
          "id": "401e98f8-5e56-4afa-9462-a5e649ff11c2",
          "name": "did:invalid"
        },
        "response": {
          "id": "90e35847-0132-4dd5-8f3c-d83410e82b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401e98f8-5e56-4afa-9462-a5e649ff11c2",
        "cursor": {
          "ref": "134ffa2b-8b5e-44f0-b6d9-1450c9ff0eb7",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "83c39d61-794b-403a-b015-ab3da84ddc77"
        },
        "item": {
          "id": "401e98f8-5e56-4afa-9462-a5e649ff11c2",
          "name": "did:invalid"
        },
        "response": {
          "id": "90e35847-0132-4dd5-8f3c-d83410e82b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a14f185-c784-4c79-bb7e-ab89bc3d57d5",
        "cursor": {
          "ref": "b0db9576-4e9a-46b8-948f-971784e0d492",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6e37bb4a-f094-42bd-9bbf-844175658d6e"
        },
        "item": {
          "id": "9a14f185-c784-4c79-bb7e-ab89bc3d57d5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a730612c-a8ab-48ad-9626-328bd289352b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 213,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14153db-1e68-4f36-8654-8e9ac7e2cb54",
        "cursor": {
          "ref": "aecc42b6-1cf6-4b01-a266-4595f8b57488",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6b6003d7-c56c-4869-91c9-7e4021c20c1b"
        },
        "item": {
          "id": "f14153db-1e68-4f36-8654-8e9ac7e2cb54",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2c6ce057-ce9a-452d-8928-130a8ee9fc94",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927702df-3295-4fa5-9a3c-6f307a56143f",
        "cursor": {
          "ref": "dbe19b86-8c2b-442a-8c74-55288fc9ad20",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6bbf1a7a-c2b3-433b-97ef-6dd29271fd35"
        },
        "item": {
          "id": "927702df-3295-4fa5-9a3c-6f307a56143f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4b514e27-9b68-4c17-9920-765c5f8d588e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add030a8-4b76-45d5-9821-a46060fd5b52",
        "cursor": {
          "ref": "9aeb2ee0-a39b-4b57-aaa3-c1eb8bc60d7a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d875605-e251-48fc-a529-11b0f49b013c"
        },
        "item": {
          "id": "add030a8-4b76-45d5-9821-a46060fd5b52",
          "name": "identifiers"
        },
        "response": {
          "id": "0da0408b-9a23-49e8-8441-473ac4f65d9b",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dabbd736-f299-4332-ab20-f7805539921e",
        "cursor": {
          "ref": "2bb66d05-ea9d-4f9e-b87d-3b13f567323b",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "30a7a762-d0f4-4c2d-ba90-25b0123fce00"
        },
        "item": {
          "id": "dabbd736-f299-4332-ab20-f7805539921e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b714444-5049-4319-bb8a-1d9d6c3a5f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e206ef-7f41-403c-ab62-374394e7f64f",
        "cursor": {
          "ref": "81a282a7-ff28-4f1a-a7c6-dbb058aed790",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "22ac8f0f-cf2a-48c5-8243-834518587bd6"
        },
        "item": {
          "id": "98e206ef-7f41-403c-ab62-374394e7f64f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fcbf4077-7405-4af6-bb7a-5345585b1205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dae0be-4a7f-4312-9fec-63df7e8a5de0",
        "cursor": {
          "ref": "67d82ac9-fee4-474a-bdfd-82535ea8700f",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8eefc7c9-42ba-44be-9500-d243f0de2d80"
        },
        "item": {
          "id": "62dae0be-4a7f-4312-9fec-63df7e8a5de0",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "20c54565-9cb4-42fe-b7c8-3c7a74a22299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328b2ab4-a63a-4753-b271-6050743815dd",
        "cursor": {
          "ref": "339705dc-661f-4b01-8b73-054600ef9daa",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b1ea3221-e2d7-44c7-9c44-b047a35a6302"
        },
        "item": {
          "id": "328b2ab4-a63a-4753-b271-6050743815dd",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fffa46f0-eb04-484a-aa1d-876258c51574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31f58ab-4e88-4410-b9ae-8c9a4e92e059",
        "cursor": {
          "ref": "06d6d307-8578-4af5-868b-e9f686c47f52",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "76d736c0-e140-4c51-84e8-49efc75483be"
        },
        "item": {
          "id": "d31f58ab-4e88-4410-b9ae-8c9a4e92e059",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c6af6970-dc0c-49b3-9ef8-40c3643a8c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa16bae8-a1c8-44ae-b417-5c258d9372fd",
        "cursor": {
          "ref": "f0e9d120-8368-43d1-a501-67e7fb05840a",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d33bd292-434f-477c-ae21-5ee3c693ba70"
        },
        "item": {
          "id": "aa16bae8-a1c8-44ae-b417-5c258d9372fd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "84e7d2bb-f1bb-4ebe-ac66-cbd9ab24b5fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056e393a-a550-45bb-8d7b-ede69809a9bf",
        "cursor": {
          "ref": "f81eadb8-2682-4217-9d16-b5000e97ac8d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "abf68c0a-2fb2-46b8-b740-fdef6bc1b526"
        },
        "item": {
          "id": "056e393a-a550-45bb-8d7b-ede69809a9bf",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0e195d66-874d-4111-91e7-41079075fd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b2c5ff-f2db-4083-a9e5-895ed44e0806",
        "cursor": {
          "ref": "f76a4ff5-595e-4121-b7a6-49b9611202fb",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b5d26852-d6bf-4543-82fa-a9419f33f84d"
        },
        "item": {
          "id": "61b2c5ff-f2db-4083-a9e5-895ed44e0806",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b8ffd26c-c4ba-4166-b93d-041734d71fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09bee733-c06b-4105-81d8-042d17d7108d",
        "cursor": {
          "ref": "6351f84f-e2a9-4089-a507-cfd8337d8ee0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "476dc07f-1620-4b07-aab4-11f09d05eaa9"
        },
        "item": {
          "id": "09bee733-c06b-4105-81d8-042d17d7108d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e54a4252-0549-4d09-9399-448c50bcc015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cc8b4d-ac62-47e2-bdf2-f3c199e6d648",
        "cursor": {
          "ref": "384c8a1c-a91d-444e-9fd9-39fe1663c472",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "68249f5f-e574-4ab3-a38d-62e0f30b49ab"
        },
        "item": {
          "id": "c8cc8b4d-ac62-47e2-bdf2-f3c199e6d648",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7b6abda8-0615-4da5-b144-d4900b13ce19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa4074ec-9f9b-46c7-b964-6e213f042ed3",
        "cursor": {
          "ref": "1e1d81b5-2d95-4064-a3b0-aca9590686cd",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0aee6371-f110-4fbe-90cf-1d8f1aa15367"
        },
        "item": {
          "id": "aa4074ec-9f9b-46c7-b964-6e213f042ed3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e44da00b-b042-4293-9feb-70a0d90fee6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5032aec9-1e00-47ee-a762-b6670c19ba53",
        "cursor": {
          "ref": "ef079309-e524-411f-8996-0150db996c57",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2192c961-4808-4b69-b7e7-be39e1127170"
        },
        "item": {
          "id": "5032aec9-1e00-47ee-a762-b6670c19ba53",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8f7ff5d3-32ba-4a36-9642-1548c1c5ce14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ec3638-f4d4-4012-96e5-19a67502d9b1",
        "cursor": {
          "ref": "3774e8e5-ca02-486f-9f1a-bef7779fc86a",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bda0e535-a332-4d35-af48-8c4bd4bdb660"
        },
        "item": {
          "id": "77ec3638-f4d4-4012-96e5-19a67502d9b1",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3819f1e6-3865-4cfb-b480-bbdd7cd14d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e132a5-e095-49cf-a5ce-d7896c8bfd40",
        "cursor": {
          "ref": "41491449-8995-40ad-a9b5-99dce254f939",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "23c923ea-9a73-46db-8b26-822fc76ddf96"
        },
        "item": {
          "id": "46e132a5-e095-49cf-a5ce-d7896c8bfd40",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "86893e58-cc1c-4a87-80a6-75057e4bd8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "296c4fb3-d75c-42b4-af01-64f535f7bb8d",
        "cursor": {
          "ref": "de9c4050-2641-4264-aa38-64b17ffc3a21",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "707651a9-328f-4fa9-8738-af03fb999abd"
        },
        "item": {
          "id": "296c4fb3-d75c-42b4-af01-64f535f7bb8d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "6552c84f-7b5b-4baf-a63f-579b82f14ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197ab0f1-a0f9-4818-9c72-72f4a8652d1b",
        "cursor": {
          "ref": "131c031d-18ce-4ab1-abeb-2d72e0a8b810",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "79ed21f6-048e-43a9-bc5c-544247644ce4"
        },
        "item": {
          "id": "197ab0f1-a0f9-4818-9c72-72f4a8652d1b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ab8e2bbe-9747-4c43-b134-b072eb7ee384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4d5357-23e1-4811-8965-e9811a32f334",
        "cursor": {
          "ref": "1a3c2010-dba3-4d1b-907e-b964d9f13f3b",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "63f69712-dc7e-423a-9967-a60232de59da"
        },
        "item": {
          "id": "bf4d5357-23e1-4811-8965-e9811a32f334",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6a0f2b23-4b17-476c-bf95-b30016a6e5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feadc3cc-8d0e-469f-b83b-74dbc7ae1b3a",
        "cursor": {
          "ref": "10ec6323-76be-4c19-9068-022125194c1c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e6cd2273-fcb8-42b4-8e54-55befd6cc7aa"
        },
        "item": {
          "id": "feadc3cc-8d0e-469f-b83b-74dbc7ae1b3a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f5b0b02f-d24b-413c-9902-917f5f088f96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f82d94-ac07-4c62-81ac-1212a4813255",
        "cursor": {
          "ref": "013f7302-f852-49cb-b5d6-97b47782c220",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4eeb7b30-5921-4eb0-8e5d-c4820eec5da4"
        },
        "item": {
          "id": "c2f82d94-ac07-4c62-81ac-1212a4813255",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c91399e0-813e-47ac-b659-6f053f92602f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0868c32-3b32-4db3-92cc-b557392fdb9e",
        "cursor": {
          "ref": "6b4942ca-92cd-472c-bc85-76c6e89a5f23",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b55ac510-7f34-4614-a508-08e0dde9d774"
        },
        "item": {
          "id": "f0868c32-3b32-4db3-92cc-b557392fdb9e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "82c1c826-54f3-420f-9097-18b8df4164d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1e8990-6b39-4763-86d9-382594be0048",
        "cursor": {
          "ref": "558d8d93-13ef-451c-b86a-daf219747f50",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e78f10d3-9d69-4099-8826-b262b57d9e68"
        },
        "item": {
          "id": "1d1e8990-6b39-4763-86d9-382594be0048",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "473db14f-fe7b-490a-ba6d-f47052a32f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acbbc1a-5ab0-4f08-a382-dac3c139a3ed",
        "cursor": {
          "ref": "13c85eb4-197b-40fb-909a-c5facff61a25",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f344da23-9b9d-49e2-bf9e-aa915415b1cb"
        },
        "item": {
          "id": "0acbbc1a-5ab0-4f08-a382-dac3c139a3ed",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "84705fec-414f-47c6-b5fd-357131954104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3803b4e1-f1bb-49f8-89a5-32595e2c0860",
        "cursor": {
          "ref": "b3d68d63-8020-4fbe-ad3c-d5600e952ecf",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a29e5552-9dad-4b59-9b32-ecd3cfe9b6e7"
        },
        "item": {
          "id": "3803b4e1-f1bb-49f8-89a5-32595e2c0860",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "3ef9a252-fa4c-46bf-918c-96b45ee8e9c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1afaad-6914-48b1-88ba-05007b3892f5",
        "cursor": {
          "ref": "6461fe1c-a62d-4428-9b0a-e8b4e6dfc5e7",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8fcb8cdc-99ec-4c2d-aa8f-034070f80273"
        },
        "item": {
          "id": "0c1afaad-6914-48b1-88ba-05007b3892f5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a332150-beef-4724-b79f-03f8611cc215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee44fa30-1223-4712-8514-67a26ce94cf0",
        "cursor": {
          "ref": "42fbd244-9319-4fc9-9328-fd5e646a2c86",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "515e1a72-4fed-49db-bdc9-28c14a8fe487"
        },
        "item": {
          "id": "ee44fa30-1223-4712-8514-67a26ce94cf0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "54820336-d77b-43a9-801d-51aecdd9905a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2280549c-b19d-4fa2-b757-47aa344b3cfb",
        "cursor": {
          "ref": "7fbd74fd-8b9e-4c16-bc2f-d50503ccc224",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a3e760aa-b70d-4def-af88-3da8c2bfdb18"
        },
        "item": {
          "id": "2280549c-b19d-4fa2-b757-47aa344b3cfb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8bface83-e23f-476e-a779-10b6645aaa97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5befbd2c-6fc5-4cd7-bd7a-04c69c1b89c4",
        "cursor": {
          "ref": "08f24899-e149-4482-9ada-83bbcbbf264d",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "00230877-583c-4cfc-a41d-015fad1a47f5"
        },
        "item": {
          "id": "5befbd2c-6fc5-4cd7-bd7a-04c69c1b89c4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7cfa8485-8d35-403b-bec9-f9f2d9f5a0a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87666b7f-04cb-4adb-9a3d-a6061553b5e2",
        "cursor": {
          "ref": "d545ec3f-3ea7-4f47-9baf-197290b0f689",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e893adc8-771e-4b1b-8050-b6ce29cc3d3a"
        },
        "item": {
          "id": "87666b7f-04cb-4adb-9a3d-a6061553b5e2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5a18ee43-f960-4bd8-a883-33a05316fcf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bc9b1b-e2e6-4648-861c-aaa753523f0b",
        "cursor": {
          "ref": "81d22222-12cd-486c-a532-33ca42fbedf6",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "ac3a5fad-1ba8-44f4-b535-58516986c487"
        },
        "item": {
          "id": "b5bc9b1b-e2e6-4648-861c-aaa753523f0b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "92b37986-8933-47f1-b8d2-45f28eff9f92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 135,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7be8187-c49b-44bd-bb47-c169f8aba9c1",
        "cursor": {
          "ref": "7c173d1f-0f31-4b37-8bb2-5ff82e5d6727",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "799faa81-53e4-4638-9367-bd503118b7c3"
        },
        "item": {
          "id": "b7be8187-c49b-44bd-bb47-c169f8aba9c1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "18f1a893-03ed-4a19-be6f-77affdb4dd90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1240da-7a58-4462-994d-59b50e06ae3a",
        "cursor": {
          "ref": "7c35789d-0668-442b-a67b-960b82cd7853",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8f5975d7-317a-4a56-a6a7-296fccd4de25"
        },
        "item": {
          "id": "2a1240da-7a58-4462-994d-59b50e06ae3a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "fe300e3e-aae8-4822-8298-08cd35dd2f5e",
          "status": "Created",
          "code": 201,
          "responseTime": 839,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c719f1fc-081e-40c3-a7e5-78a03a87da15",
        "cursor": {
          "ref": "3412642d-bade-4eaf-ba9a-6b0a2257dca5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "df82a1f9-5c73-47fd-92d4-96649a524fc7"
        },
        "item": {
          "id": "c719f1fc-081e-40c3-a7e5-78a03a87da15",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "0c3c7d3d-5943-4605-a670-b3c562fc7023",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "afd4b545-3e42-49d6-bca4-02bb635c264d",
        "cursor": {
          "ref": "6bbe3028-9075-4cad-945e-9f12c9a4992c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "31d61fb9-af85-4009-afae-7acca071d4d5"
        },
        "item": {
          "id": "afd4b545-3e42-49d6-bca4-02bb635c264d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "971c1633-8950-4a38-8aac-0d385d47dc2c",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "881c5003-421f-4788-82c4-ba54c4a5a167",
        "cursor": {
          "ref": "23795359-838e-4998-bc81-7c7ac453bf23",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e0651b75-3f28-44fd-8adf-6a53829140f4"
        },
        "item": {
          "id": "881c5003-421f-4788-82c4-ba54c4a5a167",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "92a75595-dff8-4ca3-bdb7-a5eb6b51cdab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "406b96cc-47c8-419f-a128-8343c7c34c40",
        "cursor": {
          "ref": "4e88d567-1d92-4dfa-b568-b2eb65cd4edb",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "52f89108-1c0d-43e5-92dd-f42b5c9c7fd9"
        },
        "item": {
          "id": "406b96cc-47c8-419f-a128-8343c7c34c40",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33493d37-a7a5-4007-8dd3-75cb5a775681",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0ad7388f-9bad-41d2-8303-6dd04ff01fb9",
        "cursor": {
          "ref": "f2bec26c-25ed-4048-92e4-d427fd9d27da",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4c9fcd5f-77f4-498d-8084-f0b5278be403"
        },
        "item": {
          "id": "0ad7388f-9bad-41d2-8303-6dd04ff01fb9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d6312d9c-21ba-403d-9d1c-578e913a606a",
          "status": "Created",
          "code": 201,
          "responseTime": 432,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "638e3cb4-0b67-4a2d-8e56-fdcd0a282e61",
        "cursor": {
          "ref": "71e652ba-34dc-4375-b1fa-9a1b54b04f33",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "bd56ca41-2e13-4e59-9a1d-cc4490125e50"
        },
        "item": {
          "id": "638e3cb4-0b67-4a2d-8e56-fdcd0a282e61",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "05da6b9a-fb23-4530-93a7-4a2ae4ec5c06",
          "status": "Created",
          "code": 201,
          "responseTime": 362,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "56d8c43a-e677-4d74-945f-1c45010567bf",
        "cursor": {
          "ref": "89845cd5-c961-4e54-a948-652760e750d9",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0f79f798-cdf7-491a-9a76-a51e0db79685"
        },
        "item": {
          "id": "56d8c43a-e677-4d74-945f-1c45010567bf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0ecef413-49eb-4d19-a9ed-42eebb6a81a3",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6daafe74-cbe9-4032-864d-c818fa24f05a",
        "cursor": {
          "ref": "5a5a9462-c8ab-4527-af01-62e7f67388b2",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "780945ae-e291-48a9-a34e-5b18d797a86d"
        },
        "item": {
          "id": "6daafe74-cbe9-4032-864d-c818fa24f05a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "857a7cd0-6a6c-4ab9-b501-6693e6835309",
          "status": "Created",
          "code": 201,
          "responseTime": 348,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "48791001-7be8-4bad-8ef2-568e3cb76613",
        "cursor": {
          "ref": "9c833535-875e-4c23-bebb-9e4859d56503",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "acd118c4-5376-4b1d-98cb-a0dd5d9dbbd8"
        },
        "item": {
          "id": "48791001-7be8-4bad-8ef2-568e3cb76613",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6407a3e0-bf81-426a-90da-b3fe1b23ac5a",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "feff212c-afe4-43e3-9cff-eb719a5096fb",
        "cursor": {
          "ref": "a517d00b-c7e6-416d-b43f-44f14ff6d5b2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "63979b03-2576-45bf-a947-ad27095a00fc"
        },
        "item": {
          "id": "feff212c-afe4-43e3-9cff-eb719a5096fb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b664b71b-c901-44b9-9dcb-2c62aad4fc8d",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8e6c3e32-eb96-4451-a79d-f14126c9904a",
        "cursor": {
          "ref": "1af238ed-0b3f-4195-b946-24d12d479d60",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "6a71eb39-5c60-43f3-8a8e-6d0d52214c5f"
        },
        "item": {
          "id": "8e6c3e32-eb96-4451-a79d-f14126c9904a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "46ecda5a-ef9e-4745-952e-1e16e8d9c44c",
          "status": "Created",
          "code": 201,
          "responseTime": 354,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4b82ddf6-feee-41f7-a453-9da6093ac71c",
        "cursor": {
          "ref": "8a289e2f-1014-460e-ab6c-d0e8f7c7fe35",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cc5c48d7-4609-448b-a43f-6111b836e4fb"
        },
        "item": {
          "id": "4b82ddf6-feee-41f7-a453-9da6093ac71c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "164f2474-9458-4674-a507-5eeb5cb08952",
          "status": "Created",
          "code": 201,
          "responseTime": 405,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "86e1c228-13bb-4638-83b3-6b167286c490",
        "cursor": {
          "ref": "ee52b2f1-bfca-4805-ad38-1059d2bae7e5",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "35bb124b-cea4-4dc2-9bf9-0d5f2b53929b"
        },
        "item": {
          "id": "86e1c228-13bb-4638-83b3-6b167286c490",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c6a22bbe-8b4c-494e-a7ec-6183ca28f5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c25c1d-89e2-4639-82cb-e30319112411",
        "cursor": {
          "ref": "c5179341-863e-42aa-95db-41cd45ef0374",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "db99fe14-059f-4a15-bed7-804d6ebcf1a1"
        },
        "item": {
          "id": "14c25c1d-89e2-4639-82cb-e30319112411",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "34c291b8-f19d-4ec4-bcf7-aeeb0d43a105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183b3922-4a5a-4ff5-abb6-1a7a04900b6a",
        "cursor": {
          "ref": "46dd9d07-2424-49eb-bd22-99ead5067553",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "46fa25d4-2c3f-4022-a528-726170efe97a"
        },
        "item": {
          "id": "183b3922-4a5a-4ff5-abb6-1a7a04900b6a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "98baafd4-4211-4001-9bf3-48912bfd577b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dd495a-b4f7-462c-b81c-82f324650e93",
        "cursor": {
          "ref": "8bb6d6b6-5fcf-4d28-894c-624a5b6c8b95",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "37503972-69eb-45e1-8363-f27975b47877"
        },
        "item": {
          "id": "31dd495a-b4f7-462c-b81c-82f324650e93",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d1726ad2-6fce-4641-83ef-e8f551b096d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174871bd-0432-4504-808a-c9004309e69d",
        "cursor": {
          "ref": "65a6d5f2-fe7e-4d98-94c1-e350221cfc3e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6508a075-6efa-49c8-bf97-c02a84485fae"
        },
        "item": {
          "id": "174871bd-0432-4504-808a-c9004309e69d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "445dc2d7-3a7c-4ce8-8ec8-4bc99ac7e1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aee9948d-fc5a-4bcc-803c-e8ea3f87ef80",
        "cursor": {
          "ref": "7d1101fc-1213-4def-9ebf-09461f7af3d0",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5f65d2b8-4c22-4d94-8fab-7c61acb5f5b6"
        },
        "item": {
          "id": "aee9948d-fc5a-4bcc-803c-e8ea3f87ef80",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ba26af2b-4d52-40bf-a03b-46fcd83267aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb184c2-eade-450e-b55c-7360bbb4c0b4",
        "cursor": {
          "ref": "31065eeb-2ddd-4b26-9ac8-bfac21345fad",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6d1b181e-c788-4981-8a5c-b250403c24f9"
        },
        "item": {
          "id": "9cb184c2-eade-450e-b55c-7360bbb4c0b4",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef92443a-45cc-469a-888c-512533399bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d589c5-7cc0-418d-b57b-9af41d560f02",
        "cursor": {
          "ref": "2ee22783-0d04-4b1c-84da-6dc1232de68e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e1eac633-63b6-438e-81e9-99f77dcd05cc"
        },
        "item": {
          "id": "d3d589c5-7cc0-418d-b57b-9af41d560f02",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "41791a5e-2199-4a7f-9c17-bad3ca22ee6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949b1bc1-d388-4950-a869-5ca7b97617ed",
        "cursor": {
          "ref": "02c218ab-07b4-4c60-9227-1412589017f5",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a096cb0a-573f-46e0-95fe-c59135a4d739"
        },
        "item": {
          "id": "949b1bc1-d388-4950-a869-5ca7b97617ed",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1c7e3b2b-7981-4b9f-aad0-a67e18d0048b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da62eb51-e2e4-4ae4-8ea7-4caa5d47f71d",
        "cursor": {
          "ref": "659e9e85-eacc-402d-957b-17309155993a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "02094140-c0fe-42dd-a0f1-3e5c7df48efa"
        },
        "item": {
          "id": "da62eb51-e2e4-4ae4-8ea7-4caa5d47f71d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "118c87fd-05ff-4904-a03f-e207c4c40e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f944de7-39ef-415b-b13e-795f2d63c242",
        "cursor": {
          "ref": "0c0160f8-40fa-4fe2-aaf4-13bb3734a39f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f0e6c4fe-2607-4e79-a964-1de88a5806ef"
        },
        "item": {
          "id": "9f944de7-39ef-415b-b13e-795f2d63c242",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a7136b9f-316e-4fb9-8378-739ae95b74c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c971d05d-8dc1-4e69-8271-78b910a68a85",
        "cursor": {
          "ref": "b300ee54-6b0d-423f-99f6-ce4afc419f96",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "baa17a32-8744-4aa4-adf2-f8bf82e64fa9"
        },
        "item": {
          "id": "c971d05d-8dc1-4e69-8271-78b910a68a85",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0705f01b-7273-4813-8e75-12266948b81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191d0b94-df41-4170-ba46-d29ba56fec2c",
        "cursor": {
          "ref": "8da8a799-9669-4aee-87af-7b3e21c0b9fa",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76b3119b-f389-4edf-ba98-d945568bb488"
        },
        "item": {
          "id": "191d0b94-df41-4170-ba46-d29ba56fec2c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c9c91db2-6d1c-4aa8-be5b-056a1c8de80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41dd3e3-d5dc-4f33-867b-caa278fc0ba1",
        "cursor": {
          "ref": "dbc5b559-4822-47a2-84fc-7e39f5717fa3",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "01b7d734-08a3-4958-8870-5df3e984cef8"
        },
        "item": {
          "id": "a41dd3e3-d5dc-4f33-867b-caa278fc0ba1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8a0a4a6d-ec78-43a4-81fc-dce902a273bd",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e778fb3c-b1d2-4e40-b5c3-7f3d3c0ff37c",
        "cursor": {
          "ref": "61771b84-ebaa-47c9-abcc-558fe8d2450d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "83bc4889-9f72-4014-bb59-64986540d9e9"
        },
        "item": {
          "id": "e778fb3c-b1d2-4e40-b5c3-7f3d3c0ff37c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c8ad0ee3-3607-4f7c-a5b4-9938b9e4673d",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "29ca76a9-88dd-4609-8334-05d3f5f72bdc",
        "cursor": {
          "ref": "bd49b8dc-3438-4b22-bf5a-636910f228d3",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "41969eb2-5737-4c9f-aae4-3a4b297c6ae6"
        },
        "item": {
          "id": "29ca76a9-88dd-4609-8334-05d3f5f72bdc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "aaff57f1-ff29-4a95-b97a-906586a048fe",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "dee34c79-a42b-4e39-bcda-e593aa2d9d80",
        "cursor": {
          "ref": "05010a5a-64fa-45fe-8ed5-8faeba9f4324",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "10f36b4e-6677-4327-a12e-9bb939bf5cad"
        },
        "item": {
          "id": "dee34c79-a42b-4e39-bcda-e593aa2d9d80",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5ddd92f1-b22c-4d59-ad60-0082ac8b8326",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "cf5e2560-7c6e-4af7-9cd5-76105ef765da",
        "cursor": {
          "ref": "8910fc0f-c811-4bf9-bf31-912e1320f37c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e0ac6b2f-0bcc-4d95-82e4-12baf1d1db91"
        },
        "item": {
          "id": "cf5e2560-7c6e-4af7-9cd5-76105ef765da",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fa6fbb0b-858e-4800-b265-6610db5813ae",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9b6b5884-ef8c-4227-a5c7-c7fc0abf7834",
        "cursor": {
          "ref": "ed27b0fe-ee4a-413e-b41d-cf3770fa43d0",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5bb7b1ff-3161-4a9b-a08a-c8482f9a253a"
        },
        "item": {
          "id": "9b6b5884-ef8c-4227-a5c7-c7fc0abf7834",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "902e8d87-4505-405f-a8f5-9554649c2413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b04bbd1d-5859-4b00-8b68-3564592e30ba",
        "cursor": {
          "ref": "226f8c02-a24c-4215-8bcd-a972fe2dadbc",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "dff07cc8-ab84-48d6-99c0-8749a1149c81"
        },
        "item": {
          "id": "b04bbd1d-5859-4b00-8b68-3564592e30ba",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "590cc271-631f-41f0-8984-6da1cb860fe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9ef85c-cb1d-4fde-aafe-2cfb46c363dd",
        "cursor": {
          "ref": "8a661797-4e28-4999-97a7-901ee8196c7f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9c8ae5b8-2bfb-4e01-b0ae-64526428544f"
        },
        "item": {
          "id": "9e9ef85c-cb1d-4fde-aafe-2cfb46c363dd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8d033939-607d-442e-9a8a-7aaa8303f105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b4142e-cbc1-473a-bad4-84a982be0c95",
        "cursor": {
          "ref": "7e01212d-ea82-41a1-a702-e5cff70cd9e9",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a72d61c3-7322-47cb-9819-d3dc5ab47cf1"
        },
        "item": {
          "id": "e8b4142e-cbc1-473a-bad4-84a982be0c95",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "17ea21dc-0d89-4a95-9406-7dc5bae1ca3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e75794-581c-4edd-98c5-3d494ac61ede",
        "cursor": {
          "ref": "0338fd6c-172f-458f-a924-dc595322a3e6",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa0142f0-e922-4190-a59e-8df01a859952"
        },
        "item": {
          "id": "82e75794-581c-4edd-98c5-3d494ac61ede",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0a3e7c1c-9f6d-4b63-81e9-ec82020ac038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b7e23f-a1d1-4306-9dda-aae9e1373009",
        "cursor": {
          "ref": "e3b2b8a4-5bdb-4a88-ac8a-c28d32b12275",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2f802eab-1c59-4a4d-aac2-f8ad696949af"
        },
        "item": {
          "id": "60b7e23f-a1d1-4306-9dda-aae9e1373009",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ce841888-73ec-4ebb-b040-31e165587337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73466f9-0f4f-4d1c-a20f-ef19a37a0dbc",
        "cursor": {
          "ref": "cd2b4cc6-b552-4bc4-a655-7a47a783f395",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e9dee7e2-a0ba-4e42-9ba4-3dc18f769724"
        },
        "item": {
          "id": "f73466f9-0f4f-4d1c-a20f-ef19a37a0dbc",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a468e55c-b06a-41df-bd9e-bcf043f6694e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe69c26-a96b-42be-a48e-1ca76c80b0b0",
        "cursor": {
          "ref": "175f8af8-38dc-49be-8a73-efb1750dd72d",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f40b0464-169c-4fe6-858f-7b5d2882b81f"
        },
        "item": {
          "id": "1fe69c26-a96b-42be-a48e-1ca76c80b0b0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "222615fa-d4d8-4ec1-96c9-39bea02e3c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27744092-81ef-4cfe-bd37-bacc6e66aa1e",
        "cursor": {
          "ref": "d0a85bd2-2f64-4319-baee-58911cad1994",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5be22d2a-b12d-46ac-b05d-e21907ad2c4f"
        },
        "item": {
          "id": "27744092-81ef-4cfe-bd37-bacc6e66aa1e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ba82d32d-e4fb-426d-97e4-a9bda89b8a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fdcf068-0045-409f-9e67-c1ac8c86cf34",
        "cursor": {
          "ref": "ca49f04e-6787-41a9-8d9c-9265b2d8d3e6",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "b2c2189b-3d73-418e-96c4-cf1131ee496e"
        },
        "item": {
          "id": "2fdcf068-0045-409f-9e67-c1ac8c86cf34",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d0437a65-6b7d-48b5-9703-14f90d93f3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f6e2f6-b947-4c7e-a30a-9b091fbd33de",
        "cursor": {
          "ref": "82b1abc4-e4db-4176-8841-83041eb9460c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5b6a501c-18b9-45da-bdb8-5d679bf586aa"
        },
        "item": {
          "id": "36f6e2f6-b947-4c7e-a30a-9b091fbd33de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ecf1d1de-1c3e-40c6-9363-4fe45993fe12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca0334d-9060-46cd-9d3f-1f07dab65fa0",
        "cursor": {
          "ref": "28758606-a908-4d27-b9b7-7e8f33924149",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bdfa19bf-8ddc-4c10-b14b-41045d51bf7c"
        },
        "item": {
          "id": "eca0334d-9060-46cd-9d3f-1f07dab65fa0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "50639f97-30cb-4e34-8a63-61bb7594b0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8f3333-8969-4697-934e-f87abb3d4e42",
        "cursor": {
          "ref": "9bb168ec-a905-48fd-99bc-f42e955d71f4",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b336a8fb-d779-497a-83f2-3809820c3c19"
        },
        "item": {
          "id": "9d8f3333-8969-4697-934e-f87abb3d4e42",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "787e0a27-5fc7-4193-891b-b1e8f855ebc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3b2d06-9474-4fb1-88ac-d21bb786195e",
        "cursor": {
          "ref": "2224c8b0-0153-412c-b194-506591507f97",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1f6c7db3-f350-40e4-8862-dc7ad48dc60d"
        },
        "item": {
          "id": "2c3b2d06-9474-4fb1-88ac-d21bb786195e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1770b4f7-408c-4244-a505-78041861e863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d89279-4b49-4731-8a88-6ace7158241d",
        "cursor": {
          "ref": "807797c7-7016-4ccb-8de2-fcf44da691f9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "626e660e-40ae-4933-a6fe-291a31712ed8"
        },
        "item": {
          "id": "05d89279-4b49-4731-8a88-6ace7158241d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6d48aa55-70ee-4af1-ad0c-2e3319dc2353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bea15d-9b51-4ecc-8f87-877abc151e1d",
        "cursor": {
          "ref": "786e0c86-4cbc-45de-9784-31e55b44ec34",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "550ede91-8779-4045-8da9-4f1b2caf327b"
        },
        "item": {
          "id": "e5bea15d-9b51-4ecc-8f87-877abc151e1d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "033295d3-6c29-4553-9d15-84a6234c7ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7170fc7f-ad5c-47a8-9918-8cee999f3a97",
        "cursor": {
          "ref": "1c2df47e-c6c6-4bd3-9461-e2a290ef37f9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a890c718-f13b-46cd-a9a8-9b00df87f710"
        },
        "item": {
          "id": "7170fc7f-ad5c-47a8-9918-8cee999f3a97",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "653b7dd9-c016-4afd-9896-6f842eb3b007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c063222b-0192-49c5-9a11-d79176122997",
        "cursor": {
          "ref": "056bd0e4-c836-4183-a9c7-d83cc9fee3e8",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8d14af10-21ed-4d32-bb2c-4fac56e42ab8"
        },
        "item": {
          "id": "c063222b-0192-49c5-9a11-d79176122997",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f2276287-04e7-4b01-8c23-006c0fb1efa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c7bb25-a29f-4795-a289-701a57bf9c88",
        "cursor": {
          "ref": "5b7235e8-eab7-4f54-ba75-893c66082637",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "26a51281-b1fd-4420-9960-25651907b781"
        },
        "item": {
          "id": "e7c7bb25-a29f-4795-a289-701a57bf9c88",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "eb3235dc-5031-4c04-86b3-2e4902e1583a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaa6c9a-b2ba-41fc-88ab-bc0cadbba758",
        "cursor": {
          "ref": "67fe87e1-3566-4af3-bb73-0aad519ead83",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91c10c46-3f22-4371-bf7a-5441b17a1d23"
        },
        "item": {
          "id": "aeaa6c9a-b2ba-41fc-88ab-bc0cadbba758",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8100c830-4f58-4f90-a0bc-131bef423485",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47925137-6acd-4915-9c61-dec8a913935b",
        "cursor": {
          "ref": "682ab6ac-f0fa-4f7d-ad15-974881887041",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "20999e1d-1cbc-43d2-b3f4-a53037fdb817"
        },
        "item": {
          "id": "47925137-6acd-4915-9c61-dec8a913935b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9735f796-41f2-40e3-8d20-ce2a7f00a0d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257cf4d1-ef79-4758-a2ba-cc3896fe2088",
        "cursor": {
          "ref": "ea8e6d59-a33c-43aa-9348-41002f501af4",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b236fdbb-1eaa-4444-a0a7-7cca068547ab"
        },
        "item": {
          "id": "257cf4d1-ef79-4758-a2ba-cc3896fe2088",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4cee850a-248a-4a27-8bfc-1f2b3d437934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4614b10-c61b-4718-92f0-538f27e2234f",
        "cursor": {
          "ref": "1744fad9-151d-4a48-ae51-2d83733c16d1",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0c0bce25-d82e-4349-af14-6c8aa4553a8e"
        },
        "item": {
          "id": "e4614b10-c61b-4718-92f0-538f27e2234f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b4146f59-89b6-4a0f-a012-f07a622a2ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da647ea-9196-4f37-9263-7dbcf5fb7240",
        "cursor": {
          "ref": "e7181f4f-f444-4e70-8005-6713909707aa",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f718ade0-1539-4cac-8302-48d7c4763c9a"
        },
        "item": {
          "id": "9da647ea-9196-4f37-9263-7dbcf5fb7240",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d880b717-e722-4963-9def-c7635322df21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6830b2-a779-4b0e-b2b4-e7049daa3167",
        "cursor": {
          "ref": "51115eda-cd9a-47b5-b056-7c590ead14d2",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "5538735f-cf2f-4cfc-bae8-30f03e539367"
        },
        "item": {
          "id": "2c6830b2-a779-4b0e-b2b4-e7049daa3167",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "dc6b6125-98aa-4d5c-9af5-7e97bd78e7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58f85ca-4bbc-4e3c-b14f-76a910d5b854",
        "cursor": {
          "ref": "ef34d3a2-0635-4caf-9358-83c92683c151",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fa911c11-0e4e-43b1-ba41-1beadd8d61e6"
        },
        "item": {
          "id": "c58f85ca-4bbc-4e3c-b14f-76a910d5b854",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2be77694-a903-4d9b-90b4-814b01b1cea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272be638-8fdb-4d81-af2b-594bca4b12fc",
        "cursor": {
          "ref": "66293cb1-1253-494b-9329-dce7c3519e12",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "dd6ccb6c-ff43-4356-9dc8-23c5952bfffd"
        },
        "item": {
          "id": "272be638-8fdb-4d81-af2b-594bca4b12fc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8c74b1ac-281d-4248-9bf1-3d8cb66e482c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15bf2fd1-fb32-43f0-aa21-68741f03dbce",
        "cursor": {
          "ref": "dedb5de3-2cdc-49aa-9a2e-517f6ae75351",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "95f4c6c4-d47f-447d-9583-d728127517b9"
        },
        "item": {
          "id": "15bf2fd1-fb32-43f0-aa21-68741f03dbce",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c10fa1ac-357f-4af2-97ba-d10a93a51aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a5e1ba-5d3b-4e20-b6cc-c3d32802c60f",
        "cursor": {
          "ref": "866e415e-9dfa-47e7-8e0e-bd034cba71b9",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "85f17267-84bf-4619-9952-9b7052438295"
        },
        "item": {
          "id": "e4a5e1ba-5d3b-4e20-b6cc-c3d32802c60f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e19f851c-f7dd-45f8-9261-5d29f899d721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcd814c-b0c3-467c-bf6b-0616a5f6d183",
        "cursor": {
          "ref": "1316dea2-51e9-4497-99ff-cfc86da90d0a",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8754f402-6743-4ce8-ad72-2578f630f45b"
        },
        "item": {
          "id": "efcd814c-b0c3-467c-bf6b-0616a5f6d183",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b4917dcb-ca00-45fb-9524-06ab69ad39ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b96246d7-b301-4b91-9a2f-64c30bb882e7",
        "cursor": {
          "ref": "a082c930-19e0-4baf-b4f8-18344b6704e0",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9845dc51-599e-454c-b5ff-0c070acd8603"
        },
        "item": {
          "id": "b96246d7-b301-4b91-9a2f-64c30bb882e7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2615a46c-2e11-451b-a1a4-8bac93dd3775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187ba388-25f6-40e3-b78b-b0fea0f6c193",
        "cursor": {
          "ref": "9c54baa5-167c-4787-908d-525eb3a4af84",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b2c150dc-e8ee-47c0-a983-ec2cf41bba69"
        },
        "item": {
          "id": "187ba388-25f6-40e3-b78b-b0fea0f6c193",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a4f60bb-2904-4be7-8f43-71e0397972fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0db78ba-7b1b-4b6b-a491-68bce5e83020",
        "cursor": {
          "ref": "b65b4584-bd7f-4449-9ec7-4b2d83bba832",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6647b0f7-dc8c-4725-93be-3ef189257595"
        },
        "item": {
          "id": "a0db78ba-7b1b-4b6b-a491-68bce5e83020",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "25054332-1a81-437e-834d-0c5b7718ffd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "9704f868-1656-4ee6-b3c9-b4fdd6a4950d",
        "cursor": {
          "ref": "a51b5b3d-32f1-417c-9a48-b372e372e4f2",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d242a7a5-69d3-4ee2-9797-96f3f2a5154f"
        },
        "item": {
          "id": "9704f868-1656-4ee6-b3c9-b4fdd6a4950d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "89426977-2e57-425a-8259-8dea26de0319",
          "status": "Created",
          "code": 201,
          "responseTime": 409,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dffc3a7-7ae0-469f-92e6-a040446a55e4",
        "cursor": {
          "ref": "975f9e45-f83a-4bbc-96c8-18d895ecacba",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7aaa8a8c-3017-44d1-8465-9c6a934493bb"
        },
        "item": {
          "id": "4dffc3a7-7ae0-469f-92e6-a040446a55e4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "fec9e42c-f873-4d38-847b-5a863d3f9f66",
          "status": "Created",
          "code": 201,
          "responseTime": 434,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49a6e696-c764-4b48-8483-45e094be447c",
        "cursor": {
          "ref": "14ec6bc5-1008-4f65-a851-17c8ad29fb5a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4373a72b-aa2d-4f7f-a8b9-701f8ec68b19"
        },
        "item": {
          "id": "49a6e696-c764-4b48-8483-45e094be447c",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eabfde96-de60-496d-aad2-abd1052d91fa",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "05530d7e-8744-4373-a93f-810dba509548",
        "cursor": {
          "ref": "41a7cfac-c023-4071-acfb-b9cb5a09560f",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f0bab53c-4882-437b-9434-13ac1cb8a522"
        },
        "item": {
          "id": "05530d7e-8744-4373-a93f-810dba509548",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "91a51866-2ceb-4063-89e6-f766e79f2c1b",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7949d12b-28f5-4835-b30c-86fb3f8a20f6",
        "cursor": {
          "ref": "120a6885-1998-4d23-abe7-35c58407e1da",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b9040439-91e9-46d6-b8a7-9d36e763a3ff"
        },
        "item": {
          "id": "7949d12b-28f5-4835-b30c-86fb3f8a20f6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ecf7fadd-448a-486a-91ea-aa96968cd934",
          "status": "Created",
          "code": 201,
          "responseTime": 423,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-24T00:40:31.298Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-24T00:40:31.298Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "fba7dfa5-9218-4b2c-bdaf-aa22ad039185",
        "cursor": {
          "ref": "6d5c54eb-044a-4e7c-9c7b-8314c1c04ab7",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "90c7f813-b220-4bb0-8e02-eeaf1fe4490e"
        },
        "item": {
          "id": "fba7dfa5-9218-4b2c-bdaf-aa22ad039185",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d5e22e67-df36-43d0-a94a-b3f4a9411186",
          "status": "Created",
          "code": 201,
          "responseTime": 391,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3700dbf-f736-4331-8a93-0fcedab3b6b9",
        "cursor": {
          "ref": "5ef2546d-e30d-4a4c-bc78-b7a5a0aa8e67",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "194ac573-2f52-4222-a986-6c3a5f87b55c"
        },
        "item": {
          "id": "f3700dbf-f736-4331-8a93-0fcedab3b6b9",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "568d7798-da74-43a3-9b90-d1cae3cd0c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16d3cf5-a89a-4369-9e47-d816d599ca83",
        "cursor": {
          "ref": "d829d61d-99cb-463f-8475-d1dcc640b7e5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a866d73e-7950-4eb9-a527-1281ec2e1425"
        },
        "item": {
          "id": "d16d3cf5-a89a-4369-9e47-d816d599ca83",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bd920ae7-3272-4222-afb1-2c6d8eae9ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b983cf57-5004-4a02-8797-dd4cfb56bca0",
        "cursor": {
          "ref": "a889b996-2115-4fdb-8d4d-67c96f3b0b54",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "dc8b10cd-0e5b-4d1c-a601-b4a2464106f4"
        },
        "item": {
          "id": "b983cf57-5004-4a02-8797-dd4cfb56bca0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "54e4e5f0-ff03-45c4-864f-18f02f3dbba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ae8d82b-16f1-40ee-a3ea-a0d6c7aa95c0",
        "cursor": {
          "ref": "1672cb1f-b962-4b29-9ccd-0b760c178918",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "69ff2de3-7137-481c-bae6-04e0ffe1d734"
        },
        "item": {
          "id": "7ae8d82b-16f1-40ee-a3ea-a0d6c7aa95c0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d4db5774-6a5b-45f3-8730-b42de4544420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be326ddb-320d-4e58-97ff-bd91369f7914",
        "cursor": {
          "ref": "e40740b9-894f-4f8f-80e3-69bc086c9601",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9b34e483-45ef-46de-b703-1935cf5519cb"
        },
        "item": {
          "id": "be326ddb-320d-4e58-97ff-bd91369f7914",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "79219812-1998-4578-87be-7f1ce29525e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a474af-d341-4e48-acc8-37edc330f082",
        "cursor": {
          "ref": "47d36b3a-9504-4ed4-b671-5a9fd1ca4c75",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "b6f9715b-63a7-4899-a192-2b07db10f974"
        },
        "item": {
          "id": "07a474af-d341-4e48-acc8-37edc330f082",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "10158663-2a58-4d1a-ac4b-222d62638ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9045e8eb-7707-4a3a-a5d8-d3bfdc1ab421",
        "cursor": {
          "ref": "beaa990c-7163-40bc-b78a-0469bf6ea7ba",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a86e70b-46f1-4fdb-b943-35c859228e76"
        },
        "item": {
          "id": "9045e8eb-7707-4a3a-a5d8-d3bfdc1ab421",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ed570f1e-c72b-4fc7-be19-7788b130bb6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1103ee-f118-4b69-9fd8-f6ee6bc86f08",
        "cursor": {
          "ref": "d1d9968c-7d05-4dc1-ae8d-d512aa2bede5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "20b5c45b-5caa-4519-921d-dcbc00416cbd"
        },
        "item": {
          "id": "9c1103ee-f118-4b69-9fd8-f6ee6bc86f08",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "126f7080-b74e-4159-aea0-f51b173001bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fe50a2-7a69-449d-9cf7-fc53c64c0cd0",
        "cursor": {
          "ref": "6ad994e7-48b7-498e-a177-01211c3ca536",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8daf5b04-90e6-469a-9b98-1d544a3f086f"
        },
        "item": {
          "id": "d3fe50a2-7a69-449d-9cf7-fc53c64c0cd0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fad45801-0858-48bf-a42e-51f92d4740e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24712dec-dbc7-4a10-aefc-10aa906b79a1",
        "cursor": {
          "ref": "864ce1a4-29bb-4db2-9342-cf432412d11e",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1c6ab61e-9b47-49e1-8d00-9f80f6ea8133"
        },
        "item": {
          "id": "24712dec-dbc7-4a10-aefc-10aa906b79a1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ec01bfb-431f-49a5-b794-5d630284682a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff1871fd-1ba6-4c3b-b3e9-c0f5312e227f",
        "cursor": {
          "ref": "321d8f7e-193c-485f-ab63-b1f7da8b05ed",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "1235d7af-bfa3-4d87-95e0-689b00c211d1"
        },
        "item": {
          "id": "ff1871fd-1ba6-4c3b-b3e9-c0f5312e227f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "03f9184f-e5cd-4aee-97d0-da8a9d339b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c028c0f7-cf66-4b7b-8f9b-45dfe1b9d6d1",
        "cursor": {
          "ref": "6aa38ab6-74f8-4ecd-bf62-ebd468621a3f",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d40bbcf0-40f7-4c2f-884a-680a2570659a"
        },
        "item": {
          "id": "c028c0f7-cf66-4b7b-8f9b-45dfe1b9d6d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2592fcac-a47b-4803-a59c-31659511920a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2ba9f6-78b5-4139-8825-6e5b08447cc8",
        "cursor": {
          "ref": "80eb391e-6e08-402b-9a93-71b158795e52",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "81ad30f0-1bae-4a32-80f4-12edf772c381"
        },
        "item": {
          "id": "ee2ba9f6-78b5-4139-8825-6e5b08447cc8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ab334468-f9fb-48b0-8508-abae6810cbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db9b1ae-77b6-404b-9b7d-76cb9d78ba54",
        "cursor": {
          "ref": "8a4be9dd-923f-42eb-b699-bfb9b02e3fd0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "255f2566-0ff2-40ae-a4ae-bf269fee4503"
        },
        "item": {
          "id": "3db9b1ae-77b6-404b-9b7d-76cb9d78ba54",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b787e7a9-78b2-4a97-94b2-7c5c3ec16fca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 125,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "972da1b7-0bed-481f-bcc8-39b965c595ff",
        "cursor": {
          "ref": "cec4fbf8-f6bd-407b-8ca6-93aa869e0838",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ad29c3ee-faf7-41ab-aef7-5cf49c3936cd"
        },
        "item": {
          "id": "972da1b7-0bed-481f-bcc8-39b965c595ff",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bf9f84fd-cf28-400c-8c75-50c650736bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e8d7bf-bd98-4d13-9fee-dc609271c948",
        "cursor": {
          "ref": "37b6166b-0f1d-46d4-b7e4-9e3fb5808ecf",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c200e0bd-09f9-406c-a9a5-b835873b87c9"
        },
        "item": {
          "id": "68e8d7bf-bd98-4d13-9fee-dc609271c948",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "08070c45-0f08-4ca8-8e6d-10eeb2a0c160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8e3f83-570a-4fe2-8a89-5b4dd2883dae",
        "cursor": {
          "ref": "2e8b638d-264c-45f4-8a65-33bd2e5ae1b3",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "06bd2e48-699c-448c-b2bb-01da34e9e0ed"
        },
        "item": {
          "id": "6f8e3f83-570a-4fe2-8a89-5b4dd2883dae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4b0470b5-01b2-4935-aea6-12ff68a8b41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82db3e13-0566-49f9-8110-7ec979d8e96e",
        "cursor": {
          "ref": "6ae059cd-00e3-4449-b649-d3d27d55e623",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4d3f24ad-3475-49e9-befa-df17734a0fe4"
        },
        "item": {
          "id": "82db3e13-0566-49f9-8110-7ec979d8e96e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0d09f5ae-67bb-4c71-a363-37db354b08ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f62bcd-fc37-4c8a-afad-b5b0d870d277",
        "cursor": {
          "ref": "fe25bf87-a2ed-4866-8e15-938d7abc677e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "02d8ee42-7ff8-4944-8941-914ba65e87fd"
        },
        "item": {
          "id": "a6f62bcd-fc37-4c8a-afad-b5b0d870d277",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "059b3024-f4bf-4194-a4b0-c86075627397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321902fe-7205-4e94-ae96-97267b205fc2",
        "cursor": {
          "ref": "dfa05492-5b31-4986-a04b-08cd37d2a987",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "344a8b72-d56a-455c-94da-8a6c8477c8b2"
        },
        "item": {
          "id": "321902fe-7205-4e94-ae96-97267b205fc2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4cb53d52-5b4b-47f1-9196-a2418c87faf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82799eee-c77f-4907-84c9-860127020a9d",
        "cursor": {
          "ref": "637264a4-829f-4629-9ac5-598b925fd5f8",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "96fa4413-6836-499e-9576-533e2e913728"
        },
        "item": {
          "id": "82799eee-c77f-4907-84c9-860127020a9d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4a78f459-66e6-4275-8fca-22b7cb9e8bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc85c39-8192-43cb-b914-140393914113",
        "cursor": {
          "ref": "baff9b71-2769-474c-8721-4f8322e28e96",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "86a1c175-673c-416f-8b62-911694030b0e"
        },
        "item": {
          "id": "1dc85c39-8192-43cb-b914-140393914113",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "924e8bdc-87bf-48ea-a450-145dc40c96c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c6e6d0-419e-4f66-98db-e7123e5dc46c",
        "cursor": {
          "ref": "8c7d65c1-5b9e-4b04-8106-8ee6021ef601",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "169549f7-8fa0-4c85-8e3b-b11dbb59d959"
        },
        "item": {
          "id": "b0c6e6d0-419e-4f66-98db-e7123e5dc46c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "89b06fe9-50cf-48e0-aa7d-3e393874c9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da794ff-94b5-448f-bf17-4439b2a933b7",
        "cursor": {
          "ref": "ee3327a6-fe6c-4d4c-9a79-7bee0d900810",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3a30ec26-3d71-4e97-b18c-e091f75686ff"
        },
        "item": {
          "id": "2da794ff-94b5-448f-bf17-4439b2a933b7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4d1b9b70-354e-42fe-9e04-a258818cf0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d673a5ad-001c-4271-953e-67e892029bba",
        "cursor": {
          "ref": "6e39ded4-6096-4a87-bdb2-b9d4702b2a49",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "13430db7-7503-41ff-a2b3-decf7b500e35"
        },
        "item": {
          "id": "d673a5ad-001c-4271-953e-67e892029bba",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "4f85bf4f-85fd-4a5b-8e03-124977478447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2ae0a4-df1a-486f-9b74-e3a4c08fbd5f",
        "cursor": {
          "ref": "c76adb78-ad40-41db-9530-d307cd192d6d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "87ae9fbc-5b7a-4a3e-b0c4-7f0972fc3209"
        },
        "item": {
          "id": "0c2ae0a4-df1a-486f-9b74-e3a4c08fbd5f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "54ab5095-9c6b-45b7-a801-8ba95595c0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f0d6db-97b1-4f59-ae75-f9812e561f83",
        "cursor": {
          "ref": "d6759bff-1d74-4f38-b560-6c7de8b77e82",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b0ee0180-acf6-4a4a-9d67-e0a598e02eb7"
        },
        "item": {
          "id": "f8f0d6db-97b1-4f59-ae75-f9812e561f83",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c4cb1552-abe0-419b-9249-203e6f378a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b05667d-bc8d-46ce-89c3-1e6a22578ef3",
        "cursor": {
          "ref": "78275b8e-3289-4088-9c30-b2006e6dc200",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "937dd12d-9258-434f-8181-bcbaaa971377"
        },
        "item": {
          "id": "2b05667d-bc8d-46ce-89c3-1e6a22578ef3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "84f46e3d-4873-4649-a05d-3f63b002ac82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8f387b-965a-4769-a394-d8e63dba573c",
        "cursor": {
          "ref": "019cb2ad-6cac-4776-aa03-af22ef4d1bc5",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "298be0f8-c4a1-46a6-8b00-1668dc3806eb"
        },
        "item": {
          "id": "7f8f387b-965a-4769-a394-d8e63dba573c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e43ce815-64a2-445f-96da-57916bfce014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec64f4ca-6795-44ed-b1a5-5e88b8ba4557",
        "cursor": {
          "ref": "e04c8cbc-e6fe-4cc7-884c-fc83d264b472",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a2918240-786d-4d2a-b811-8ac703847191"
        },
        "item": {
          "id": "ec64f4ca-6795-44ed-b1a5-5e88b8ba4557",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "79630588-4147-40f8-b62c-daccb7be4aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8e73ca-c17d-4666-89a2-86dfee835f09",
        "cursor": {
          "ref": "1f50e108-8452-4576-828f-cfe745af98b3",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ee6e003c-98f1-421d-a240-41f49e0210f1"
        },
        "item": {
          "id": "5b8e73ca-c17d-4666-89a2-86dfee835f09",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "20b9b5a0-03b2-42ad-927b-a3cac740c6c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646974ee-28ae-4f1d-8cde-33e698bf1339",
        "cursor": {
          "ref": "6ee347a9-ef3b-451f-97ba-1ccc5db8fe1d",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d7da9667-1270-4523-9da3-c5c9c34d0af0"
        },
        "item": {
          "id": "646974ee-28ae-4f1d-8cde-33e698bf1339",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8c822800-a060-4fca-afc2-58494bc42fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea413127-a6d1-40d1-ada3-d138955cf75b",
        "cursor": {
          "ref": "30427b70-d9ef-40df-a438-f384714982c1",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "01fed1f6-ba60-4f90-9e15-99284202b5c7"
        },
        "item": {
          "id": "ea413127-a6d1-40d1-ada3-d138955cf75b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "71f18c66-2129-46e6-b34a-6853f16fd22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c26a3c7-86ed-42a8-9860-cdc4e9055525",
        "cursor": {
          "ref": "7578dccd-7dae-4aaa-a9c2-4082240ca483",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "dd87fa93-34d0-4318-9470-755fd0ff62c6"
        },
        "item": {
          "id": "3c26a3c7-86ed-42a8-9860-cdc4e9055525",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "29a4d171-ef67-4b24-8a80-ea9c8d4e3549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f84674ef-4141-4c5b-a9cd-8fd5833ae929",
        "cursor": {
          "ref": "e37b83f6-1111-412d-81b7-ff31e3cf3344",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "63240d35-c379-497d-b6c2-eb617b3684f2"
        },
        "item": {
          "id": "f84674ef-4141-4c5b-a9cd-8fd5833ae929",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2e334bc1-6059-466a-a3e3-bdaf4be8e910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4307fe46-3b61-4a59-a235-c8c5f737aade",
        "cursor": {
          "ref": "76fc76b3-5bd3-4014-8b5c-2e0843f3865e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "bd56fc33-7f30-40b3-bc7c-24e624502a81"
        },
        "item": {
          "id": "4307fe46-3b61-4a59-a235-c8c5f737aade",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a4b5dd16-a9b6-4dbd-9596-29fa236f321b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0b69fb-3eeb-45c4-bc14-8b1481332ba2",
        "cursor": {
          "ref": "af8ec2d4-9e98-4e2f-a972-461d6c5225a3",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "576d917e-f576-42f1-8f9e-8921ef867c37"
        },
        "item": {
          "id": "dc0b69fb-3eeb-45c4-bc14-8b1481332ba2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c06572d2-0cee-48c4-864b-5cbc9aafee99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e7facd6-6f82-4569-9055-f3e8ca83edf6",
        "cursor": {
          "ref": "61c7571e-4731-45a5-b215-5a8126b48998",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f8a4e842-f990-4fa0-9a1e-855bae79602a"
        },
        "item": {
          "id": "3e7facd6-6f82-4569-9055-f3e8ca83edf6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "62fe18ad-e350-4e46-b13c-370a492b5842",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88b22cfb-1ec0-4e6b-9e93-fcca2946eeb2",
        "cursor": {
          "ref": "ecc74f7c-bd3f-4267-8364-51b16062dbec",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fd361bdb-a938-4882-8f11-cb8adee45639"
        },
        "item": {
          "id": "88b22cfb-1ec0-4e6b-9e93-fcca2946eeb2",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8607da6f-f5a9-4b4f-9603-f89551fff996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dddf64e7-a83c-4dc3-bd4f-777920b17042",
        "cursor": {
          "ref": "6a3e9b3d-4864-43e2-a33a-155cafb841e6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a3427867-b4d9-462a-9e76-6038ca146ce4"
        },
        "item": {
          "id": "dddf64e7-a83c-4dc3-bd4f-777920b17042",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "57eea807-5b5b-4961-b96a-6c872739e173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e486b0b-2524-4d56-980f-552dfe643ad6",
        "cursor": {
          "ref": "214d64d9-92dd-4892-960e-6c2118f2ba88",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3deda793-6728-4957-9e1a-ffc617def71e"
        },
        "item": {
          "id": "7e486b0b-2524-4d56-980f-552dfe643ad6",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "76d39cca-d030-473e-a9c3-b0dbc0c3ed7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4761ecec-04ba-4838-9223-19bfce30a2eb",
        "cursor": {
          "ref": "eff91712-c97e-4cce-9757-86d273db96c6",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "aea365cb-a923-444b-9486-f9bdb1ec6152"
        },
        "item": {
          "id": "4761ecec-04ba-4838-9223-19bfce30a2eb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "08f814b8-2dfe-4fb1-8443-a077ea6c7033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c276a9a-4bfc-45a0-8eb4-d197c78b15b6",
        "cursor": {
          "ref": "f3779ccc-c1be-4d07-9c78-aa0d49f893ba",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "81ebc459-52d3-4f6c-8da7-b6f4d83df444"
        },
        "item": {
          "id": "1c276a9a-4bfc-45a0-8eb4-d197c78b15b6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2be25597-d66f-4fa3-9850-7e8ee68d45a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c747e0e-2879-42f7-9bda-9f4efb3fee5a",
        "cursor": {
          "ref": "beeaef3b-57ad-49ed-a5e7-8fa4ec68f1c5",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4d03a455-e29e-4d5c-a622-036d135494e1"
        },
        "item": {
          "id": "2c747e0e-2879-42f7-9bda-9f4efb3fee5a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e4f4965d-8559-4084-9942-ad8c02688315",
          "status": "OK",
          "code": 200,
          "responseTime": 194,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "030b2338-434c-4119-923c-8d473baa1eb2",
        "cursor": {
          "ref": "5cef6518-fc83-48f0-85ee-1ae9bb02bb6c",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f1be7c50-479d-4437-82bc-b5c4b2caa74e"
        },
        "item": {
          "id": "030b2338-434c-4119-923c-8d473baa1eb2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "881ddc49-8fd3-49e9-8b12-f86446bc70e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2537de0c-e584-4528-b10d-51a1dc858fe0",
        "cursor": {
          "ref": "89ae09a1-59a5-4d5a-9d4a-6c6889f1a698",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d50b6f43-2c27-4eab-bd8f-5a42a739778d"
        },
        "item": {
          "id": "2537de0c-e584-4528-b10d-51a1dc858fe0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "47adab0b-6698-42e8-ab10-c30ea49e8d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aea4e6-89da-4c8a-be99-691a1816180a",
        "cursor": {
          "ref": "f653081b-5e29-4c73-914c-6fa2c26e7d6a",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3ca01a63-3a27-46ac-bf68-63557164cf0e"
        },
        "item": {
          "id": "85aea4e6-89da-4c8a-be99-691a1816180a",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b7ec7e14-eabe-4a2f-b8f7-4c47eabb850a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb45a03-e6f0-4081-83cf-3fd06967b5b5",
        "cursor": {
          "ref": "0a4447f5-bfc7-4b10-bfc7-2bfbf9eafa25",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ac152473-7c08-4f24-b901-fc99ce0964ae"
        },
        "item": {
          "id": "ccb45a03-e6f0-4081-83cf-3fd06967b5b5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "33b45fa6-047c-4e79-a544-978f6efc268a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9819fc64-79fb-4719-8a4b-2bf3e80f4879",
        "cursor": {
          "ref": "91f79c21-43f0-4224-aafa-a159a5a6f9bf",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1334358a-ae2d-4017-a651-8e48994d30cc"
        },
        "item": {
          "id": "9819fc64-79fb-4719-8a4b-2bf3e80f4879",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1add266d-02ec-4c85-9a60-fcae13bc6475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5a06df-494d-4b44-ad9d-09ef7240837b",
        "cursor": {
          "ref": "e4dac29b-39c4-4dc9-b0f5-e9cbb1c4aa74",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "09ae0bda-00f0-45cc-8354-88292c8c1ae0"
        },
        "item": {
          "id": "2c5a06df-494d-4b44-ad9d-09ef7240837b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a314e050-1d27-48ea-9baa-7727936969a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961a5740-9374-41fd-8b37-00defe89e390",
        "cursor": {
          "ref": "bafe23c5-e1f9-4ce5-8691-54034fba8bec",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "a2e86100-7e6a-4228-9d53-1d6f597a9296"
        },
        "item": {
          "id": "961a5740-9374-41fd-8b37-00defe89e390",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bb337d87-acb9-4775-a01b-8a46b2fd6d07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9f71bd-783a-4d84-b64d-13b2179a6fc7",
        "cursor": {
          "ref": "fcc6f733-77e3-496c-9750-0ca3e10ff1be",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3dfbca7d-2f23-4983-a360-153c40e6ed76"
        },
        "item": {
          "id": "9e9f71bd-783a-4d84-b64d-13b2179a6fc7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a6ce1d01-031a-4329-927f-c8c41cd15a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c55287e-7789-4ebf-b849-9a7c72e3d7ea",
        "cursor": {
          "ref": "d7353f40-f44d-41dd-a623-33ea3273bc42",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "81a5e993-b3f9-4efd-bbb6-a03f84d8cf56"
        },
        "item": {
          "id": "8c55287e-7789-4ebf-b849-9a7c72e3d7ea",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "63bf9c9e-3bb4-44ea-b520-492ede4a6063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3517bf1-bee9-40a6-b85c-65f8acf875ab",
        "cursor": {
          "ref": "621107f6-00cc-44e5-ba24-ca22c3fea6ea",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "937d2cbc-dbf0-4b95-9412-915b9ea3c6c5"
        },
        "item": {
          "id": "c3517bf1-bee9-40a6-b85c-65f8acf875ab",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0aedad4d-63ed-4867-a4e6-41636a807970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8568dc-92b1-4178-9deb-e451e3c05431",
        "cursor": {
          "ref": "5f28e691-b7fc-4dcc-80d7-550dc040a0d0",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e93fd238-8a64-4fe1-912b-f36acb5b4a54"
        },
        "item": {
          "id": "9c8568dc-92b1-4178-9deb-e451e3c05431",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "25852c70-719d-4552-96a0-bc21365ab26b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "436190c4-89e8-42c4-afec-895d4f5db8b0",
        "cursor": {
          "ref": "99a6e715-2d3a-4f2a-94e5-52c76f3090c8",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7e5d0bdd-e0fd-4c74-b381-f7060c9a72bf"
        },
        "item": {
          "id": "436190c4-89e8-42c4-afec-895d4f5db8b0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "394eb006-509a-4277-b5ed-916eba0bbd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7620fb72-8bab-4715-beb9-bd4e56340dd5",
        "cursor": {
          "ref": "97602e7d-0f04-409b-8b11-fd71614b85a2",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f6d7d282-de97-476f-9bfe-d6916979f394"
        },
        "item": {
          "id": "7620fb72-8bab-4715-beb9-bd4e56340dd5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e0fe227f-4564-4027-a6a0-7c4622b2cab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7afe351-8e75-4bef-aeb7-119ea84f90cd",
        "cursor": {
          "ref": "936414b6-467f-459d-8159-eb75fab43550",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3cc725d7-dd31-4dfb-b4bd-b8ac2238534b"
        },
        "item": {
          "id": "c7afe351-8e75-4bef-aeb7-119ea84f90cd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "12075687-30d2-46b1-aa0e-9ba17f14222f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d78487-4995-481e-bffd-c595cc008412",
        "cursor": {
          "ref": "843f8ff4-5b61-4871-a5b7-bf7fcab0e1ba",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "aef79fa7-d288-42ec-b421-b9436999b7d0"
        },
        "item": {
          "id": "28d78487-4995-481e-bffd-c595cc008412",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2c90291d-6d4d-45c9-bf73-828b82e24176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0461ba91-310d-4b68-8d26-913a5c8af68f",
        "cursor": {
          "ref": "ca1abc77-85b1-4749-9ed0-fe0572441abc",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d3c49763-4d9f-4608-9dbd-3bf9d93676be"
        },
        "item": {
          "id": "0461ba91-310d-4b68-8d26-913a5c8af68f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1cdbba02-d2df-4dfe-9a3f-e996aaa7dcb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c8889a-8276-455c-ac3d-e4b96593ca75",
        "cursor": {
          "ref": "fcf9eba3-a7a4-497f-beae-5960c746240c",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a261531f-ab1a-4e31-8706-285cdc532aa1"
        },
        "item": {
          "id": "a8c8889a-8276-455c-ac3d-e4b96593ca75",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6aac2e33-3efd-4de6-9683-bfcc64eb8d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b28e959-5151-4267-9981-4c5a3d60c04a",
        "cursor": {
          "ref": "f9abc8dc-ff4f-4c74-a15f-2700660b88a3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f4710566-c1d7-42f8-b1e7-63fbad01679d"
        },
        "item": {
          "id": "0b28e959-5151-4267-9981-4c5a3d60c04a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fec4d644-fd0d-4a93-9d1a-c496492880e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11cc401a-64af-4045-8759-f89f180bc652",
        "cursor": {
          "ref": "275ab59e-cd9f-4daa-9fbb-e2defe651344",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b52bf4c4-5406-4c72-9107-264284c7e341"
        },
        "item": {
          "id": "11cc401a-64af-4045-8759-f89f180bc652",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "14d3c25c-045c-4e6b-9b5f-057be8facf77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d584d5-881d-497a-861d-63dba950869e",
        "cursor": {
          "ref": "dc0a0af0-2885-4abf-ac35-1c44453d929a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6da5d0a0-5d78-418b-b8db-33ef7066bfff"
        },
        "item": {
          "id": "53d584d5-881d-497a-861d-63dba950869e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3070a0ca-0100-46b6-a4ea-46ccde855f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97012f1-415e-4e4e-ab77-3fbff48983dc",
        "cursor": {
          "ref": "7ec55cfb-33ce-4124-ab5e-9036c03c01fc",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "2c23821a-0d31-437d-a367-7573307ab6ef"
        },
        "item": {
          "id": "d97012f1-415e-4e4e-ab77-3fbff48983dc",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "60992998-65c5-41f6-a141-3ba03bcaf146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aeb5aa0-81c9-4a54-8dc6-298a3608fa0c",
        "cursor": {
          "ref": "8d4d9d5d-0a70-4fdc-a5fd-607785cc31d1",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "548bed6b-2b70-4468-9694-7f73b2d904f5"
        },
        "item": {
          "id": "7aeb5aa0-81c9-4a54-8dc6-298a3608fa0c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e040e244-201d-4df3-908b-732f606a7eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f50b4545-222a-4650-816a-9e60593e6795",
        "cursor": {
          "ref": "46dbec79-fdbf-4a68-95c7-095feec92dc3",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "63ff5d6b-28f1-44f3-bbfa-4d72b50e19e5"
        },
        "item": {
          "id": "f50b4545-222a-4650-816a-9e60593e6795",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "70f2db02-8172-49de-b136-3106fb621162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5c9540-bfea-4bf5-9c85-cd555bf291d6",
        "cursor": {
          "ref": "81152e34-211c-4951-b171-55686b59c0aa",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b740db91-8584-458d-a3c0-1ec791ab4d6c"
        },
        "item": {
          "id": "5d5c9540-bfea-4bf5-9c85-cd555bf291d6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d12a24b1-39bb-436c-ba97-84de6cdd9508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df2daf90-72f7-446f-aebc-da907c96ae48",
        "cursor": {
          "ref": "2374169b-fb30-4591-bf31-c15cda994c47",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8c08e9c1-4e7b-428c-b194-94e78961745e"
        },
        "item": {
          "id": "df2daf90-72f7-446f-aebc-da907c96ae48",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e7acb3fa-67b0-429c-a9ce-bb424a3ae9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f76a7c7-f707-4318-beab-0f58d81d44f9",
        "cursor": {
          "ref": "e36b6e56-2239-4c43-8ff2-ecafae0bd986",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4bfa5d3a-2f19-4422-a4f2-6ecbdf2e75b0"
        },
        "item": {
          "id": "2f76a7c7-f707-4318-beab-0f58d81d44f9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e2e3ed24-d958-4287-9a32-57d4ff19ab86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89757d47-031d-445d-95d4-0d47e05c9550",
        "cursor": {
          "ref": "9c3b0ce5-1e4f-405e-b6fb-6d2903b8fa6e",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0ccebc17-8168-4323-a54a-3b06d307df90"
        },
        "item": {
          "id": "89757d47-031d-445d-95d4-0d47e05c9550",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f496182b-619f-4724-8dd9-5279714b1674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f398aca3-ae2e-4add-976a-5d0ae1f7bd90",
        "cursor": {
          "ref": "f5f863ad-9ac2-4f17-8f8d-e3bb3ac1b312",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b0dcffa9-5842-443f-a8c1-2fbcf624723d"
        },
        "item": {
          "id": "f398aca3-ae2e-4add-976a-5d0ae1f7bd90",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d349456d-fae9-4c5e-ba26-b4eaed1628c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915bd0d8-51d6-43e6-88c9-ff41d9b8d152",
        "cursor": {
          "ref": "5e9c99ba-41d5-40b6-8a5e-926d8f70db00",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "4f394114-9c7b-4049-bf13-ff6feaa40268"
        },
        "item": {
          "id": "915bd0d8-51d6-43e6-88c9-ff41d9b8d152",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d96baba8-a00b-4fbf-ad55-2ae3e2932885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59b3737-2bce-4819-a7c4-c44fcb51f025",
        "cursor": {
          "ref": "947db6a5-ea29-4b91-a093-6203df21110b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4ad25dd5-8e48-42a1-92fc-ffcf94d535b9"
        },
        "item": {
          "id": "a59b3737-2bce-4819-a7c4-c44fcb51f025",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bed7e892-c9e7-48bf-8346-5f609fbff56e",
          "status": "OK",
          "code": 200,
          "responseTime": 168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "54bbc218-96ab-4530-a3d8-d68134e46c67",
        "cursor": {
          "ref": "0d152ec0-07c5-4880-b8ac-4f1921465e67",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5698addb-7881-44aa-b7c0-4281983ab3ad"
        },
        "item": {
          "id": "54bbc218-96ab-4530-a3d8-d68134e46c67",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aa2f59d6-9e16-4e6a-88b4-6e1da17493df",
          "status": "OK",
          "code": 200,
          "responseTime": 203,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "c71f68c5-c047-473f-b347-6871492c6e11",
        "cursor": {
          "ref": "fe4f85c0-a604-4a26-9887-f701aa97d719",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b0ff9489-3880-4c13-8a7e-ad538982a85c"
        },
        "item": {
          "id": "c71f68c5-c047-473f-b347-6871492c6e11",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "c5e687f2-4450-4ff1-9aa5-4a746ec73d28",
          "status": "OK",
          "code": 200,
          "responseTime": 168,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ea7385c1-921a-4883-bd77-da3112b8a38b",
        "cursor": {
          "ref": "24e526e1-4a97-4360-b56e-150ff4678c02",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "add95f46-12b7-48af-b5c5-c2cd5e304b25"
        },
        "item": {
          "id": "ea7385c1-921a-4883-bd77-da3112b8a38b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b1843711-50d8-4e0c-9a98-d7b32e3dbc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3e328a-49ec-425b-9370-351d416e2af6",
        "cursor": {
          "ref": "079ab991-6631-4abd-b24d-0c7fd61d99aa",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c8c10a1e-9495-4b15-b2ce-cad0d94d013e"
        },
        "item": {
          "id": "af3e328a-49ec-425b-9370-351d416e2af6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "93fda6d6-ab2d-43ec-84c9-28c383834cd5",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "1cdcf77b-ca9d-439c-bf42-ef76806bc2a1",
        "cursor": {
          "ref": "11dc2625-951e-4ac8-a9fa-e8e6d5e8cf95",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "95051e51-5f19-43c6-b052-87b04f71b9f8"
        },
        "item": {
          "id": "1cdcf77b-ca9d-439c-bf42-ef76806bc2a1",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "993d005b-3cb7-4527-84e7-a23f3e7701b8",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "fcfe3da1-e928-47f0-879a-f73d0cd8ebcc",
        "cursor": {
          "ref": "8ecc8c5e-8971-4b0b-8c6c-58cebbc86536",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "2d6c1e23-27c6-4882-9bab-b49a85e596d1"
        },
        "item": {
          "id": "fcfe3da1-e928-47f0-879a-f73d0cd8ebcc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "61a89eca-8219-41aa-b1c5-0fb74720f6f4",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "15e3b525-a8ef-42e8-a9ca-e8325cd1aaa3",
        "cursor": {
          "ref": "7095df46-296f-46f1-8846-697ae740fbfa",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "21949a5a-176a-43f7-8b5b-7797762afc76"
        },
        "item": {
          "id": "15e3b525-a8ef-42e8-a9ca-e8325cd1aaa3",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "874d0d48-94b2-4626-90c8-95f3efc0ea99",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "776a4968-f03c-412c-a799-0f29aa6b3bc1",
        "cursor": {
          "ref": "9345fbca-f343-4d0a-951c-47b6572b38c3",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6f5088c0-aec0-41c5-a286-aba8015fe25f"
        },
        "item": {
          "id": "776a4968-f03c-412c-a799-0f29aa6b3bc1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "aa1141c4-cb34-4f3e-94c1-cee404a7fc79",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "ce265d73-87bd-4f7d-906e-ebe60005df1f",
        "cursor": {
          "ref": "1a4d3266-7459-42f4-8bf9-808eab8ffc3e",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ecb3de2d-78f8-457f-b019-076b243a6e63"
        },
        "item": {
          "id": "ce265d73-87bd-4f7d-906e-ebe60005df1f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "faf1ce2a-bc7f-4a23-b6be-9a343a126398",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "2a491b30-f6fa-4c05-9d93-6e6a9b2b8a15",
        "cursor": {
          "ref": "17187083-a6b6-47d5-bdc1-e392fe68a57b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fdaf99be-2cd0-4d4f-a9cf-8bbe20f1aeb6"
        },
        "item": {
          "id": "2a491b30-f6fa-4c05-9d93-6e6a9b2b8a15",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9046b277-f86c-4d5f-a60d-3855c88e966b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5476e1-2134-47f7-ab90-5e789776eefd",
        "cursor": {
          "ref": "3e5b8b37-12f2-4c9c-8b86-18d6beb76c72",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "20ff20a3-0d12-48da-b057-e5b1e8287d36"
        },
        "item": {
          "id": "8f5476e1-2134-47f7-ab90-5e789776eefd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "36794377-02fb-4c49-80d3-6a2c6943451d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "869ec976-a10b-446e-b689-12c217bde5d8",
        "cursor": {
          "ref": "41fffb6b-4cea-4489-a6b5-47daa7289110",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "60795ee7-82f9-4037-b145-bb9e48ec7fa9"
        },
        "item": {
          "id": "869ec976-a10b-446e-b689-12c217bde5d8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d4b65e3d-b62f-4564-820a-c026f34dafcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00d90eb-c86e-4563-ad5b-f4d39267eb42",
        "cursor": {
          "ref": "547321d6-4398-4ad4-b019-9c242db48e4b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ea8a5010-7a6d-4bc9-9470-9e377d580bce"
        },
        "item": {
          "id": "b00d90eb-c86e-4563-ad5b-f4d39267eb42",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7faf07b6-452e-4778-bc6f-850e72f40a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4900ed7a-b5b5-4c13-9352-6a82d3239925",
        "cursor": {
          "ref": "e111b097-b4bc-47df-9d4a-97c95e81fd6f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "03b71229-9256-4b9d-a398-f252455ab624"
        },
        "item": {
          "id": "4900ed7a-b5b5-4c13-9352-6a82d3239925",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bdf862b1-c649-48b5-8147-7c55f829d6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e08900-bdbc-4e61-b7ab-61b5a2222120",
        "cursor": {
          "ref": "5fefea32-e07b-4f5c-8a64-29eab00baf19",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d3634acc-bf97-450d-8d6d-cb583945949b"
        },
        "item": {
          "id": "17e08900-bdbc-4e61-b7ab-61b5a2222120",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6976a015-be17-4809-ab38-5595c44787d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd1878e-5121-458f-8fe8-046c386bc621",
        "cursor": {
          "ref": "bd81f83b-68fe-4b01-b7c7-154c4e78ea28",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5efdb4b9-8e08-404b-97c2-ff9a88b92bff"
        },
        "item": {
          "id": "0bd1878e-5121-458f-8fe8-046c386bc621",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "05d17c20-6034-48f3-b778-4ad359b7d8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebfdccf5-c789-461c-8fe5-89a9dd82a877",
        "cursor": {
          "ref": "a149620e-8bc8-4c07-8d46-a16e3f186d6e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c706826e-e68b-4d65-878e-3cfe284e821d"
        },
        "item": {
          "id": "ebfdccf5-c789-461c-8fe5-89a9dd82a877",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4033a132-3794-4c1d-b43c-01d7cd601b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a53c90-db3b-46e8-841a-a652b03e5586",
        "cursor": {
          "ref": "27520973-557b-49f1-943e-15a87363cb26",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "02597ccd-7740-4237-a2c2-479e2e40041b"
        },
        "item": {
          "id": "07a53c90-db3b-46e8-841a-a652b03e5586",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "981b5f01-90bb-4937-91e4-92aa9c205ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c364d2-11ba-44ce-88b9-f46dd3814f3f",
        "cursor": {
          "ref": "779cf2ad-45fb-48ea-b984-4d6ae7457775",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "51bc99a9-693a-4583-8cf9-2ed15b9b2a8b"
        },
        "item": {
          "id": "04c364d2-11ba-44ce-88b9-f46dd3814f3f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ba48b894-3955-4953-80ba-5461138d8785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dd9bcf-f2e7-4bee-a7f3-e1ef77db3f75",
        "cursor": {
          "ref": "ed568e5b-6907-4384-ba5f-823e0a7517bd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6525aafd-62d9-4fc5-b05e-d760d6c7bb78"
        },
        "item": {
          "id": "b6dd9bcf-f2e7-4bee-a7f3-e1ef77db3f75",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3515cd88-8200-468d-a8f5-e3091e08e2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a42378-aeaa-48c7-92f3-a54c3791339e",
        "cursor": {
          "ref": "ee21f15d-4dbe-4463-a0fb-5374b03ff327",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e94f74d2-b20d-4f2c-abf0-7d27dd74be70"
        },
        "item": {
          "id": "05a42378-aeaa-48c7-92f3-a54c3791339e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "56991bbe-9f87-4052-80bb-d0b63735ba44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee57bbc-4e0d-4790-8d42-237e8fbebac4",
        "cursor": {
          "ref": "982c2e3d-e4f0-41db-8a7e-56bc4e7341eb",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d6b28865-e8bf-4a0e-bed3-26cda29738d7"
        },
        "item": {
          "id": "bee57bbc-4e0d-4790-8d42-237e8fbebac4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "91701e56-be56-4d36-9b8e-ec4b7f71a3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95ee5f8-194f-4eaa-a9f3-edc7048f41cb",
        "cursor": {
          "ref": "a8b1ce1c-1e08-4dbb-9569-29375c6bac70",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "194b73b3-d73b-4109-9c84-1b424ded5f70"
        },
        "item": {
          "id": "e95ee5f8-194f-4eaa-a9f3-edc7048f41cb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ac2fa071-0106-41f2-911e-16852a3d0ac3",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "08959536-8f0f-45a2-9b54-70d9877ae5a1",
        "cursor": {
          "ref": "2aaf7ce8-ba75-4bf4-bcac-b029cd8f3490",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2b8d4e73-8905-4a43-9d55-0dbe7101280d"
        },
        "item": {
          "id": "08959536-8f0f-45a2-9b54-70d9877ae5a1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5d6b64db-d87b-4bbe-9bcb-3dddf34bea76",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6d73550c-693f-494f-aa97-0a0e41586b99",
        "cursor": {
          "ref": "55da8591-ab07-4dcc-a78f-7a0ff1001bd1",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "39364273-f423-4d71-b281-1ac8d8d9216e"
        },
        "item": {
          "id": "6d73550c-693f-494f-aa97-0a0e41586b99",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cad01b9a-6744-4b44-9f66-bf41bb4f7551",
          "status": "OK",
          "code": 200,
          "responseTime": 156,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "3be43367-e39d-4717-a90e-ee3a0ae51fd1",
        "cursor": {
          "ref": "a3c499d2-e55e-48f0-992c-0999cb92f01f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8ad38a3c-f14c-438e-8fc2-80c4276c9385"
        },
        "item": {
          "id": "3be43367-e39d-4717-a90e-ee3a0ae51fd1",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9bf371fa-698f-4f53-a56f-0f939d348212",
          "status": "OK",
          "code": 200,
          "responseTime": 159,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "1974add5-ab26-4282-bff8-9786708c63d1",
        "cursor": {
          "ref": "0f9fde66-3a7e-40e1-b267-d19dfdb3dda8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6c2bd3f2-00d5-4bf4-b144-ab29e0512429"
        },
        "item": {
          "id": "1974add5-ab26-4282-bff8-9786708c63d1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1300d1c3-974e-46b4-ae0b-808ec0139fdd",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "1ab350c0-73c0-4ec8-87b8-ed34c190a49b",
        "cursor": {
          "ref": "21d76c5d-9d14-4d29-bcc4-dcc3a4e85098",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a53a0b4f-09f5-4244-888d-9a2fe6000af7"
        },
        "item": {
          "id": "1ab350c0-73c0-4ec8-87b8-ed34c190a49b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f5d01411-0ecd-4599-b06a-6b3e95dd4e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f4ce2b-4404-4d96-aaf5-db57efe3ba9e",
        "cursor": {
          "ref": "5c24f3c5-f8fd-4ee7-9dab-c8b2c95bc011",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7e250c94-f815-415a-93f6-851ef835e0f3"
        },
        "item": {
          "id": "31f4ce2b-4404-4d96-aaf5-db57efe3ba9e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a78ebe5a-1eb3-49e4-a7a2-4e3a0b006a40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18539718-3b4b-484a-82bd-9c03d7dbfb89",
        "cursor": {
          "ref": "5757fb92-e3fe-43ab-a8f3-a3ec4467574b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1126a266-dcbe-4d42-9780-0d1c34bb7bdb"
        },
        "item": {
          "id": "18539718-3b4b-484a-82bd-9c03d7dbfb89",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a92e900b-b344-4936-a754-f5263d5cebf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64cf7bd1-cd88-4713-bbb1-0cd790f26799",
        "cursor": {
          "ref": "5250be62-a3f5-4369-8d1b-620ca50cd995",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "670d03b4-b8a2-461f-b1ba-9dd60cb743b6"
        },
        "item": {
          "id": "64cf7bd1-cd88-4713-bbb1-0cd790f26799",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "23ae6219-e752-4377-bd22-52d155013c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0ae238-4a2b-4571-8bbc-a52f7bd3cdcc",
        "cursor": {
          "ref": "afd908fb-33dd-46da-a9af-cb1929f7a7da",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ab9a3625-25c7-421c-978a-2019b2602f1c"
        },
        "item": {
          "id": "db0ae238-4a2b-4571-8bbc-a52f7bd3cdcc",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7ebc5959-eed8-43a5-b7a5-230eff714c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65765b1e-36f0-4345-9073-b8323a4db40f",
        "cursor": {
          "ref": "b4241a5b-7bd5-48b2-94af-89c52c838f44",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4ebe154d-9953-4232-b671-1a674cfe6d7f"
        },
        "item": {
          "id": "65765b1e-36f0-4345-9073-b8323a4db40f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a09b1b93-828d-4bfc-99f4-21e6f40f3f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3e0ffa-ace2-40e4-a53a-81dc7f92b1f1",
        "cursor": {
          "ref": "91b3b4b6-8cc0-4352-9d1c-d6fd1ed8fb38",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b31cac0a-c710-42a6-92be-f4024ca7397b"
        },
        "item": {
          "id": "5c3e0ffa-ace2-40e4-a53a-81dc7f92b1f1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6197b9a7-6ce0-4392-b456-caeec5908489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce838e77-7893-4937-8a3f-31549187e020",
        "cursor": {
          "ref": "a11b8515-a25b-4b79-907c-2b795c67b1a5",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "da712f6e-ff18-4e52-872a-ee1683a59c5c"
        },
        "item": {
          "id": "ce838e77-7893-4937-8a3f-31549187e020",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "370cd3f3-935b-41f8-983c-43b77aeef553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3018bf2b-55e9-47ed-94ca-16b56354b2a1",
        "cursor": {
          "ref": "00952ea3-9ef8-4a26-81d0-4a0c17aab981",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "29957eaf-248b-43b7-9058-1021794efc5b"
        },
        "item": {
          "id": "3018bf2b-55e9-47ed-94ca-16b56354b2a1",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e75faddb-319a-4194-a40c-daa86ab035f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bd758f-bbb9-42e3-9a10-47f216f97958",
        "cursor": {
          "ref": "3313e4b3-f6c2-4375-8b7a-444ad94214d8",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c2f2f4b6-2c27-4b03-a0ad-69ac8fc712c9"
        },
        "item": {
          "id": "17bd758f-bbb9-42e3-9a10-47f216f97958",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "55790b65-aa59-44a1-8c1c-5f5d4fc8e1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0121bd1-dd7d-4260-9e46-72ea48757cd5",
        "cursor": {
          "ref": "85fb0c0b-47c3-45b0-bdf3-2d058b48b7d1",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3dec8662-6fd6-41ee-b0a9-7efa29ad3e76"
        },
        "item": {
          "id": "c0121bd1-dd7d-4260-9e46-72ea48757cd5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d27b9a86-e343-496b-ba2a-0dec12a8c132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca83a31a-f006-4f0a-891b-533307da8c45",
        "cursor": {
          "ref": "98db311d-b3fe-439c-80d6-db5ca9e2cdc2",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "005ff60a-3229-4181-ac01-e3b70a412e10"
        },
        "item": {
          "id": "ca83a31a-f006-4f0a-891b-533307da8c45",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8683f6b9-e4cf-4322-a82c-93b2ff6bcbd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033ec956-8e8f-489c-b0d2-7d9d7dd8ba22",
        "cursor": {
          "ref": "f32cf654-62c2-464d-ba1c-54b511379e5e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3cbcf2ab-f242-4005-aa1a-705301a58933"
        },
        "item": {
          "id": "033ec956-8e8f-489c-b0d2-7d9d7dd8ba22",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a58679ff-68c7-4fe3-8100-698adb9ff5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d095908c-7e9a-41c3-bba0-d604160e77c2",
        "cursor": {
          "ref": "5ff37778-bdeb-4603-a925-ed4e7b84aeba",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "95f8dd98-7b3d-4fac-af72-2d273a8e980e"
        },
        "item": {
          "id": "d095908c-7e9a-41c3-bba0-d604160e77c2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "95db59b6-4126-4531-b346-4df976a0b781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a91c4c-6146-4f39-9495-6ca12c5964c6",
        "cursor": {
          "ref": "598e0842-c078-4a09-9029-3bf20f479a27",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fca78eef-1484-4b8f-a517-76d26aa946c8"
        },
        "item": {
          "id": "01a91c4c-6146-4f39-9495-6ca12c5964c6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0f899c43-3c08-4e1a-a47e-e31b9d76fc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af84a319-05a1-4e45-b2a9-ba2cfbd75362",
        "cursor": {
          "ref": "8c24bcd4-d55c-43b9-9617-f995bcec84b6",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7b63396a-2fe1-48a2-a643-17c67da405b4"
        },
        "item": {
          "id": "af84a319-05a1-4e45-b2a9-ba2cfbd75362",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f49bd722-e2ca-43a7-922e-1f81be3f248d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2841213a-0155-494d-9c53-268f49546c86",
        "cursor": {
          "ref": "e6e44113-2069-440e-b2b8-6bd09aa1462d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5cc1ece3-fc2a-4f16-8053-e0aee41f7e01"
        },
        "item": {
          "id": "2841213a-0155-494d-9c53-268f49546c86",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "621f50cd-02ab-4fa7-90e3-b01b652cbf85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec78428b-4322-4bc4-bd7e-87ea75ec0628",
        "cursor": {
          "ref": "4e91deb4-bace-4263-be0f-5106ba22359d",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7cca33f6-c0f8-4d36-b10a-2c5f59e4418f"
        },
        "item": {
          "id": "ec78428b-4322-4bc4-bd7e-87ea75ec0628",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0cfa47b0-671a-49a9-a04d-2c1fe1ef5fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f75094a-029a-43a4-a9f7-a93a9fd7dc7f",
        "cursor": {
          "ref": "96e3e841-64b2-4f6a-9f15-33f01bb2e5f1",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3f7a9b82-7f2d-46b7-aa31-26acadb7b14f"
        },
        "item": {
          "id": "0f75094a-029a-43a4-a9f7-a93a9fd7dc7f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9bcbe3c8-4374-4d8e-855e-e0a3bb7e126c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37079900-f0bf-4ef8-9d0c-d6b8bdb99e9f",
        "cursor": {
          "ref": "008dee03-eeef-44e6-ac14-a5f693211e4b",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d2a4a163-6a83-4570-9bec-4c0bd83f2ca8"
        },
        "item": {
          "id": "37079900-f0bf-4ef8-9d0c-d6b8bdb99e9f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cd6edc40-4563-4f4d-915b-ae3c869dfbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f761fd-4d3f-403e-9bf5-7eebf9aa2212",
        "cursor": {
          "ref": "f6dff956-e074-472e-97d2-28360be76032",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "64c4a23b-b337-46e1-be25-2dfee89c48a6"
        },
        "item": {
          "id": "41f761fd-4d3f-403e-9bf5-7eebf9aa2212",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "4e262d67-1fdf-40e8-b865-18b38df51e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e781a23-5108-4586-963c-c95794ffe13e",
        "cursor": {
          "ref": "57bfecb4-d89b-4a6a-9b95-06f1c3fa5db3",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "af674f75-17db-4d2c-806d-acf55699ac37"
        },
        "item": {
          "id": "7e781a23-5108-4586-963c-c95794ffe13e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f4fe640c-df3d-4d1f-a86d-5e1647872194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c15c5a-bd48-497a-9871-5051d3ec45b0",
        "cursor": {
          "ref": "96465230-612b-42fe-957f-c5603e883c01",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ffd3bf40-0b92-4c37-a120-68a1af9ceac7"
        },
        "item": {
          "id": "b9c15c5a-bd48-497a-9871-5051d3ec45b0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a7681cab-f3a2-4e24-8971-ab501e985657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057b7e4d-8da2-4f16-b1cd-3bbea1876ae6",
        "cursor": {
          "ref": "0872ebd8-288f-4a40-bb0f-d87568bd43d1",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "14256525-c5ad-4e5a-a9ea-f7dde6a497cb"
        },
        "item": {
          "id": "057b7e4d-8da2-4f16-b1cd-3bbea1876ae6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "692353e0-a7a9-4abf-a316-20f928c23f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "431ccd82-dd90-42d4-804b-59cab0faeab3",
        "cursor": {
          "ref": "f6620fdf-8796-4ce1-b9cc-9eebafe58a18",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c47a7328-528e-4417-b2f6-7e3080ef16b7"
        },
        "item": {
          "id": "431ccd82-dd90-42d4-804b-59cab0faeab3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "acbf422f-0dc5-480d-8689-a8b0a06ad6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ff0fb-784a-43fa-b9dc-5df5e065c3f4",
        "cursor": {
          "ref": "f658239a-aa68-4e1f-88d1-85b14d2d43d7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9c582bae-14e4-46fd-82a6-b87a54ec7e0b"
        },
        "item": {
          "id": "879ff0fb-784a-43fa-b9dc-5df5e065c3f4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2836abd7-f8bc-45c5-b84c-399d53d35a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a517a1f-997d-4376-91c5-7f75e322e2a1",
        "cursor": {
          "ref": "845a58a3-0029-4d75-8312-ba51f7a3dc3d",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "04b9a011-e011-49ea-a4bc-bce2a924307d"
        },
        "item": {
          "id": "8a517a1f-997d-4376-91c5-7f75e322e2a1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "566c7266-4dd3-4ae9-8f67-41e959dce186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df91915-d3f4-4730-b0ea-b6d04e4a5aac",
        "cursor": {
          "ref": "d9e86718-53fc-42a4-bc9c-3ce4075092c8",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "435d2ba9-6ab6-4ff5-b100-bfb75015082b"
        },
        "item": {
          "id": "8df91915-d3f4-4730-b0ea-b6d04e4a5aac",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7e6a0bfc-208b-4379-ae9b-a8ddbf96f06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb08d0c6-72a2-4fcc-9daf-88396c295e54",
        "cursor": {
          "ref": "c490adca-66d4-4c89-b895-51493f5a899c",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d2d05378-d0cc-493d-a894-64f90d4e6e71"
        },
        "item": {
          "id": "bb08d0c6-72a2-4fcc-9daf-88396c295e54",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "59193861-8333-4045-85bb-097070139784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6012083f-00d2-4846-9369-e05912881d74",
        "cursor": {
          "ref": "05813fe7-fba5-4fb6-ba98-c710431eec3a",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8400a30b-49ff-4aeb-a4ce-5acbbaf30950"
        },
        "item": {
          "id": "6012083f-00d2-4846-9369-e05912881d74",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "666ccbb5-8563-4a46-b055-43aaccdb824f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18954c10-546e-44e9-9ef7-c76ec0f2c0f3",
        "cursor": {
          "ref": "41283203-98e3-43f8-b350-f4290ce6bc41",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0e163e47-10f3-4d3b-8d5f-5ff12dc03002"
        },
        "item": {
          "id": "18954c10-546e-44e9-9ef7-c76ec0f2c0f3",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fe4f4796-1ae6-4d83-a638-85702682b6d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d83b67c-2360-44bb-aa14-798d2412d201",
        "cursor": {
          "ref": "2813f7cc-27bc-4ef0-bb73-04f12d310b5b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a1f9818a-8cfc-41b0-8490-e562b0db46cc"
        },
        "item": {
          "id": "0d83b67c-2360-44bb-aa14-798d2412d201",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0bf9f41a-4f34-41ad-afb1-d955ee1646c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1d2e40-2e0b-47a0-ae7e-7daed0f105ef",
        "cursor": {
          "ref": "e6757848-93b3-4b9f-8e5a-fe5c6bb2a349",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "27ef9605-cade-4139-90ef-16ac5d295be4"
        },
        "item": {
          "id": "ef1d2e40-2e0b-47a0-ae7e-7daed0f105ef",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cda10aa2-4917-4774-8123-c4f8e0db6cb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7d6c03-7b26-4b0d-8b25-98992b9c495b",
        "cursor": {
          "ref": "df148e1f-f302-4fa3-9f2f-46c392705f73",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fac4bcb0-9fc3-42f3-93cb-4e2db965567d"
        },
        "item": {
          "id": "eb7d6c03-7b26-4b0d-8b25-98992b9c495b",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7dbd1cca-f007-4886-a635-c62e8850d435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c01ae85-3ed9-44fc-800d-1e9c47d6c33a",
        "cursor": {
          "ref": "b3de6509-32e1-41e9-ad1c-67efd828dbe9",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "891f7610-6c38-459d-8de0-a98828251190"
        },
        "item": {
          "id": "0c01ae85-3ed9-44fc-800d-1e9c47d6c33a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "37908049-e01c-4015-b72a-6f48762914c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493b3836-9c38-4ccd-8176-255b8360e4a4",
        "cursor": {
          "ref": "90804374-3e67-4c2e-acd8-96e24e04f7a5",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d823016c-bb3f-4526-8cad-79ec9e9c27bb"
        },
        "item": {
          "id": "493b3836-9c38-4ccd-8176-255b8360e4a4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3d3f412d-6f90-4461-bd7a-4626bc90b686",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6fdd02f9-b250-4b66-a8c9-56dc37d871a7",
        "cursor": {
          "ref": "66265b12-37a5-4cf0-b6dd-8831996b2713",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7182e028-af48-4b3a-8635-e1d9787fd1eb"
        },
        "item": {
          "id": "6fdd02f9-b250-4b66-a8c9-56dc37d871a7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0a9225df-52e0-40e5-914a-bd3271e18c5b",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "513010cd-76d3-4169-884b-0633f4adf63f",
        "cursor": {
          "ref": "0cd07193-7b00-4dcb-8617-3cb98287ba45",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a0ab2e9a-cfef-4972-8f46-eeb664792692"
        },
        "item": {
          "id": "513010cd-76d3-4169-884b-0633f4adf63f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6b51ace5-28ef-47b1-a649-10efe1c46ea6",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb7a1a9-2b97-4077-8dcb-1f3c1ab6ff25",
        "cursor": {
          "ref": "f0c5cb1a-a3ee-46e1-8f1d-11f773bce86d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f1204740-8957-46d7-89cf-706e2fa9578a"
        },
        "item": {
          "id": "dfb7a1a9-2b97-4077-8dcb-1f3c1ab6ff25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3acbf6b2-7ec1-45ee-b9e0-942a4530ff02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb7a1a9-2b97-4077-8dcb-1f3c1ab6ff25",
        "cursor": {
          "ref": "f0c5cb1a-a3ee-46e1-8f1d-11f773bce86d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f1204740-8957-46d7-89cf-706e2fa9578a"
        },
        "item": {
          "id": "dfb7a1a9-2b97-4077-8dcb-1f3c1ab6ff25",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3acbf6b2-7ec1-45ee-b9e0-942a4530ff02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c7f235-7fa8-4eae-8848-8ec33ff56d30",
        "cursor": {
          "ref": "8ab5d63c-47a7-4518-9618-b3c36368eb3d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b850ac52-b08c-4d10-9a68-3f92509cc883"
        },
        "item": {
          "id": "13c7f235-7fa8-4eae-8848-8ec33ff56d30",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9a768b93-aa76-468a-ab2a-c20e4c3323fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ada2e7f-efe8-4a94-8484-9b408a6df5ec",
        "cursor": {
          "ref": "67265a5e-3f2d-4050-9ea6-6d64f4b847a9",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b065eb2e-fff9-490c-9a11-1ebcb6d6dd17"
        },
        "item": {
          "id": "4ada2e7f-efe8-4a94-8484-9b408a6df5ec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "67dbeea4-47ad-478f-9894-55a9676912c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}